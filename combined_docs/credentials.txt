### Combined Content for credentials ###


================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/actionnetwork/

Action Network credentials # You can use these credentials to authenticate the following nodes: Action Network Supported authentication methods # API key Related resources # Refer to Action Network's API documentation for more information about working with the service. Using API key # To configure this credential, you'll need an Action Network account with API key access enabled and: An API Key To get an API key: Log in to your Action Network account. From the Start Organizing menu, select Details > API & Sync . Select the list you want to generate an API key for. Generate an API key for that list. Copy the API Key and enter it in your n8n credential. Refer to the Action Network API Authentication instructions for more information. Request API access # Each user account and group on the Action Network has a separate API key to access that user or group's data. You must explicitly request API access from Action Network, which you can do in one of two ways: If you're already a paying customer, contact them to request partner access. Partner access includes API key access. If you're a developer, request a developer account . Once your account request is granted, you'll have API key access. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/activecampaign/

ActiveCampaign credentials # You can use these credentials to authenticate the following nodes: ActiveCampaign Active Campaign Trigger Supported authentication methods # API key Related resources # Refer to ActiveCampaign's API documentation for more information about working with the service. Using API key # To configure this credential, you'll need an ActiveCampaign account and: An API URL An API Key To get both and set up the credential: In ActiveCampaign, select Settings (the gear cog icon) from the left menu. Select Developer . Copy the API URL and enter it in your n8n credential. Copy the API Key and enter it in your n8n credential. Refer to How to obtain your ActiveCampaign API URL and Key for more information or for instructions on resetting your API key. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/adalo/

Adalo credentials # You can use these credentials to authenticate the following nodes: Adalo API access You need a Team or Business plan to use the Adalo APIs. Supported authentication methods # API key Related resources # Refer to Adalo's API collections documentation for more information about working with the service. Using API key # To configure this credential, you'll need an Adalo account and: An API Key An App ID To get these, create an Adalo app: From the app dropdown in the top navigation, select CREATE NEW APP . Select the App Layout type that makes sense for you and select Next . If you're new to using the product, Adalo recommend using Mobile Only . Select a template to get started with or select Blank , then select Next . Enter an App Name , like n8n integration . If applicable, select the Team for the app. Select branding colors. Select Create . The app editor opens. In the left menu, select Settings (the gear cog icon). Select App Access . In the API Key section, select Generate Key . If you don't have the correct plan level, you'll see a prompt to upgrade instead. Copy the key and enter it as the API Key in your n8n credential. The URL includes the App ID after https://app.adalo.com/apps/ . For example, if the URL for your app is https://app.adalo.com/apps/b78bdfcf-48dc-4550-a474-dd52c19fc371/app-settings , b78bdfcf-48dc-4550-a474-dd52c19fc371 is the App ID. Copy this value and enter it in your n8n credential. Refer to Creating an app for more information on creating apps in Adalo. Refer to The Adalo API for more information on generating API keys. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/affinity/

Affinity credentials # You can use these credentials to authenticate the following nodes: Affinity Affinity Trigger Prerequisites # Create an Affinity account at the Scale, Advanced, or Enterprise subscription tiers. Supported authentication methods # API key Related resources # Refer to Affinity's API documentation for more information about working with the service. Using API key # To configure this credential, you'll need: An API Key : Refer to How to obtain your Affinity API key documentation to get your API key. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/agilecrm/

Agile CRM credentials # You can use these credentials to authenticate the following nodes: Agile CRM Prerequisites # Create an Agile CRM account. Supported authentication methods # API key Related resources # Refer to Agile CRM's API documentation for more information about working with the service. Using API key # To configure this credential, you'll need: An Email Address registered with AgileCRM A REST API Key : Access your Agile CRM API key through Admin Settings > Developers & API > REST API key . An Agile CRM Subdomain (for example, n8n ) Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/airtable/

Airtable credentials # You can use these credentials to authenticate the following nodes: Airtable Airtable Trigger Prerequisites # Create an Airtable account. Supported authentication methods # Personal Access Token (PAT) OAuth2 API Key deprecation n8n used to offer an API key authentication method with Airtable. Airtable fully deprecated these keys as of February 2024. If you were using an Airtable API credential, replace it with an Airtable Personal Access Token or Airtable OAuth2 credential. n8n recommends using Personal Access Token instead. Related resources # Refer to Airtable's API documentation for more information about the service. Using personal access token # To configure this credential, you'll need: A Personal Access Token (PAT) To create your PAT: Go to the Airtable Builder Hub Personal access tokens page. Select + Create new token . Airtable opens the Create personal access token page. Enter a Name for your token, like n8n credential . Add Scopes to your token. Refer to Airtable's Scopes guide for more information. n8n recommends using these scopes: data.records:read data.records:write schema.bases:read Select the Access for your token. Choose from a single base, multiple bases (even bases from different workspaces), all of the current and future bases in a workspace you own, or all of the bases from any workspace that you own including bases/workspace added in the future. Select Create token . Airtable opens a modal with your token displayed. Copy this token and enter it in your n8n credential as the Access Token . Refer to Airtable's Find/create PATs documentation for more information. Using OAuth2 # To configure this credential, you'll need: An OAuth Redirect URL A Client ID A Client Secret To generate all this information, register a new Airtable integration: Open your Airtable Builder Hub OAuth integrations page. Select the Register new OAuth integration button. Enter a name for your OAuth integration. Copy the OAuth Redirect URL from your n8n credential. Paste that redirect URL in Airtable as the OAuth redirect URL . Select Register integration . On the following page, copy the Client ID from Airtable and paste it into the Client ID in your n8n credential. In Airtable, select Generate client secret . Copy the client secret and paste it into the Client Secret in your n8n credential. Select the following scopes in Airtable: data.records:read data.records:write schema.bases:read Select Save changes in Airtable. In your n8n credential, select the Connect my account . A Grant access modal opens. Follow the instructions and select the base you want to work on (or all bases). Select Grant access to complete the connection. Refer to the Airtable Register a new integration documentation for steps on registering a new Oauth integration. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/alienvault/

AlienVault credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create an AlienVault account. Supported authentication methods # API key Related resources # Refer to AlienVault's documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using API key # To configure this credential, you'll need: An OTX Key : Once you have an AlienVault account, the OTX Key displays in your Settings . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/anthropic/

Anthropic credentials # You can use these credentials to authenticate the following nodes: Anthropic Chat Model Supported authentication methods # API key Related resources # Refer to Anthropic's documentation for more information about the service. View n8n's Advanced AI documentation. Using API key # To configure this credential, you'll need an Anthropic Console account with access to Claude. Then: In the Anthropic Console, open Settings > API Keys . Select + Create Key . Give your key a Name , like n8n-integration . Select Copy Key to copy the key. Enter this as the API Key in your n8n credential. Refer to Anthropic's Intro to Claude and Quickstart for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/apitemplateio/

APITemplate.io credentials # You can use these credentials to authenticate the following nodes: APITemplate.io Prerequisites # Create an APITemplate.io account. Supported authentication methods # API key Related resources # Refer to APITemplate.io's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Once you've created an APITemplate.io account, go to API Integration to copy the API Key . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/asana/

Asana credentials # You can use these credentials to authenticate the following nodes: Asana Asana Trigger Supported authentication methods # Access token OAuth2 Related resources # Refer to Asana's Developer Guides for more information about working with the service. Using Access token # To configure this credential, you'll need an Asana account and: A Personal Access Token (PAT) To get your PAT: Open the Asana developer console . In the Personal access tokens section, select Create new token . Enter a Token name , like n8n integration . Check the box to agree to the Asana API terms . Select Create token . Copy the token and enter it as the Access Token in your n8n credential. Refer to the Asana Quick start guide for more information. Using OAuth2 # To configure this credential, you'll need an Asana account. Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. If you're self-hosting n8n, you'll need to register an application to set up OAuth: Open the Asana developer console . In the My apps section, select Create new app . Enter an App name for your application, like n8n integration . Select a purpose for your app. Check the box to agree to the Asana API terms . Select Create app . The page opens to the app's Basic Information . Select OAuth from the left menu. In n8n, copy the OAuth Redirect URL . In Asana, select Add redirect URL and enter the URL you copied from n8n. Copy the Client ID from Asana and enter it in your n8n credential. Copy the Client Secret from Asana and enter it in your n8n credential. Refer to the Asana OAuth register an application documentation for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/auth0management/

Auth0 Management credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create an Auth0 account. Supported authentication methods # API client secret Related resources # Refer to Auth0 Management's documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using API client secret # To configure this credential, you'll need: An Auth0 Domain A Client ID A Client Secret Refer to the Auth0 Management API Get Access Tokens documentation for instructions on obtaining the Client ID and Client Secret from the application's Settings tab. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/aws/

AWS credentials # You can use these credentials to authenticate the following nodes: AWS Bedrock Chat Model AWS Certificate Manager AWS DynamoDB AWS Elastic Load Balancing AWS Lambda AWS Rekognition AWS S3 AWS SES AWS SNS AWS SNS Trigger AWS SQS AWS Textract AWS Transcribe Embeddings AWS Bedrock Supported authentication methods # API access key Related resources # Refer to AWS's Identity and Access Management documentation for more information about the service. Using API access key # To configure this credential, you'll need an AWS account and: Your AWS Region The Access Key ID : Generated when you create an access key. The Secret Access Key : Generated when you create an access key. To create an access key and set up the credential: In your n8n credential, select your AWS Region . Log in to the IAM console . In the navigation bar on the upper right, select your user name and then select Security credentials . In the Access keys section, select Create access key . On the Access key best practices & alternatives page , choose your use case. If it doesn't prompt you to create an access key, select Other . Select Next . Set a description tag value for the access key to make it easier to identify, for example n8n integration . Select Create access key . Reveal the Access Key ID and Secret Access Key and enter them in n8n. To use a Temporary security credential , turn that option on and add a Session token . Refer to the AWS Temporary security credential documentation for more information on working with temporary security credentials. If you use Amazon Virtual Private Cloud (VPC) to host n8n, you can establish a connection between your VPC and some apps. Use Custom Endpoints to enter relevant custom endpoint(s) for this connection. This setup works with these apps: Rekognition Lambda SNS SES SQS S3 You can also generate access keys through the AWS CLI and AWS API. Refer to the AWS Managing Access Keys documentation for instructions on generating access keys using these methods. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/azureopenai/

Azure OpenAI credentials # You can use these credentials to authenticate the following nodes: Chat Azure OpenAI Embeddings Azure OpenAI Prerequisites # Create an Azure subscription. Access to Azure OpenAI within that subscription. You may need to request access if your organization doesn't yet have it. Supported authentication methods # API key Related resources # Refer to Azure OpenAI's API documentation for more information about the service. Using API key # To configure this credential, you'll need: A Resource Name : the Name you give the resource An API key : Key 1 works well. This can be accessed before deployment in Keys and Endpoint . The API Version the credentials should use. See the Azure OpenAI API preview lifecycle documentation for more information about API versioning in Azure OpenAI. To get the information above, create and deploy an Azure OpenAI Service resource . Model name for Azure OpenAI nodes Once you deploy the resource, use the Deployment name as the model name for the Azure OpenAI nodes where you're using this credential. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/bamboohr/

BambooHR credentials # You can use these credentials to authenticate the following node: BambooHR Prerequisites # Create a BambooHR account. Supported authentication methods # API key Related resources # Refer to BambooHR's API documentation for more information about the service. Using API Key # To configure this credential, you'll need: Your BambooHR Subdomain : the part between https:// and .bamboohr.com A BambooHR API Key : Refer to the Authentication section of BambooHR's Getting Started API documentation for instructions on generating an API key. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/baserow/

Baserow credentials # You can use these credentials to authenticate the following node: Baserow Prerequisites # Create a Baserow account on any hosted Baserow instance or a self-hosted instance. Supported authentication methods # Basic auth Related resources # Refer to Baserow's documentation for more information about the service. Refer to Baserow's auto-generated API documentation for more information about the API specifically. Using basic auth # To configure this credential, you'll need: Your Baserow Host A Username and Password to log in with Follow these steps: Enter the Host for the Baserow instance: For a Baserow-hosted instance: leave as https://api.baserow.io . For a self-hosted instance: set to your self-hosted instance API URL. Enter the Username for the user account n8n should use. Enter the Password for that user account. Refer to Baserow's API Authentication documentation for information on creating user accounts. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/bitbucket/

Bitbucket credentials # You can use these credentials to authenticate the following nodes: Bitbucket Trigger Prerequisites # Create a Bitbucket account. Supported authentication methods # API username and app password Related resources # Refer to Bitbucket's API documentation for more information about the service. Using API username/app password # To configure this credential, you'll need: A Username : Visible in your Bitbucket profile settings Personal settings > Account settings . An App Password : Refer to the Bitbucket instructions to Create an app password . App password permissions # Bitbucket API credentials will only work if the user account you generated the app password for has the appropriate privilege scopes for the selected app password permissions. The n8n credentials dialog will throw an error if the user account lacks the appropriate permissions for the selected scope, like Your credentials lack one or more required privilege scopes . See the Bitbucket App password permissions documentation for more information on working with these permissions. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/bitwarden/

Bitwarden credentials # You can use these credentials to authenticate the following node: Bitwarden Prerequisites # Create a Bitwarden Teams organization or Enterprise organization account. (Bitwarden only makes the Bitwarden Public API available for these organization plans.) Supported authentication methods # API key Related resources # Refer to Bitwarden's Public API documentation for more information about the service. Using API key # To configure this credential, you'll need: A Client ID : Provided when you generate an API key A Client Secret : Provided when you generate an API key The Environment : Choose Cloud-hosted if you don't self-host Bitwarden. No further configuration required. Choose Self-hosted if you host Bitwarden on your own server. Enter your Self-hosted domain in the appropriate field. The Client ID and Client Secret must be for an Organization API Key , not a Personal API Key. Refer to the Bitwarden Public API Authentication documentation for instructions on generating an Organization API Key. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/box/

Box credentials # You can use these credentials to authenticate the following nodes: Box Box Trigger Prerequisites # Create a Box account. Supported authentication methods # OAuth2 Related resources # Refer to Box's API documentation for more information about the service. Using OAuth2 # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. If you need to configure OAuth2 from scratch or need more detail on what's happening in the OAuth web flow, you'll need to create a Custom App. Refer to the Box OAuth2 Setup documentation for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/brandfetch/

Brandfetch credentials # You can use these credentials to authenticate the following node: Brandfetch Prerequisites # Create a Brandfetch developer developer account. Supported authentication methods # API key Related resources # Refer to Brandfetch's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Refer to the Brandfetch Create an Account documentation to generate an API key. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/brevo/

Brevo credentials # You can use these credentials to authenticate the following nodes: Brevo node Brevo Trigger node Prerequisites # Create a Brevo developer account. Supported authentication methods # API key Related resources # Refer to Brevo's API documentation for more information about authenticating with the service. API key # To configure this credential, you'll need: An API Key : Refer to the Brevo API Quick Start documentation for instructions on creating a new API key. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/bubble/

Bubble credentials # You can use these credentials to authenticate the following nodes: Bubble API access You need a paid plan to access the Bubble APIs. Supported authentication methods # API key Related resources # Refer to Bubble's API documentation for more information about the service. Using API key # To configure this credential, you'll need a paid Bubble account and: An API Token An App Name Your Domain , if you're using a custom domain To set it up, you'll need to create an app: Go to the Apps page in Bubble. Select Create an app . Enter a Name for your app, like n8n-integration . Select Get started . The app's details open. In the left navigation, select Settings (the gear cog icon). Select the API tab. In the Public API Endpoints section, check the box to Enable Data API . The page displays the Data API root URL , for example: https://n8n-integration.bubbleapps.io/version-test/api/1.1/obj . Copy the part of the URL after https:// and before .bubbleapps.io and enter it in n8n as the App Name . In the above example, you'd enter n8n-integration . Select Generate a new API token . Enter an API Token Label , like n8n integration . Copy the Private key and enter it as the API Token in your n8n credential. Refer to Data API | Authentication for more information on generating API tokens. In n8n, select the Environment that best matches your app: Select Development for an app that you haven't deployed, accessed at https://appname.bubbleapps.io/version-test or https://www.mydomain.com/version-test . Select Live for an app that you've deployed , accessed at https://appname.bubbleapps.io or https://www.mydomain.com . In n8n, select your Hosting : If you haven't set up a custom domain, select Bubble Hosting . If you've set up a custom domain , select Self Hosted and enter your custom Domain . Refer to Bubble's Creating and managing apps documentation for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/calendly/

Calendly credentials # You can use these credentials to authenticate the following nodes: Calendly Trigger Supported Calendly plans The Calendly Trigger node relies on Calendly webhooks. Calendly only offers access to webhooks in their paid plans. Supported authentication methods # API access token OAuth2 Related resources # Refer to Calendly's API documentation for more information about the service. Using API access token # To configure this credential, you'll need a Calendly account and: An API Key or Personal Access Token To get your access token: Go to the Calendly Integrations & apps page. Select API & Webhooks . In Your Personal Access Tokens , select Generate new token . Enter a Name for your access token, like n8n integration . Select Create token . Select Copy token and enter it in your n8n credential. Refer to Calendly's API authentication documentation for more information. Using OAuth2 # To configure this credential, you'll need a Calendly developer account and: A Client ID A Client Secret To get both, create a new OAuth app in Calendly: Log in to Calendly's developer portal and go to My apps . Select Create new app . Enter a Name of app , like n8n integration . In Kind of app , select Web . In Environment type , select the environment that corresponds to your usage, either Sandbox or Production . Calendly recommends starting with Sandbox for development and creating a second application for Production when you're ready to go live. Copy the OAuth Redirect URL from n8n and enter it as a Redirect URI in the OAuth app. Select Save & Continue . The app details display. Copy the Client ID and enter this as your n8n Client ID . Copy the Client secret and enter this as your n8n Client Secret . Select Connect my account in n8n and follow the on-screen prompts to finish authorizing the credential. Refer to Registering your application with Calendly for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/cal/

Cal.com credentials # You can use these credentials to authenticate the following nodes: Cal.com Trigger Prerequisites # Create a Cal.com account. Supported authentication methods # API key Related resources # Refer to Cal.com's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Refer to the Cal API Quick Start documentation for information on how to generate a new API key. A Host : If you're using the cloud version of Cal.com, leave the Host as https://api.cal.com . If you're self-hosting Cal.com, enter the Host for your Cal.com instance. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/carbonblack/

Carbon Black credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create a Carbon Black subscription . Create a Carbon Black developer account . Authentication methods # API key Related resources # Refer to Carbon Black's documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using API key # To configure this credential, you'll need: A URL : This URL is determined by the environment/product URL you use. You can find it by looking at the web address of your Carbon Black Cloud console. Refer to Carbon Black's URL Parts documentation for more information. An Access Token : Refer to the Carbon Black Create an API key documentation to create an API key. Add the API Secret Key as the Access Token in n8n. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/ciscomeraki/

Cisco Meraki credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create a Cisco DevNet developer account . Access to a Cisco Meraki account . Authentication methods # API key Related resources # Refer to Cisco Meraki's API documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using API key # To configure this credential, you'll need: An API Key : Refer to the Cisco Meraki Obtaining your Meraki API Key documentation for instructions on getting your API Key. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/ciscosecureendpoint/

Cisco Secure Endpoint credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create a Cisco DevNet developer account . Access to a Cisco Secure Endpoint license . Authentication methods # OAuth2 Related resources # Refer to Cisco Secure Endpoint's documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using OAuth2 # To configure this credential, you'll need: The Region for your Cisco Secure Endpoint. Options are: Asia Pacific, Japan, and China Europe North America A Client ID : Provided when you register a SecureX API Client A Client Secret : Provided when you register a SecureX API Client To get a Client ID and Client Secret, you'll need to Register a SecureX API Client. Refer to Cisco Secure Endpoint's authentication documentation for detailed instructions. Use the SecureX Client Password as the Client Secret within the n8n credential. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/ciscoumbrella/

Cisco Umbrella credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create a Cisco DevNet developer account . A Cisco Umbrella user account with Full Admin role. Authentication methods # API key Related resources # Refer to Cisco Umbrella's API documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using API key # To configure this credential, you'll need: An API Key A Secret : Provided when you generate an API key Refer to the Cisco Umbrella Manage API Keys documentation for instructions on creating an Umbrella API key. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/ciscowebex/

Webex by Cisco credentials # You can use these credentials to authenticate the following nodes: Webex by Cisco Webex by Cisco Trigger Prerequisites # Create a Webex by Cisco account (this should automatically get you developer account access ). Supported authentication methods # OAuth2 Related resources # Refer to Webex's API documentation for more information about the service. Using OAuth2 # Note for n8n Cloud users You'll only need to enter the Credentials Name and select the Connect my account button in the OAuth credential to connect your Webex by Cisco account to n8n. Should you need to configure OAuth2 from scratch, you'll need to create an integration to use this credential. Refer to the instructions in the Webex Registering your Integration documentation to begin. n8n recommends using the following Scopes for your integration: spark:rooms_read spark:messages_write spark:messages_read spark:memberships_read spark:memberships_write meeting:recordings_write meeting:recordings_read meeting:preferences_read meeting:schedules_write meeting:schedules_read Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/clickup/

ClickUp credentials # You can use these credentials to authenticate the following nodes: ClickUp ClickUp Trigger Supported authentication methods # API access token OAuth2 Related resources # Refer to ClickUp's documentation for more information about the service. Using API access token # To configure this credential, you'll need a ClickUp account and: A Personal API Access Token To get your personal API token: If you're using ClickUp 2.0, select your avatar in the lower-left corner and select Apps . If you're using ClickUp 3.0, select your avatar in the upper-right corner, select Settings , and scroll down to select Apps in the sidebar. Under API Token , select Generate . Copy your Personal API token and enter it in your n8n credential as the Access Token . Refer to ClickUp's Personal Token documentation for more information. Using OAuth2 # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. If you're self-hosting n8n, you'll need to create an OAuth app: In ClickUp, select your avatar and select Integrations . Select ClickUp API . Select Create an App . Enter a Name for your app. In n8n, copy the OAuth Redirect URL . Enter this as your ClickUp app's Redirect URL . Once you create your app, copy the client_id and secret and enter them in your n8n credential. Select Connect my account and follow the on-screen prompts to finish connecting the credential. Refer to the ClickUp Oauth flow documentation for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/clockify/

Clockify credentials # You can use these credentials to authenticate the following nodes: Clockify Clockify Trigger Prerequisites # Create a Clockify account. Supported authentication methods # API key Related resources # Refer to Clockify's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Access your API key from your Clockify Profile Settings . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/cloudflare/

Cloudflare credentials # You can use these credentials to authenticate the following nodes: Cloudflare node Prerequisites # Create a Cloudflare account . Add a domain . Supported authentication methods # API key Related resources # Refer to Cloudflare's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Follow the Cloudflare documentation to create an API token . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/cohere/

Cohere credentials # You can use these credentials to authenticate the following nodes: Cohere Embeddings Cohere Prerequisites # Create a Cohere account . You'll need an account with the following access: For the Trial API, you need User or Owner permissions. For Production API, you need Owner permissions. Refer to Cohere Teams and Roles documentation for more information. Supported authentication methods # API key Related resources # Refer to Cohere's documentation for more information about the service. View n8n's Advanced AI documentation. Using API key # To configure this credential, you'll need: An API Key : To generate a Cohere API key, go to the API Keys section of your Cohere dashboard . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/copper/

Copper credentials # You can use these credentials to authenticate the following nodes: Copper Copper Trigger Prerequisites # Create a Copper account at the Professional or Business plan level. Supported authentication methods # API key Related resources # Refer to Copper's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Refer to the Copper Generating an API key documentation for information on generating an API key. An Email address: Use the API key creator's email address Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/cortex/

Cortex credentials # You can use these credentials to authenticate the following nodes: Cortex Prerequisites # Install Cortex on your server. Supported authentication methods # API key Related resources # Refer to Cortex's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Refer to the Cortex API Authentication documentation for detailed instructions on generating API keys. The URL/Server Address for your Cortex Instance (defaults to http://<your_server_address>:9001/ ) Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/cratedb/

CrateDB credentials # You can use these credentials to authenticate the following nodes: CrateDB Prerequisites # An available instance of CrateDB. Supported authentication methods # account connection Related resources # Refer to CrateDB's documentation for more information about the service. Using account connection # To configure this credential, you'll need: Your Host name Your Database name A User name A user Password To set the SSL parameter. Refer to the CrateDB Secured Communications (SSL/TLS) documentation for more information. The options n8n supports are: Allow Disable Require A Port number Refer to the Connect to a CrateDB cluster documentation for detailed instructions on these fields and their default values. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/

Credentials library # This section contains step-by-step information about authenticating the different nodes in n8n. To learn more about creating, managing, and sharing credentials, refer to Manage credentials . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/crowddev/

crowd.dev credentials # You can use these credentials to authenticate the following nodes: crowd.dev crowd.dev Trigger Prerequisites # Create a working instance of crowd.dev . Supported authentication methods # API key Related resources # Refer to crowd.dev's documentation for more information about the service, and their API documentation for working with the API. Using API key # To configure this credential, you'll need: A URL : If your crowd.dev instance is hosted on crowd.dev, keep the default of https://app.crowd.dev . If your crowd.dev instance is self-hosted , use the URL you use to access your crowd.dev instance. Your crowd.dev Tenant ID : Displayed in the Settings section of the crowd.dev app An API Token : Displayed in the Settings section of the crowd.dev app Refer to the crowd.dev API documentation for more detailed instructions. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/crowdstrike/

CrowdStrike credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create a CrowdStrike account. Authentication methods # OAuth2 Related resources # Refer to CrowdStrike's documentation for more information about the service. Their documentation is behind a log in, so you must log in to your account on their website to access the API documentation. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using OAuth2 # To configure this credential, you'll need: The URL of your CrowdStrike instance A Client ID : Generated by creating a new API Client in Crowdstrike in Support > API Clients and Keys . A Client Secret : Generated by creating a new API Client in Crowdstrike in Support > API Clients and Keys . A broad outline of the appropriate steps is available publicly at the CrowdStrike blog: Getting Access to the CrowdStrike API . CrowdStrike's full documentation is behind a log in, so you must log in to your account to access the full API documentation. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/customerio/

Customer.io credentials # You can use these credentials to authenticate the following nodes with Customer.io. Customer.io Customer.io Trigger Prerequisites # Create a Customer.io account. Supported authentication methods # API Key Related resources # Refer to Customer.io's summary API documentation for more information about the service. For detailed API reference documentation for each API, refer to the Track API documentation and the App API documentation . Using API key # To configure this credential, you'll need: A Tracking API Key : For use with the Track API at https://track.customer.io/api/v1/ . See the FAQs below for more details. Your Region : Customer.io uses different API subdomains depending on the region you select. Options include: Global region : Keeps the default URLs for both APIs; for use in all non-EU countries/regions. EU region : Adjusts the Track API subdomain to track-eu and the App API subdomain to api-eu ; only use this if you are in the EU. A Tracking Site ID : Required with your Tracking API Key An App API Key : For use with the App API at https://api.customer.io/v1/api/ . See the FAQs below for more details. Refer to the Customer.io Finding and managing your API credentials documentation for instructions on creating both Tracking API and App API keys. Why you need a Tracking API Key and an App API Key # Customer.io has two different API endpoints and generates and stores the keys for each slightly differently: The Track API at https://track.customer.io/api/v1/ The App API at https://api.customer.io/v1/api/ The Track API requires a Tracking Site ID; the App API doesn't. Based on the operation you want to perform, n8n uses the correct API key and its corresponding endpoint. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/deepl/

DeepL credentials # You can use these credentials to authenticate the following nodes: DeepL Prerequisites # Create a DeepL developer account. n8n works with both Free and Pro API Plans. Supported authentication methods # API key Related resources # Refer to DeepL's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Refer to DeepL's Authentication documentation for more information on getting your API key. To identify which API Plan you're on. DeepL has different API endpoints for each plan, so be sure you select the correct one: Pro Plan Free Plan Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/dhl/

DHL credentials # You can use these credentials to authenticate the following nodes: DHL Supported authentication methods # API key Related resources # Refer to DHL's Developer documentation for more information about the service. Using API key # To configure this credential, you'll need a DHL Developer account and: An API Key To get an API key, create an app: In the DHL Developer portal, select the user icon to open your User Apps . Select + Create App . Enter an App name , like n8n integration . Enter a Machine name , like n8n_integration . In SELECT APIs , select Shipment Tracking - Unified . The API is added to the Add API to app section. In the Add API to app section, select the + next to the Shipment Tracking - Unified API. Select Create App . The Apps page opens, displaying the app you just created. Select the app you just created to view its details. Select Show key next to API Key . Copy the API Key and enter it in your n8n credential. Refer to How to create an app? for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/discord/

Discord credentials # You can use these credentials to authenticate the following nodes: Discord Prerequisites # Create a Discord account. For Bot and OAuth2 credentials: Set up your local developer environment . Create an application and a bot user . For webhook credentials, create a webhook . Supported authentication methods # Bot OAuth2 Webhook Not sure which method to use? Refer to Choose an authentication method for more guidance. Related resources # Refer to Discord's Developer documentation for more information about the service. Using bot # Use this method if you want to add the bot to your Discord server using a bot token rather than OAuth2. To configure this credential, you'll need: A Bot Token : Generated once you create an application with a bot. To create an application with a bot and generate the Bot Token : If you don't have one already, create an app in the developer portal . Enter a Name for your app. Select Create . Select Bot from the left menu. Under Token , select Reset Token to generate a new bot token. Copy the token and add it to your n8n credential. In Bot > Privileged Gateway Intents , add any privileged intents you want your bot to have. Refer to Configuring your bot for more information on privileged intents. n8n recommends activating SERVER MEMBERS INTENT: Required for your bot to receive events listed under GUILD_MEMBERS . In Installation > Installation Contexts , select the installation contexts you want your bot to use: Select Guild Install for server-installed apps. (Most common for n8n users.) Select User Install for user-installed apps. (Less common for n8n users, but may be useful for testing.) Refer to Discord's Choosing installation contexts documentation for more information about these installation contexts. In Installation > Install Link , select Discord Provided Link if it's not already selected. Still on the Installation page, in the Default Install Settings section, select applications.commands and bot scopes. Refer to Discord's Scopes documentation for more information about these and other scopes. Add permissions on the Bot > Bot Permissions page. Refer to Discord's Permissions documentation for more information. n8n recommends selecting these permissions for the Discord node: Manage Roles Manage Channels Read Messages/View Channels Send Messages Create Public Threads Create Private Threads Send Messages in Threads Send TTS Messages Manage Messages Manage Threads Embed Links Attach Files Read Message History Add Reactions Add the app to your server or test server: Go to Installation > Install Link and copy the link listed there. Paste the link in your browser and hit Enter. Select Add to server in the installation prompt. Once your app's added to your server, you'll see it in the member list. These steps outline the basic functionality needed to set up your n8n credential. Refer to the Discord Creating an App guide for more information on creating an app, especially: Fetching your credentials for getting your app's credentials into your local developer environment. Handling interactivity for information on setting up public endpoints for interactive /slash commands. Using OAuth2 # Use this method if you want to add the bot to Discord servers using the OAuth2 flow, which simplifies the process for those installing your app. To configure this credential, you'll need: A Client ID A Client Secret Choose whether to send Authentication in the Header or Body A Bot Token For details on creating an application with a bot and generating the token, follow the same steps as in Using bot above. Then: Copy the Bot Token you generate and add it into the n8n credential. Open the OAuth2 page in your Discord application to access your Client ID and generate a Client Secret . Add these to your n8n credential. From n8n, copy the OAuth Redirect URL and add it into the Discord application in OAuth2 > Redirects . Be sure you save these changes. Using webhook # To configure this credential, you'll need: A Webhook URL : Generated once you create a webhook. To get a Webhook URL, you create a webhook and copy the URL that gets generated: Open your Discord Server Settings and open the Integrations tab. Select Create Webhook to create a new webhook. Give your webhook a Name that makes sense. Select the avatar next to the Name to edit or upload a new avatar. In the CHANNEL dropdown, select the channel the webhook should post to. Select Copy Webhook URL to copy the Webhook URL. Enter this URL in your n8n credential. Refer to the Discord Making a Webhook documentation for more information. Choose an authentication method # The simplest installation is a webhook . You create and add webhooks to a single channel on a Discord server. Webhooks can post messages to a channel. They don't require a bot user or authentication. But they can't listen or respond to user requests or commands. If you need a straightforward way to send messages to a channel without the need for interaction or feedback, use a webhook. A bot is an interactive step up from a webhook. You add bots to the Discord server (referred to as a guild in the Discord API documentation) or to user accounts. Bots added to the server can interact with users on all the server's channels. They can manage channels, send and retrieve messages, retrieve the list of all users, and change their roles. If you need to build an interactive, complex, or multi-step workflow, use a bot. OAuth2 is basically a bot that uses an OAuth2 flow rather than just the bot token. As with bots, you add these to the Discord server or to user accounts. These credentials offer the same functionalities as bots, but they can simplify the installation of the bot on your server. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/discourse/

Discourse credentials # You can use these credentials to authenticate the following nodes: Discourse Prerequisites # Host an instance of Discourse Create an account on your hosted instance and make sure that you are an admin Supported authentication methods # API key Related resources # Refer to Discourse's API documentation for more information about the service. Using API key # To configure this credential, you'll need: The URL of your Discourse instance, for example https://community.n8n.io An API Key : Create an API key through the Discourse admin panel. Refer to the Discourse create and configure an API key documentation for instructions on creating an API key and specifying a username. A Username : Use your own name, system , or another user. Refer to the Authentication section of the Discourse API documentation for examples. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/dropbox/

Dropbox credentials # You can use these credentials to authenticate the following nodes: Dropbox Supported authentication methods # API access token: Dropbox recommends this method for testing with your user account and granting a limited number of users access. OAuth2: Dropbox recommends this method for production or for testing with more than 50 users. App reuse You can transition an app from the API access token to OAuth2 by creating a new credential in n8n for OAuth2 using the same app. Related resources # Refer to Dropbox's Developer documentation for more information about the service. Using access token # To configure this credential, you'll need a Dropbox developer account and: An Access Token : Generated once you create a Dropbox app. An App Access Type To set up the credential, create a Dropbox app: Open the App Console within the Dropbox developer portal. Select Create app . In Choose an API , select Scoped access . In Choose the type of access you need , choose whichever option best fits your use of the Dropbox node: App Folder grants access to a single folder created specifically for your app. Full Dropbox grants access to all files and folders in your user's Dropbox. Refer to the DBX Platform developer guide for more information. In Name your app , enter a name for your app, like n8n integration . Check the box to agree to the Dropbox API Terms and Conditions . Select Create app . The app's Settings open. In the OAuth 2 section, in Generated access token , select Generate . Copy the access token and enter it as the Access Token in your n8n credential. In n8n, select the same App Access Type you selected for your app. Refer to the Dropbox App Console Settings documentation for more information. User limits On the Settings tab, you can add other users to your app, even with the access token method. Once your app links 50 Dropbox users, you will have two weeks to apply for and receive production status approval before Dropbox freezes your app from linking more users. Using OAuth2 # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. Cloud users need to select the App Access Type : App Folder grants access to a single folder created specifically for your app. Full Dropbox grants access to all files and folders in your user's Dropbox. Refer to the DBX Platform developer guide for more information. If you're self-hosting n8n, you'll need to configure OAuth2 manually: Open the App Console within the Dropbox developer portal. Select Create app . In Choose an API , select Scoped access . In Choose the type of access you need , choose whichever option best fits your use of the Dropbox node: App Folder grants access to a single folder created specifically for your app. Full Dropbox grants access to all files and folders in your user's Dropbox. Refer to the DBX Platform developer guide for more information. In Name your app , enter a name for your app, like n8n integration . Check the box to agree to the Dropbox API Terms and Conditions . Select Create app . The app's Settings open. Copy the App key and enter it as the Client ID in your n8n credential. Copy the Secret and enter it as the Client Secret in your n8n credential. In n8n, copy the OAuth Redirect URL and enter it in the Dropbox Redirect URIs . In n8n, select the same App Access Type you selected for your app. Refer to the instructions in the Dropbox Implementing OAuth documentation for more information. For internal tools and limited usage, you can keep your app private. But if you'd like your app to be used by more than 50 users or you want to distribute it, you'll need to complete Dropbox's production approval process. Refer to Production Approval in the DBX Platform developer guide for more information. User limits On the Settings tab, you can add other users to your app. Once your app links 50 Dropbox users, you will have two weeks to apply for and receive production status approval before Dropbox freezes your app from linking more users. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/dropcontact/

Dropcontact credentials # You can use these credentials to authenticate the following nodes: Dropcontact Prerequisites # Create a developer account in Dropcontact . Supported authentication methods # API key Related resources # Refer to Dropcontact's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : To view your API key in Dropcontact, go to API . Refer to the Dropcontact API key documentation for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/elasticsearch/

Elasticsearch credentials # You can use these credentials to authenticate the following nodes: Elasticsearch Supported authentication methods # Basic auth Related resources # Refer to Elasticsearch's documentation for more information about the service. Using basic auth # To configure this credential, you'll need an Elasticsearch account with a deployment and: A Username A Password Your Elasticsearch application's Base URL (also known as the Elasticsearch application endpoint) To set up the credential: Enter your Elasticsearch Username . Enter your Elasticsearch Password . In Elasticsearch, go to Deployments . Select your deployment. Select Manage this deployment . In the Applications section, copy the endpoint of the Elasticsearch application. Enter this in n8n as the Base URL . By default, n8n connects only if SSL certificate validation succeeds. If you'd like to connect even if SSL certificate validation fails, turn on Ignore SSL Issues . Custom endpoint aliases If you add a custom endpoint alias to a deployment, update your n8n credential Base URL with the new endpoint. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/elasticsecurity/

Elastic Security credentials # You can use these credentials to authenticate the following nodes: Elastic Security Prerequisites # Create an Elastic Security account. Deploy an application. Supported authentication methods # Basic auth API Key Related resources # Refer to Elastic Security's documentation for more information about the service. Using basic auth # To configure this credential, you'll need: A Username : For the user account you log into Elasticsearch with. A Password : For the user account you log into Elasticsearch with. Your Elasticsearch application's Base URL (also known as the Elasticsearch application endpoint): In Elasticsearch, select the option to Manage this deployment . In the Applications section, copy the endpoint of the Elasticsearch application. Add this in n8n as the Base URL . Custom endpoint aliases If you add a custom endpoint alias to a deployment, update your n8n credential Base URL with the new endpoint. Using API key # To configure this credential, you'll need: An API Key : For the user account you log into Elasticsearch with. Refer to Elasticsearch's Create API key documentation for more information. Your Elasticsearch application's Base URL (also known as the Elasticsearch application endpoint): In Elasticsearch, select the option to Manage this deployment . In the Applications section, copy the endpoint of the Elasticsearch application. Add this in n8n as the Base URL . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/emelia/

Emelia credentials # You can use these credentials to authenticate the following nodes: Emelia Emelia Trigger Prerequisites # Create an Emelia account. Supported authentication methods # API key Related resources # Refer to Emelia's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : To generate an API Key in Emelia, access your API Keys by selecting the avatar in the top right (your Settings ). Refer to the Authentication section of Emelia's API documentation for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/erpnext/

ERPNext credentials # You can use these credentials to authenticate the following nodes: ERPNext Prerequisites # Create an ERPNext account. Supported authentication methods # API key Related resources # Refer to ERPNext's documentation for more information about the service. Refer to ERPNext's developer documentation for more information about working with the framework. Using API key # To configure this credential, you'll need: An API Key : Generate this from your own ERPNext user account in Settings > My Settings > API Access . An API Secret : Generated with the API key. Your ERPNext Environment : For Cloud-hosted : Your ERPNext Subdomain : Refer to the FAQs Your Domain : Choose between erpnext.com and frappe.cloud . For Self-hosted : The fully qualified Domain where you host ERPNext Choose whether to Ignore SSL Issues : When selected, n8n will connect even if SSL certificate validation is unavailable. If you are an ERPNext System Manager, you can also generate API keys and secrets for other users. Refer to the ERPNext Adding Users documentation for more information. How to find the subdomain of an ERPNext cloud-hosted account # You can find your ERPNext subdomain by reviewing the address bar of your browser. The string between https:// and either .erpnext.com or frappe.cloud is your subdomain. For example, if the URL in the address bar is https://n8n.erpnext.com , the subdomain is n8n . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/f5bigip/

F5 Big-IP credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create an F5 Big-IP account. Authentication methods # Account login Related resources # Refer to F5 Big-IP's API documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using account login # To configure this credential, you'll need: A Username : Use the username you use to log in to F5 Big-IP. A Password : Use the user password you use to log in to F5 Big-IP. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/facebookapp/

Facebook App credentials # You can use these credentials to authenticate the following nodes: Facebook Trigger Facebook Graph API credentials If you want to create credentials for the Facebook Graph API node, follow the instructions in the Facebook Graph API credentials documentation. Supported authentication methods # App access token Related resources # Refer to Meta's Graph API documentation for more information about the service. Using app access token # To configure this credential, you'll need a Meta for Developers account and: An app Access Token An optional App Secret : Used to verify the integrity and origin of the payload. There are five steps in setting up your credential: Create a Meta app with the Webhooks product. Generate an App Access Token for that app. Configure the Facebook trigger . Optional: Add an app secret . App Review : Only required if your app's users don't have roles on the app itself. If you're creating the app for your own internal purposes, this isn't necessary. Refer to the detailed instructions below for each step. Create a Meta app # To create a Meta app: Go to the Meta Developer App Dashboard and select Create App . If you have a business portfolio and you're ready to connect the app to it, select the business portfolio. If you don't have a business portfolio or you're not ready to connect the app to the portfolio, select I don’t want to connect a business portfolio yet and select Next . The Use cases page opens. Select Other , then select Next . Select Business and Next . Complete the essential information: Add an App name . Add an App contact email . Here again you can connect to a business portfolio or skip it. Select Create app . The Add products to your app page opens. Select App settings > Basic from the left menu. Enter a Privacy Policy URL . (Required to take the app "Live.") Select Save changes . At the top of the page, toggle the App Mode from Development to Live . In the left menu, select Add Product . The Add products to your app page appears. Select Webhooks . The Webhooks product opens. Refer to Meta's Create an app documentation for more information on creating an app, required fields like the Privacy Policy URL, and adding products. For more information on the app modes and switching to Live mode, refer to App Modes and Publish | App Types . Generate an App Access Token # Next, create an app access token to be used by your n8n credential and the Webhooks product: In a separate tab or window, open the Graph API explorer . Select the Meta App you just created in the Access Token section. In User or Page , select Get App Token . Select Generate Access Token . The page prompts you to log in and grant access. Follow the on-screen prompts. App unavailable You may receive a warning that the app isn't available. Once you take an app live, there may be a few minutes' delay before you can generate an access token. Copy the token and enter it in your n8n credential as the Access Token . Save this token somewhere else, too, since you'll need it for the Webhooks configuration. Save your n8n credential. Refer to the Meta instructions for Your First Request for more information on generating the token. Configure the Facebook Trigger # Now that you have a token, you can configure the Facebook Trigger node: In your Meta app, copy the App ID from the top navigation bar. In n8n, open your Facebook Trigger node. Paste the App ID into the APP ID field. Select Test step to shift the trigger into listening mode. Return to the tab or window where your Meta app's Webhooks product configuration is open. Subscribe to the objects you want to receive Facebook Trigger notifications about. For each subscription: Copy the Webhook URL from n8n and enter it as the Callback URL in your Meta App. Enter the Access Token you copied above as the Verify token . Select Verify and save . (This step fails if you don't have your n8n trigger listening.) Some webhook subscriptions, like User , prompt you to subscribe to individual events. Subscribe to the events you're interested in. You can send some Test events from Meta to confirm things are working. If you send a test event, verify its receipt in n8n. Refer to the Facebook Trigger node documentation for more information. Optional: Add an App Secret # For added security, Meta recommends adding an App Secret . This signs all API calls with the appsecret_proof parameter. The app secret proof is a sha256 hash of your access token, using your app secret as the key. To generate an App Secret: In Meta while viewing your app, select App settings > Basic from the left menu. Select Show next to the App secret field. The page prompts you to re-enter your Facebook account credentials. Once you do so, Meta shows the App Secret. Highlight it to select it, copy it, and paste this into your n8n credential as the App Secret . Save your n8n credential. Refer to the App Secret documentation for more information. App review # App Review requires Business Verification. Your app must go through App Review if it will be used by someone who: Doesn't have a role on the app itself. Doesn't have a role in the Business that has claimed the app. If your only app users are users who have a role on the app itself, App Review isn't required. As part of the App Review process, you may need to request advanced access for your webhook subscriptions. Refer to Meta's App Review and Advanced Access documentation for more information. Common issues # Unverified apps limit # Facebook only lets you have a developer or administrator role on a maximum of 15 apps that aren't already linked to a Meta Verified Business Account. Refer to Limitations | Create an app if you're over that limit. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/facebookgraph/

Facebook Graph API credentials # You can use these credentials to authenticate the following nodes: Facebook Graph API Facebook Trigger credentials If you want to create credentials for the Facebook Trigger node, follow the instructions mentioned in the Facebook App credentials documentation. Supported authentication methods # App access token Related resources # Refer to Meta's Graph API documentation for more information about the service. Using app access token # To configure this credential, you'll need a Meta for Developers account and: An app Access Token There are two steps in setting up your credential: Create a Meta app with the products you need to access. Generate an App Access Token for that app. Refer to the detailed instructions below for each step. Create a Meta app # To create a Meta app: Go to the Meta Developer App Dashboard and select Create App . If you have a business portfolio and you're ready to connect the app to it, select the business portfolio. If you don't have a business portfolio or you're not ready to connect the app to the portfolio, select I don’t want to connect a business portfolio yet and select Next . The Use cases page opens. Select the Use case that aligns with how you wish to use the Facebook Graph API. For example, for products in Meta's Business suite (like Messenger, Instagram, WhatsApp, Marketing API, App Events, Audience Network, Commerce API, Fundraisers, Jobs, Threat Exchange, and Webhooks), select Other , then select Next . Select Business and Next . Complete the essential information: Add an App name . Add an App contact email . Here again you can connect to a business portfolio or skip it. Select Create app . The Add products to your app page opens. Select App settings > Basic from the left menu. Enter a Privacy Policy URL . (Required to take the app "Live.") Select Save changes . At the top of the page, toggle the App Mode from Development to Live . In the left menu, select Add Product . The Add products to your app page appears. Select the products that make sense for your app and configure them. Refer to Meta's Create an app documentation for more information on creating an app, required fields like the Privacy Policy URL, and adding products. For more information on the app modes and switching to Live mode, refer to App Modes and Publish | App Types . Generate an App Access Token # Next, create an app access token to use with your n8n credential and the products you selected: In a separate tab or window, open the Graph API explorer . Select the Meta App you just created in the Access Token section. In User or Page , select Get App Token . Select Generate Access Token . The page prompts you to log in and grant access. Follow the on-screen prompts. App unavailable You may receive a warning that the app isn't available. Once you take an app live, there may be a few minutes' delay before you can generate an access token. Copy the token and enter it in your n8n credential as the Access Token . Refer to the Meta instructions for Your First Request for more information on generating the token. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/facebookleadads/

Facebook Lead Ads credentials # You can use these credentials to authenticate the following nodes: Facebook Lead Ads trigger Supported authentication methods # OAuth2 Related resources # Refer to Facebook Lead Ads' documentation for more information about the service. View example workflows and related content on n8n's website. Using OAuth2 # To configure this credential, you'll need a Meta for Developers account and: A Client ID A Client Secret To get both, create a Meta app with either the Facebook Login product or the Facebook Login for Business product. To create your app and set up the credential with Facebook Login for Business : Go to the Meta Developer App Dashboard and select Create App . If you have a business portfolio and you're ready to connect the app to it, select the business portfolio. If you don't have a business portfolio or you're not ready to connect the app to the portfolio, select I don’t want to connect a business portfolio yet and select Next . The Use cases page opens. Select Other , then select Next . Select Business and Next . Complete the essential information: Add an App name . Add an App contact email . Here again you can connect to a business portfolio or skip it. Select Create app . The Add products to your app page opens. Select Facebook Login for Business . The Settings page for this product opens. Copy the OAuth Redirect URL from your n8n credential. In your Meta app settings in Client OAuth settings , paste that URL as the Valid OAuth Redirect URIs . Select App settings > Basic from the left menu. Copy the App ID and enter it as the Client ID within your n8n credential. Copy the App Secret and enter it as the Client Secret within your n8n credential. Your credential should successfully connect now, but you'll need to go through the steps to take your Meta app live before you can use it with the Facebook Lead Ads trigger . Here's a summary of what you'll need to do: In your Meta app, select App settings > Basic from the left menu. Enter a Privacy Policy URL . (Required to take the app "Live.") Select Save changes . At the top of the page, toggle the App Mode from Development to Live . Facebook Login for Business requires Advanced Access for public_profile . To add it, go to App Review > Permissions and Features . Search for public_profile and select Request advanced access . Complete the steps for business verification . Use the Lead Ads Testing Tool to trigger some demo form submissions and test your workflow. Refer to Meta's Create an app documentation for more information on creating an app, required fields like the Privacy Policy URL, and adding products. For more information on the app modes and switching to Live mode, refer to App Modes and Publish | App Types . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/figma/

Figma credentials # You can use these credentials to authenticate the following nodes: Figma Trigger (Beta) Prerequisites # Create a Figma account. You need an admin or owner level account. Supported authentication methods # API key Related resources # Refer to Figma's API documentation for more information about the service. Using API key # To configure this credential, you'll need: A Personal Access Token (PAT): Refer to the Figma API Access Tokens documentation for instructions on generating a Personal Access Token . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/filemaker/

FileMaker credentials # You can use these credentials to authenticate the following nodes: FileMaker Prerequisites # Create a user account on a FileMaker Server with the fmrest extended privilege to Access the FileMaker Data API . Ensure the FileMaker Server can use the FileMaker Data API : Prepare your database for FileMaker Data API access using FileMaker Pro. You can create a database or prepare an existing database. Refer to Prepare databases for FileMaker Data API access for more information. Write code that calls FileMaker Data API methods to find, create, edit, duplicate, and delete records in a hosted database. Refer to Write FileMaker Data API calls for more information. Host your solution with FileMaker Data API access enabled. Refer to Host a FileMaker Data API solution for more information. Test that FileMaker Data API access is working. Refer to Test the FileMaker Data API solution for more information. Monitor your hosted solution using Admin Console. Refer to Monitor FileMaker Data API solutions for more information. Supported authentication methods # Database connection Related resources # Refer to FileMaker's Data API Guide for more information about the service. Using database connection # To configure this credential: Enter the Host name or IP address of your FileMaker Server. Enter the Database name. This should match the database name as it appears in the Databases list within FileMaker. Enter the user account Login for the account with the fmrest extended privilege. Refer to the previous Prerequisites section for more information. Enter the Password for that user account. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/formiotrigger/

Form.io Trigger credentials # You can use these credentials to authenticate the following nodes: Form.io Trigger Supported authentication methods # Basic auth Related resources # Refer to Form.io's API documentation for more information about the service. Using basic auth # To configure this credential, you'll need a Form.io account and: Your Environment Your login Email address Your Password To set up the credential: Select your Environment : Choose Cloud hosted if you aren't hosting Form.io yourself. Choose Self-hosted if you're hosting Form.io yourself. Then add: Your Self-Hosted Domain . Use only the domain itself. For example, if you view a form at https://yourserver.com/yourproject/manage/view , the Self-Hosted Domain is https://yourserver.com . Enter the Email address you use to log in to Form.io. Enter the Password you use to log in to Form.io. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/formstacktrigger/

Formstack Trigger credentials # You can use these credentials to authenticate the following nodes: Formstack Trigger Prerequisites # Create a Formstack account. Supported authentication methods # API access token OAuth2 Related resources # Refer to Formstack's API documentation for more information about the service. Using API access token # To configure this credential, you'll need: An API Access Token : To generate an Access Token, create a new application in Formstack using the following details: Redirect URI : For cloud n8n instances, enter https://oauth.n8n.cloud/oauth2/callback . For self-hosted n8n instances, enter the OAuth callback URL for your n8n instance in the format https://<n8n_url>/rest/oauth2-credential/callback . For example https://localhost:5678/rest/oauth2-credential/callback . Platform : Select Website . Once you've created the application, copy the access token either from the applications list or by selecting the application to view its details. Refer to Formstack's API Authorization documentation for more detailed instructions. Access token permissions Formstack ties access tokens to a Formstack user. Access tokens follow Formstack (in-app) user permissions. Using OAuth2 # To configure this credential, you'll need: A Client ID A Client Secret To generate both of these, create a new application in Formstack using the following details: Redirect URI : Copy the OAuth Redirect URL from the n8n credential to enter here. For self-hosted n8n instances, enter the OAuth callback URL for your n8n instance in the format https://<n8n_url>/rest/oauth2-credential/callback . For example https://localhost:5678/rest/oauth2-credential/callback . Platform : Select Website . Once you've created the application, select it from the applications list to view the Application Details . Copy the Client ID and Client Secret and add them to n8n. Once you've added both, select the Connect my account button to begin the OAuth2 flow and authorization process. Refer to Formstack's API Authorization documentation for more detailed instructions. Access token permissions Formstack ties access tokens to a Formstack user. Access tokens follow Formstack (in-app) user permissions. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/fortigate/

Fortinet FortiGate credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create a Fortinet FortiGate account. Supported authentication methods # API access token Related resources # Refer to Fortinet FortiGate's API documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using API access token # To configure this credential, you'll need: An API Access Token : To generate an access token, create a REST API administrator . Refer to the Fortinet FortiGate Using APIs documentation for more information about token-based authentication in FortiGate. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/freshservice/

Freshservice credentials # You can use these credentials to authenticate the following nodes: Freshservice Prerequisites # Create a Freshservice account. Supported authentication methods # API key Related resources # Refer to Freshservice's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Refer to the Freshservice API authenticaton documentation for detailed instructions on getting your API key. Your Freshservice Domain : Use the subdomain of your Freshservice account. This is part of the URL, for example https://<subdomain>.freshservice.com . So if you access Freshservice through https://n8n.freshservice.com , enter n8n as your Domain . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/freshworkscrm/

Freshworks CRM credentials # You can use these credentials to authenticate the following nodes: Freshworks CRM Prerequisites # Create a Freshworks CRM account. Supported authentication methods # API key Related resources # Refer to Freshworks CRM's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Refer to the Freshworks CRM API authenticaton documentation for detailed instructions on getting your API key. Your Freshworks CRM Domain : Use the subdomain of your Freshworks CRM account. This is part of the URL, for example https://<subdomain>.myfreshworks.com . So if you access Freshworks CRM through https://n8n.myfreshworks.com , enter n8n as your Domain . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/ftp/

FTP credentials # You can use these credentials to authenticate the following nodes: FTP Prerequisites # Create an account on a File Transfer Protocol (FTP) server like JSCAPE , OpenSSH , or FileZilla Server . Supported authentication methods # FTP account : Use this method if your FTP server doesn't support SSH tunneling or encrypted connections. SFTP account : Use this method if your FTP server supports SSH tunneling and encrypted connections. Related resources # File Transfer Protocol (FTP) and Secure Shell File Transfer Protocol (SFTP) are protocols for transferring files directly between an FTP/SFTP client and server. Using FTP account # Use this method if your FTP server doesn't support SSH tunneling or encrypted connections. To configure this credential, you'll need to: Enter the name or IP address of your FTP server's Host . Enter the Port number the connection should use. Enter the Username the credential should connect as. Enter the user's Password . Review your FTP server provider's documentation for instructions on getting the information you need. Using SFTP account # Use this method if your FTP server supports SSH tunneling and encrypted connections. To configure this credential, you'll need to: Enter the name or IP address of your FTP server's Host . Enter the Port number the connection should use. Enter the Username the credential should connect as. Enter the user's Password . For the Private Key , enter a string for either key-based or host-based user authentication Enter your Private Key in OpenSSH format. This is most often generated using the ssh-keygen -o parameter, for example: ssh-keygen -o -a 100 -t ed25519 . If the Private Key is encrypted, enter the Passphrase used to decrypt it. If the Private Key doesn't use a passphrase, leave this field blank. Review your FTP server provider's documentation for instructions on getting the information you need. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/getresponse/

GetResponse credentials # You can use these credentials to authenticate the following nodes: GetResponse GetResponse Trigger Prerequisites # Create a GetResponse account. Supported authentication methods # API key OAuth2 Related resources # Refer to GetResponse's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : To view or generate an API key, go to Integrations and API > API . Refer to the GetResponse Help Center for more detailed instructions. Using OAuth2 # To configure this credential, you'll need: A Client ID : Generated when you register your application . A Client Secret : Generated when you register your application as the Client Secret Key . When you register your application, copy the OAuth Redirect URL from n8n and add it as the Redirect URL in GetResponse. Redirect URL with localhost The Redirect URL should be a URL in your domain, for example: https://mytemplatemaker.example.com/gr_callback . GetResponse doesn't accept a localhost callback URL. Refer to the FAQs to configure the credentials for the local environment. Configure OAuth2 credentials for a local environment # GetResponse doesn't accept the localhost callback URL. Follow the steps below to configure the OAuth credentials for a local environment: 1. Use ngrok to expose the local server running on port 5678 to the internet. In your terminal, run the following command: 1 ngrok http 5678 2. Run the following command in a new terminal. Replace <YOUR-NGROK-URL> with the URL that you got from the previous step. 1 export WEBHOOK_URL = <YOUR-NGROK-URL> 3. Follow the Using OAuth2 instructions to configure your credentials, using this URL as your Redirect URL . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/ghost/

Ghost credentials # You can use these credentials to authenticate the following nodes: Ghost Prerequisites # Create a Ghost account. Supported authentication methods # Admin API key Content API key The keys are generated following the same steps, but the authorization flows and key format are different, so n8n stores the credentials separately. The Content API uses an API key; the Admin API uses an API key to generate a token for authentication. Related resources # Refer to Ghost's Admin API documentation for more information about the Admin API service. Refer to Ghost's Content API documentation for more information about the Content API service. Using Admin API key # To configure this credential, you'll need: The URL of your Ghost admin domain. Your admin domain can be different to your main domain and may include a subdirectory. All Ghost(Pro) blogs have a *.ghost.io domain as their admin domain and require https. An API Key : To generate a new API key, create a new Custom Integration. Refer to the Ghost Admin API Token Authentication Key documentation for more detailed instructions. Copy the Admin API Key and use this as the API Key in the Ghost Admin n8n credential. Using Content API key # To configure this credential, you'll need: The URL of your Ghost admin domain. Your admin domain can be different to your main domain and may include a subdirectory. All Ghost(Pro) blogs have a *.ghost.io domain as their admin domain and require https. An API Key : To generate a new API key, create a new Custom Integration. Refer to the Ghost Content API Key documentation for more detailed instructions. Copy the Content API Key and use this as the API Key in the Ghost Content n8n credential. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/github/

GitHub credentials # You can use these credentials to authenticate the following nodes: GitHub GitHub Trigger GitHub Document Loader : this node doesn't support OAuth. Prerequisites # Create a GitHub account. Supported authentication methods # API access token: Use this method with any GitHub nodes. OAuth2: Use this method with GitHub and GitHub Trigger nodes only; don't use with GitHub Document Loader . Related resources # Refer to GitHub's API documentation for more information about the service. Using API access token # To configure this credential, you'll need a GitHub account. There are two steps to setting up this credential: Generate a GitHub personal access token . Set up the credential . Refer to the sections below for detailed instructions. Generate personal access token # Recommended access token type n8n recommends using a personal access token (classic). GitHub's fine-grained personal access tokens are still in beta and can't access all endpoints. To generate your personal access token: If you haven't done so already, verify your email address with GitHub. Refer to Verifying your email address for more information. Open your GitHub profile Settings . In the left navigation, select Developer settings . In the left navigation, under Personal access tokens , select Tokens (classic) . Select Generate new token > Generate new token (classic) . Enter a descriptive name for your token in the Note field, like n8n integration . Select the Expiration you'd like for the token, or select No expiration . Select Scopes for your token. For most of the n8n GitHub nodes, add the repo scope. A token without assigned scopes can only access public information. Refer to Select Generate token . Copy the token. Refer to Creating a personal access token (classic) for more information. Refer to Scopes for OAuth apps for more information on GitHub scopes. Set up the credential # Then, in your n8n credential: If you aren't using GitHub Enterprise Server, don't change the GitHub server URL. If you're using GitHub Enterprise Server , update GitHub server to match the URL for your server. Enter your User name as it appears in your GitHub profile. Enter the Access Token you generated above. Using OAuth2 # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. If you're self-hosting n8n , create a new GitHub OAuth app : Open your GitHub profile Settings . In the left navigation, select Developer settings . In the left navigation, select OAuth apps . Select New OAuth App . If you haven't created an app before, you may see Register a new application instead. Select it. Enter an Application name , like n8n integration . Enter the Homepage URL for your app's website. If you'd like, add the optional Application description , which GitHub displays to end-users. From n8n, copy the OAuth Redirect URL and paste it into the GitHub Authorization callback URL . Select Register application . Copy the Client ID and Client Secret this generates and add them to your n8n credential. Refer to the GitHub Authorizing OAuth apps documentation for more information on the authorization process. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/gitlab/

GitLab credentials # You can use these credentials to authenticate the following nodes: GitLab GitLab Trigger Supported authentication methods # API access token OAuth2 (Recommended) Related resources # Refer to GitLab's API documentation for more information about the service. Using API access token # To configure this credential, you'll need a GitLab account and: The URL of your GitLab Server An Access Token To set up the credential: In GitLab, select your avatar, then select Edit profile . In the left sidebar, select Access tokens . Select Add new token . Enter a Name for the token, like n8n integration . Enter an expiry date for the token. If you don't enter an expiry date, GitLab automatically sets it to 365 days later than the current date. The token expires on that expiry date at midnight UTC. Select the desired Scopes . For the GitLab node, use the api scope to easily grant access for all the node's functionality. Or refer to Personal access token scopes to select scopes for the functions you want to use. Select Create personal access token . Copy the access token this creates and enter it in your n8n credential as the Access Token . Enter the URL of your GitLab Server in your n8n credential. Refer to GitLab's Create a personal access token documentation for more information. Using OAuth2 # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. If you're self-hosting n8n, you'll need a GitLab account. Then create a new GitLab application: In GitLab, select your avatar, then select Edit profile . In the left sidebar, select Applications . Select Add new application . Enter a Name for your application, like n8n integration . In n8n, copy the OAuth Redirect URL . Enter it as the GitLab Redirect URI . Select the desired Scopes . For the GitLab node, use the api scope to easily grant access for all the node's functionality. Or refer to Personal access token scopes to select scopes for the functions you want to use. Select Save application . Copy the Application ID and enter it as the Client ID in your n8n credential. Copy the Secret and enter it as the Client Secret in your n8n credential. Refer to GitLab's Configure GitLab as an OAuth 2.0 authentication identity provider documentation for more information. Refer to the GitLab OAuth 2.0 identity provider API documentation for more information on OAuth2 and GitLab. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/git/

Git credentials # You can use these credentials to authenticate the following nodes: Git Prerequisites # Create an account on GitHub , GitLab , or similar platforms for use with Git . Supported authentication methods # Basic auth Related resources # Refer to Git's documentation for more information about the service. Using basic auth # To configure this credential, you'll need: A Username for GitHub, GitLab, or a similar platform A Password for GitHub, GitLab, or a similar platform Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/sendemail/gmail/

Gmail Send Email credentials # Follow these steps to configure the Send Email credentials with a Gmail account. Prerequisites # To follow these instructions, you must first: Enable 2-step Verification on your Gmail account. Generate an app password . Enable 2-step Verification # To enable 2-step Verification: Log in to your Google Account . Select Security from the left navigation. Under How you sign in to Google , select 2-Step Verification . If 2-Step Verification is already enabled, skip to the next section. Select Get started . Follow the on-screen steps to configure 2-Step Verification. Refer to Turn on 2-step Verification for more information. If you can't turn on 2-step Verification, check with your email administrator. Generate an app password # To generate an app password: In your Google account, go to App passwords . Enter an App name for your new app password, like n8n credential . Select Create . Copy the generated app password. You'll use this in your n8n credential. Refer to Google's Sign in with app passwords documentation for more information. Set up the credential # To set up the Send Email credential to use Gmail: Enter your Gmail email address as the User . Enter the app password you generated above as the Password . Enter smtp.gmail.com as the Host . For the Port : Keep the default 465 for SSL or if you're unsure what to use. Enter 587 for TLS. Turn on the SSL/TLS toggle. Refer to the Outgoing Mail (SMTP) Server settings in Read Gmail messages on other email clients using POP for more information. If the settings above don't work for you, check with your email administrator. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/imap/gmail/

Gmail IMAP credentials # Follow these steps to configure the IMAP credentials with a Gmail account. Prerequisites # To follow these instructions, you must first: Enable 2-step Verification on your Gmail account. Generate an app password . Enable 2-step Verification # To enable 2-step Verification: Log in to your Google Account . Select Security from the left navigation. Under How you sign in to Google , select 2-Step Verification . If 2-Step Verification is already enabled, skip to the next section. Select Get started . Follow the on-screen steps to configure 2-Step Verification. Refer to Turn on 2-step Verification for more information. If you can't turn on 2-step Verification, check with your email administrator. Generate an app password # To generate an app password: In your Google account, go to App passwords . Enter an App name for your new app password, like n8n credential . Select Create . Copy the generated app password. You'll use this in your n8n credential. Refer to Google's Sign in with app passwords documentation for more information. Set up the credential # To set up the IMAP credential with a Gmail account, use these settings: Enter your Gmail email address as the User . Enter the app password you generated above as the Password . Enter imap.gmail.com as the Host . For the Port , keep the default port number of 993 . Check with your email administrator if this port doesn't work. Turn on the SSL/TLS toggle. Check with your email administrator about whether to Allow Self-Signed Certificates . Refer to Add Gmail to another client for more information. You may need to Enable IMAP if you're using a personal Google account before June 2024. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/gong/

Gong credentials # You can use these credentials to authenticate the following nodes: Gong Supported authentication methods # API access token OAuth2 Related resources # Refer to Gong's API documentation for more information about the service. Using API access token # To configure this credential, you'll need a Gong account and: An Access Key An Access Key Secret You can create both of these items on the Gong API Page (you must be a technical administrator in Gong to access this resource). Refer to Gong's API documentation for more information about authenticating to the service. Using OAuth2 # To configure this credential, you'll need a Gong account, a Gong developer account and: A Client ID : Generated when you create an Oauth app for Gong. A Client Secret : Generated when you create an Oauth app for Gong. If you're self-hosting n8n, you'll need to create an app to configure OAuth2. Refer to Gong's OAuth documentation for more information about setting up OAuth2. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/googleai/

Google Gemini(PaLM) credentials # You can use these credentials to authenticate the following nodes: Embeddings Google Gemini Google Gemini Chat Model Embeddings Google PaLM Prerequisites # Create a Google Cloud account. Create a Google Cloud Platform project . Supported authentication methods # Gemini(PaLM) API key Related resources # Refer to Google's Gemini API documentation for more information about the service. View n8n's Advanced AI documentation. Using Gemini(PaLM) API key # To configure this credential, you'll need: The API Host URL: Both PaLM and Gemini use the default https://generativelanguage.googleapis.com . An API Key : Create a key in Google AI Studio . Custom hosts not supported The related nodes don't yet support custom hosts or proxies for the API host and must use 'https://generativelanguage.googleapis.com'. To create an API key: Go to the API Key page in Google AI Studio: https://makersuite.google.com/app/apikey . Select Create API Key . You can choose whether to Create API key in new project or search for an existing Google Cloud project to Create API key in existing project . Copy the generated API key and add it to your n8n credential. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/google/

Google credentials # This section contains: OAuth2 single service : Create an OAuth2 credential for a specific service node, such as the Gmail node. OAuth2 generic : Create an OAuth2 credential for use with custom operations . Service Account : Create a Service Account credential for some specific service nodes. Google PaLM and Gemini : Get a Google Gemini/Google PaLM API key. OAuth2 and Service Account # There are two authentication methods available for Google services nodes: OAuth2 : Recommended because it's more widely available and easier to set up. Service Account : Refer to the Google documentation: Understanding service accounts for guidance on when you need a service account. Note for n8n Cloud users For the following nodes, you can authenticate by selecting Sign in with Google in the OAuth section: Google Calendar Google Contacts Google Drive Google Mail Google Sheets Google Sheets Trigger Google Tasks Compatible nodes # Once configured, you can use your credentials to authenticate the following nodes. Most nodes are compatible with OAuth2 authentication. Support for Service Account authentication is limited. Node OAuth Service Account Google Ads Gmail Google Analytics Google BigQuery Google Books Google Calendar Google Chat Google Cloud Storage Google Contacts Google Cloud Firestore Google Cloud Natural Language Google Cloud Realtime Database Google Docs Google Drive Google Drive Trigger Google Perspective Google Sheets Google Slides Google Tasks Google Translate Google Workspace Admin YouTube Gmail and Service Accounts Google technically supports Service Accounts for use with Gmail, but it requires enabling domain-wide delegation, which Google discourages, and its behavior can be inconsistent. n8n recommends using OAuth2 with the Gmail node. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/gotify/

Gotify credentials # You can use these credentials to authenticate the following nodes: Gotify Prerequisites # Install Gotify on your server. Supported authentication methods # API token Related resources # Refer to Gotify's API documentation for more information about the service. Using API token # To configure this credential, you'll need: An App API Token : Only required if you'll use this credential to create messages. To generate an App API token, create an application from the Apps menu. Refer to Gotify's Push messages documentation for more information. A Client API Token : Required for all actions other than creating messages (such as deleting or retrieving messages). To generate a Client API token, create a client from the Clients menu. The URL of the Gotify host Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/grafana/

Grafana credentials # You can use these credentials to authenticate the following nodes: Grafana Prerequisites # Create a Grafana account. Supported authentication methods # API key Related resources # Refer to Grafana's API documentation for more information about authenticating with the service. Using API key # To configure this credential, you'll need: An API Key : Refer to the Create an API key documentation for detailed instructions on creating an API key. The Base URL for your Grafana instance, for example: https://n8n.grafana.net . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/grist/

Grist credentials # You can use these credentials to authenticate the following nodes: Grist Prerequisites # Create a Grist account. Supported authentication methods # API key Related resources # Refer to Grist's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Refer to the Grist API authentication documentation for instructions on creating an API key. To select your Grist Plan Type . Options include: Free Paid: If selected, provide your Grist Custom Subdomain . This is the portion that comes before .getgrist.com . For example, if our full Grist domain was n8n.getgrist.com , we'd enter n8n here. Self-Hosted: If selected, provide your Grist Self-Hosted URL . This should be the full URL. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/groq/

Groq credentials # You can use these credentials to authenticate the following nodes: Groq Chat Model Prerequisites # Create a Groq account. Supported authentication methods # API key Related resources # Refer to Groq's documentation for more information about the service. View n8n's Advanced AI documentation. Using API key # To configure this credential, you'll need: An API Key To get your API key: Go to the API Keys page of your Groq console. Select Create API Key . Enter a display name for the key, like n8n integration , and select Submit . Copy the key and paste it into your n8n credential. Refer to Groq's API Keys documentation for more information. Groq API keys Groq binds API keys to the organization, not the user. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/halopsa/

HaloPSA credentials # You can use these credentials to authenticate the following nodes: HaloPSA Prerequisites # Create a HaloPSA account. Supported authentication methods # API key Related resources # Refer to HaloPSA's API documentation for more information about the service. Using API key # To configure this credential, you'll need: To select your Hosting Type : On Premise Solution : Choose this option if you're hosting the Halo application on your own server Hosted Solution Of Halo : Choose this option if your application is hosted by Halo. If this option is selected, you'll need to provide your Tenant . The HaloPSA Authorisation Server URL : Your Authorisation Server URL is displayed within HaloPSA in Configuration > Integrations > Halo API in API Details . The Resource Server URL: Your Resource Server is displayed within HaloPSA in Configuration > Integrations > Halo API in API Details . A Client ID : Obtained by registering the application in the Halo API settings. Refer to HaloPSA's Authorisation documentation for detailed instructions. n8n recommends using these settings: Choose Client Credentials as your Authentication Method . Use the all permission. A Client Secret : Obtained by registering the application in the Halo API settings. Your Tenant name: If Hosted Solution of Halo is selected as the Hosting Type , you must provide your tenant name. Your tenant name is displayed within HaloPSA in Configuration > Integrations > Halo API in API Details . HaloPSA uses both the application permissions and the agent's permissions to determine API access. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/harvest/

Harvest credentials # You can use these credentials to authenticate the following nodes: Harvest Prerequisites # Create a Harvest account. Supported authentication methods # API access token OAuth2 Related resources # Refer to Harvest's API documentation for more information about the service. Using API Access Token # To configure this credential, you'll need: A Personal Access Token : Refer to the Harvest Personal Access Token Authentication documentation for instructions on creating a personal access token. Using OAuth2 # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. If you need to configure OAuth2 from scratch or need more detail on what's happening in the OAuth web flow, refer to the instructions in the Harvest OAuth2 documentation to set up OAuth. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/highlevel/

HighLevel credentials # You can use these credentials to authenticate the following nodes: HighLevel node Prerequisites # Create a HighLevel developer account. Supported authentication methods # API key: Use with API v1 OAuth2: Use with API v2 API 1.0 deprecation HighLevel deprecated API v1.0 and no longer maintains it. Use OAuth2 to set up new credentials. Related resources # Refer to HighLevel's API 2.0 documentation for more information about the service. For existing integrations with the API v1.0, refer to HighLevel's API 1.0 documentation . Using API key # To configure this credential, you'll need: An API Key : Refer to the HighLevel API 1.0 Welcome documentation for instructions on getting your API key. Using OAuth2 # To configure this credential, you'll need: A Client ID A Client Secret To generate both, create an app in My Apps > Create App . Use these settings: Set Distribution Type to Sub-Account . Add these Scopes : locations.readonly contacts.readonly contacts.write opportunities.readonly opportunities.write users.readonly Copy the OAuth Redirect URL from n8n and add it as a Redirect URL in your HighLevel app. Copy the Client ID and Client Secret from HighLevel and add them to your n8n credential. Add the same scopes added above to your n8n credential in a space-separated list. For example: locations.readonly contacts.readonly contacts.write opportunities.readonly opportunities.write users.readonly Refer to HighLevel's API Authorization documentation for more details. Refer to HighLevel's API Scopes documentation for more information about available scopes. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/homeassistant/

Home Assistant credentials # You can use these credentials to authenticate the following nodes: Home Assistant Supported authentication methods # API access token Related resources # Refer to Home Assistant's API documentation for more information about the service. Using API access token # To configure this credential, you'll need to Install Home Assistant, create a Home Assistant account, and have: Your Host The Port A Long-Lived Access Token To generate an access token and set up the credential: To generate your Access Token , log in to Home Assistant and open your User profile . In the Long-Lived Access Tokens section, generate a new token. Copy this token and enter it in n8n as your Access Token . Enter the URL or IP address of your Home Assistant Host , without the http:// or https:// protocol, for example your.awesome.home . For the Port , enter the appropriate port: If you've made no port changes and access Home Assistant at http:// , keep the default of 8123 . If you've made no port changes and access Home Assistant at https:// , enter 443 . If you've configured Home Assistant to use a specific port, enter that port. If you've enabled SSL in Home Assistant in the config.yml map key , turn on the SSL toggle in n8n. If you're not sure, it's best to turn this setting on if you access your home assistant UI using https:// instead of http:// . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/httprequest/#provide-an-ssl-certificate

HTTP Request credentials # You can use these credentials to authenticate the following nodes: HTTP Request HTTP Request Tool Prerequisites # You must use the authentication method required by the app or service you want to query. If you need to secure the authentication with an SSL certificate, refer to Provide an SSL certificate for the information you'll need. Supported authentication methods # Predefined credential type Basic auth (generic credential type) Custom auth (generic credential type) Digest auth (generic credential type) Header auth (generic credential type) OAuth1 (generic credential type) OAuth2 (generic credential type) Query auth (generic credential type) Refer to HTTP authentication for more information relating to generic credential types. Predefined credential types n8n recommends using predefined credential types whenever there's a credential type available for the service you want to connect to. It offers an easier way to set up and manage credentials, compared to configuring generic credentials. You can use Predefined credential types to perform custom operations with some APIs where n8n has a node for the platform. For example, n8n has an Asana node, and supports using your Asana credentials in the HTTP Request node. Refer to Custom operations for more information. Using predefined credential type # To use a predefined credential type: Open your HTTP Request node, or add a new one to your workflow. In Authentication , select Predefined Credential Type . In Credential Type , select the API you want to use. In Credential for <API name> , you can: Select an existing credential for that platform, if available. Select Create New to create a new credential. Refer to Custom API operations for more information. Using basic auth # Use this generic authentication if your app or service supports basic authentication. To configure this credential, enter: The Username you use to access the app or service your HTTP Request is targeting The Password that goes with that username Using digest auth # Use this generic authentication if your app or service supports digest authentication. To configure this credential, enter: The Username you use to access the app or service your HTTP Request is targeting The Password that goes with that username Using header auth # Use this generic authentication if your app or service supports header authentication. To configure this credential, enter: The header Name you need to pass to the app or service your HTTP request is targeting The Value for the header Read more about HTTP headers . Credential data can vary The credential data required for header auth credentials depends on the type used. For example, if you need to provide an Authorization: Bearer <token> header, the credential data Name will be Authorization and the Value will be Bearer <token> . Using OAuth1 # Use this generic authentication if your app or service supports OAuth1 authentication. To configure this credential, enter: An Authorization URL : Also known as the Resource Owner Authorization URI. This URL typically ends in /oauth1/authorize . The temporary credentials are sent here to prompt a user to complete authorization. An Access Token URL : This is the URI used for the initial request for temporary credentials. This URL typically ends in /oauth1/request or /oauth1/token . A Consumer Key : Also known as the client key, like a username. This specifies the oauth_consumer_key to use for the call. A Consumer Secret : Also known as the client secret, like a password. A Request Token URL : This is the URI used to switch from temporary credentials to long-lived credentials after authorization. This URL typically ends in /oauth1/access . Select the Signature Method the auth handshake uses. This specifies the oauth_signature_method to use for the call. Options include: HMAC-SHA1 HMAC-SHA256 HMAC-SHA512 For most OAuth1 integrations, you'll need to configure an app, service, or integration to generate the values for most of these fields. Use the OAuth Redirect URL in n8n as the redirect URL or redirect URI for such a service. Read more about OAuth1 and the OAuth1 authorization flow . Using OAuth2 # Use this generic authentication if your app or service supports OAuth2 authentication. Requirements to configure this credential depend on the Grant Type selected. Refer to OAuth Grant Types for more information on each grant type. For most OAuth2 integrations, you'll need to configure an app, service, or integration. Use the OAuth Redirect URL in n8n as the redirect URL or redirect URI for such a service. Read more about OAuth2 . Authorization Code grant type # Use Authorization Code grant type to exchange an authorization code for an access token. The auth flow uses the redirect URL to return the user to the client. Then the application gets the authorization code from the URL and uses it to request an access token. Refer to Authorization Code Request for more information. To configure this credential, select Authorization Code as the Grant Type . Then enter: An Authorization URL An Access Token URL A Client ID : The ID or username to log in with. A Client Secret : The secret or password used to log in with. Optional: Enter one or more Scope s for the credential. If unspecified, the credential will request all scopes available to the client. Optional: Some services require more query parameters. If your service does, add them as Auth URI Query Parameters . An Authentication type: Select the option that best suits your use case. Options include: Header : Send the credentials as a basic auth header. Body : Send the credentials in the body of the request. Optional: Choose whether to Ignore SSL Issues . If turned on, n8n will connect even if SSL validation fails. Client Credentials grant type # Use the Client Credentials grant type when applications request an access token to access their own resources, not on behalf of a user. Refer to Client Credentials for more information. To configure this credential, select Client Credentials as the Grant Type . Then enter: An Access Token URL : The URL to hit to begin the OAuth2 flow. Typically this URL ends in /token . A Client ID : The ID or username to use to log in to the client. A Client Secret : The secret or password used to log in to the client. Optional: Enter one or more Scope s for the credential. Most services don't support scopes for Client Credentials grant types; only enter scopes here if yours does. An Authentication type: Select the option that best suits your use case. Options include: Header : Send the credentials as a basic auth header. Body : Send the credentials in the body of the request. Optional: Choose whether to Ignore SSL Issues . If turned on, n8n will connect even if SSL validation fails. PKCE grant type # Proof Key for Code Exchange (PKCE) grant type is an extension to the Authorization Code flow to prevent CSRF and authorization code injection attacks. To configure this credential, select PKCE as the Grant Type . Then enter: An Authorization URL An Access Token URL A Client ID : The ID or username to log in with. A Client Secret : The secret or password used to log in with. Optional: Enter one or more Scope s for the credential. If unspecified, the credential will request all scopes available to the client. Optional: Some services require more query parameters. If your service does, add them as Auth URI Query Parameters . An Authentication type: Select the option that best suits your use case. Options include: Header : Send the credentials as a basic auth header. Body : Send the credentials in the body of the request. Optional: Choose whether to Ignore SSL Issues . If turned on, n8n will connect even if SSL validation fails. Using query auth # Use this generic authentication if your app or service supports passing authentication as a single key/value query parameter. (For multiple query parameters, use Custom Auth .) To configure this credential, enter: A query parameter key or Name A query parameter Value Using custom auth # Use this generic authentication if your app or service supports passing authentication as multiple key/value query parameters or you need more flexibility than the other generic auth options. The Custom Auth credential expects JSON data to define your credential. You can use headers , qs , body or a mix. Review the examples below to get started. Sending two headers # 1 2 3 4 5 6 { "headers": { "X-AUTH-USERNAME": "username", "X-AUTH-PASSWORD": "password" } } Body # 1 2 3 4 5 6 { "body" : { "user": "username", "pass": "password" } } Query string # 1 2 3 4 5 6 { "qs": { "appid": "123456", "apikey": "my-api-key" } } Sending header and query string # 1 2 3 4 5 6 7 8 { "headers": { "api-version": "202404" }, "qs": { "apikey": "my-api-key" } } Provide an SSL certificate # You can send an SSL certificate with your HTTP request. Create the SSL certificate as a separate credential for use by the node: In the HTTP Request node Settings , turn on SSL Certificates . On the Parameters tab, add an existing SSL Certificate credential to Credential for SSL Certificates or create a new one. To configure your SSL Certificates credential, you'll need to add: The Certificate Authority CA bundle The Certificate (CRT): May also appear as a Public Key, depending on who your issuing CA was and how they format the cert The Private Key (KEY) Optional: If the Private Key is encrypted, enter a Passphrase for the private key. If your SSL certificate is in a single file (such as a .pfx file), you'll need to open the file to copy details from it to paste into the appropriate fields: Enter the Public Key/CRT as the Certificate Enter the Private Key /KEY in that field Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/httprequest/

HTTP Request credentials # You can use these credentials to authenticate the following nodes: HTTP Request HTTP Request Tool Prerequisites # You must use the authentication method required by the app or service you want to query. If you need to secure the authentication with an SSL certificate, refer to Provide an SSL certificate for the information you'll need. Supported authentication methods # Predefined credential type Basic auth (generic credential type) Custom auth (generic credential type) Digest auth (generic credential type) Header auth (generic credential type) OAuth1 (generic credential type) OAuth2 (generic credential type) Query auth (generic credential type) Refer to HTTP authentication for more information relating to generic credential types. Predefined credential types n8n recommends using predefined credential types whenever there's a credential type available for the service you want to connect to. It offers an easier way to set up and manage credentials, compared to configuring generic credentials. You can use Predefined credential types to perform custom operations with some APIs where n8n has a node for the platform. For example, n8n has an Asana node, and supports using your Asana credentials in the HTTP Request node. Refer to Custom operations for more information. Using predefined credential type # To use a predefined credential type: Open your HTTP Request node, or add a new one to your workflow. In Authentication , select Predefined Credential Type . In Credential Type , select the API you want to use. In Credential for <API name> , you can: Select an existing credential for that platform, if available. Select Create New to create a new credential. Refer to Custom API operations for more information. Using basic auth # Use this generic authentication if your app or service supports basic authentication. To configure this credential, enter: The Username you use to access the app or service your HTTP Request is targeting The Password that goes with that username Using digest auth # Use this generic authentication if your app or service supports digest authentication. To configure this credential, enter: The Username you use to access the app or service your HTTP Request is targeting The Password that goes with that username Using header auth # Use this generic authentication if your app or service supports header authentication. To configure this credential, enter: The header Name you need to pass to the app or service your HTTP request is targeting The Value for the header Read more about HTTP headers . Credential data can vary The credential data required for header auth credentials depends on the type used. For example, if you need to provide an Authorization: Bearer <token> header, the credential data Name will be Authorization and the Value will be Bearer <token> . Using OAuth1 # Use this generic authentication if your app or service supports OAuth1 authentication. To configure this credential, enter: An Authorization URL : Also known as the Resource Owner Authorization URI. This URL typically ends in /oauth1/authorize . The temporary credentials are sent here to prompt a user to complete authorization. An Access Token URL : This is the URI used for the initial request for temporary credentials. This URL typically ends in /oauth1/request or /oauth1/token . A Consumer Key : Also known as the client key, like a username. This specifies the oauth_consumer_key to use for the call. A Consumer Secret : Also known as the client secret, like a password. A Request Token URL : This is the URI used to switch from temporary credentials to long-lived credentials after authorization. This URL typically ends in /oauth1/access . Select the Signature Method the auth handshake uses. This specifies the oauth_signature_method to use for the call. Options include: HMAC-SHA1 HMAC-SHA256 HMAC-SHA512 For most OAuth1 integrations, you'll need to configure an app, service, or integration to generate the values for most of these fields. Use the OAuth Redirect URL in n8n as the redirect URL or redirect URI for such a service. Read more about OAuth1 and the OAuth1 authorization flow . Using OAuth2 # Use this generic authentication if your app or service supports OAuth2 authentication. Requirements to configure this credential depend on the Grant Type selected. Refer to OAuth Grant Types for more information on each grant type. For most OAuth2 integrations, you'll need to configure an app, service, or integration. Use the OAuth Redirect URL in n8n as the redirect URL or redirect URI for such a service. Read more about OAuth2 . Authorization Code grant type # Use Authorization Code grant type to exchange an authorization code for an access token. The auth flow uses the redirect URL to return the user to the client. Then the application gets the authorization code from the URL and uses it to request an access token. Refer to Authorization Code Request for more information. To configure this credential, select Authorization Code as the Grant Type . Then enter: An Authorization URL An Access Token URL A Client ID : The ID or username to log in with. A Client Secret : The secret or password used to log in with. Optional: Enter one or more Scope s for the credential. If unspecified, the credential will request all scopes available to the client. Optional: Some services require more query parameters. If your service does, add them as Auth URI Query Parameters . An Authentication type: Select the option that best suits your use case. Options include: Header : Send the credentials as a basic auth header. Body : Send the credentials in the body of the request. Optional: Choose whether to Ignore SSL Issues . If turned on, n8n will connect even if SSL validation fails. Client Credentials grant type # Use the Client Credentials grant type when applications request an access token to access their own resources, not on behalf of a user. Refer to Client Credentials for more information. To configure this credential, select Client Credentials as the Grant Type . Then enter: An Access Token URL : The URL to hit to begin the OAuth2 flow. Typically this URL ends in /token . A Client ID : The ID or username to use to log in to the client. A Client Secret : The secret or password used to log in to the client. Optional: Enter one or more Scope s for the credential. Most services don't support scopes for Client Credentials grant types; only enter scopes here if yours does. An Authentication type: Select the option that best suits your use case. Options include: Header : Send the credentials as a basic auth header. Body : Send the credentials in the body of the request. Optional: Choose whether to Ignore SSL Issues . If turned on, n8n will connect even if SSL validation fails. PKCE grant type # Proof Key for Code Exchange (PKCE) grant type is an extension to the Authorization Code flow to prevent CSRF and authorization code injection attacks. To configure this credential, select PKCE as the Grant Type . Then enter: An Authorization URL An Access Token URL A Client ID : The ID or username to log in with. A Client Secret : The secret or password used to log in with. Optional: Enter one or more Scope s for the credential. If unspecified, the credential will request all scopes available to the client. Optional: Some services require more query parameters. If your service does, add them as Auth URI Query Parameters . An Authentication type: Select the option that best suits your use case. Options include: Header : Send the credentials as a basic auth header. Body : Send the credentials in the body of the request. Optional: Choose whether to Ignore SSL Issues . If turned on, n8n will connect even if SSL validation fails. Using query auth # Use this generic authentication if your app or service supports passing authentication as a single key/value query parameter. (For multiple query parameters, use Custom Auth .) To configure this credential, enter: A query parameter key or Name A query parameter Value Using custom auth # Use this generic authentication if your app or service supports passing authentication as multiple key/value query parameters or you need more flexibility than the other generic auth options. The Custom Auth credential expects JSON data to define your credential. You can use headers , qs , body or a mix. Review the examples below to get started. Sending two headers # 1 2 3 4 5 6 { "headers": { "X-AUTH-USERNAME": "username", "X-AUTH-PASSWORD": "password" } } Body # 1 2 3 4 5 6 { "body" : { "user": "username", "pass": "password" } } Query string # 1 2 3 4 5 6 { "qs": { "appid": "123456", "apikey": "my-api-key" } } Sending header and query string # 1 2 3 4 5 6 7 8 { "headers": { "api-version": "202404" }, "qs": { "apikey": "my-api-key" } } Provide an SSL certificate # You can send an SSL certificate with your HTTP request. Create the SSL certificate as a separate credential for use by the node: In the HTTP Request node Settings , turn on SSL Certificates . On the Parameters tab, add an existing SSL Certificate credential to Credential for SSL Certificates or create a new one. To configure your SSL Certificates credential, you'll need to add: The Certificate Authority CA bundle The Certificate (CRT): May also appear as a Public Key, depending on who your issuing CA was and how they format the cert The Private Key (KEY) Optional: If the Private Key is encrypted, enter a Passphrase for the private key. If your SSL certificate is in a single file (such as a .pfx file), you'll need to open the file to copy details from it to paste into the appropriate fields: Enter the Public Key/CRT as the Certificate Enter the Private Key /KEY in that field Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/hubspot/

HubSpot credentials # You can use these credentials to authenticate the following nodes: HubSpot HubSpot Trigger Supported authentication methods # App token: Use with the HubSpot node. Developer API key: Use with the HubSpot Trigger node. OAuth2: Use with the HubSpot node. API key deprecated HubSpot deprecated the regular API Key authentication method. The option still appears in n8n, but you should use the authentication methods listed above instead. If you have existing integrations using this API key method, refer to HubSpot's Migrate an API key integration to a private app guide and set up an app token. Related resources # Refer to HubSpot's API documentation for more information about the service. The HubSpot Trigger node uses the Webhooks API; refer to HubSpot's Webhooks API documentation for more information about that service. Using App token # To configure this credential, you'll need a HubSpot account or HubSpot developer account and: An App Token To generate an app token, create a private app in HubSpot: In your HubSpot account, select the settings icon in the main navigation bar. In the left sidebar menu, go to Integrations > Private Apps . Select Create private app . On the Basic Info tab, enter your app's Name . Hover over the placeholder logo and select the upload icon to upload a square image that will serve as the logo for your app. Enter a Description for your app. Open the Scopes tab and add the appropriate scopes. Refer to Required scopes for HubSpot node for a complete list of scopes you should add. Select Create app to finish the process. In the modal, review the info about your app's access token, then select Continue creating . Once your app's created, open the Access token card and select Show token to reveal the token. Copy this token and enter it in your n8n credential. Refer to the HubSpot Private Apps documentation for more information. Using Developer API key # To configure this credential, you'll need a HubSpot developer account and: A Client ID : Generated once you create a public app. A Client Secret : Generated once you create a public app. A Developer API Key : Generated from your Developer Apps dashboard. An App ID : Generated once you create a public app. To create the public app and set up the credential: Log into your HubSpot app developer account . Select Apps from the main navigation bar. Select Get HubSpot API key . You may need to select the option to Show key . Copy the key and enter it in n8n as the Developer API Key . Still on the HubSpot Apps page, select Create app . On the App Info tab, add an App name , Description , Logo , and any support contact info you want to provide. Anyone encountering the app would see these. Open the Auth tab. Copy the App ID and enter it in n8n. Copy the Client ID and enter it in n8n. Copy the Client Secret and enter it in n8n. In the Scopes section, select Add new scope . Add all the scopes listed in Required scopes for HubSpot Trigger node to your app. Select Update . Copy the n8n OAuth Redirect URL and enter it as the Redirect URL in your HubSpot app. Select Create app to finish creating the HubSpot app. Refer to the HubSpot Public Apps documentation for more detailed instructions. Required scopes for HubSpot Trigger node # If you're creating an app for use with the HubSpot Trigger node, n8n recommends starting with these scopes: Element Object Permission Scope name n/a n/a n/a oauth CRM Companies Read crm.objects.companies.read CRM Companies schemas Read crm.schemas.companies.read CRM Contacts Read crm.objects.contacts.read CRM Contacts schemas Read crm.schemas.contacts.read CRM Deals Read crm.objects.deals.read CRM Deals schemas Read crm.schemas.deals.read HubSpot old accounts Some HubSpot accounts don't have access to all the scopes. HubSpot is migrating accounts gradually. If you can't find all the scopes in your current HubSpot developer account, try creating a fresh developer account. Using OAuth2 # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. If you're self-hosting n8n, you'll need to configure OAuth2 from scratch by creating a new public app: Log into your HubSpot app developer account . Select Apps from the main navigation bar. Select Create app . On the App Info tab, add an App name , Description , Logo , and any support contact info you want to provide. Anyone encountering the app would see these. Open the Auth tab. Copy the App ID and enter it in n8n. Copy the Client ID and enter it in n8n. Copy the Client Secret and enter it in n8n. In the Scopes section, select Add new scope . Add all the scopes listed in Required scopes for HubSpot node to your app. Select Update . Copy the n8n OAuth Redirect URL and enter it as the Redirect URL in your HubSpot app. Select Create app to finish creating the HubSpot app. Refer to the HubSpot Public Apps documentation for more detailed instructions. If you need more detail on what's happening in the OAuth web flow, refer to the HubSpot Working with OAuth documentation . Required scopes for HubSpot node # If you're creating an app for use with the HubSpot node, n8n recommends starting with these scopes: Element Object Permission Scope name(s) n/a n/a n/a oauth n/a n/a n/a forms n/a n/a n/a tickets CRM Companies Read Write crm.objects.companies.read crm.objects.companies.write CRM Companies schemas Read crm.schemas.companies.read CRM Contacts schemas Read crm.schemas.contacts.read CRM Contacts Read Write crm.objects.contacts.read crm.objects.contacts.write CRM Deals Read Write crm.objects.deals.read crm.objects.deals.write CRM Deals schemas Read crm.schemas.deals.read CRM Owners Read crm.objects.owners.read CRM Lists Write crm.lists.write HubSpot old accounts Some HubSpot accounts don't have access to all the scopes. HubSpot is migrating accounts gradually. If you can't find all the scopes in your current HubSpot developer account, try creating a fresh developer account. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/huggingface/

Hugging Face credentials # You can use these credentials to authenticate the following nodes: Hugging Face Inference Embeddings Hugging Face Inference Supported authentication methods # API key Related resources # Refer to Hugging Face's documentation for more information about the service. View n8n's Advanced AI documentation. Using API key # To configure this credential, you'll need a Hugging Face account and: An API Key : Hugging Face calls these API tokens. To get your API token: Open your Hugging Face profile and go to the Tokens section. Copy the token listed there. It should begin with hf_ . Enter this API token as your n8n credential API Key . Refer to Get your API token for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/hybridanalysis/

Hybrid Analysis credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create a Hybrid Analysis account. Supported authentication methods # API key Related resources # Refer to Hybrid Analysis' API documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using API key # To configure this credential, you'll need: An API Key : Refer to the Hybrid Analysis' API documentation for instructions on generating an API key. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/imap/

IMAP credentials # You can use these credentials to authenticate the following nodes: IMAP Email Prerequisites # Create an email account on a service with IMAP support. Supported authentication methods # User account Related resources # Internet Message Access Protocol (IMAP) is a standard protocol for receiving email. Most email providers offer instructions on setting up their service with IMAP; refer to your provider's IMAP instructions. Using user account # To configure this credential, you'll need: A User name: The email address you're retrieving email for. A Password : Either the password you use to check email or an app password. Your provider will tell you whether to use your own password or to generate an app password. A Host : The IMAP host address for your email provider, often formatted as imap.<provider>.com . Check with your provider. A Port number: The default is port 993 . Use this port unless your provider or email administrator tells you to use something different. Choose whether to use SSL/TLS and whether to Allow Self-Signed Certificates . Provider instructions # Refer to the quickstart guides for these common email providers. Gmail # Refer to Gmail . Outlook.com # Refer to Outlook.com . Yahoo # Refer to Yahoo . My provider isn't listed # If your email provider isn't listed here, search for their IMAP settings or IMAP instructions . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/impervawaf/

Imperva WAF credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create an Imperva WAF account. Supported authentication methods # API key Related resources # Refer to Imperva WAF's documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using API key # To configure this credential, you'll need: An API ID An API Key Refer to Imperva WAF's API Key Management documentation for instructions on generating and viewing API Keys and IDs. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/intercom/

Intercom credentials # You can use these credentials to authenticate the following nodes: Intercom Prerequisites # Create an Intercom developer account. Create an app in your developer hub. Supported authentication methods # API key Related resources # Refer to Intercom's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Intercom automatically generates an Access Token when you create an app . Use this Access Token as your n8n API Key . Refer to How to get your Access Token for more detailed instructions. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/invoiceninja/

Invoice Ninja credentials # You can use these credentials to authenticate the following nodes: Invoice Ninja Invoice Ninja Trigger Prerequisites # Create an Invoice Ninja account. Only the Pro and Enterprise plans support API integrations. Supported authentication methods # API key Related resources # Refer to Invoice Ninja's v4 API documentation and v5 API documentation for more information about the APIs. Using API key # To configure this credential, you'll need: A URL : If Invoice Ninja hosts your installation, use either of the default URLs mentioned. If you're self-hosting your installation, use the URL of your Invoice Ninja instance. An API Token : Generate an API token in Settings > Account Management > API Tokens . An optional Secret , available only for v5 API users Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/jenkins/

Jenkins credentials # You can use these credentials to authenticate the following nodes: Jenkins Prerequisites # Create an account on a Jenkins instance. Supported authentication methods # API token Related resources # Jenkins doesn't provide public API documentation; API documentation for each page is available from the user interface in the bottom right. Refer to those detailed pages for more information about the service. Refer to Jenkins Remote Access API for information on the API and API wrappers. Using API token # To configure this credential, you'll need: The Jenkins Username : For the user whom the token belongs to A Personal API Token : Generate this from the user's profile details > Configure > Add new token . Refer to these Stack Overflow instructions for more detail. The Jenkins Instance URL Jenkins rebuilt their API token setup in 2018. If you're working with an older Jenkins instance, be sure you're using a non-legacy API token. Refer to Security Hardening: New API token system in Jenkins 2.129+ for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/jira/

Jira credentials # You can use these credentials to authenticate the following nodes: Jira Jira Trigger Prerequisites # Create a Jira Software Cloud or Server account. Supported authentication methods # SW Cloud API token : Use this method with Jira Software Cloud . SW Server account : Use this method with Jira Software Server . Related resources # Refer to Jira's API documentation for more information about the service. Using SW Cloud API token # To configure this credential, you'll need an account on Jira Software Cloud . Then: Log in to your Atlassian profile > Security > API tokens page, or jump straight there using this link . Select Create API Token . Enter a good Label for your token, like n8n integration . Select Create . Copy the API token. In n8n, enter the Email address associated with your Jira account. Paste the API token you copied as your API Token . Enter the Domain you access Jira on, for example https://example.atlassian.net . Refer to Manage API tokens for your Atlassian account for more information. New tokens New tokens may take up to a minute before they work. If your credential verification fails the first time, wait a minute before retrying. Using SW Server account # To configure this credential, you'll need an account on Jira Software Server . Then: Enter the Email address associated with your Jira account. Enter your Jira account Password . Enter the Domain you access Jira on. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/jwt/

JWT credentials # You can use these credentials to authenticate the following nodes: JWT Webhook Supported authentication methods # Passphrase: Signed with a secret with HMAC algorithm Private key (PEM key): For use with Private Key JWT with RSA or ECDSA algorithm Related resources # Refer to the JSON Web Token spec for more details. For a more verbose introduction, refer to the JWT website Introduction to JSON Web Tokens . Refer to JSON Web Token (JWT) Signing Algorithms Overview for more information on selecting between the two types and the algorithms involved. Using Passphrase # To configure this credential: Select the Key Type of Passphrase . Enter the Passphrase Secret Select the Algorithm used to sign the assertion. Refer to Available algorithms below for a list of supported algorithms. Using private key (PEM key) # To configure this credential: 1. Select the Key Type of PEM Key . 2. A Private Key : Obtained from generating a Key Pair. Refer to Generate RSA Key Pair for an example. 3. A Public Key : Obtained from generating a Key Pair. Refer to Generate RSA Key Pair for an example. 4. Select the Algorithm used to sign the assertion. Refer to Available algorithms below for a list of supported algorithms. Available algorithms # This n8n credential supports the following algorithms: HS256 HS384 HS512 RS256 RS384 RS512 ES256 ES384 ES512 PS256 PS384 PS512 none Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/kafka/

Kafka credentials # You can use these credentials to authenticate the following nodes: Kafka Kafka Trigger Supported authentication methods # Client ID Related resources # Refer to Kafka's documentation for more information about using the service. If you're new to Kafka, refer to the Apache Kafka Quickstart for initial setup. Refer to Encryption and Authentication using SSL for working with SSL in Kafka. Using client ID # To configure this credential, you'll need a running Kafka environment and: A Client ID A list of relevant Brokers Username/password authentication details if your Kafka environment uses authentication To set it up: Enter the CLIENT-ID of the client or consumer group in the Client ID field in your credential. Enter a comma-separated list of relevant Brokers for the credential to use in the format <broker-service-name>:<port> . Use the name you gave the broker when you defined it in the services list. For example, kafka-1:9092,kafka-2:9092 would add the brokers kafka-1 and kafka-2 on port 9092 . If your Kafka environment doesn't use SSL, turn off the SSL toggle. If you've enabled authentication using SASL in your Kafka environment, turn on the Authentication toggle. Then add: The Username The Password Select the broker's configured SASL Mechanism . Refer to SASL configuration for more information. Options include: Plain scram-sha-256 scram-sha-512 Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/keap/

Keap credentials # You can use these credentials to authenticate the following nodes: Keap Keap Trigger Prerequisites # Create a Keap developer account. Supported authentication methods # OAuth2 Related resources # Refer to Keap's REST API documentation for more information about the service. Using OAuth2 # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. If you need to configure OAuth2 from scratch or need more detail on what's happening in the OAuth web flow, refer to the instructions in the Getting Started with OAuth2 documentation . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/kibana/

Kibana credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create an Elasticsearch account. If you're creating a new account to test with, load some sample data into Kibana. Refer to the Kibana quick start for more information. Supported authentication methods # Basic auth Related resources # Refer to Kibana's API documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using basic auth # To configure this credential, you'll need: The URL you use to access Kibana, for example http://localhost:5601 A Username : Use the same username that you use to log in to Elastic. A Password : Use the same password that you use to log in to Elastic. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/kitemaker/

Kitemaker credentials # You can use these credentials to authenticate the following nodes: Kitemaker Prerequisites # Create a Kitemaker account. Supported authentication methods # API access token Related resources # Refer to Kitemaker's API documentation for more information about the service. Using API access token # To configure this credential, you'll need: A Personal Access Token : Generate a personal access token from Manage > Developer settings . Refer to API Authentication for more detailed instructions. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/kobotoolbox/

KoboToolbox credentials # You can use these credentials to authenticate the following nodes: KoboToolbox trigger KoboToolbox Prerequisites # Create a KoboToolbox account. Supported authentication methods # API token Related resources # Refer to KoboToolbox's API documentation for more information about the service. Using API token # To configure this credential, you'll need: An API Root URL : Enter the URL of the KoboToolbox server where you created your account. For the Global KoboToolbox Server, use https://kf.kobotoolbox.org . For the European Union KoboToolbox Server, use https://eu.kobotoolbox.org . An API Token : Displayed in your Account Settings . Refer to Getting your API token for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/ldap/

LDAP credentials # You can use these credentials to authenticate the following nodes: LDAP Prerequisites # Create a server directory using Lightweight Directory Access Protocol (LDAP). Some common LDAP providers include: Jumpcloud Azure ADDS Okta Supported authentication methods # LDAP server details Related resources # Refer to your LDAP provider's own documentation for detailed information. For general LDAP information, refer to Basic LDAP concepts for a basic overview and The LDAP Bind Operation for information on how the bind operation and authentication work. Using LDAP server details # To configure this credential, you'll need: The LDAP Server Address : Use the IP address or domain of your LDAP server. The LDAP Server Port : Use the number of the port used to connect to the LDAP server. The Binding DN : Use the Binding Distinguished Name (Bind DN) for your LDAP server. This is the user account the credential should log in as. If you're using Active Directory, this may look something like cn=administrator, cn=Users, dc=n8n, dc=io . Refer to your LDAP provider's documentation for more information on identifying this DN and the related password. The Binding Password : Use the password for the Binding DN user. Select the Connection Security : Options include: None TLS STARTTLS Optional: Enter a numeric value in seconds to set a Connection Timeout . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/lemlist/

Lemlist credentials # You can use these credentials to authenticate the following nodes: Lemlist Lemlist Trigger Prerequisites # Create an account on a Lemlist instance. Supported authentication methods # API key Related resources # Refer to Lemlist's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Access your API key in Settings > Integrations . Refer to the API Authentication documentation for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/linear/

Linear credentials # You can use these credentials to authenticate the following nodes: Linear Trigger Linear Prerequisites # Create a Linear account. Supported authentication methods # API key OAuth2 Related resources # Refer to Linear's API documentation for more information about the service. Using API key # To configure this credential, you'll need: A personal API Key : Create an API key in your Settings > API . Refer to the Linear Personal API keys documentation for more information. Using OAuth2 # To configure this credential, you'll need: A Client ID : Generated when you create a new OAuth2 application. A Client Secret : Generated when you create a new OAuth2 application. Select the Actor : The actor defines how the OAuth2 application should create issues, comments and other changes. Options include: User (Linear's default): The application creates resources as the authorizing user. Use this option if you want each user to do their own authentication. Application : The application creates resources as itself. Use this option if you have only one user (like an admin) authorizing the application. To use this credential with the Linear Trigger node, you must enable the Include Admin Scope toggle. Refer to the Linear OAuth2 Authentication documentation for more detailed instructions and explanations. Use the n8n OAuth Redirect URL as the Redirect callback URL in your Linear OAuth2 application. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/line/

Line credentials # Deprecated: End of service LINE Notify is discontinuing service as of April 1st 2025 and this node will no longer work after that date. View LINE Notify's end of service announement for more information. You can use these credentials to authenticate the following nodes: Line Supported authentication methods # Notify OAuth2 Related resources # Refer to Line Notify's API documentation for more information about the service. Using Notify OAuth2 # To configure this credential, you'll need a Line account and: A Client ID A Client Secret To generate both, connect Line with Line Notify . Then: Open the Line Notify page to add a new service . Enter a Service name . This name displays when someone tries to connect to the service. Enter a Service description . Enter a Service URL Enter your Company/Enterprise . Select your Country/region . Enter your name or team name as the Representative . Enter a valid Email address . Line will verify this email address before the service is fully registered. Use an email address you have ready access to. Copy the OAuth Redirect URL from your n8n credential and enter it as the Callback URL in Line Notify. Select Agree and continue to agree to the terms of service. Verify the information you entered is correct and select Add . Check your email and open the Line Notify Registration URL to verify your email address. Once verification is complete, open My services . Select the service you just added. Copy the Client ID and enter it in your n8n credential. Select the option to Display the Client Secret . Copy the Client Secret and enter it in your n8n credential. In n8n, select Connect my account and follow the on-screen prompts to finish the credential. Refer to the Authentication section of Line Notify's API documentation for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/linkedin/

LinkedIn credentials # You can use these credentials to authenticate the following nodes: LinkedIn Prerequisites # Create a LinkedIn account. Create a LinkedIn Company Page . Supported authentication methods # Community Management OAuth2 : Use this method if you're a new LinkedIn user or creating a new LinkedIn app. OAuth2 : Use this method for older LinkedIn apps and user accounts. Related Resources # Refer to LinkedIn's Community Management API documentation for more information about the service. This credential works with API version 202404 . Using Community Management OAuth2 # Use this method if you're a new LinkedIn user or creating a new LinkedIn app. To configure this credential, you'll need a LinkedIn account, a LinkedIn Company Page , and: A Client ID : Generated after you create a new developer app. A Client Secret : Generated after you create a new developer app. To create a new developer app and set up the credential: Log into LinkedIn and select this link to create a new developer app . Enter an App name for your app, like n8n integration . For the LinkedIn Page , enter a LinkedIn Company Page or use the Create a new LinkedIn Page link to create one on-the-fly. Refer to Associate an App with a LinkedIn Page for more information. Add an App logo . Check the box to agree to the Legal agreement . Select Create app . This should open the Products tab. Select the products/APIs you want to enable for your app. For the LinkedIn node to work properly, you must include: Share on LinkedIn Sign In with LinkedIn using OpenID Connect Once you've requested access to the products you need, open the Auth tab. Copy the Client ID and enter it in your n8n credential. Select the icon to Copy the Primary Client Secret . Enter this in your n8n credential as the Client Secret . Posting from organization accounts To post as an organization, you need to put your app through LinkedIn's Community Management App Review process. Refer to Getting Access to LinkedIn APIs for more information on scopes and permissions. Using OAuth2 # Only use this method for older LinkedIn apps and user accounts. Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. All users must select: Organization Support : If turned on, the credential requests permission to post as an organization using the w_organization_social scope. To use this option, you must put your app through LinkedIn's Community Management App Review process. Legacy : If turned on, the credential uses legacy scopes for r_liteprofile and r_emailaddress instead of the newer profile and email scopes. If you're self-hosting n8n, you'll need to configure OAuth2 from scratch by creating a new developer app: Log into LinkedIn and select this link to create a new developer app . Enter an App name for your app, like n8n integration . For the LinkedIn Page , enter a LinkedIn Company Page or use the Create a new LinkedIn Page link to create one on-the-fly. Refer to Associate an App with a LinkedIn Page for more information. Add an App logo . Check the box to agree to the Legal agreement . Select Create app . This should open the Products tab. Select the products/APIs you want to enable for your app. For the LinkedIn node to work properly, you must include: Share on LinkedIn Sign In with LinkedIn using OpenID Connect Once you've requested access to the products you need, open the Auth tab. Copy the Client ID and enter it in your n8n credential. Select the icon to Copy the Primary Client Secret . Enter this in your n8n credential as the Client Secret . Posting from organization accounts To post as an organization, you need to put your app through LinkedIn's Community Management App Review process. Refer to Getting Access to LinkedIn APIs for more information on scopes and permissions. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/lonescale/

LoneScale credentials # You can use these credentials to authenticate the following nodes: LoneScale LoneScale Trigger Prerequisites # Create a LoneScale account. Supported authentication methods # API key Related resources # Refer to LoneScale's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Refer to LoneScale's Generate an API key documentation to generate your key. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/magento2/

Magento 2 credentials # You can use these credentials to authenticate the following node: Magento 2 Prerequisites # Create a Magento account. Set your store to Allow OAuth Access Tokens to be used as standalone Bearer tokens . Go to Admin > Stores > Configuration > Services > OAuth > Consumer Settings . Set the Allow OAuth Access Tokens to be used as standalone Bearer tokens option to Yes . You can also enable this setting from the CLI by running the following command: 1 bin/magento config:set oauth/consumer/enable_integration_as_bearer 1 This step is necessary until n8n updates the Magento 2 credentials to use OAuth. Refer to Integration Tokens for more information. Supported authentication methods # API access token Related resources # Refer to Magento's API documentation for more information about the service. Using API access token # To configure this credential, you'll need: A Host : Enter the address of your Magento store. An Access Token : Get an access token from the Admin Panel : Go to System > Extensions > Integrations . Add a new Integration. Go to the API tab and select the Magento resources you'd like the n8n integration to access. From the Integrations page, Activate the new integration. Select Allow to display your access token so you can copy it and enter it in n8n. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/mailcheck/

Mailcheck credentials # You can use these credentials to authenticate the following nodes: Mailcheck Prerequisites # Create a Mailcheck account. Supported authentication methods # API key Related resources # Refer to Mailcheck's API documentation for more information about the service. Using API Key # To configure this credential, you'll need: An API Key : Generate an API Key in the API section of your dashboard. Refer to Mailcheck's How to create an API key documentation for detailed instructions. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/mailerlite/

MailerLite credentials # You can use these credentials to authenticate the following nodes: MailerLite MailerLite Trigger Prerequisites # Create a MailerLite account. Supported authentication methods # API key Related resources # Refer to MailerLite's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Generate an API key from the Integrations menu. Refer to the API Authentication documentation for more detailed instructions. Enable the Classic API toggle if the API key is for a MailerLite Classic account instead of the newer MailerLite experience. Note Most new MailerLite accounts and all free accounts should disable the Classic API toggle. You can find out which version of MailerLite you are using and learn more about the differences between the two in the MailerLite FAQ . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/mailgun/

Mailgun credentials # You can use these credentials to authenticate the following nodes: Mailgun Prerequisites # Create a Mailgun account. Add and verify a domain in Mailgun or use the provided sandbox domain for testing. Supported authentication methods # API key Related resources # Refer to Mailgun's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Domain : If your Mailgun account is based in Europe, select api.eu.mailgun.net ; otherwise, select api.mailgun.net . Refer to Mailgun Base URLs for more information. An Email Domain : Enter the email sending domain you're working with. If you have multiple sending domains, refer to Working with multiple email domains for more information. An API Key : View your API key in Settings > API Keys . Refer to Mailgun's API Authentication documentation for more detailed instructions. Working with multiple email domains # If your Mailgun account includes multiple sending domains, create a separate credential for each email domain you're working with. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/mailjet/

Mailjet credentials # You can use these credentials to authenticate the following nodes: Mailjet Mailjet Trigger Prerequisites # Create a Mailjet account. Supported authentication methods # Email API key: For use with Mailjet's Email API SMS token: For use with Mailjet's SMS API Related resources # Refer to Mailjet's Email API documentation and Mailjet's SMS API documentation for more information about each service. Using Email API key # To configure this credential, you'll need: An API Key : View and generate API keys in your Mailjet API Key Management page. A Secret Key : View your API Secret Keys in your Mailjet API Key Management page. Optional: Select whether to use Sandbox Mode for calls made using this credential. When turned on, all API calls use Sandbox mode: the API will still validate the payloads but won't deliver the actual messages. This can be useful to troubleshoot any payload error messages without actually sending messages. Refer to Mailjet's Sandbox Mode documentation for more information. For this credential, you can use either: Mailjet's primary API key and secret key A subaccount API key and secret key Refer to Mailjet's How to create a subaccount (or additional API key) documentation for detailed instructions on creating more API keys. Refer to What are subaccounts and how does it help me? page for more information on Mailjet subaccounts and when you might want to use one. Using SMS Token # To configure this credential, you'll need: An access Token : Generate a new token from Mailjet's SMS Dashboard . Refer to the SMS API Getting Started guide for more detailed instructions. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/marketstack/

Marketstack credentials # You can use these credentials to authenticate the following nodes: Marketstack Prerequisites # Create a Marketstack account. Supported authentication methods # API key Related resources # Refer to Marketstack's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : View and generate API keys in your Marketstack account dashboard . Select whether to Use HTTPS : Make this selection based on your Marketstack account plan level: Free plan: Turn off Use HTTPS All other plans: Turn on Use HTTPS Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/mattermost/

Mattermost credentials # You can use these credentials to authenticate the following nodes: Mattermost Supported authentication methods # API access token Related resources # Refer to Mattermost's API documentation for more information about the service. Using API access token # To configure this credential, you'll need a Mattermost account and: A personal Access Token Your Mattermost Base URL . To set it up: In Mattermost, go to Profile > Security > Personal Access Tokens . No Personal Access Tokens option If you don't see the Personal Access Tokens option, refer to the troubleshooting steps in Enable personal access tokens below. Select Create Token . Enter a Token description , like n8n integration . Select Save . Copy the Token ID and enter it as the Access Token in your n8n credential. Enter your Mattermost URL as the Base URL . By default, n8n connects only if SSL certificate validation succeeds. To connect even if SSL certificate validation fails, turn on Ignore SSL Issues . Refer to the Mattermost Personal access tokens documentation for more information. Enable personal access tokens # Not seeing the Personal Access Tokens option has two possible causes: Mattermost doesn't have the personal access tokens integration enabled. You're trying to generate a personal access token as a non-admin user who doesn't have permission to generate personal access tokens. To identify the root cause and resolve it: Log in to Mattermost as an admin. Go to System Console > Integrations > Integration Management . Confirm that Enable personal access tokens is set to true . If it's not, change. Go to System Console > User Management > Users . Search for the user account you want to allow to generate personal access tokens. Select the Actions dropdown for the user and select Manage roles . Check the box for Allow this account to generate personal access tokens and Save . Refer to the Mattermost Personal access tokens documentation for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/mautic/

Mautic credentials # You can use these credentials to authenticate the following nodes: Mautic Mautic Trigger Supported authentication methods # Basic auth OAuth2 Related resources # Refer to Mautic's API documentation for more information about the service. Using basic auth # API enabled To set up this credential, your Mautic instance must have the API enabled. Refer to Enable the API for instructions. To configure this credential, you'll need an account on a Mautic instance and: Your URL A Username A Password To set it up: In Mautic, go to Configuration > API Settings . If Enable HTTP basic auth? is set to No , change it to Yes and save. Refer to the API Settings documentation for more information. In n8n, enter the Base URL of your Mautic instance. Enter your Mautic Username . Enter your Mautic Password . Using OAuth2 # API enabled To set up this credential, your Mautic instance must have the API enabled. Refer to Enable the API for instructions. To configure this credential, you'll need an account on a Mautic instance and: A Client ID : Generated when you create new API credentials. A Client Secret : Generated when you create new API credentials. Your URL To set it up: In Mautic, go to Configuration > Settings . Select API Credentials . No API Credentials menu If you don't see the API Credentials option under Configuration > Settings , be sure to Enable the API . If you've enabled the API and you still don't see the option, try manually clearing the cache . Select the option to Create new client . Select OAuth 2 as the Authorization Protocol . Enter a Name for your credential, like n8n integration . In n8n, copy the OAuth Callback URL and enter it as the Redirect URI in Mautic. Select Apply . Copy the Client ID from Mautic and enter it in your n8n credential. Copy the Client Secret from Mautic and enter it in your n8n credential. Enter the Base URL of your Mautic instance. Refer to What is Mautic's API? for more information. Enable the API # To enable the API in your Mautic instance: Go to Settings > Configuration . Select API Settings . Set API enabled? to Yes . Save your changes. Refer to How to use the Mautic API for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/medium/

Medium credentials # You can use these credentials to authenticate the following nodes: Medium Medium API no longer supported Medium has stopped supporting the Medium API. These credentials still appear within n8n, but you can't configure new integrations using them. Prerequisites # Create an account on Medium . For OAuth2, request access to credentials by emailing yourfriends@medium.com . Supported authentication methods # API access token OAuth2 Related resources # Refer to Medium's API documentation for more information about the service. Using API access token # To configure this credential, you'll need: An API Access Token : Generate a token in Settings > Security and apps > Integration tokens . Use the integration token this generates as your n8n Access Token . Refer to the Medium API Self-issued access tokens documentation for more information. Using OAuth2 # To configure this credential, you'll need: A Client ID A Client Secret To generate a Client ID and Client Secret , you'll need access to the Developers menu. From there, create a new application to generate the Client ID and Secret. Use these settings for your new application: Select OAuth 2 as the Authorization Protocol Copy the OAuth Callback URL from n8n and use this as the Callback URL in Medium. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/metabase/

Metabase credentials # You can use these credentials to authenticate the following nodes: Metabase node Prerequisites # Create a Metabase account with access to a Metabase instance. Supported authentication methods # Basic auth Related resources # Refer to Metabase's API documentation for more information about the service. Using basic auth # To configure this credential, you'll need: A URL : Enter the base URL of your Metabase instance. If you're using a custom domain, use that URL. A Username : Enter your Metabase username. A Password : Enter your Metabase password. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/microsoftentra/

Microsoft Entra ID credentials # You can use these credentials to authenticate the following nodes: Microsoft Entra ID Prerequisites # Create a Microsoft Entra ID account or subscription. If the user account is managed by a corporate Microsoft Entra account, the administrator account has enabled the option “User can consent to apps accessing company data on their behalf” for this user (see the Microsoft Entra documentation ). Microsoft includes an Entra ID free plan when you create a Microsoft Azure account. Supported authentication methods # OAuth2 Related resources # Refer to Microsoft Entra ID's documentation for more information about the service. Using OAuth2 # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. For self-hosted users, there are two main steps to configure OAuth2 from scratch: Register an application with the Microsoft Identity Platform. Generate a client secret for that application. Follow the detailed instructions for each step below. For more detail on the Microsoft OAuth2 web flow, refer to Microsoft authentication and authorization basics . Register an application # Register an application with the Microsoft Identity Platform: Open the Microsoft Application Registration Portal . Select Register an application . Enter a Name for your app. In Supported account types , select Accounts in any organizational directory (Any Azure AD directory - Multi-tenant) and personal Microsoft accounts (for example, Skype, Xbox) . In Register an application : Copy the OAuth Callback URL from your n8n credential. Paste it into the Redirect URI (optional) field. Select Select a platform > Web . Select Register to finish creating your application. Copy the Application (client) ID and paste it into n8n as the Client ID . Refer to Register an application with the Microsoft Identity Platform for more information. Generate a client secret # With your application created, generate a client secret for it: On your Microsoft application page, select Certificates & secrets in the left navigation. In Client secrets , select + New client secret . Enter a Description for your client secret, such as n8n credential . Select Add . Copy the Secret in the Value column. Paste it into n8n as the Client Secret . Select Connect my account in n8n to finish setting up the connection. Log in to your Microsoft account and allow the app to access your info. Refer to Microsoft's Add credentials for more information on adding a client secret. Common issues # Here are the known common errors and issues with Microsoft Entra credentials. Need admin approval # When attempting to add credentials for a Microsoft360 or Microsoft Entra account, users may see a message when following the procedure that this action requires admin approval. This message will appear when the account attempting to grant permissions for the credential is managed by a Microsoft Entra. In order to issue the credential, the administrator account needs to grant permission to the user (or "tenant") for that application. The procedure for this is covered in the Microsoft Entra documentation . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/microsoftsql/

Microsoft SQL credentials # You can use these credentials to authenticate the following nodes: Microsoft SQL Prerequisites # Create a user account on a Microsoft SQL server database. Supported authentication methods # SQL database connection Related resources # Refer to Microsoft's Connect to SQL Server documentation for more information about connecting to the service. Using SQL database connection # To configure this credential, you'll need: The Server name The Database name Your User account/ID Your Password The Port to use for the connection The Domain name Whether to use TLS Whether to Ignore SSL Issues The Connect Timeout The Request Timeout The TDS Version the connection should use To set up the database connection: Enter the SQL Server Host Name as the Server . In an existing SQL Server connection, the host name comes before the instance name in the format HOSTNAME\INSTANCENAME . Find the host name: In the Object Explorer pane as the top-level object for your database. In the footer of a query window. Viewing the current connection Properties and looking for Name or Display Name . Refer to Find SQL Server Instance Name | When you're connected to SQL Server for more information. You can also find the information in the Error logs . Enter the SQL Server Instance Name as the Database name. Find this name using the same steps listed above for finding the host name. If you don't see an instance name in any of these places, then your database uses the default MSSQLSERVER instance name. Enter your User account name or ID. Enter your Password . For the Port : SQL Server defaults to 1433 . If you can't connect over port 1433, check the Error logs for the phrase Server is listening on to identify the port number you should enter. You only need to enter the Domain name if users in multiple domains access your database. Run this SQL query to get the domain name: 1 SELECT DEFAULT_DOMAIN ()[ DomainName ]; Select whether to use TLS . Select whether to Ignore SSL Issues : If turned on, the credential will connect even if SSL certificate validation fails. Enter the number of milliseconds n8n should attempt the initial connection to complete before disconnecting as the Connect Timeout . Refer to the SqlConnection.ConnectionTimeout property documentation for more information. SQL Server stores this timeout as seconds, while n8n stores it as milliseconds. If you're copying your SQL Server defaults, multiple by 100 before entering the number here. Enter the number of milliseconds n8n should wait on a given request before timing out as the Request Timeout . This is basically a query timeout parameter. Refer to Troubleshoot query time-out errors for more information. Select the Tabular Data Stream (TDS) protocol to use from the TDS Version dropdown. If the server doesn't support the version you select here, the connection uses a negotiated alternate version. Refer to Appendix A: Product Behavior for a more detailed breakdown of the TDS versions' compatibility with different SQL Server versions and .NET frameworks. Options include: 7_4 (SQL Server 2012 ~ 2019) : TDS version 7.4. 7_3_B (SQL Server 2008R2) : TDS version 7.3.B. 7_3_A (SQL Server 2008) : TDS version 7.3.A. 7_2 (SQL Server 2005) : TDS version 7.2. 7_1 (SQL Server 2000) : TDS version 7.1. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/microsoft/

Microsoft credentials # You can use these credentials to authenticate the following nodes: Microsoft Dynamics CRM Microsoft Excel Microsoft Graph Security Microsoft OneDrive Microsoft Outlook Microsoft Teams Microsoft To Do Prerequisites # Create a Microsoft Azure account. Create at least one user account with access to the appropriate service. If the user account is managed by a corporate Microsoft Entra account, the administrator account has enabled the option “User can consent to apps accessing company data on their behalf” for this user (see the Microsoft Entra documentation ). Supported authentication methods # OAuth2 Related resources # Refer to the linked Microsoft API documentation below for more information about each service's API: Dynamics CRM: Web API Excel: Graph API Graph Security: Graph API OneDrive: Graph API Outlook: Graph API and Outlook API Teams: Graph API To Do: Graph API Using OAuth2 # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. Some Microsoft services require extra information for OAuth2. Refer to Service-specific settings for more guidance on those services. For self-hosted users, there are two main steps to configure OAuth2 from scratch: Register an application with the Microsoft Identity Platform. Generate a client secret for that application. Follow the detailed instructions for each step below. For more detail on the Microsoft OAuth2 web flow, refer to Microsoft authentication and authorization basics . Register an application # Register an application with the Microsoft Identity Platform: Open the Microsoft Application Registration Portal . Select Register an application . Enter a Name for your app. In Supported account types , select Accounts in any organizational directory (Any Azure AD directory - Multi-tenant) and personal Microsoft accounts (for example, Skype, Xbox) . In Register an application : Copy the OAuth Callback URL from your n8n credential. Paste it into the Redirect URI (optional) field. Select Select a platform > Web . Select Register to finish creating your application. Copy the Application (client) ID and paste it into n8n as the Client ID . Refer to Register an application with the Microsoft Identity Platform for more information. Generate a client secret # With your application created, generate a client secret for it: On your Microsoft application page, select Certificates & secrets in the left navigation. In Client secrets , select + New client secret . Enter a Description for your client secret, such as n8n credential . Select Add . Copy the Secret in the Value column. Paste it into n8n as the Client Secret . If you see other fields in the n8n credential, refer to Service-specific settings below for guidance on completing those fields. Select Connect my account in n8n to finish setting up the connection. Log in to your Microsoft account and allow the app to access your info. Refer to Microsoft's Add credentials for more information on adding a client secret. Service-specific settings # The following services require extra information for OAuth2: Dynamics # Dynamics OAuth2 requires information about your Dynamics domain and region. Follow these extra steps to complete the credential: Enter your Dynamics Domain . Select the Dynamics data center Region you're within. Refer to the Microsoft Datacenter regions documentation for more information on the region options and corresponding URLs. Microsoft (general) # The general Microsoft OAuth2 also requires you to provide a space-separated list of Scope s for this credential. Refer to Scopes and permissions in the Microsoft identity platform for a list of possible scopes. Outlook # Outlook OAuth2 supports the credential accessing a user's primary email inbox or a shared inbox. By default, the credential will access a user's primary email inbox. To change this behavior: Turn on Use Shared Inbox . Enter the target user's UPN or ID as the User Principal Name . SharePoint # SharePoint OAuth2 requires information about your SharePoint Subdomain . To complete the credential, enter the Subdomain part of your SharePoint URL. For example, if your SharePoint URL is https://tenant123.sharepoint.com , the subdomain is tenant123 . Common issues # Here are the known common errors and issues with Microsoft OAuth2 credentials. Need admin approval # When attempting to add credentials for a Microsoft360 or Microsoft Entra account, users may see a message when following the procedure that this action requires admin approval. This message will appear when the account attempting to grant permissions for the credential is managed by a Microsoft Entra. In order to issue the credential, the administrator account needs to grant permission to the user (or "tenant") for that application. The procedure for this is covered in the Microsoft Entra documentation . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/mindee/

Mindee credentials # You can use these credentials to authenticate the following nodes: Mindee Prerequisites # Create a Mindee account. Supported authentication methods # Invoice API key: For use with the Invoice OCR API Receipt API key: For use with the Receipt OCR API Related resources # Refer to Mindee's Invoice OCR API documentation and Mindee's Receipt OCR API documentation for more information about each service. Using invoice API key # To configure this credential, you'll need: An API Key : Refer to the Mindee Create & Manage API Keys documentation for instructions on creating API keys. Using receipt API key # To configure this credential, you'll need: An API Key : Refer to the Mindee Create & Manage API Keys documentation for instructions on creating API keys. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/misp/

MISP credentials # You can use these credentials to authenticate the following nodes: MISP Prerequisites # Install and run a MISP instance. Supported authentication methods # API key Related resources # Refer to MISP's Automation API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : In MISP, these are called Automation keys. Get an automation key from Event Actions > Automation . Refer to MISP's automation keys documentation for instructions on generating more keys. A Base URL : Your MISP URL. Select whether to Allow Unauthorized Certificates : If turned on, the credential will connect even if SSL certificate validation fails. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/mistral/

Mistral Cloud credentials # You can use these credentials to authenticate the following nodes: Mistral Cloud Embeddings Mistral Cloud Prerequisites # Create a Mistral La Plateforme account. You must add payment information in Workspace > Billing and activate payments to enable API keys. Refer to Account setup for more information. Supported authentication methods # API key Related resources # Refer to Mistral's API documentation for more information about the APIs. View n8n's Advanced AI documentation. Using API key # To configure this credential, you'll need: An API Key Once you've added payment information to your Mistral Cloud account: Sign in to your Mistral account . Go to the API Keys page. Select Create new key . Copy the API key and enter it in your n8n credential. Refer to Account setup for more information. Paid account required Mistral requires you to add payment information and activate payments to use API keys. Refer to the Prerequisites section above for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/mist/

Mist credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create a Mist account and organization. Refer to Create a Mist account and Organization for detailed instructions. Supported authentication methods # API token Related resources # Refer to Mist's documentation for more information about the service. If you're logged in to your Mist account, go to https://api.mist.com/api/v1/docs/Home to view the full API documentation. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using API token # To configure this credential, you'll need: An API Token : You can use either a User API token or an Org API token. Refer to How to generate a user API token for instructions on generating a User API token. Refer to Org API token for instructions on generating an Org API token. Select the Region you're in. Options include: Europe : Select this option if your cloud environment is in any of the EMEA regions. Global : Select this option if your cloud environment is in any of the global regions. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/mocean/

Mocean credentials # You can use these credentials to authenticate the following nodes: Mocean Prerequisites # Create a Mocean account. Supported authentication methods # API key Related resources # Refer to Mocean's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key An API Secret Both the key and secret are accessible in your Mocean Dashboard . Refer to API Authentication for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/mondaycom/

monday.com credentials # You can use these credentials to authenticate the following nodes: monday.com Minimum required version The monday.com node requires n8n version 1.22.6 or above. Supported authentication methods # API token OAuth2 Related resources # Refer to monday.com's API documentation for more information about authenticating with the service. Using API token # To configure this credential, you'll need a monday.com account and: An API Token V2 To get your token: In your monday.com account, select your profile picture in the top right corner. Select Developers . The Developer Center opens in a new tab. In the Developer Center, select My Access Tokens > Show . Copy your personal token and enter it in your n8n credential as the Token V2 . Refer to monday.com API Authentication for more information. Using OAuth2 # To configure this credential, you'll need a monday.com account and: A Client ID A Client Secret To generate both these fields, register a new monday.com application: In your monday.com account, select your profile picture in the top right corner. Select Developers . The Developer Center opens in a new tab. In the Developer Center, select Build app . The app details open. Enter a Name for your app, like n8n integration . Copy the Client ID and enter it in your n8n credential. Show the Client Secret , copy it, and enter it in your n8n credential. In the left menu, select OAuth . For Scopes , select boards:write and boards:read . Select Save Scopes . Select the Redirect URLs tab. Copy the OAuth Redirect URL from n8n and enter it as the Redirect URL . Save your changes in monday.com. In n8n, select Connect my account to finish the setup. Refer to Create an app for more information on creating apps. Refer to OAuth and permissions for more information on the available scopes and setting up the Redirect URL. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/mongodb/

MongoDB credentials # You can use these credentials to authenticate the following nodes: MongoDB Prerequisites # Create a user account with the appropriate permissions on a MongoDB server. As a Project Owner, add all the n8n IP addresses to the IP Access List Entries in the project's Network Access . Refer to Add IP Access List entries for detailed instructions. If you are setting up MongoDB from scratch, create a cluster and a database. Refer to the MongoDB Atlas documentation for more detailed instructions on these steps. Supported authentication methods # Database connection - Connection string Database connection - Values Related resources # Refer to the MongoDBs Atlas documentation for more information about the service. Using database connection - Connection string # To configure this credential, you'll need the Prerequisites listed above. Then: Select Connection String as the Configuration Type . Enter your MongoDB Connection String . To get your connection string in MongoDB, go to Database > Connect . Select Drivers . Copy the code you see in Add your connection string into your application code . It will be something like: mongodb+srv://yourName:yourPassword@clusterName.mongodb.net/?retryWrites=true&w=majority . Replace the <password> and <username> in the connection string with the database user's credentials you'll be using. Enter that connection string into n8n. Refer to Connection String for information on finding and formatting your connection string. Enter your Database name. This is the name of the database that the user whose details you added to the connection string is logging into. Select whether to Use TLS : Turn on to use TLS. You must have your MongoDB database configured to use TLS and have an x.509 certificate generated. Add information for these certificate fields in n8n: CA Certificate Public Client Certificate Private Client Key Passphrase Refer to MongoDB's x.509 documentation for more information on working with x.509 certificates. Using database connection - Values # To configure this credential, you'll need the Prerequisites listed above. Then: Select Values as the Configuration Type . Enter the database Host name or address. Enter the Database name. Enter the User you'd like to log in as. Enter the user's Password . Enter the Port to connect over. This is the port number your server uses to listen for incoming connections. Select whether to Use TLS : Turn on to use TLS. You must have your MongoDB database configured to use TLS and have an x.509 certificate generated. Add information for these certificate fields in n8n: CA Certificate Public Client Certificate Private Client Key Passphrase Refer to MongoDB's x.509 documentation for more information on working with x.509 certificates. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/monicacrm/

Monica CRM credentials # You can use these credentials to authenticate the following nodes: Monica CRM Prerequisites # Sign up for a Monica CRM account or self-host an instance. Supported authentication methods # API token Related resources # Refer to Monica's API documentation for more information about the service. Using API token # To configure this credential, you'll need: Your Environment : Select Cloud-Hosted if you access your Monica instance through Monica. Select Self-Hosted if you have self-hosted Monica on your own server. Provide your Self-Hosted Domain . An API Token : Generate a token in Settings > API . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/motorhead/

Motorhead credentials # You can use these credentials to authenticate the following nodes: Motorhead Supported authentication methods # API key Related resources # Refer to Motorhead's API documentation for more information about the service. View n8n's Advanced AI documentation. Using API key # To configure this credential, you'll need a Motorhead account and: Your Host URL An API Key A Client ID To set it up, you'll generate an API key: If you're self-hosting Motorhead, update the Host URL to match your Motorhead URL. In Motorhead, go to Settings > Organization . In the API Keys section, select Create . Enter a Name for your API Key, like n8n integration . Select Generate . Copy the apiKey and enter it in your n8n credential. Return to the API key list. Copy the clientID for the key and enter it as the Client ID in your n8n credential. Refer to Generate an API key for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/mqtt/

MQTT credentials # You can use these credentials to authenticate the following nodes: MQTT MQTT Trigger Prerequisites # Install an MQTT broker . MQTT provides a list of Servers/Brokers at MQTT Software . Supported authentication methods # Broker connection Related resources # Refer to MQTT's documentation for more information about the MQTT protocol. Refer to your broker provider's documentation for more detailed configuration and details. Using broker connection # To configure this credential, you'll need: Your MQTT broker's Protocol The Host The Port A Username and Password to authenticate with If you're using SSL , the relevant certificates and keys To set things up: Select the broker's Protocol , which determines the URL n8n uses. Options include: Mqtt : Begin the URL with the standard mqtt: protocol. Mqtts : Begin the URL with the secure mqtts: protocol. Ws : Begin the URL with the WebSocket ws: protocol. Enter your broker Host . Enter the Port number n8n should use to connect to the broker host. Enter the Username to log into the broker as. Enter that user's Password . If you want to receive QoS 1 and 2 messages while offline, turn off the Clean Session toggle. Enter a Client ID you'd like the credential to use. If you leave this blank, n8n will generate one for you. You can use a fixed or expression-based Client ID. Client IDs can be useful to identify and track connection access. n8n recommends using something with n8n in it for easier auditing. If your MQTT broker uses SSL, turn the SSL toggle on. Once you turn it on: Select whether to use Passwordless connection with certificates, which is like the SASL mechanism EXTERNAL. If turned on: Select whether to Reject Unauthorized Certificate : If turned off, n8n will connect even if the certificate validation fails. Add an SSL Client Certificate . Add an SSL Client Key for the Client Certificate. One or more SSL CA Certificates . Refer to your MQTT broker provider's documentation for more detailed configuration instructions. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/mysql/

MySQL credentials # You can use these credentials to authenticate the following nodes: MySQL Agent Agent node users The Agent node doesn't support SSH tunnels. Prerequisites # Create a user account on a MySQL server database. Supported authentication methods # Database connection Related resources # Refer to MySQL's documentation for more information about the service. Using database connection # To configure this credential, you'll need: The server Host : The database's host name or IP address. The Database name. A User name. A Password for that user. The Port number used by the MySQL server. Connect Timeout : The number of milliseconds during the initial database connection before a timeout occurs. SSL : If your database is using SSL, turn this on and add details for the SSL certificate. SSH Tunnel : Choose whether to connect over an SSH tunnel. An SSH tunnel lets un-encrypted traffic pass over an encrypted connection and enables authorized remote access to servers protected from outside connections by a firewall. To set up your database connection credential: Enter your database's hostname as the Host in your n8n credential. Run this query to confirm the hostname: 1 SHOW VARIABLES WHERE Variable_name = 'hostname'; Enter your database's name as the Database in your n8n credential. Run this query to confirm the database name: 1 SHOW DATABASES; Enter the username of a User in the database. This user should have appropriate permissions for whatever actions you want n8n to perform. Enter the Password for that user. Enter the Port number used by the MySQL server (default is 3306 ). Run this query to confirm the port number: 1 SHOW VARIABLES WHERE Variable_name = 'port'; Enter the Connect Timeout you'd like the node to use. The Connect Timeout is the number of milliseconds during the initial database connection the node should wait before timing out. n8n defaults to 1000 which is the default used by MySQL of 10 seconds. If you want to match your database's connect_timeout , run this query to get it, then multiply by 100 before entering it in n8n: 1 SHOW VARIABLES WHERE Variable_name = 'connect_timeout'; If your database uses SSL and you'd like to use SSL for the connection, turn this option on in the credential. If you turn it on, enter the information from your MySQL SSL certificate in these fields: Enter the ca.pem file contents in the CA Certificate field. Enter the client-key.pem file contents in the Client Private Key field. Enter the client-cert.pem file contents in the Client Certificate field. If you want to use SSH Tunnel for the connection, turn this option on in the credential. Otherwise, skip it. If you turn it on: Select the SSH Authenticate with to set the SSH Tunnel type to build: Select Password if you want to connect to SSH using a password. Select Private Key if you want to connect to SSH using an identity file (private key) and a passphrase. Enter the SSH Host . n8n uses this host to create the SSH URI formatted as: [user@]host:port . Enter the SSH Port . n8n uses this port to create the SSH URI formatted as: [user@]host:port . Enter the SSH User to connect with. n8n uses this user to create the SSH URI formatted as: [user@]host:port . If you selected Password for SSH Authenticate with , add the SSH Password . If you selected Private Key for SSH Authenticate with : Add the contents of the Private Key or identity file used for SSH. This is the same as using the ssh-identity-file option with the shell-connect() command in MySQL. If the Private Key was created with a passphrase, enter that Passphrase . This is the same as using the ssh-identity-pass option with the shell-connect() command in MySQL. If the Private Key has no passphrase, leave this field blank. Refer to MySQL | Creating SSL and RSA Certificates and Keys for more information on working with SSL certificates in MySQL. Refer to MySQL | Using an SSH Tunnel for more information on working with SSH tunnels in MySQL. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/nasa/

NASA credentials # You can use these credentials to authenticate the following nodes: NASA Supported authentication methods # API key Related resources # Refer to the Browse APIs section of the NASA Open APIs for more information about the service. Using an API key # To configure this credential, you'll need: An API Key To generate an API key: Go to the NASA Open APIs page. Complete the fields in the Generate API Key section. Copy the API Key and enter it in your n8n credential. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/netlify/

Netlify credentials # You can use these credentials to authenticate the following nodes: Netlify Netlify Trigger Prerequisites # Create a Netlify account. Supported authentication methods # API access token Related resources # Refer to Netlify's API documentation for more information about the service. Using API access token # To configure this credential, you'll need: An Access Token : Generate an Access Token in Applications > Personal Access Tokens . Refer to Netlify API Authentication for more detailed instructions. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/netscaleradc/

Netscaler ADC credentials # You can use these credentials to authenticate the following nodes: Netscaler ADC node Prerequisites # Install a NetScaler/Citrix ADC appliance . Supported authentication methods # Basic auth Related resources # Refer to Netscaler ADC's 14.1 NITRO API documentation for more information about the service. Using basic auth # To configure this credential, you'll need: A URL : Enter the URL of your NetScaler/Citrix ADC instance. A Username : Enter your NetScaler/Citrix ADC username. A Password : Enter your NetScaler/Citrix ADC password. Refer to Performing Basic Netscaler ADC Operations for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/nextcloud/

Nextcloud credentials # You can use these credentials to authenticate the following nodes: Nextcloud Supported authentication methods # Basic auth OAuth2 Related resources # Refer to Nextcloud's API documentation for more information about the service. Refer to Nextcloud's user manual for more information on installing and configuring Nextcloud. Using basic auth # To configure this credential, you'll need a Nextcloud account and: Your Web DAV URL Your User name Your Password or an app password To set it up: To create your Web DAV URL : If Nextcloud is in the root of your domain: Enter the URL you use to access Nextcloud and add /remote.php/webdav/ . For example, if you access Nextcloud at https://cloud.n8n.com , your WebDAV URL is https://cloud.n8n.com/remote.php/webdav . If you have Nextcloud installed in a subdirectory, enter the URL you use to access Nextcloud and add /<subdirectory>/remote.php/webdav/ . Replace <subdirectory> with the subdirectory Nextcloud's installed in. Refer to Nextcloud's Third-party WebDAV clients documentation for more information on constructing your WebDAV URL. Enter your User name. For the Password , Nextcloud recommends using an app password rather than your user password. To create an app password: In the Nextcloud Web interface, select your avatar in the top right and select Personal settings . In the left menu, choose Security . Scroll to the bottom to the App Password section and create a new app password. Copy that app password and enter it in n8n as your Password . Using OAuth2 # To configure this credential, you'll need a Nextcloud account and: An Authorization URL and Access Token URL : These depend on the URL you use to access Nextcloud. A Client ID : Generated once you add an OAuth2 client application in Administrator Security Settings . A Client Secret : Generated once you add an OAuth2 client application in Administrator Security Settings . A Web DAV URL : This depends on the URL you use to access Nextcloud. To set it up: In Nextcloud, open your Administrator Security Settings . Find the Add client section under OAuth 2.0 clients . Enter a Name for your client, like n8n integration . Copy the OAuth Callback URL from n8n and enter it as the Redirection URI . Then select Add in Nextcloud. In n8n, update the Authorization URL to replace https://nextcloud.example.com with the URL you use to access Nextcloud. For example, if you access Nextcloud at https://cloud.n8n.com , the Authorization URL is https://cloud.n8n.com/apps/oauth2/authorize . In n8n, update the Access Token URL to replace https://nextcloud.example.com with the URL you use to access Nextcloud. For example, if you access Nextcloud at https://cloud.n8n.com , the Access Token URL is https://cloud.n8n.com/apps/oauth2/api/v1/token . Pretty URL configuration The Authorization URL and Access Token URL assume that you've configured Nextcloud to use Pretty URLs . If you haven't, you must add /index.php/ between your Nextcloud URL and the /apps/oauth2 portion, for example: https://cloud.n8n.com/index.php/apps/oauth2/api/v1/token . Copy the Nextcloud Client Identifier for your OAuth2 client and enter it as the Client ID in n8n. Copy the Nextcloud Secret and enter it as the Client Secret in n8n. In n8n, to create your Web DAV URL : If Nextcloud is in the root of your domain, enter the URL you use to access Nextcloud and add /remote.php/webdav/ . For example, if you access Nextcloud at https://cloud.n8n.com , your WebDAV URL is https://cloud.n8n.com/remote.php/webdav . If you have Nextcloud installed in a subdirectory, enter the URL you use to access Nextcloud and add /<subdirectory>/remote.php/webdav/ . Replace <subdirectory> with the subdirectory Nextcloud's installed in. Refer to Nextcloud's Third-party WebDAV clients documentation for more information on constructing your WebDAV URL. Refer to the Nextcloud OAuth2 Configuration documentation for more detailed instructions. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/nocodb/

NocoDB credentials # You can use these credentials to authenticate the following nodes: NocoDB Supported authentication methods # API token (recommended) User auth token User auth token deprecation NocoDB deprecated user auth tokens in v0.205.1. Use API tokens instead. Related resources # Refer to NocoDB's API documentation for more information about the service. Using API token # To configure this credential, you'll need a NocoDB instance and: An API Token Your database Host To generate an API token: Log into NocoDB and select the User menu in the bottom left sidebar. Select Account Settings . Open the Tokens tab. Select Add new API token . Enter a Name for your token, like n8n integration . Select Save . Copy the API Token and enter it in your n8n credential. Enter the Host of your NocoDB instance in your n8n credential, for example http://localhost:8080 . Refer to the NocoDB API Tokens documentation for more detailed instructions. Using user auth token # Before NocoDB deprecated it, user auth token was a temporary token designed for quick experiments with the API, valid for a session until the user logs out or for 10 hours. User auth token deprecation NocoDB deprecated user auth tokens in v0.205.1. Use API tokens instead. To configure this credential, you'll need a NocoDB instance and: A User Token Your database Host To generate a user auth token: Log into NocoDB and select the User menu in the bottom left sidebar. Select Copy Auth token . Enter that auth token as the User Token in n8n. Enter the Host of your NocoDB instance, for example http://localhost:8080 . Refer to the NocoDB Auth Tokens documentation for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/notion/

Notion credentials # You can use these credentials to authenticate the following nodes: Notion Notion Trigger Prerequisites # Create a Notion account with admin level access. Supported authentication methods # API integration token: Used for internal integrations. OAuth2: Used for public integrations. Integration type Not sure which integration type to use? Refer to Internal vs. public integrations below for more information. Related resources # Refer to Notion's API documentation for more information about the service. Using API integration token # To configure this credential, you'll need: An Internal Integration Secret : Generated once you create a Notion integration. To generate an integration secret, create a Notion integration and grab the integration secret from the Secrets tab: Go to your Notion integration dashboard . Select the + New integration button. Enter a Name for your integration, for example n8n integration . If desired, add a Logo . Select Submit to create your integration. Open the Capabilities tab. Select these capabilities: Read content Update content Insert content User information without email addresses Be sure to Save changes . Select the Secrets tab. Copy the Internal Integration Token and add it as your n8n Internal Integration Secret . Refer to the Internal integration auth flow setup documentation for more information about authenticating to the service. Share Notion page(s) with the integration # For your integration to interact with Notion, you must give your integration page permission to interact with page(s) in your Notion workspace: Visit the page in your Notion workspace. Select the triple dot menu at the top right of a page. In Connections , select Connect to . Use the search bar to find and select your integration from the dropdown list. Once you share at least one page with the integration, you can start making API requests. If the page isn't shared, any API requests made will respond with an error. Refer to Integration permissions for more information. Using OAuth2 # To configure this credential, you'll need: A Client ID : Generated once you configure a public integration. A Client Secret : Generated once you configure a public integration. You must create a Notion integration and set it to public distribution: Go to your Notion integration dashboard . Select the + New integration button. Enter a Name for your integration, for example n8n integration . If desired, add a Logo . Select Submit to create your integration. Open the Capabilities tab. Select these capabilities: Read content Update content Insert content User information without email addresses Select Save changes . Go to the Distribution tab. Turn on the Do you want to make this integration public? control. Enter your company name and website in the Organization Information section. Copy the n8n OAuth Redirect URL and add it to as a Redirect URI in the Notion integration's OAuth Domain & URLs section. Go to the Secrets tab. Copy the Client ID and Client Secret and add them to your n8n credential. Refer to Notion's public integration auth flow setup for more information about authenticating to the service. Internal vs. public integrations # Internal integrations are: Specific to a single workspace. Accessible only to members of that workspace. Ideal for custom workspace enhancements. Internal integrations use a simpler authentication process (the integration secret) and don't require any security review before publishing. Public integrations are: Usable across multiple, unrelated Notion workspaces. Accessible by any Notion user, regardless of their workspace. Ideal for catering to broad use cases. Public integrations use the OAuth 2.0 protocol for authentication. They require a Notion security review before publishing. For a more detailed breakdown of the two integration types, refer to Notion's Internal vs. Public Integrations documentation . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/npm/

npm credentials # You can use these credentials to authenticate the following nodes: npm Prerequisites # Create an npm account. Supported authentication methods # API access token Related resources # Refer to npm's external integrations documentation for more information about the service. Using API access token # To configure this credential, you'll need: An Access Token : Create an access token by selecting Access Tokens from your profile menu. Refer to npm's Creating and viewing access tokens documentation for more detailed instructions. A Registry URL : If you're using a custom npm registry, update the Registry URL to that custom registry. Otherwise, keep the public registry value. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/google/oauth-generic/

Google: OAuth2 generic # This document contains instructions for creating a generic OAuth2 Google credential for use with custom operations . Note for n8n Cloud users For the following nodes, you can authenticate by selecting Sign in with Google in the OAuth section: Google Calendar Google Contacts Google Drive Google Mail Google Sheets Google Sheets Trigger Google Tasks Prerequisites # Create a Google Cloud account. Set up OAuth # There are five steps to connecting your n8n credential to Google services: Create a Google Cloud Console project . Enable APIs . Configure your OAuth consent screen . Create your Google OAuth client credentials . Finish your n8n credential . Create a Google Cloud Console project # First, create a Google Cloud Console project. If you already have a project, jump to the next section: Log in to the Google Cloud Console using your Google credentials. In the top menu, select the project dropdown in the top navigation and select New project or go directly to the New Project page. Enter a Project name and select the Location for your project. Select Create . Check the top navigation and make sure the Select a project dropdown has your project selected. If not, select the project you just created. Check the project dropdown in the Google Cloud top navigation Enable APIs # With your project created, enable the APIs you'll need access to: Access your Google Cloud Console - Library . Make sure you're in the correct project. Check the project dropdown in the Google Cloud top navigation Go to APIs & Services > Library . Search for and select the API(s) you want to enable. For example, for the Gmail node, search for and enable the Gmail API. Some integrations require other APIs or require you to request access: Google Perspective: Request API Access . Google Ads: Get a Developer Token . Google Drive API required The following integrations require the Google Drive API, as well as their own API: Google Docs Google Sheets Google Slides Google Vertex AI API In addition to the Vertex AI API you will also need to enable the Cloud Resource Manager API . Select ENABLE . Configure your OAuth consent screen # If you haven't used OAuth in your Google Cloud project before, you'll need to configure the OAuth consent screen : Access your Google Cloud Console - Library . Make sure you're in the correct project. Check the project dropdown in the Google Cloud top navigation Open the left navigation menu and go to APIs & Services > OAuth consent screen . For User Type , select Internal for user access within your organization's Google workspace or External for any user with a Google account. Refer to Google's User type documentation for more information on user types. Select Create . Enter the essential information: App name User support email Email addresses field in Developer contact information In the Authorized domains section, add n8n.cloud if using n8n's Cloud service. If you're self-hosting , add the domain of your n8n instance. Select SAVE AND CONTINUE to go to the Scopes page. You don't need to set any scopes. Select SAVE AND CONTINUE again to go to the Summary page. On the Summary page, review the information for accuracy. Create your Google OAuth client credentials # Next, create the OAuth client credentials in Google: In the APIs & Services section, select Credentials . Select + CREATE CREDENTIALS > OAuth client ID . In the Application type dropdown, select Web application . Google automatically generates a Name . Update the Name to something you'll recognize in your console. From your n8n credential, copy the OAuth Redirect URL . Paste it into the Authorized redirect URIs in Google Console. Select CREATE . Finish your n8n credential # With the Google project and credentials fully configured, finish the n8n credential: From Google's OAuth client created modal, copy the Client ID . Enter this in your n8n credential. From the same Google modal, copy the Client Secret . Enter this in your n8n credential. You must provide the scopes for this credential. Refer to Scopes for more information. Enter multiple scopes in a space-separated list, for example: 1 https://www.googleapis.com/auth/gmail.labels https://www.googleapis.com/auth/gmail.addons.current.action.compose In n8n, select Sign in with Google to complete your Google authentication. Save your new credentials. Video # The following video demonstrates the steps described above: Scopes # Google services have one or more possible access scopes. A scope limits what a user can do. Refer to OAuth 2.0 Scopes for Google APIs for a list of scopes for all services. n8n doesn't support all scopes. When creating a generic Google OAuth2 API credential, you can enter scopes from the Supported scopes list below. If you enter a scope that n8n doesn't already support, it won't work. Supported scopes Service Available scopes Gmail https://www.googleapis.com/auth/gmail.labels https://www.googleapis.com/auth/gmail.addons.current.action.compose https://www.googleapis.com/auth/gmail.addons.current.message.action https://mail.google.com/ https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.compose Google Ads https://www.googleapis.com/auth/adwords Google Analytics https://www.googleapis.com/auth/analytics https://www.googleapis.com/auth/analytics.readonly Google BigQuery https://www.googleapis.com/auth/bigquery Google Books https://www.googleapis.com/auth/books Google Calendar https://www.googleapis.com/auth/calendar https://www.googleapis.com/auth/calendar.events Google Cloud Natural Language https://www.googleapis.com/auth/cloud-language https://www.googleapis.com/auth/cloud-platform Google Cloud Storage https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only https://www.googleapis.com/auth/devstorage.full_control https://www.googleapis.com/auth/devstorage.read_only https://www.googleapis.com/auth/devstorage.read_write Google Contacts https://www.googleapis.com/auth/contacts Google Docs https://www.googleapis.com/auth/documents https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file Google Drive https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.appdata https://www.googleapis.com/auth/drive.photos.readonly Google Firebase Cloud Firestore https://www.googleapis.com/auth/datastore https://www.googleapis.com/auth/firebase Google Firebase Realtime Database https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/firebase.database https://www.googleapis.com/auth/firebase Google Perspective https://www.googleapis.com/auth/userinfo.email Google Sheets https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets Google Slide https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/presentations Google Tasks https://www.googleapis.com/auth/tasks Google Translate https://www.googleapis.com/auth/cloud-translation GSuite Admin https://www.googleapis.com/auth/admin.directory.group https://www.googleapis.com/auth/admin.directory.user https://www.googleapis.com/auth/admin.directory.domain.readonly https://www.googleapis.com/auth/admin.directory.userschema.readonly Troubleshooting # Google hasn't verified this app # If using the OAuth authentication method, you might see the warning Google hasn't verified this app . To avoid this, you can create OAuth credentials from the same account you want to authenticate. If you need to use credentials generated by another account (by a developer or another third party), follow the instructions in Google Cloud documentation | Authorization errors: Google hasn't verified this app . Google Cloud app becoming unauthorized # For Google Cloud apps with Publishing status set to Testing and User type set to External , consent and tokens expire after seven days. Refer to Google Cloud Platform Console Help | Setting up your OAuth consent screen for more information. To resolve this, reconnect the app in the n8n credentials modal. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/google/oauth-single-service/

Google: OAuth2 single service # This document contains instructions for creating a Google credential for a single service. They're also available as a video . Note for n8n Cloud users For the following nodes, you can authenticate by selecting Sign in with Google in the OAuth section: Google Calendar Google Contacts Google Drive Google Mail Google Sheets Google Sheets Trigger Google Tasks Prerequisites # Create a Google Cloud account. Set up OAuth # There are five steps to connecting your n8n credential to Google services: Create a Google Cloud Console project . Enable APIs . Configure your OAuth consent screen . Create your Google OAuth client credentials . Finish your n8n credential . Create a Google Cloud Console project # First, create a Google Cloud Console project. If you already have a project, jump to the next section: Log in to your Google Cloud Console using your Google credentials. In the top menu, select the project dropdown in the top navigation and select New project or go directly to the New Project page. Enter a Project name and select the Location for your project. Select Create . Check the top navigation and make sure the project dropdown has your project selected. If not, select the project you just created. Check the project dropdown in the Google Cloud top navigation Enable APIs # With your project created, enable the APIs you'll need access to: Access your Google Cloud Console - Library . Make sure you're in the correct project. Check the project dropdown in the Google Cloud top navigation Go to APIs & Services > Library . Search for and select the API(s) you want to enable. For example, for the Gmail node, search for and enable the Gmail API. Some integrations require other APIs or require you to request access: Google Perspective: Request API Access . Google Ads: Get a Developer Token . Google Drive API required The following integrations require the Google Drive API, as well as their own API: Google Docs Google Sheets Google Slides Google Vertex AI API In addition to the Vertex AI API you will also need to enable the Cloud Resource Manager API . Select ENABLE . Configure your OAuth consent screen # If you haven't used OAuth in your Google Cloud project before, you'll need to configure the OAuth consent screen : Access your Google Cloud Console - Library . Make sure you're in the correct project. Check the project dropdown in the Google Cloud top navigation Open the left navigation menu and go to APIs & Services > OAuth consent screen . For User Type , select Internal for user access within your organization's Google workspace or External for any user with a Google account. Refer to Google's User type documentation for more information on user types. Select Create . Enter the essential information: App name User support email Email addresses field in Developer contact information In the Authorized domains section, add n8n.cloud if using n8n's Cloud service. If you're self-hosting , add the domain of your n8n instance. Select SAVE AND CONTINUE to go to the Scopes page. You don't need to set any scopes. Select SAVE AND CONTINUE again to go to the Summary page. On the Summary page, review the information for accuracy. Create your Google OAuth client credentials # Next, create the OAuth client credentials in Google: In the APIs & Services section, select Credentials . Select + CREATE CREDENTIALS > OAuth client ID . In the Application type dropdown, select Web application . Google automatically generates a Name . Update the Name to something you'll recognize in your console. From your n8n credential, copy the OAuth Redirect URL . Paste it into the Authorized redirect URIs in Google Console. Select CREATE . Finish your n8n credential # With the Google project and credentials fully configured, finish the n8n credential: From Google's OAuth client created modal, copy the Client ID . Enter this in your n8n credential. From the same Google modal, copy the Client Secret . Enter this in your n8n credential. In n8n, select Sign in with Google to complete your Google authentication. Save your new credentials. Video # Troubleshooting # Google hasn't verified this app # If using the OAuth authentication method, you might see the warning Google hasn't verified this app . To avoid this, you can create OAuth credentials from the same account you want to authenticate. If you need to use credentials generated by another account (by a developer or another third party), follow the instructions in Google Cloud documentation | Authorization errors: Google hasn't verified this app . Google Cloud app becoming unauthorized # For Google Cloud apps with Publishing status set to Testing and User type set to External , consent and tokens expire after seven days. Refer to Google Cloud Platform Console Help | Setting up your OAuth consent screen for more information. To resolve this, reconnect the app in the n8n credentials modal. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/google/oauth-single-service/#enable-apis

Google: OAuth2 single service # This document contains instructions for creating a Google credential for a single service. They're also available as a video . Note for n8n Cloud users For the following nodes, you can authenticate by selecting Sign in with Google in the OAuth section: Google Calendar Google Contacts Google Drive Google Mail Google Sheets Google Sheets Trigger Google Tasks Prerequisites # Create a Google Cloud account. Set up OAuth # There are five steps to connecting your n8n credential to Google services: Create a Google Cloud Console project . Enable APIs . Configure your OAuth consent screen . Create your Google OAuth client credentials . Finish your n8n credential . Create a Google Cloud Console project # First, create a Google Cloud Console project. If you already have a project, jump to the next section: Log in to your Google Cloud Console using your Google credentials. In the top menu, select the project dropdown in the top navigation and select New project or go directly to the New Project page. Enter a Project name and select the Location for your project. Select Create . Check the top navigation and make sure the project dropdown has your project selected. If not, select the project you just created. Check the project dropdown in the Google Cloud top navigation Enable APIs # With your project created, enable the APIs you'll need access to: Access your Google Cloud Console - Library . Make sure you're in the correct project. Check the project dropdown in the Google Cloud top navigation Go to APIs & Services > Library . Search for and select the API(s) you want to enable. For example, for the Gmail node, search for and enable the Gmail API. Some integrations require other APIs or require you to request access: Google Perspective: Request API Access . Google Ads: Get a Developer Token . Google Drive API required The following integrations require the Google Drive API, as well as their own API: Google Docs Google Sheets Google Slides Google Vertex AI API In addition to the Vertex AI API you will also need to enable the Cloud Resource Manager API . Select ENABLE . Configure your OAuth consent screen # If you haven't used OAuth in your Google Cloud project before, you'll need to configure the OAuth consent screen : Access your Google Cloud Console - Library . Make sure you're in the correct project. Check the project dropdown in the Google Cloud top navigation Open the left navigation menu and go to APIs & Services > OAuth consent screen . For User Type , select Internal for user access within your organization's Google workspace or External for any user with a Google account. Refer to Google's User type documentation for more information on user types. Select Create . Enter the essential information: App name User support email Email addresses field in Developer contact information In the Authorized domains section, add n8n.cloud if using n8n's Cloud service. If you're self-hosting , add the domain of your n8n instance. Select SAVE AND CONTINUE to go to the Scopes page. You don't need to set any scopes. Select SAVE AND CONTINUE again to go to the Summary page. On the Summary page, review the information for accuracy. Create your Google OAuth client credentials # Next, create the OAuth client credentials in Google: In the APIs & Services section, select Credentials . Select + CREATE CREDENTIALS > OAuth client ID . In the Application type dropdown, select Web application . Google automatically generates a Name . Update the Name to something you'll recognize in your console. From your n8n credential, copy the OAuth Redirect URL . Paste it into the Authorized redirect URIs in Google Console. Select CREATE . Finish your n8n credential # With the Google project and credentials fully configured, finish the n8n credential: From Google's OAuth client created modal, copy the Client ID . Enter this in your n8n credential. From the same Google modal, copy the Client Secret . Enter this in your n8n credential. In n8n, select Sign in with Google to complete your Google authentication. Save your new credentials. Video # Troubleshooting # Google hasn't verified this app # If using the OAuth authentication method, you might see the warning Google hasn't verified this app . To avoid this, you can create OAuth credentials from the same account you want to authenticate. If you need to use credentials generated by another account (by a developer or another third party), follow the instructions in Google Cloud documentation | Authorization errors: Google hasn't verified this app . Google Cloud app becoming unauthorized # For Google Cloud apps with Publishing status set to Testing and User type set to External , consent and tokens expire after seven days. Refer to Google Cloud Platform Console Help | Setting up your OAuth consent screen for more information. To resolve this, reconnect the app in the n8n credentials modal. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/odoo/

Odoo credentials # You can use these credentials to authenticate the following nodes: Odoo Supported authentication methods # API key (Recommended) Password Related resources # Refer to Odoo's External API documentation for more information about the service. Refer to the Odoo Getting Started tutorial if you're new to Odoo. Using API key # To configure this credential, you'll need a user account on an Odoo database and: Your Site URL Your Username An API key Your Database name To set up the credential with an API key: Enter your Odoo server or site URL as the Site URL . Enter your Username as it's displayed on your Change password screen in Odoo. To use an API key, go to Your Profile > Preferences > Account Security > Developer API Keys . If you don't have this option, you may need to upgrade your Odoo plan. Refer to Required plan type for more information. Select New API Key . Enter a Description for the key, like n8n integration . Select Generate Key . Copy the key and enter it as the Password or API key in your n8n credential. Enter your Odoo Database name , also known as the instance name. Refer to Odoo API Keys for more information. Using password # To configure this credential, you'll need a user account on an Odoo database and: Your Site URL Your Username Your Password Your Database name To set up the credential with a password: Enter your Odoo server or site URL as the Site URL . Enter your Username as it's displayed on your Change password screen in Odoo. To use a password, enter your user password in the Password or API key field. Enter your Odoo Database name , also known as the instance name. Password compatibility If you try a password credential and it doesn't work for a specific node function, try switching to an API key. Odoo requires an API key for certain modules or based on certain settings. Required plan type # Required plan type Access to the external API is only available on a Custom Odoo plan. (The One App Free or Standard plans won't give you access.) Refer to Odoo Pricing Plans for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/okta/

Okta credentials # You can use these credentials to authenticate the following nodes: Okta Prerequisites # Create an Okta free trial or create an admin account on an existing Okta org. Supported authentication methods # SSWS API Access token Related resources # Refer to Okta's documentation for more information about the service. Using SSWS API access token # To configure this credential, you'll need: The URL : The base URL of your Okta org, also referred to as your unique subdomain. There are two quick ways to access it: In the Admin Console, select your Profile , hover over the domain listed below your username, and select the Copy icon. Paste this into n8n, but be sure to add https:// before it. Copy the base URL of your Admin Console URL, for example https://dev-123456-admin.okta.com . Paste it into n8n and remove -admin , for example: https://dev-123456.okta.com . An SSWS Access Token : Create a token by going to Security > API > Tokens > Create token . Refer to Create Okta API tokens for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/ollama/

Ollama credentials # You can use these credentials to authenticate the following nodes: Ollama Chat Ollama Embeddings Ollama Prerequisites # Create and run an Ollama instance with one user. Refer to the Ollama Quick Start for more information. Supported authentication methods # Instance URL Related resources # Refer to Ollama's API documentation for more information about the service. View n8n's Advanced AI documentation. Using instance URL # To configure this credential, you'll need: The Base URL of your Ollama instance. The default Base URL is http://localhost:11434 , but if you've set the OLLAMA_HOST environment variable, enter that value. If you have issues connecting to a local n8n server, try 127.0.0.1 instead of localhost . Refer to How do I configure Ollama server? for more information. Ollama and self-hosted n8n # If you're self-hosting n8n on the same machine as Ollama, you may run into issues if they're running in different containers. For this setup, open a specific port for n8n to communicate with Ollama by setting the OLLAMA_ORIGINS variable or adjusting OLLAMA_HOST to an address the other container can access. Refer to Ollama's How can I allow additional web origins to access Ollama? for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/onesimpleapi/

One Simple API credentials # You can use these credentials to authenticate the following nodes: One Simple API Prerequisites # Create a One Simple API account. Supported authentication methods # API token Related resources # Refer to One Simple API's documentation for more information about the service. Using API token # To configure this credential, you'll need: An API token : Create a new API token on the API Tokens page. Be sure you select appropriate permissions for the token. You can also access the API Tokens page by selecting your Profile > API Tokens . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/onfleet/

Onfleet credentials # You can use these credentials to authenticate the following nodes: Onfleet Onfleet Trigger Prerequisites # Create an Onfleet administrator account. Supported authentication methods # API key Related resources # Refer to Onfleet's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API key : To create an API key, log into your organization's administrator account. Select Settings > API & Webhooks , then select + to create a new key. Refer to Onfleet's Creating an API key documentation for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/openai/

OpenAI credentials # You can use these credentials to authenticate the following nodes: OpenAI Chat OpenAI Embeddings OpenAI LM OpenAI Prerequisites # Create an OpenAI account. Supported authentication methods # API key Related resources # Refer to OpenAI's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key An Organization ID : Required if you belong to multiple organizations; otherwise, leave this blank. To generate your API Key: Login to your OpenAI account or create an account. Open your API keys page. Select Create new secret key to create an API key, optionally naming the key. Copy your key and add it as the API Key in n8n. Refer to the API Quickstart Account Setup documentation for more information. To find your Organization ID: Go to your Organization Settings page. Copy your Organization ID and add it as the Organization ID in n8n. Refer to Setting up your organization for more information. Note that API requests made using an Organization ID will count toward the organization's subscription quota. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/opencti/

OpenCTI credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create an OpenCTI developer account. Authentication methods # API key Related resources # Refer to OpenCTI's documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using API key # To configure this credential, you'll need: An API Key : To get your API key, go to your Profile > API access . Refer to the OpenCTI Integrations Authentication documentation for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/openweathermap/

OpenWeatherMap credentials # You can use these credentials to authenticate the following nodes: OpenWeatherMap Supported authentication methods # API access token Related resources # Refer to OpenWeatherMap's API documentation for more information about the service. Using API access token # To configure this credential, you'll need an OpenWeatherMap account and: An Access Token To get your Access Token : After you verify your email address, OpenWeatherMap includes an API Key in your welcome email. Copy that key and enter it in your n8n credential. If you'd prefer to create a new key: To create a new key, go to Account > API Keys . In the Create Key section, enter an API Key Name , like n8n integration . Select Generate to generate your key. Copy the generated key and enter it in your n8n credential. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/oura/

Oura credentials # You can use these credentials to authenticate the following nodes: Oura Prerequisites # Create an Oura account. Supported authentication methods # API access token Related resources # Refer to Oura's API documentation for more information about the service. Using API access token # To configure this credential, you'll need: A Personal Access Token : To generate a personal access token, go to the Personal Access Tokens page and select Create A New Personal Access Token . Refer to How to Generate Personal Access Tokens for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/imap/outlook/

Outlook.com IMAP credentials # Follow these steps to configure the IMAP credentials with an Outlook.com account. Set up the credentials # To set up the IMAP credential with Outlook.com account, use these settings: Enter your Outlook.com email address as the User . Enter your Outlook.com password as the Password . App password Outlook.com doesn't require you to use an app password, but if you'd like to for security reasons, refer to Use an app password . Enter outlook.office365.com as the Host . For the Port , keep the default port number of 993 . Turn on the SSL/TLS toggle. Check with your email administrator about whether to Allow Self-Signed Certificates . Refer to Microsoft's POP, IMAP, and SMTP settings for Outlook.com documentation for more information. Connection errors # You may receive a connection error if you configured your Outlook.com account as IMAP in multiple email clients. Microsoft is working on a fix for this. For now, try this workaround: Go to account.live.com/activity and sign in using the email address and password of the affected account. Under Recent activity , find the Session Type event that matches the most recent time you received the connection error. Select it to expand the details. Select This was me to approve the IMAP connection. Retest your n8n credential. Refer to What is the Recent activity page? for more information on using this page. The source for these instructions is Outlook.com IMAP connection errors . Refer to that documentation for more information. Use an app password # If you'd prefer to use an app password instead of your email account password: Log into the My Account page. If you have a left navigation option for Security Info , jump to Security Info app password . If you don't have an option for Security Info , continue with these instructions. Go to the Additional security verification page . Select App passwords and Create . Enter a Name for your app password, like n8n credential . Use the option to copy password to clipboard and enter this as the Password in n8n instead of your email account password. Refer to Outlook's Manage app passwords for 2-step verification page for more information. Security Info app password # If you have a left navigation option for Security Info : Select Security Info . The Security Info page opens. Select + Add method . On the Add a method page, select App password and then select Add . Enter a Name for your app password, like n8n credential . Copy the Password and enter this as the Password in n8n instead of your email account password. Refer to Outlook's Create app passwords from the Security info (preview) page for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/sendemail/outlook/

Outlook.com Send Email credentials # Follow these steps to configure the Send Email credentials with an Outlook.com account. Set up the credential # To configure the Send Email credential to use an Outlook.com account: Enter your Outlook.com email address as the User . Enter your Outlook.com password as the Password . App password Outlook.com doesn't require you to use an app password, but if you'd like to for security reasons, refer to Use an app password . Enter smtp-mail.outlook.com as the Host . Enter 587 for the Port . Turn on the SSL/TLS toggle. Refer to Microsoft's POP, IMAP, and SMTP settings for Outlook.com documentation for more information. If the settings above don't work for you, check with your email administrator. Use an app password # If you'd prefer to use an app password instead of your email account password: Log into the My Account page. If you have a left navigation option for Security Info , jump to Security Info app password . If you don't have an option for Security Info , continue with these instructions. Go to the Additional security verification page . Select App passwords and Create . Enter a Name for your app password, like n8n credential . Use the option to copy password to clipboard and enter this as the Password in n8n instead of your email account password. Refer to Outlook's Manage app passwords for 2-step verification page for more information. Security Info app password # If you have a left navigation option for Security Info : Select Security Info . The Security Info page opens. Select + Add method . On the Add a method page, select App password and then select Add . Enter a Name for your app password, like n8n credential . Copy the Password and enter this as the Password in n8n instead of your email account password. Refer to Outlook's Create app passwords from the Security info (preview) page for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/paddle/

Paddle credentials # You can use these credentials to authenticate the following nodes: Paddle Prerequisites # Create a Paddle account. Supported authentication methods # API access token (Classic) Paddle Classic API This credential works with Paddle Classic's API. If you joined Paddle after August 2023, you're using the Paddle Billing API and this credential may not work for you. Related resources # Refer to Paddle Classic's API documentation for more information about the service. Using API access token (Classic) # To configure this credential, you'll need: A Vendor Auth Code : Created when you generate an API key. A Vendor ID : Displayed when you generate an API key. Use Sandbox Environment API : When turned on, nodes using this credential will hit the Sandbox API endpoint instead of the live API endpoint. To generate an auth code and view your Vendor ID, go to Paddle > Developer Tools > Authentication > Generate Auth Code . Select Reveal Auth Code to display the Auth Code. Refer to API Authentication for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/pagerduty/

PagerDuty credentials # You can use these credentials to authenticate the following nodes: PagerDuty Prerequisites # Create a PagerDuty account. Supported authentication methods # API token OAuth2 Related resources # Refer to PagerDuty's API documentation for more information about the service. Using API token # To configure this credential, you'll need: A general access API Token : To generate an API token, go to Integrations > Developer Tools > API Access Keys > Create New API Key . Refer to Generate a General Access REST API key for more information. Using OAuth2 # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. If you need to configure OAuth2 from scratch, register a new Pagerduty app . Use these settings for registering your app: In the Category dropdown list, select Infrastructure Automation . In the Functionality section, select OAuth 2.0 . Once you Save your app, open the app details and edit your app configuration to use these settings: Within the OAuth 2.0 section, select Add . Copy the OAuth Callback URL from n8n and paste it into the Redirect URL field. Copy the Client ID and Client Secret from PagerDuty and add these to your n8n credentials. Select Read/Write from the Set Permission Scopes dropdown list. Refer to the instructions in App functionality for more information on available functionality. Refer to the PagerDuty OAuth Functionality documentation for more information on the OAuth flow. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/paypal/

PayPal credentials # You can use these credentials to authenticate the following nodes: PayPal PayPal Trigger Prerequisites # Create a PayPal developer account. Supported authentication methods # API client and secret Related resources # Refer to Paypal's API documentation for more information about the service. Using API client and secret # To configure this credential, you'll need: A Client ID : Generated when you create an app. A Secret : Generated when you create an app. An Environment : Select Live or Sandbox . To generate the Client ID and Secret , log in to your Paypal developer dashboard . Select Apps & Credentials > Rest API apps > Create app . Refer to Get client ID and client secret for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/philipshue/

Philips Hue credentials # You can use these credentials to authenticate the following nodes: Philips Hue Prerequisites # Create a Philips Hue account. Supported authentication methods # OAuth2 Related resources # Refer to Philips Hue's CLIP API documentation for more information about the service. Using OAuth2 # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. If you're using the built-in OAuth connection, you don't need to enter an APP ID . If you need to configure OAuth2 from scratch, you'll need a Philips Hue developer account Create a new remote app on the Add new Hue Remote API app page. Use these settings for your app: Copy the OAuth Callback URL from n8n and add it as a Callback URL . Copy the AppId , ClientId , and ClientSecret and enter these in the corresponding fields in n8n. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/pinecone/

Pinecone credentials # You can use these credentials to authenticate the following nodes: Pinecone Vector Store Supported authentication methods # API key Related resources # Refer to Pinecone's documentation for more information about the service. View n8n's Advanced AI documentation. Using API key # To configure this credential, you'll need a Pinecone account and: An API Key To get an API key: Open your Pinecone console . Select the project you want to create an API key for. If you don't have any existing projects, create one. Refer to Pinecone's Quickstart for more information. Go to API Keys . Copy the API Key displayed there and enter it in your n8n credential. Refer to Pinecone's API Authentication documentation for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/pipedrive/

Pipedrive credentials # You can use these credentials to authenticate the following nodes: Pipedrive Pipedrive Trigger Supported authentication methods # API token OAuth2 Related resources # Refer to Pipedrive's developer documentation for more information about the service. Using API token # To configure this credential, you'll need a Pipedrive account and: An API Token To get your API token: Open your API Personal Preferences . Copy Your personal API token and enter it in your n8n credential. If you have multiple companies, you'll need to select the correct company first: Select your account name and be sure you're viewing the correct company. Then select Company Settings . Select Personal Preferences . Select the API tab. Copy Your personal API token and enter it in your n8n credential. Refer to How to find the API token for more information. Using OAuth2 # To configure this credential, you'll need a Pipedrive developer sandbox account and: A Client ID A Client Secret To get both, you'll need to register a new app: Select your profile name in the upper right corner. Find the company name of your sandbox account and select Developer Hub . No Developer Hub If you don't see Developer Hub in your account dropdown, sign up for a developer sandbox account . Select Create an app . Select Create public app . The app's Basic info tab opens. Enter an App name for your app, like n8n integration . Copy the OAuth Redirect URL from n8n and add it as the app's Callback URL . Select Save . The app's OAuth & access scopes tab opens. Turn on appropriate Scopes for your app. Refer to Pipedrive node scopes and Pipedrive Trigger node scopes below for more guidance. Copy the Client ID and enter it in your n8n credential. Copy the Client Secret and enter it in your n8n credential. Refer to Registering a public app for more information. Pipedrive node scopes # The scopes you add to your app depend on which node(s) you want to use it for in n8n and what actions you want to complete with those. Scopes you may need for the Pipedrive node: Object Node action UI scope Actual scope Activity Get data of an activity Get data of all activities Activities: Read only or Activities: Full Access activities:read or activities:full Activity Create Delete Update Activities: Full Access activities:full Deal Get data of a deal Get data of all deals Search a deal Deals: Read only or Deals: Full Access deals:read or deals:full Deal Create Delete Duplicate Update Deals: Full Access deals:full Deal Activity Get all activities of a deal Activities: Read only or Activities: Full Access activities:read or activities:full Deal Product Get all products in a deal Products: Read Only or Products: Full Access products:read or products:full File Download Get data of a file Refer to note below Refer to note below File Create Delete Refer to note below Refer to note below Lead Get data of a lead Get data of all leads Leads: Read only or Leads: Full access leads:read or leads:full Lead Create Delete Update Leads: Full access leads:full Note Get data of a note Get data of all notes Refer to note below Refer to note below Note Create Delete Update Refer to note below Refer to note below Organization Get data of an organization Get data of all organizations Search Contacts: Read Only or Contacts: Full Access contacts:read or contacts:full Organization Create Delete Update Contacts: Full Access contacts:full Person Get data of a person Get data of all persons Search Contacts: Read Only or Contacts: Full Access contacts:read or contacts:full Person Create Delete Update Contacts: Full Access contacts:full Product Get data of all products Products: Read Only products:read Files and Notes The scopes for Files and Notes depend on which object they relate to: Files relate to Deals, Activities, or Contacts. Notes relate to Deals or Contacts. Refer to those objects' scopes. The Pipedrive node also supports Custom API calls. Add relevant scopes for whatever custom API calls you intend to make. Refer to Scopes and permissions explanations for more information. Pipedrive Trigger node scopes # The Pipedrive Trigger node requires the Webhooks: Full access ( webhooks:full ) scope. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/plivo/

Plivo credentials # You can use these credentials to authenticate the following nodes: Plivo Prerequisites # Create a Plivo account. Supported authentication methods # Basic auth Related resources # Refer to Plivo's API documentation for more information about the service. Using basic auth # To configure this credential, you'll need: An Auth ID : Acts like your username. Copy yours from the Overview page of the Plivo console . An Auth Token : Acts like a password. Copy yours from the Overview page of the Plivo console . Refer to How can I change my Auth ID or Auth Token? for more detailed instructions. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/postgres/

Postgres credentials # You can use these credentials to authenticate the following nodes: Postgres Agent Postgres Chat Memory PGVector Vector Store Agent node users The Agent node doesn't support SSH tunnels. Prerequisites # Create a user account on a Postgres server. Supported authentication methods # Database connection Related resources # Refer to Postgres's documentation for more information about the service. Using database connection # To configure this credential, you'll need: The Host or domain name for the server. The Database name. A User name. A user Password . Ignore SSL Issues : Set whether the credential connects if SSL validation fails. SSL : Choose whether to use SSL in your connection. The Port number to use for the connection. SSH Tunnel : Choose if you want to use SSH to encrypt the network connection with the Postgres server. To set up the database connection: Enter the Host or domain name for the Postgres server. You can either run the /conninfo command to confirm the host name or run this query: 1 SELECT inet_server_addr(); Enter the Database name. Run the /conninfo command to confirm the database name. Enter the User name of the user you wish to connect as. Enter the user's Password . Ignore SSL Issues : If you turn this on, the credential will connect even if SSL validation fails. SSL : Choose whether to use SSL in your connection. Refer to Postgres SSL Support for more information. Options include: Allow : Sets the ssl-mode parameter to allow . First try a non-SSL connection; if that fails, try an SSL connection. Disable : Sets the ssl-mode parameter to disable . Only try a non-SSL connection. Require : Sets the ssl-mode parameter to require . Only try an SSL connection. If a root CA file is present, verify that a trusted certificate authority (CA) issued the server certificate. Enter the Port number to use for the connection. You can either run the /conninfo command to confirm the host name or run this query: 1 SELECT inet_server_port(); SSH Tunnel : Turn this setting on to connect to the database over SSH. Refer to SSH tunnel limitations for some guidance around using SSH. Once turned on, you'll need: Select SSH Authenticate with to set the SSH Tunnel type to build: Select Password if you want to connect to SSH using a password. Select Private Key if you want to connect to SSH using an identity file (private key) and a passphrase. Enter the remote bind address you're connecting to as the SSH Host . SSH Port : Enter the local port number for the SSH tunnel. SSH Postgres Port : Enter the remote end of the tunnel, the port number the database server is using. SSH User : Enter the username to log in as. If you selected Password for SSH Authenticate with, add the user's SSH Password . If you selected Private Key for SSH Authenticate with : Add the contents of the Private Key or identity file used for SSH. If the Private Key was created with a passphrase, enter that Passphrase . If the Private Ke y has no passphrase, leave this field blank. Refer to Secure TCP/IP Connections with SSH Tunnels for more information. SSH tunnel limitations # Only use the SSH Tunnel setting if: You're using the credential with the Postgres node (Agent node doesn't support SSH tunnels). You have an SSH server running on the same machine as the Postgres server. You have a user account that can log in using ssh . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/pushover/

Pushover credentials # You can use these credentials to authenticate the following nodes: Pushover Prerequisites # Create a Pushover account. Supported authentication methods # API key Related resources # Refer to Pushover's API documentation for more information about authenticating with the service. Using API Key # To configure this credential, you'll need: An API Key : Generated when you register an application . Refer to Application Registration for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/qdrant/

Qdrant credentials # You can use these credentials to authenticate the following nodes: Qdrant Vector Store Supported authentication methods # API key Related resources # Refer to Qdrant's documentation for more information. View n8n's Advanced AI documentation. Using API key # To configure this credential, you'll need a Qdrant cluster and: An API Key Your Qdrant URL To set it up: Go to the Cloud Dashboard . Select Access Management to display available API keys (or go to the API Keys section of the Cluster detail page). Select Create . Select the cluster you want the key to have access to in the dropdown. Select OK . Copy the API Key and enter it in your n8n credential. Enter the URL for your Qdrant cluster in the Qdrant URL . Refer to Qdrant Web UI for more information. Refer to Qdrant's authentication documentation for more information on creating and using API keys. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/qradar/

QRadar credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create a Qradar account. Supported authentication methods # API key Related resources # Refer to QRadar's documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using API key # To configure this credential, you'll need: An API Key : Also known as an authorized service token. Use the Manage Authorized Services window on the Admin tab to create an authentication token. Refer to Creating an authentication token for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/qualys/

Qualys credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create a Qualys user account with any user role except Contact. Supported authentication methods # Basic auth Related resources # Refer to Qualys's documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using basic auth # To configure this credential, you'll need: A Username A Password A Requested With string: Enter a user description, like a user agent, or keep the default n8n application . This sets the required X-Requested-With header. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/questdb/

QuestDB credentials # You can use these credentials to authenticate the following nodes: QuestDB Prerequisites # Create a user account on an instance of QuestDB . Supported authentication methods # Database connection Related resources # Refer to QuestDB's documentation for more information about the service. Using database connection # To configure this credential, you'll need: The Host : Enter the host name or IP address for the server. The Database : Enter the database name, for example qdb . A User : Enter the username for the user account as configured in pg.user or pg.readonly.user property in server.conf . Default value is admin . A Password : Enter the password for the user account as configured in pg.password or pg.readonly.password property in server.conf . Default value is quest . SSL : Select whether the connection should use SSL, which sets the sslmode parameter. Options include: Allow Disable Require The Port : Enter the port number to use for the connection. Default is 8812 . Refer to List of supported connection properties for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/quickbase/

Quick Base credentials # You can use these credentials to authenticate the following nodes: Quick Base Prerequisites # Create a Quick Base account. Supported authentication methods # API key Related resources # Refer to Quick Base's API documentation for more information about the service. Using API key # To configure this credential, you'll need: A Hostname : The string of characters located between https:// and /db in your Quick Base URL. A User Token : To generate a token, select your Profile > My preferences > My User Information > Manage my user tokens . Refer to Creating and using user tokens for detailed instructions. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/quickbooks/

QuickBooks credentials # You can use these credentials to authenticate the following nodes: QuickBooks Prerequisites # Create an Intuit developer account. Supported authentication methods # OAuth2 Related resources # Refer to Intuit's API documentation for more information about the service. Using OAuth2 # To configure this credential, you'll need: A Client ID : Generated when you create an app. A Client Secret : Generated when you create an app. An Environment : Select whether this credential should access your Production or Sandbox environment. To generate your Client ID and Client Secret , create an app . Use these settings when creating your app: Select appropriate scopes for your app. Refer to Learn about scopes for more information. Enter the OAuth Redirect URL from n8n as a Redirect URI in the app's Development > Keys & OAuth section. Copy the Client ID and Client Secret from the app's Development > Keys & OAuth section to enter in n8n. Refer to Get the Client ID and Client Secret for your app for more information. Refer to Intuit's Set up OAuth 2.0 documentation for more information on the entire process. Environment selection If you're creating a new app from scratch, start with the Sandbox environment. Production apps need to fulfill all Intuit's requirements. Refer to Intuit's Publish your app documentation for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/rabbitmq/

RabbitMQ credentials # You can use these credentials to authenticate the following nodes: RabbitMQ RabbitMQ Trigger Supported authentication methods # User connection Related resources # Refer to RabbitMQ's Connections documentation for more information about the service. Using user connection # To configure this credential, you'll need to have a RabbitMQ broker installed and: Enter the Hostname for the RabbitMQ broker. Enter the Port the connection should use. Enter a User the connection should use to log in as. The default is guest . RabbitMQ recommends using a different user in production environments. Refer to Access Control | The Basics for more information. If you're using the guest account with a non-localhost connection, refer to guest user issues below for troubleshooting tips. Enter the user's Password . The default password for the guest user is guest . Enter the virtual host the connection should use as the Vhost . The default virtual host is / . Select whether the connection should use SSL . If turned on, also set: Passwordless : Select whether the SSL certificate connection users SASL mechanism EXTERNAL (turned off) or doesn't use a password (turned on). If turned on, you'll also need to enter: The Client Certificate : Paste the text of the SSL client certificate to use. The Client Key : Paste the SSL client key to use. The Passphrase : Paste the SSL passphrase to use. CA Certificates : Paste the text of the SSL CA certificates to use. guest user issues # If you use the guest user for the credential and you try to access a remote host, you may see a connection error. The RabbitMQ logs show an error like this: 1 [error] <0.918.0> PLAIN login refused: user 'guest' can only connect via localhost This happens because RabbitMQ prohibits the default guest user from connecting from remote hosts. It can only connect over the localhost . To resolve this error, you can: Update the guest user to allow it remote host access. Create or use a different user to connect to the remote host. The guest user is the only user limited by default. Refer to "guest" user can only connect from localhost for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/raindrop/

Raindrop credentials # You can use these credentials to authenticate the following nodes: Raindrop Prerequisites # Create a Raindrop account. Supported authentication methods # OAuth2 Related resources # Refer to Raindrop's API documentation for more information about the service. Using OAuth # To configure this credential, you'll need: A Client ID A Client Secret Generate both by creating a Raindrop app. To create an app, go to Settings > Integrations and select + Create new app in the For Developers section. Use these settings for your app: Copy the OAuth Redirect URL from n8n and add it as a Redirect URI in your app. Copy the Client ID and Client Secret from the Raindrop app and enter them in your n8n credential. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/rapid7insightvm/

Rapid7 InsightVM credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create a Rapid7 InsightVM account. Supported authentication methods # API key Related resources # Refer to Rapid7 InsightVM's API documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using API key # To configure this credential, you'll need a Rapid7 InsightVM account and: A URL : The API endpoint URL where the resource or data you are requesting lives. You can find more information about the expected format in the endpoint section of the Rapid7's API overview . An API Key : Refer to Rapid7's Managing Platform API Keys documentation to create an API key. Refer to Rapid7 InsightVM's API documentation for more information about authenticating to the service. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/recordedfuture/

Recorded Future credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create a Recorded Future account. Supported authentication methods # API access token Related resources # Refer to Recorded Future's documentation for more information about the service. The rest of Recorded Future's help center requires a paid account. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using API access token # To configure this credential, you'll need: An API Access Token Refer to the Recorded Future APIs documentation for more information on getting your API access token. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/reddit/

Reddit credentials # You can use these credentials to authenticate the following nodes: Reddit Prerequisites # Create a Reddit account. Supported authentication methods # OAuth2 Related resources # Refer to Reddit's developer documentation for more information about the service. Using OAuth2 # To configure this credential, you'll need: A Client ID A Client Secret Developer program Reddit's developer program is in a closed beta. The instructions below are for regular Reddit users, not members of the developer platform. Generate both by creating a third-party app . Visit the previous link or go to your profile > Settings > Safety & Privacy > Manage third-party app authorization > are you a developer? create an app . Use these settings for your app: Copy the OAuth Callback URL from n8n and use it as your app's redirect uri . The app's client ID displays underneath your app name. Copy that and add it as your n8n Client ID . Copy the app's secret and add it as your n8n Client Secret . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/redis/

Redis credentials # You can use these credentials to authenticate the following nodes: Redis Redis Chat Memory Supported authentication methods # Database connection Related resources # Refer to Redis's developer documentation for more information about the service. Using database connection # You'll need a user account on a Redis server and: A Password The Host name The Port number A Database Number SSL To configure this credential: Enter your user account Password . Enter the Host name of the Redis server. The default is localhost . Enter the Port number the connection should use. The default is 6379 . This number should match the tcp_port listed when you run the INFO command. Enter the Database Number . The default is 0 . If the connection should use SSL, turn on the SSL toggle. If this toggle is off, the connection uses TCP only. Refer to Connecting to Redis | Generic client for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/rocketchat/

Rocket.Chat credentials # You can use these credentials to authenticate the following nodes: Rocket.Chat Prerequisites # Create a Rocket.Chat account. Your account must have the create-personal-access-tokens permission to generate personal access tokens. Supported authentication methods # API access token Related resources # Refer to Rocket.Chat's API documentation for more information about the service. Using API access token # To configure this credential, you'll need: Your User ID : Displayed when you generate an access token. An Auth Key : Your personal access token. To generate an access token, go to your avatar > Account > Personal Access Tokens . Copy the token and add it as the n8n Auth Key . Your Rocket.Chat Domain : Also known as your default URL or workspace URL. Refer to Personal Access Tokens for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/rundeck/

Rundeck credentials # You can use these credentials to authenticate the following nodes: Rundeck Prerequisites # Create a user account on a Rundeck server. Supported authentication methods # API token Related resources # Refer to Rundeck's API documentation for more information about the service. Using API token # To configure this credential, you'll need: Your URL : Enter the base URL of your Rundeck server, for example http://myserver:4440 . Refer to URLs for more information. A user API Token : To generate a user API token, go to your Profile > User API Tokens . Refer to User API tokens for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/s3/

S3 credentials # You can use these credentials to authenticate the following nodes: S3 Prerequisites # Create an account on an S3-compatible server. Use the S3 node for generic or non-AWS S3 like: DigitalOcean Spaces MinIO Wasabi Supported authentication methods # S3 endpoint Related resources # Refer to your S3-compatible provider's documentation for more information on the services. For example, refer to Wasabi's REST API documentation or DigitalOcean's Spaces API Reference Documentation . Using S3 endpoint # To configure this credential, you'll need: An S3 Endpoint : Enter the URL endpoint for the S3 storage backend. A Region : Enter the region for your S3 storage. Some providers call this the "region slug." An Access Key ID : Enter the S3 access key your S3 provider uses to access the bucket or space. Some providers call this API keys. A Secret Access Key : Enter the secret access key for the Access Key ID . Force Path Style : When turned on, the connection uses path-style addressing for buckets. Ignore SSL Issues : When turned on, n8n will connect even if SSL certificate validation fails. More detailed instructions for DigitalOcean Spaces and Wasabi follow. If you're using a different provider, refer to their documentation for more information. Using DigitalOcean Spaces # To configure the credential for use with DigitalOcean spaces: In DigitalOceans, go to the control panel and open Settings . Your endpoint should be listed there. Prepend https:// to that endpoint and enter it as the S3 Endpoint in n8n. Your DigitalOceans endpoint depends on the data center region your bucket's in. For the Region , enter the region your bucket's located in, for example, nyc3 . If you plan to use this credential to create new Spaces, enter us-east-1 instead. From your DigitalOceans control panel, go to API . Open the Spaces Keys tab. Select Generate New Key . Enter a Name for your key, like n8n integration and select the checkmark. Copy the Key displayed next to the name and enter this as the Access Key ID in n8n. Copy the Secret value and enter this as the Secret Access Key in n8n. Refer to Sharing Access to Buckets with Access Keys for more information on generating the key and secret. Keep the Force Path Style toggle turned off unless you want to use subdomain/virtual calling format. Decide how you want the n8n credential to handle SSL: To respect SSL certificate validation, keep the default of Ignore SSL Issues turned off. To connect even if SSL certificate validation fails, turn on Ignore SSL Issues . Refer to DigitalOcean's Spaces API Reference Documentation for more information. Using Wasabi # To configure the credential for use with Wasabi: For the S3 Endpoint , enter the service URL for your bucket's region. Start it with https:// . Refer to What are the service URLs for Wasabi's different storage regions? to identify the correct URL. For the Region , enter the region slug portion of the service URL. For example, if you entered https://s3.us-east-2.wasabisys.com as the S3 Endpoint , us-east-2 is the region. Log into you Wasabi Console as the root user. Open the Menu and select Access Keys . Select CREATE NEW ACCESS KEY . Select whether the key is for the Root User or a Sub-User and select CREATE . Copy the Access Key and enter it in n8n as the Access Key ID . Copy the Secret Key and enter it in n8n as the Secret Access Key . Refer to Creating a Wasabi API Access Key Set for more information on generating the key and secret. Wasabi recommends turning on the Force Path Style toggle "because the path-style offers the greatest flexibility in bucket names, avoiding domain name issues." Refer to the Wasabi REST API Introduction for more information. Decide how you want the n8n credential to handle SSL: To respect SSL certificate validation, keep the default of Ignore SSL Issues turned off. To connect even if SSL certificate validation fails, turn on Ignore SSL Issues . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/salesforce/

Salesforce credentials # You can use these credentials to authenticate the following nodes: Salesforce Salesforce trigger Supported authentication methods # JWT OAuth2 Related resources # Refer to Salesforce's developer documentation for more information about the service. Using JWT # To configure this credential, you'll need a Salesforce account and: Your Environment Type (Production or Sandbox) A Client ID : Generated when you create a connected app. Your Salesforce Username A Private Key for a self-signed digital certificate To set things up, first you'll create a private key and certificate, then a connected app: In n8n, select the Environment Type for your connection. Choose the option that best describes your environment from Production or Sandbox . Enter your Salesforce Username . Log in to your org in Salesforce. You'll need a private key and certificate issued by a certification authority. Use your own key/cert or use OpenSSL to create a key and a self-signed digital certificate. Refer to the Salesforce Create a Private Key and Self-Signed Digital Certificate documentation for instructions on creating your own key and certificate. From Setup in Salesforce, enter App Manager in the Quick Find box, then select App Manager . On the App Manager page, select New Connected App . Enter the required Basic Info for your connected app, including a Name and Contact Email address . Refer to Salesforce's Configure Basic Connected App Settings documentation for more information. Check the box to Enable OAuth Settings . For the Callback URL , enter http://localhost:1717/OauthRedirect . Check the box to Use digital signatures . Select Choose File and upload the file that contains your digital certificate, such as server.crt . Add these OAuth scopes : Full access (full) Perform requests at any time (refresh_token, offline_access) Select Save , then Continue . The Manage Connected Apps page should open to the app you just created. In the API (Enable OAuth Settings) section, select Manage Consumer Details . Copy the Consumer Key and add it to your n8n credential as the Client ID . Enter the contents of the private key file in n8n as Private Key . Use the multi-line editor in n8n. Enter the private key in standard PEM key format: 1 2 3 -----BEGIN PRIVATE KEY----- KEY DATA GOES HERE -----END PRIVATE KEY----- These steps are what's required on the n8n side. Salesforce recommends setting refresh token policies, session policies, and OAuth policies too: In Salesforce, select Back to Manage Connected Apps . Select Manage . Select Edit Policies . Review the Refresh Token Policy field. Salesforce recommends using expire refresh token after 90 days. In the Session Policies section, Salesforce recommends setting Timeout Value to 15 minutes. In the OAuth Policies section, select Admin approved users are pre-authorized for permitted users for Permitted Users , and select OK . Select Save . Select Manage Profiles , select the profiles that are pre-authorized to use this connected app, and select Save . Select Manage Permission Sets to select the permission sets. Create permission sets if necessary. Refer to Salesforce's Create a Connected App in Your Org documentation for more information. Using OAuth2 # To configure this credential, you'll need a Salesforce account. Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. Cloud and hosted users will need to select your Environment Type . Choose between Production and Sandbox . If you're self-hosting n8n, you'll need to configure OAuth2 from scratch by creating a connected app: In n8n, select the Environment Type for your connection. Choose the option that best describes your environment from Production or Sandbox . Enter your Salesforce Username . Log in to your org in Salesforce. From Setup in Salesforce, enter App Manager in the Quick Find box, then select App Manager . On the App Manager page, select New Connected App . Enter the required Basic Info for your connected app, including a Name and Contact Email address . Refer to Salesforce's Configure Basic Connected App Settings documentation for more information. Check the box to Enable OAuth Settings . For the Callback URL , enter http://localhost:1717/OauthRedirect . Add these OAuth scopes : Full access (full) Perform requests at any time (refresh_token, offline_access) Make sure the following settings are unchecked: Require Proof Key for Code Exchange (PKCE) Extension for Supported Authorization Flows Require Secret for Web Server Flow Require Secret for Refresh Token Flow Select Save , then Continue . The Manage Connected Apps page should open to the app you just created. In the API (Enable OAuth Settings) section, select Manage Consumer Details . Copy the Consumer Key and add it to your n8n credential as the Client ID . Copy the Consumer Secret and add it to your n8n credential as the Client Secret . These steps are what's required on the n8n side. Salesforce recommends setting refresh token policies and session policies, too: In Salesforce, select Back to Manage Connected Apps . Select Manage . Select Edit Policies . Review the Refresh Token Policy field. Salesforce recommends using expire refresh token after 90 days. In the Session Policies section, Salesforce recommends setting Timeout Value to 15 minutes. Refer to Salesforce's Create a Connected App in Your Org documentation for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/seatable/

SeaTable credentials # You can use these credentials to authenticate the following nodes: SeaTable SeaTable Trigger Prerequisites # Create a SeaTable account on either a cloud or self-hosted SeaTable server. Supported authentication methods # API key Related resources # Refer to SeaTable's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An Environment : Select the environment that matches your SeaTable instance: Cloud-Hosted Self-Hosted An API Token (of a Base) : Generate a Base-Token in SeaTable from the base options > Advanced > API Token . Use Read-Write permission for your token. Refer to Creating an API token for more information. A Timezone : Select the timezone of your SeaTable server. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/sekoia/

Sekoia credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create a Sekoia SOC platform account. Supported authentication methods # API key Related resources # Refer to Sekoia's documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using API key # To configure this credential, you'll need: An API Key : To generate an API key, select + API Key . Refer to Create an API key for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/sendemail/

Send Email credentials # You can use these credentials to authenticate the following nodes: Send Email Prerequisites # Create an email account on a service that supports SMTP. Some email providers require that you enable or set up outgoing SMTP or generate an app password. Refer to your provider's documentation to see if there are other required steps. Supported authentication methods # SMTP account Related resources # Simple Message Transfer Protocol (SMTP) is a standard protocol for sending and receiving email. Most email providers offer instructions on setting up their service with SMTP. Refer to your provider's SMTP instructions. Using SMTP account # To configure this credential, you'll need: A User email address A Password : This may be the user's password or an app password. Refer to the documentation for your email provider. The Host : The SMTP host address for your email provider, often formatted as smtp.<provider>.com . Check with your provider. A Port number: The default is port 465 , commonly used for SSL. Other common ports are 587 for TLS or 25 for no encryption. Check with your provider. SSL/TLS : When turned on, SMTP will use SSL/TLS. Disable STARTTLS : When SSL/TLS is disabled, the SMTP server can still try to upgrade the TCP connection using STARTTLS . Turning this on prevents that behaviour. Client Host Name : If needed by your provider, add a client host name. This name identifies the client to the server. Provider instructions # Refer to the quickstart guides for these common email providers. Gmail # Refer to Gmail . Outlook.com # Refer to Outlook.com . Yahoo # Refer to Yahoo . My provider isn't listed # If your email provider isn't listed here, search for SMTP settings to find their instructions. (These instructions may also be included with IMAP settings or POP settings .) Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/sendgrid/

SendGrid credentials # You can use these credentials to authenticate the following nodes: SendGrid Supported authentication methods # API key Related resources # Refer to SendGrid's API documentation for more information about the service. Using API key # To configure this credential, you'll need a SendGrid account and: An API Key To create an API key: In the Twilio SendGrid app, go to Settings > API Keys . Select Create API Key . Enter a Name for your API key, like n8n integration . Select Full Access . Select Create & View . Copy the key and enter it in your n8n credential. Refer to Create API Keys for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/sentryio/

Sentry.io credentials # You can use these credentials to authenticate the following nodes: Sentry.io Prerequisites # Create a Sentry.io account. Supported authentication methods # API token OAuth2 Server API token: Use for self-hosted Sentry . Related resources # Refer to Sentry.io's API documentation for more information about the service. Using API token # To configure this credential, you'll need: An API Token : Generate a User Auth Token in Account > Settings > User Auth Tokens . Refer to User Auth Tokens for more information. Using OAuth # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. If you need to configure OAuth2 from scratch, create an integration with these settings: Copy the n8n OAuth Callback URL and add it as an Authorized Redirect URI . Copy the Client ID and Client Secret and add them to your n8n credential. Refer to Public integrations for more information on creating the integration. Using Server API token # To configure this credential, you'll need: An API Token : Generate a User Auth Token in Account > Settings > User Auth Tokens . Refer to User Auth Tokens for more information. The URL of your self-hosted Sentry instance. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/serp/

Serp credentials # You can use these credentials to authenticate the following nodes: Serp Prerequisites # Create a SerpApi account. Supported authentication methods # API key Related resources # Refer to Serp's API documentation for more information about the service. View n8n's Advanced AI documentation. Using API key # To configure this credential, you'll need: An API Key To get your API key: Go to Your Account > API Key . Copy Your Private API Key and enter it as the API Key in your n8n credential. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/google/service-account/#enable-domain-wide-delegation

Google: Service Account # Using service accounts is more complex than OAuth2. Before you begin: Check if your node is compatible with Service Account. Make sure you need to use Service Account. For most use cases, OAuth2 is a better option. Read the Google documentation on Creating and managing service accounts . Prerequisites # Create a Google Cloud account. Set up Service Account # There are four steps to connecting your n8n credential to a Google Service Account: Create a Google Cloud Console project . Enable APIs . Set up Google Cloud Service Account . Finish your n8n credential . Create a Google Cloud Console project # First, create a Google Cloud Console project. If you already have a project, jump to the next section: Log in to your Google Cloud Console using your Google credentials. In the top menu, select the project dropdown in the top navigation and select New project or go directly to the New Project page. Enter a Project name and select the Location for your project. Select Create . Check the top navigation and make sure the project dropdown has your project selected. If not, select the project you just created. Check the project dropdown in the Google Cloud top navigation Enable APIs # With your project created, enable the APIs you'll need access to: Access your Google Cloud Console - Library . Make sure you're in the correct project. Check the project dropdown in the Google Cloud top navigation Go to APIs & Services > Library . Search for and select the API(s) you want to enable. For example, for the Gmail node, search for and enable the Gmail API. Some integrations require other APIs or require you to request access: Google Perspective: Request API Access . Google Ads: Get a Developer Token . Google Drive API required The following integrations require the Google Drive API, as well as their own API: Google Docs Google Sheets Google Slides Google Vertex AI API In addition to the Vertex AI API you will also need to enable the Cloud Resource Manager API . Select ENABLE . Set up Google Cloud Service Account # Access your Google Cloud Console - Library . Make sure you're in the correct project. Check the project dropdown in the Google Cloud top navigation Select the hamburger menu > APIs & Services > Credentials . Google takes you to your Credentials page. Select + CREATE CREDENTIALS > Service account . Enter a name in Service account name and an ID in Service account ID . Refer to Creating a service account for more information. Select CREATE AND CONTINUE . Based on your use-case, you may want to Select a role and Grant users access to this service account using the corresponding sections. Select DONE . Select your newly created service account under the Service Accounts section. Open the KEYS tab. Select ADD KEY > Create new key . In the modal that appears, select JSON , then select CREATE . Google saves the file to your computer. Finish your n8n credential # With the Google project and credentials fully configured, finish the n8n credential: Open the downloaded JSON file. Copy the client_email and enter it in your n8n credential as the Service Account Email . Copy the private_key . Don't include the surrounding " marks. Enter this as the Private Key in your n8n credential. Older versions of n8n If you're running an n8n version older than 0.156.0, replace all instances of \n in the JSON file with new lines. Optional : Choose if you want to Impersonate a User (turned on). To use this option, you must Enable domain-wide delegation for the service account as a Google Workspace super admin. Enter the Email of the user you want to impersonate. If you plan to use this credential with the HTTP Request node, turn on Set up for use in HTTP Request node . With this setting turned on, you'll need to add Scope(s) for the node. n8n prepopulates some scopes. Refer to OAuth 2.0 Scopes for Google APIs for more information. Save your credentials. Video # The following video demonstrates the steps described above. Troubleshooting # Service Account can't access Google Drive files # A Service Account can't access Google Drive files and folders that weren't shared with its associated user email. Access your Google Cloud Console and copy your Service Account email. Access your Google Drive and go to the designated file or folder. Right-click on the file or folder and select Share . Paste your Service Account email into Add People and groups . Select Editor for read-write access or Viewer for read-only access. Enable domain-wide delegation # To impersonate a user with a service account, you must enable domain-wide delegation for the service account. Not recommended Google recommends you avoid using domain-wide delegation , as it allows impersonation of any user (including super admins) and can pose a security risk. To delegate domain-wide authority to a service account, you must be a super administrator for the Google Workspace domain. Then: From your Google Workspace domain's Admin console , select the hamburger menu, then select Security > Access and data control > API Controls . In the Domain wide delegation pane, select Manage Domain Wide Delegation . Select Add new . In the Client ID field, enter the service account's Client ID . To get the Client ID: Open your Google Cloud Console project, then open the Service Accounts page. Copy the OAuth 2 Client ID and use this as the Client ID for the Domain Wide Delegation . In the OAuth scopes field, enter a list of comma-separate scopes to grant your application access. For example, if your application needs domain-wide full access to the Google Drive API and the Google Calendar API, enter: https://www.googleapis.com/auth/drive, https://www.googleapis.com/auth/calendar . Select Authorize . It can take from 5 minutes up to 24 hours before you can impersonate all users in your Workspace. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/google/service-account/

Google: Service Account # Using service accounts is more complex than OAuth2. Before you begin: Check if your node is compatible with Service Account. Make sure you need to use Service Account. For most use cases, OAuth2 is a better option. Read the Google documentation on Creating and managing service accounts . Prerequisites # Create a Google Cloud account. Set up Service Account # There are four steps to connecting your n8n credential to a Google Service Account: Create a Google Cloud Console project . Enable APIs . Set up Google Cloud Service Account . Finish your n8n credential . Create a Google Cloud Console project # First, create a Google Cloud Console project. If you already have a project, jump to the next section: Log in to your Google Cloud Console using your Google credentials. In the top menu, select the project dropdown in the top navigation and select New project or go directly to the New Project page. Enter a Project name and select the Location for your project. Select Create . Check the top navigation and make sure the project dropdown has your project selected. If not, select the project you just created. Check the project dropdown in the Google Cloud top navigation Enable APIs # With your project created, enable the APIs you'll need access to: Access your Google Cloud Console - Library . Make sure you're in the correct project. Check the project dropdown in the Google Cloud top navigation Go to APIs & Services > Library . Search for and select the API(s) you want to enable. For example, for the Gmail node, search for and enable the Gmail API. Some integrations require other APIs or require you to request access: Google Perspective: Request API Access . Google Ads: Get a Developer Token . Google Drive API required The following integrations require the Google Drive API, as well as their own API: Google Docs Google Sheets Google Slides Google Vertex AI API In addition to the Vertex AI API you will also need to enable the Cloud Resource Manager API . Select ENABLE . Set up Google Cloud Service Account # Access your Google Cloud Console - Library . Make sure you're in the correct project. Check the project dropdown in the Google Cloud top navigation Select the hamburger menu > APIs & Services > Credentials . Google takes you to your Credentials page. Select + CREATE CREDENTIALS > Service account . Enter a name in Service account name and an ID in Service account ID . Refer to Creating a service account for more information. Select CREATE AND CONTINUE . Based on your use-case, you may want to Select a role and Grant users access to this service account using the corresponding sections. Select DONE . Select your newly created service account under the Service Accounts section. Open the KEYS tab. Select ADD KEY > Create new key . In the modal that appears, select JSON , then select CREATE . Google saves the file to your computer. Finish your n8n credential # With the Google project and credentials fully configured, finish the n8n credential: Open the downloaded JSON file. Copy the client_email and enter it in your n8n credential as the Service Account Email . Copy the private_key . Don't include the surrounding " marks. Enter this as the Private Key in your n8n credential. Older versions of n8n If you're running an n8n version older than 0.156.0, replace all instances of \n in the JSON file with new lines. Optional : Choose if you want to Impersonate a User (turned on). To use this option, you must Enable domain-wide delegation for the service account as a Google Workspace super admin. Enter the Email of the user you want to impersonate. If you plan to use this credential with the HTTP Request node, turn on Set up for use in HTTP Request node . With this setting turned on, you'll need to add Scope(s) for the node. n8n prepopulates some scopes. Refer to OAuth 2.0 Scopes for Google APIs for more information. Save your credentials. Video # The following video demonstrates the steps described above. Troubleshooting # Service Account can't access Google Drive files # A Service Account can't access Google Drive files and folders that weren't shared with its associated user email. Access your Google Cloud Console and copy your Service Account email. Access your Google Drive and go to the designated file or folder. Right-click on the file or folder and select Share . Paste your Service Account email into Add People and groups . Select Editor for read-write access or Viewer for read-only access. Enable domain-wide delegation # To impersonate a user with a service account, you must enable domain-wide delegation for the service account. Not recommended Google recommends you avoid using domain-wide delegation , as it allows impersonation of any user (including super admins) and can pose a security risk. To delegate domain-wide authority to a service account, you must be a super administrator for the Google Workspace domain. Then: From your Google Workspace domain's Admin console , select the hamburger menu, then select Security > Access and data control > API Controls . In the Domain wide delegation pane, select Manage Domain Wide Delegation . Select Add new . In the Client ID field, enter the service account's Client ID . To get the Client ID: Open your Google Cloud Console project, then open the Service Accounts page. Copy the OAuth 2 Client ID and use this as the Client ID for the Domain Wide Delegation . In the OAuth scopes field, enter a list of comma-separate scopes to grant your application access. For example, if your application needs domain-wide full access to the Google Drive API and the Google Calendar API, enter: https://www.googleapis.com/auth/drive, https://www.googleapis.com/auth/calendar . Select Authorize . It can take from 5 minutes up to 24 hours before you can impersonate all users in your Workspace. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/google/service-account/#finish-your-n8n-credential

Google: Service Account # Using service accounts is more complex than OAuth2. Before you begin: Check if your node is compatible with Service Account. Make sure you need to use Service Account. For most use cases, OAuth2 is a better option. Read the Google documentation on Creating and managing service accounts . Prerequisites # Create a Google Cloud account. Set up Service Account # There are four steps to connecting your n8n credential to a Google Service Account: Create a Google Cloud Console project . Enable APIs . Set up Google Cloud Service Account . Finish your n8n credential . Create a Google Cloud Console project # First, create a Google Cloud Console project. If you already have a project, jump to the next section: Log in to your Google Cloud Console using your Google credentials. In the top menu, select the project dropdown in the top navigation and select New project or go directly to the New Project page. Enter a Project name and select the Location for your project. Select Create . Check the top navigation and make sure the project dropdown has your project selected. If not, select the project you just created. Check the project dropdown in the Google Cloud top navigation Enable APIs # With your project created, enable the APIs you'll need access to: Access your Google Cloud Console - Library . Make sure you're in the correct project. Check the project dropdown in the Google Cloud top navigation Go to APIs & Services > Library . Search for and select the API(s) you want to enable. For example, for the Gmail node, search for and enable the Gmail API. Some integrations require other APIs or require you to request access: Google Perspective: Request API Access . Google Ads: Get a Developer Token . Google Drive API required The following integrations require the Google Drive API, as well as their own API: Google Docs Google Sheets Google Slides Google Vertex AI API In addition to the Vertex AI API you will also need to enable the Cloud Resource Manager API . Select ENABLE . Set up Google Cloud Service Account # Access your Google Cloud Console - Library . Make sure you're in the correct project. Check the project dropdown in the Google Cloud top navigation Select the hamburger menu > APIs & Services > Credentials . Google takes you to your Credentials page. Select + CREATE CREDENTIALS > Service account . Enter a name in Service account name and an ID in Service account ID . Refer to Creating a service account for more information. Select CREATE AND CONTINUE . Based on your use-case, you may want to Select a role and Grant users access to this service account using the corresponding sections. Select DONE . Select your newly created service account under the Service Accounts section. Open the KEYS tab. Select ADD KEY > Create new key . In the modal that appears, select JSON , then select CREATE . Google saves the file to your computer. Finish your n8n credential # With the Google project and credentials fully configured, finish the n8n credential: Open the downloaded JSON file. Copy the client_email and enter it in your n8n credential as the Service Account Email . Copy the private_key . Don't include the surrounding " marks. Enter this as the Private Key in your n8n credential. Older versions of n8n If you're running an n8n version older than 0.156.0, replace all instances of \n in the JSON file with new lines. Optional : Choose if you want to Impersonate a User (turned on). To use this option, you must Enable domain-wide delegation for the service account as a Google Workspace super admin. Enter the Email of the user you want to impersonate. If you plan to use this credential with the HTTP Request node, turn on Set up for use in HTTP Request node . With this setting turned on, you'll need to add Scope(s) for the node. n8n prepopulates some scopes. Refer to OAuth 2.0 Scopes for Google APIs for more information. Save your credentials. Video # The following video demonstrates the steps described above. Troubleshooting # Service Account can't access Google Drive files # A Service Account can't access Google Drive files and folders that weren't shared with its associated user email. Access your Google Cloud Console and copy your Service Account email. Access your Google Drive and go to the designated file or folder. Right-click on the file or folder and select Share . Paste your Service Account email into Add People and groups . Select Editor for read-write access or Viewer for read-only access. Enable domain-wide delegation # To impersonate a user with a service account, you must enable domain-wide delegation for the service account. Not recommended Google recommends you avoid using domain-wide delegation , as it allows impersonation of any user (including super admins) and can pose a security risk. To delegate domain-wide authority to a service account, you must be a super administrator for the Google Workspace domain. Then: From your Google Workspace domain's Admin console , select the hamburger menu, then select Security > Access and data control > API Controls . In the Domain wide delegation pane, select Manage Domain Wide Delegation . Select Add new . In the Client ID field, enter the service account's Client ID . To get the Client ID: Open your Google Cloud Console project, then open the Service Accounts page. Copy the OAuth 2 Client ID and use this as the Client ID for the Domain Wide Delegation . In the OAuth scopes field, enter a list of comma-separate scopes to grant your application access. For example, if your application needs domain-wide full access to the Google Drive API and the Google Calendar API, enter: https://www.googleapis.com/auth/drive, https://www.googleapis.com/auth/calendar . Select Authorize . It can take from 5 minutes up to 24 hours before you can impersonate all users in your Workspace. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/servicenow/

ServiceNow credentials # You can use these credentials to authenticate the following nodes: ServiceNow Prerequisites # Create a ServiceNow developer account. Supported authentication methods # Basic auth OAuth2 Related resources # Refer to ServiceNow's API documentation for more information about the service. Using basic auth # To configure this credential, you'll need: A User name: Enter your ServiceNow username. A Password : Enter your ServiceNow password. A Subdomain : The subdomain for your servicenow instance is in your instance URL: https://<subdomain>.service-now.com/ . For example, if the full URL is https://dev99890.service-now.com , then the subdomain is dev99890 . Using OAuth2 # To configure this credential, you'll need: A Client ID : Generated once you register a new app. A Client Secret : Generated once you register a new app. A Subdomain : The subdomain for your servicenow instance is in your instance URL: https://<subdomain>.service-now.com/ . For example, if the full URL is https://dev99890.service-now.com , then the subdomain is dev99890 . To generate your Client ID and Client Secret , register a new app in System OAuth > Application Registry > New > Create an OAuth API endpoint for external clients . Use these settings for your app: Copy the Client ID and add it to your n8n credential. Enter a Client Secret or leave it blank to automatically generate a random secret. Add this secret to your n8n credential. Copy the n8n OAuth Redirect URL and add it as a Redirect URL . Refer to How to setup OAuth2 authentication for RESTMessageV2 integrations for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/shopify/

Shopify credentials # You can use these credentials to authenticate the following nodes with Shopify. Shopify Shopify Trigger Supported authentication methods # Access token (recommended): For private apps/single store use. Can be created by regular admins. OAuth2: For public apps. Must be created by partner accounts. API key: Deprecated. Related resources # Refer to Shopify's authentication documentation for more information about the service. Using access token # To configure this credential, you'll need a Shopify admin account and: Your Shop Subdomain An Access Token : Generated when you create a custom app. An APP Secret Key : Generated when you create a custom app. To set up the credential, you'll need to create and install a custom app: Enter your Shop Subdomain . Your subdomain is within the URL: https://<subdomain>.myshopify.com . For example, if the full URL is https://n8n.myshopify.com , the Shop Subdomain is n8n . In Shopify, go to Admin > Settings > Apps and sales channels . Select Develop apps . Select Create a custom app . Don't see this option? If you don't see this option, your store probably doesn't have custom app development enabled. Refer to Enable custom app development for more information. In the modal window, enter the App name . Select an App developer . The app developer can be the store owner or any account with the Develop apps permission. Select Create app . Select Select scopes . In the Admin API access scopes section, select the API scopes you want for your app. To use all functionality in the Shopify node, add the read_orders , write_orders , read_products , and write_products scopes. Refer to Shopify API Access Scopes for more information on the available scopes. Select Save . Select Install app . In the modal window, select Install app . Open the app's API Credentials section. Copy the Admin API Access Token . Enter this in your n8n credential as the Access Token . Copy the API Secret Key . Enter this in your n8n credential as the APP Secret Key . Refer to Creating a custom app and Generate access tokens for custom apps in the Shopify admin for more information on these steps. Using OAuth2 # To configure this credential, you'll need a Shopify partner account and: A Client ID : Generated when you create a custom app. A Client Secret : Generated when you create a custom app. Your Shop Subdomain To set up the credential, you'll need to create and install a custom app: Custom app development Shopify provides templates for creating new apps. The instructions below only cover the elements necessary to set up your n8n credential. Refer to Shopify's Build dev docs for more information on building apps and working with app templates. Open your Shopify Partner dashboard . Select Apps from the left navigation. Select Create app . In the Use Shopify Partners section, enter an App name . Select Create app . When the app details open, copy the Client ID . Enter this in your n8n credential. Copy the Client Secret . Enter this in your n8n credential. In the left menu, select Configuration . In n8n, copy the OAuth Redirect URL and paste it into the Allowed redirection URL(s) in the URLs section. In the URLs section, enter an App URL for your app. The host entered here needs to match the host for the Allowed redirection URL(s) , like the base URL for your n8n instance. Select Save and release . Select Overview from the left menu. At this point, you can choose to Test your app by installing it to one of your stores, or Choose distribution to distribute it publicly. In n8n, enter the Shop Subdomain of the store you installed the app to, either as a test or as a distribution. Your subdomain is within the URL: https://<subdomain>.myshopify.com . For example, if the full URL is https://n8n.myshopify.com , the Shop Subdomain is n8n . Using API key # Method deprecated Shopify no longer generates API keys with passwords. Use the Access token method instead. To configure this credential, you'll need: An API Key A Password Your Shop Subdomain : Your subdomain is within the URL: https://<subdomain>.myshopify.com . For example, if the full URL is https://n8n.myshopify.com , the Shop Subdomain is n8n . Optional: A Shared Secret Common issues # Here are some common issues setting up the Shopify credential and steps to resolve or troubleshoot them. Enable custom app development # If you don't see the option to Create a custom app , no one's enabled custom app development for your store. To enable custom app development, you must log in either as a store owner or as a user with the Enable app development permission: In Shopify, go to Admin > Settings > Apps and sales channels . Select Develop apps . Select Allow custom app development . Read the warning and information provided and select Allow custom app development . Forbidden credentials error # If you get a Couldn't connect with these settings / Forbidden - perhaps check your credentials warning when you test the credentials, this may be due to your app's access scope dependencies. For example, the read_orders scope also requires read_products scope. Review the scopes you have assigned and the action you're trying to complete. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/shuffler/

Shuffler credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create a Shuffler account on either a cloud or self-hosted instance. Supported authentication methods # API key Related resources # Refer to Shuffler's documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using API key # To configure this credential, you'll need: An API Key : Get your API key from the Settings page. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/slack/#scopes

Slack credentials # You can use these credentials to authenticate the following nodes: Slack Slack Trigger Supported authentication methods # API access token: Required for the Slack Trigger node. Works with the Slack node, but not recommended. OAuth2: Recommended method for the Slack node. Doesn't work with the Slack Trigger node. Related resources # Refer to Slack's API documentation for more information about the service. Using API access token # To configure this credential, you'll need a Slack account and: An Access Token To generate an access token, create a Slack app: Open your Slack API Apps page. Select Create New App > From scratch . Enter an App Name . Select the Workspace where you'll be developing your app. Select Create App . The app details open. In the left menu under Features , select OAuth & Permissions . In the Scopes section, select appropriate scopes for your app. Refer to Scopes for a list of recommended scopes. After you've added scopes, go up to the OAuth Tokens section and select Install to Workspace . You must be a Slack workspace admin to complete this action. Select Allow . Copy the Bot User OAuth Token and enter it as the Access Token in your n8n credential. If you're using this credential for the Slack Trigger , follow the steps in Slack Trigger configuration to finish setting up your app. Refer to the Slack API Quickstart for more information. Slack Trigger configuration # To use your Slack app with the Slack Trigger node: Go to Features > Event Subscriptions . Turn on the Enable Events control. In n8n, copy the Webhook URL and enter it as the Request URL in your Slack app. Request URL Slack only allows one request URL per app. If you want to test your workflow, you'll need to do one of the following: Test with your Test URL first, then change your Slack app to use the Production URL once you've verified everything's working Use the Production URL with execution logging. Once verified, select the bot events to subscribe to. Use the Trigger on field in n8n to filter these requests. To use an event not in the list, add it as a bot event and select Any Event in the n8n node. Refer to Quickstart | Configuring the app for event listening for more information. Using OAuth2 # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. If you're self-hosting n8n and need to configure OAuth2 from scratch, you'll need a Slack account and: A Client ID A Client Secret To get both, create a Slack app: Open your Slack API Apps page. Select Create New App > From scratch . Enter an App Name . Select the Workspace where you'll be developing your app. Select Create App . The app details open. In Settings > Basic Information , open the App Credentials section. Copy the Client ID and Client Secret . Paste these into the corresponding fields in n8n. In the left menu under Features , select OAuth & Permissions . In the Redirect URLs section, select Add New Redirect URL . Copy the OAuth Callback URL from n8n and enter it as the new Redirect URL in Slack. Select Add . Select Save URLs . In the Scopes section, select appropriate scopes for your app. Refer to Scopes for a list of scopes. After you've added scopes, go up to the OAuth Tokens section and select Install to Workspace . You must be a Slack workspace admin to complete this action. Select Allow . At this point, you should be able to select the OAuth button in your n8n credential to connect. Refer to the Slack API Quickstart for more information. Refer to the Slack Installing with OAuth documentation for more details on the OAuth flow itself. Scopes # Scopes determine what permissions an app has. If you want your app to act on behalf of users who authorize the app, add the required scopes under the User Token Scopes section. If you're building a bot, add the required scopes under the Bot Token Scopes section. Here's the list of scopes the OAuth credential requires, which are a good starting point: Scope name Notes channels:read channels:write Not available as a bot token scope chat:write files:read files:write groups:read im:read mpim:read reactions:read reactions:write stars:read Not available as a bot token scope stars:write Not available as a bot token scope usergroups:read usergroups:write users.profile:read users.profile:write Not available as a bot token scope users:read Common issues # Token expired # Slack offers token rotation that you can turn on for bot and user tokens. This makes every tokens expire after 12 hours. While this may be useful for testing, n8n credentials using tokens with this enabled will fail after expiry. If you want to use your Slack credentials in production, this feature must be off . To check if your Slack app has token rotation turned on, refer to the Slack API Documentation | Token Rotation . If your app uses token rotation Please note, if your Slack app uses token rotation, you can't turn it off again. You need to create a new Slack app with token rotation disabled instead. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/slack/

Slack credentials # You can use these credentials to authenticate the following nodes: Slack Slack Trigger Supported authentication methods # API access token: Required for the Slack Trigger node. Works with the Slack node, but not recommended. OAuth2: Recommended method for the Slack node. Doesn't work with the Slack Trigger node. Related resources # Refer to Slack's API documentation for more information about the service. Using API access token # To configure this credential, you'll need a Slack account and: An Access Token To generate an access token, create a Slack app: Open your Slack API Apps page. Select Create New App > From scratch . Enter an App Name . Select the Workspace where you'll be developing your app. Select Create App . The app details open. In the left menu under Features , select OAuth & Permissions . In the Scopes section, select appropriate scopes for your app. Refer to Scopes for a list of recommended scopes. After you've added scopes, go up to the OAuth Tokens section and select Install to Workspace . You must be a Slack workspace admin to complete this action. Select Allow . Copy the Bot User OAuth Token and enter it as the Access Token in your n8n credential. If you're using this credential for the Slack Trigger , follow the steps in Slack Trigger configuration to finish setting up your app. Refer to the Slack API Quickstart for more information. Slack Trigger configuration # To use your Slack app with the Slack Trigger node: Go to Features > Event Subscriptions . Turn on the Enable Events control. In n8n, copy the Webhook URL and enter it as the Request URL in your Slack app. Request URL Slack only allows one request URL per app. If you want to test your workflow, you'll need to do one of the following: Test with your Test URL first, then change your Slack app to use the Production URL once you've verified everything's working Use the Production URL with execution logging. Once verified, select the bot events to subscribe to. Use the Trigger on field in n8n to filter these requests. To use an event not in the list, add it as a bot event and select Any Event in the n8n node. Refer to Quickstart | Configuring the app for event listening for more information. Using OAuth2 # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. If you're self-hosting n8n and need to configure OAuth2 from scratch, you'll need a Slack account and: A Client ID A Client Secret To get both, create a Slack app: Open your Slack API Apps page. Select Create New App > From scratch . Enter an App Name . Select the Workspace where you'll be developing your app. Select Create App . The app details open. In Settings > Basic Information , open the App Credentials section. Copy the Client ID and Client Secret . Paste these into the corresponding fields in n8n. In the left menu under Features , select OAuth & Permissions . In the Redirect URLs section, select Add New Redirect URL . Copy the OAuth Callback URL from n8n and enter it as the new Redirect URL in Slack. Select Add . Select Save URLs . In the Scopes section, select appropriate scopes for your app. Refer to Scopes for a list of scopes. After you've added scopes, go up to the OAuth Tokens section and select Install to Workspace . You must be a Slack workspace admin to complete this action. Select Allow . At this point, you should be able to select the OAuth button in your n8n credential to connect. Refer to the Slack API Quickstart for more information. Refer to the Slack Installing with OAuth documentation for more details on the OAuth flow itself. Scopes # Scopes determine what permissions an app has. If you want your app to act on behalf of users who authorize the app, add the required scopes under the User Token Scopes section. If you're building a bot, add the required scopes under the Bot Token Scopes section. Here's the list of scopes the OAuth credential requires, which are a good starting point: Scope name Notes channels:read channels:write Not available as a bot token scope chat:write files:read files:write groups:read im:read mpim:read reactions:read reactions:write stars:read Not available as a bot token scope stars:write Not available as a bot token scope usergroups:read usergroups:write users.profile:read users.profile:write Not available as a bot token scope users:read Common issues # Token expired # Slack offers token rotation that you can turn on for bot and user tokens. This makes every tokens expire after 12 hours. While this may be useful for testing, n8n credentials using tokens with this enabled will fail after expiry. If you want to use your Slack credentials in production, this feature must be off . To check if your Slack app has token rotation turned on, refer to the Slack API Documentation | Token Rotation . If your app uses token rotation Please note, if your Slack app uses token rotation, you can't turn it off again. You need to create a new Slack app with token rotation disabled instead. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/sms77/

seven credentials # You can use these credentials to authenticate the following nodes: seven Prerequisites # Create a seven developer account. Supported authentication methods # API key Related resources # Refer to seven's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API key : Go to Account > Developer > API Keys to create an API key. Refer to API First Steps for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/solarwindsipam/

SolarWinds IPAM credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Supported authentication methods # Username & Password Related resources # Refer to SolarWinds IPAM's API documentation for more information about the service. Using Username & Password # To configure this credential, you'll need a SolarWinds IPAM account and: URL : The base URL of your SolarWinds IPAM server Username : The username you use to access SolarWinds IPAM Password : The password you use to access SolarWinds IPAM Refer to SolarWinds IPAM's API documentation for more information about authenticating to the service. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/solarwindsobservability/

SolarWinds Observability SaaS credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Supported authentication methods # API Token Related resources # Refer to SolarWinds Observability SaaS's API documentation for more information about the service. Using API Token # To configure this credential, you'll need a SolarWinds Observability SaaS account and: URL : The URL you use to access the SolarWinds Observability SaaS platform API Token : An API token found in the SolarWinds Observability SaaS platform under Settings > Api Tokens Refer to SolarWinds Observability SaaS's API documentation for more information about authenticating to the service. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/splunk/

Splunk credentials # You can use these credentials to authenticate the following nodes: Splunk Prerequisites # Download and install Splunk Enterprise. Enable token authentication in Settings > Tokens . Free trial Splunk Cloud Platform accounts can't access the REST API Free trial Splunk Cloud Platform accounts don't have access to the REST API. Ensure you have the necessary permissions. Refer to Access requirements and limitations for the Splunk Cloud Platform REST API for more details. Supported authentication methods # API auth token Related resources # Refer to Splunk's Enterprise API documentation for more information about the service. Using API auth token # To configure this credential, you'll need: An Auth Token : Once you've enabled token authentication, create an auth token in Settings > Tokens . Refer to Creating authentication tokens for more information. A Base URL : For your Splunk instance. This should include the protocol, domain, and port, for example: https://localhost:8089 . Allow Self-Signed Certificates : If turned on, n8n will connect even if SSL validation fails. Required capabilities # Your Splunk platform account and role must have certain capabilities to create authentication tokens: edit_tokens_own : Required if you want to create tokens for yourself. edit_tokens_all : Required if you want to create tokens for any user on the instance. Refer to Define roles on the Splunk platform with capabilities for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/spotify/

Spotify credentials # You can use these credentials to authenticate the following nodes: Spotify Supported authentication methods # OAuth2 Related resources # Refer to Spotify's Web API documentation for more information about the service. Using OAuth2 # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. If you're self-hosting n8n, you'll need a Spotify Developer account so you can create a Spotify app: Open the Spotify developer dashboard . Select Create an app . Enter an App name , like n8n integration . Enter an App description . Copy the OAuth Redirect URL from n8n and enter it as the Redirect URI in your Spotify app. Check the box to agree to the Spotify Terms of Service and Branding Guidelines. Select Create . The App overview page opens. Copy the Client ID and enter it in your n8n credential. Copy the Client Secret and enter it in your n8n credential. Select Connect my account and follow the on-screen prompts to finish authorizing the credential. Refer to Spotify Apps for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/ssh/

SSH credentials # You can use these credentials to authenticate the following nodes: SSH Prerequisites # Create a remote server with SSH enabled. Create a user account that can ssh into the server using one of the following: Their own password An SSH private key Supported authentication methods # Password : Use this method if you have a user account that can ssh into the server using their own password. Private key : Use this method if you have a user account that uses an SSH key for the server or service. Related resources # Secure Shell (SSH) protocol is a method for securely sending commands over a network. Refer to Connecting to GitHub with SSH for an example of SSH setup. Using password # Use this method if you have a user account that can ssh into the server using their own password. To configure this credential, you'll need to: Enter the IP address of the server you're connecting to as the Host . Enter the Port to use for the connection. SSH uses port 22 by default. Enter the Username for a user account with ssh access on the server. Enter the Password for that user account. Using private key # Use this method if you have a user account that uses an SSH key for the server or service. To configure this credential, you'll need to: Enter the IP address of the server you're connecting to as the Host . Enter the Port to use for the connection. SSH uses port 22 by default. Enter the Username of the account that generated the private key. Enter the entire contents of your SSH Private Key . If you created a Passphrase for the Private Key , enter the passphrase. If you didn't create a passphrase for the key, leave blank. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/strapi/

Strapi credentials # You can use these credentials to authenticate the following nodes: Strapi Prerequisites # Create a Strapi admin account with: Access to an existing Strapi project. At least one collection type within that project. Published data within that collection type. Refer to the Strapi developer Quick Start Guide for more information. Supported authentication methods # API user account: Requires a user account with appropriate content permissions. API token: Requires an admin account. Related resources # Refer to Strapi's documentation for more information about the service. Using API user account # To configure this credential, you'll need: A user Email : Must be for a user account, not an admin account. Refer to the more detailed instructions below. A user Password : Must be for a user account, not an admin account. Refer to the more detailed instructions below. The URL : Use the public URL of your Strapi server, defined in ./config/server.js as the url parameter. Strapi recommends using an absolute URL. For Strapi Cloud projects, use the URL of your Cloud project, for example: https://my-strapi-project-name.strapiapp.com The API Version : Select the version of the API you want your calls to use. Options include: Version 3 Version 4 In Strapi, the configuration involves two steps: Configure a role . Create a user account . Refer to the more detailed instructions below for each step. Configure a role # For API access, use the Users & Permissions Plugin in Settings > Users & Permissions Plugin . Refer to Configuring Users & Permissions Plugin for more information on the plugin. Refer to Configuring end-user roles for more information on roles. For the n8n credential, the user must have a role that grants them API permissions on the collection type. For the role, you can either: Update the default Authenticated role to include the permissions and assign the user to that role. Refer to Configuring role's permissions for more information. Create a new role to include the permissions and assign the user to that role. Refer to Creating a new role for more information. For either option, once you open the role: Go to the Permissions section. Open the section for the relevant collection type. Select the permissions for the collection type that the role should have. Options include: create (POST) find and findone (GET) update (PUT) delete (DELETE) Repeat for all relevant collection types. Save the role. Refer to Endpoints for more information on the permission options. Create a user account # Now that you have an appropriate role, create an end-user account and assign the role to it: Go to Content Manager > Collection Types > User . Select Add new entry . Fill in the user details. The n8n credential requires these fields, though your Strapi project may have more custom required fields: Username : Required for all Strapi users. Email : Enter in Strapi and use as the Email in the n8n credential. Password : Enter in Strapi and use as the Password in the n8n credential. Role : Select the role you set up in the previous step. Refer to Managing end-user accounts for more information. Using API token # To configure this credential, you'll need: An API Token : Create an API token from Settings > Global Settings > API Tokens . Refer to Strapi's Creating a new API token documentation for more details and information on regenerating API tokens. API tokens permission If you don't see the API tokens option in Global settings , your account doesn't have the API tokens > Read permission. The URL : Use the public URL of your Strapi server, defined in ./config/server.js as the url parameter. Strapi recommends using an absolute URL. For Strapi Cloud projects, use the URL of your Cloud project, for example: https://my-strapi-project-name.strapiapp.com The API Version : Select the version of the API you want your calls to use. Options include: Version 3 Version 4 Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/strava/

Strava credentials # You can use these credentials to authenticate the following nodes: Strava Strava Trigger Prerequisites # Create a Strava account. Create a Strava application in Settings > API . Refer to Using OAuth2 for more information. Supported authentication methods # OAuth2 Related resources # Refer to Strava's API documentation for more information about the service. Using OAuth2 # To configure this credential, you'll need: A Client ID : Generated when you create a Strava app . A Client Secret : Generated when you create a Strava app . Use these settings for your Strava app: In n8n, copy the OAuth Callback URL . Paste this URL into your Strava app's Authorization Callback Domain . Remove the protocol ( https:// or http:// ) and the relative URL ( /oauth2/callback or /rest/oauth2-credential/callback ) from the Authorization Callback Domain . For example, if the OAuth Redirect URL was originally https://oauth.n8n.cloud/oauth2/callback , the Authorization Callback Domain would be oauth.n8n.cloud . Copy the Client ID and Client Secret from your app and add them to your n8n credential. Refer to Authentication for more information about Strava's OAuth flow. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/stripe/

Stripe credentials # You can use these credentials to authenticate the following nodes: Stripe Trigger Stripe Supported authentication methods # API key Related resources # Refer to Stripe's API documentation for more information about the service. Using API key # To configure this credential, you'll need a Stripe admin or developer account and: An API Secret Key Before you generate an API key, decide whether to generate it in live mode or test mode. Refer to Test mode and live mode for more information about the two modes. Live mode Secret key # To generate a Secret key in live mode: Open the Stripe developer dashboard and select API Keys . In the Standard Keys section, select Create secret key . Enter a Key name , like n8n integration . Select Create . The new API key displays. Copy the key and enter it in your n8n credential as the Secret Key . Refer to Stripe's Create a secret API key for more information. Test mode Secret key # To use a Secret key in test mode, you must copy the existing one: Go to your Stripe test mode developer dashboard and select API Keys . In the Standard Keys section, select Reveal test key for the Secret key . Copy the key and enter it in your n8n credential as the Secret Key . Refer to Stripe's Create a secret API key for more information. Test mode and live mode # All Stripe API requests happen within either test mode or live mode. Each mode has its own API key. Use test mode to access simulated test data and live mode to access actual account data. Objects in one mode aren’t accessible to the other. Refer to API keys | Test mode versus live mode for more information about what's available in each mode and guidance on when to use each. n8n credentials for both modes If you want to work with both live mode and test mode keys, store each mode's key in a separate n8n credential. Key prefixes # Stripes' Secret keys always begin with sk_ : Live keys begin with sk_live_ . Test keys begin with sk_test_ . n8n hasn't tested these credentials with Restricted keys (prefixed rk_ ). Publishable keys Don't use the Publishable keys (prefixed pk_ ) with your n8n credential. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/supabase/

Supabase credentials # You can use these credentials to authenticate the following nodes: Supabase Supabase Vector Store Prerequisites # Create a Supabase account. Supported authentication methods # API key Related resources # Refer to Supabase's API documentation for more information about the service. Using access token # To configure this credential, you'll need: A Host A Service Role Secret To generate your API Key: In your Supabase account, go to the Dashboard and create or select a project for which you want to create an API key. Go to Project Settings > API to see the API Settings for your project. Copy the URL from the Project URL section and enter it as your n8n Host . Refer to API URL and keys for more detailed instruction. Reveal and copy the Project API key for the service_role . Copy that key and enter it as your n8n Service Role Secret . Refer to Understanding API Keys for more information on the service_role privileges. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/syncromsp/

SyncroMSP credentials # You can use these credentials to authenticate the following nodes: SyncroMSP Prerequisites # Create a SyncroMSP account. Supported authentication methods # API key Related resources # Refer to SyncroMSP's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Called an API token in SyncroMSP. To create an API token, go to your user menu > Profile/Password > API Tokens and select the option to Create New Token . Select Custom Permissions to enter a name for your token and adjust the permissions to match your requirements. Your Subdomain : Enter your SyncroMSP subdomain. This is visible in the URL of your SyncroMSP, located between https:// and .syncromsp.com . If your full URL is https://n8n-instance.syncromsp.com , you'd enter n8n-instance as the subdomain. Refer to API Tokens for more information on creating new tokens. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/taiga/

Taiga credentials # You can use these credentials to authenticate the following nodes: Taiga Taiga Trigger Prerequisites # Create a Taiga account. Supported authentication methods # Basic auth Related resources # Refer to Taiga's API documentation for more information about the service. Using basic auth # To configure this credential, you'll need: A Username : Enter your username or user email address. Refer to Normal login for more information. A Password : Enter your password. The Environment : Choose between Cloud or Self-Hosted . For Self-Hosted instances, you'll also need to add: The URL : Enter your Taiga URL. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/telegram/

Telegram credentials # You can use these credentials to authenticate the following nodes: Telegram Telegram Trigger Prerequisites # Create a Telegram account. Supported authentication methods # API bot access token Related resources # Refer to Telegram's Bot API documentation for more information about the service. Refer to the Telegram Bot Features documentation for more information on creating and working with bots. Using API bot access token # To configure this credential, you'll need: A bot Access Token To generate your access token: Start a chat with the BotFather . Enter the /newbot command to create a new bot. The BotFather will ask you for a name and username for your new bot: The name is the bot's name displayed in contact details and elsewhere. You can change the bot name later. The username is a short name used in search, mentions, and t.me links. Use these guidelines when creating your username: Must be between 5 and 32 characters long. Not case sensitive. May only include Latin characters, numbers, and underscores. Must end in bot , like tetris_bot or TetrisBot . You can't change the username later. Copy the bot token the BotFather generates and add it as the Access Token in n8n. Refer to the BotFather Create a new bot documentation for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/thehive5/

TheHive 5 credentials # You can use these credentials to authenticate the following nodes with TheHive 5. TheHive 5 TheHive and TheHive 5 n8n provides two nodes for TheHive. Use these credentials with TheHive 5 node. If you're using TheHive node for TheHive 3 or TheHive 4, use TheHive credentials . Prerequisites # Install TheHive 5 on your server. Supported authentication methods # API key Related resources # Refer to TheHive's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Users with orgAdmin and superAdmin accounts can generate API keys: orgAdmin account: Go to Organization > Create API Key for the user you wish to generate a key for. superAdmin account: Go to Users > Create API Key for the user you wish to generate a key for. Refer to API Authentication for more information. A URL : The URL of your TheHive server. Ignore SSL Issues : When turned on, n8n will connect even if SSL certificate validation fails. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/thehive/

TheHive credentials # You can use these credentials to authenticate the following nodes: TheHive TheHive and TheHive 5 n8n provides two nodes for TheHive. Use these credentials with TheHive node for TheHive 3 or TheHive 4. If you're using TheHive5 node, use TheHive 5 credentials . Prerequisites # Install TheHive on your server. Supported authentication methods # API key Related resources # Refer to TheHive 3's API documentation and TheHive 4's API documentation for more information about the services. Using API key # To configure this credential, you'll need: An API Key : Create an API key from Organization > Create API Key . Refer to API Authentication for more information. Your URL : The URL of your TheHive server. An API Version : Choose between: TheHive 3 (api v0) TheHive 4 (api v1) For TheHive 5, use TheHive 5 credentials instead. Ignore SSL Issues : When turned on, n8n will connect even if SSL certificate validation fails. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/timescaledb/

TimescaleDB credentials # You can use these credentials to authenticate the following nodes: TimescaleDB Prerequisites # An available instance of TimescaleDB . Supported authentication methods # Database connection Related resources # Refer to Timescale's documentation for more information about the service. Using database connection # To configure this credential, you'll need: The Host : The fully qualified server name or IP address of your TimescaleDB server. The Database : The name of the database to connect to. A User : The user name you want to log in with. A Password : Enter the password for the database user you are connecting to. Ignore SSL Issues : If turned on, n8n will connect even if SSL certificate validation fails and you won't see the SSL selector. SSL : This setting controls the ssl-mode connection string for the connection. Options include: Allow : Sets the ssl-mode parameter to allow . First try a non-SSL connection; if that fails, try an SSL connection. Disable : Sets the ssl-mode parameter to disable . Only try a non-SSL connection. Require : Sets the ssl-mode parameter to require , which is the default for TimescaleDB connection strings. Only try an SSL connection. If a root CA file is present, verify that a trusted certificate authority (CA) issued the server certificate. Port : The port number of the TimescaleDB server. Refer to Timescale's connection settings documentation for more information about the non-SSL fields. Refer to Connect with a stricter SSL for more information about the SSL options. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/todoist/

Todoist credentials # You can use these credentials to authenticate the following nodes: Todoist Supported authentication methods # API key OAuth2 Related resources # Refer to Todoist's REST API documentation for more information about the service. Using API key # To configure this credential, you'll need a Todoist account and: An API Key To get your API Key : In Todoist, open your Integration settings . Select the Developer tab. Copy your API token and enter it as the API Key in your n8n credential. Refer to Find your API token for more information. Using OAuth2 # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. If you're self-hosting n8n, you'll need a Todoist account and: A Client ID A Client Secret Get both by creating an application: Open the Todoist App Management Console . Select Create a new app . Enter an App name for your app, like n8n integration . Select Create app . Copy the n8n OAuth Redirect URL and enter it as the OAuth redirect URL in Todoist. Copy the Client ID from Todoist and enter it in your n8n credential. Copy the Client Secret from Todoist and enter it in your n8n credential. Configure the rest of your Todoist app as it makes sense for your use case. Refer to the Todoist Authorization Guide for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/toggl/

Toggl credentials # You can use these credentials to authenticate the following nodes: Toggl Trigger Prerequisites # Create a Toggl account. Supported authentication methods # Basic auth Related resources # Refer to Toggl's API documentation for more information about the service. Using basic auth # To configure this credential, you'll need: A Username : Enter your user email address. A Password : Enter your user password. Refer to Authentication for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/totp/

TOTP credentials # You can use these credentials to authenticate the following nodes: TOTP Prerequisites # Generate a TOTP Secret and Label . Supported authentication methods # Secret and label Related resources # Time-based One-time Password (TOTP) is an algorithm that generates a one-time password (OTP) using the current time. Refer to Google Authenticator | Key URI format for more information. Using secret and label # To configure this credential, you'll need: A Secret : The secret key encoded in the QR code during authenticator setup. It's an arbitrary key value encoded in Base32, for example: BVDRSBXQB2ZEL5HE . Refer to Google Authenticator Secret for more information. A Label : The identifier for the account. It contains an account name as a URI-encoded string. You can include prefixes to identify the provider or service managing the account. If you use prefixes, use a literal or url-encoded colon to separate the issuer prefix and the account name, for example: GitHub:john-doe . Refer to Google Authenticator Label for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/trellixepo/

Trellix ePO credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create a Trellix ePolicy Orchestrator account. Supported authentication methods # Basic auth Related resources # Refer to Trellix ePO's documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using basic auth # To configure this credential, you'll need: A Username to connect as. A Password for that user account. n8n uses These fields to build the -u parameter in the format of -u username:pw . Refer to Web API basics for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/trello/

Trello credentials # You can use these credentials to authenticate the following nodes: Trello Trello Trigger Supported authentication methods # API key Related resources # Refer to Trello's API documentation for more information about the service. Using API key # To configure this credential, you'll need a Trello account and: An API Key An API Token To generate both the API Key and API Token, create a Trello Power-Up: Open the Trello Power-Up Admin Portal . Select New . Enter a Name for your Power-Up, like n8n integration . Select the Workspace the Power-Up should have access to. Leave the iframe connector URL blank. Enter appropriate contact information. Select Create . This should open the Power-Up to the API Key page. (If it doesn't, open that page.) Select Generate a new API Key . Copy the API key from Trello and enter it in your n8n credential. In your Trello API key page, enter your n8n base URL as an Allowed origin . Select the Token link next to your Trello API Key . When prompted, select Allow to grant all th epermissions it asks for. Copy the Trello Token and enter it as the n8n API Token . Refer to Trello's API Introduction for more information on API keys and tokens. Refer to Trello's Power-Up Admin Portal for more information on creating Power-Ups. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/twake/

Twake credentials # You can use these credentials to authenticate the following nodes: Twake Prerequisites # Create a Twake account. Supported authentication methods # Cloud API key Server API key Related resources # Refer to Twake's documentation for more information about the service. Using Cloud API key # To configure this credential, you'll need: A Workspace Key : Generated when you install the n8n application to your Twake Cloud environment and select Configure . Refer to How to connect n8n to Twake for more detailed instructions. Using Server API key # To configure this credential, you'll need: A Host URL : The URL of your Twake self-hosted instance. A Public ID : Generated when you create an app. A Private API Key : Generated when you create an app. To generate your Public ID and Private API Key , create a Twake application : Go to Workspace Settings > Applications and connectors > Access your applications and connectors > Create an application . Enter appropriate details. Once you've created your app, view its API Details . Copy the Public identifier and add it as the n8n Public ID . Copy the Private key and add it as the n8n Private API Key . Refer to API settings for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/twilio/

Twilio credentials # You can use these credentials to authenticate the following nodes: Twilio Twilio trigger Supported authentication methods # Auth token : Twilio recommends this method for local testing only. API key : Twilio recommends this method for production. Related resources # Refer to Twilio's API documentation for more information about the service. Using Auth Token # To configure this credential, you'll need a Twilio account and: Your Twilio Account SID Your Twilio Auth Token To set up the credential: In n8n, select Auth Token as the Auth Type . In Twilio, go to Console Dashboard > Account Info . Copy your Account SID and enter this in your n8n credential. This acts as a username. Cop your Auth Token and enter this in your n8n credential. This acts as a password. Refer to Auth Tokens and How to Change Them for more information. Using API key # To configure this credential, you'll need a Twilio account and: Your Twilio Account SID An API Key SID : Generated when you create an API key. An API Key Secret : Generated when you create an API key. To set up the credential: In n8n, select API Key as the Auth Type . In Twilio, go to Console Dashboard > Account Info . Copy your Account SID and enter it in your n8n credential. In Twilio, go to your account's API keys & tokens page. Select Create API Key . Enter a Friendly name for your API key, like n8n integration . Select your Key type . n8n works with either Main or Standard . Refer to Selecting an API key type for more information. Select Create API Key to finish creating the key. On the Copy secret key page, copy the SID displayed with the key and enter it in your n8n credential API Key SID . On the Copy secret key page, copy the Secret displayed with the key and enter it in your n8n credential API Key Secret . Refer to Create an API key for more detailed instructions. Selecting an API key type # When you create a Twilio API key, you must select a key type. The n8n credential works with Main and Standard key types. Here are more details on the different API key types: Main : This key type gives you the same level of access as using your Account SID and Auth Token in API requests. Standard : This key type gives you access to all the functionality in Twilio's APIs except the API key resources and Account resources. Restricted : This key type is in beta. n8n hasn't tested the credential against this key type; if you try it, let us know if you run into any issues. Refer to Types of API keys for more information on the key types. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/twist/

Twist credentials # You can use these credentials to authenticate the following nodes: Twist Prerequisites # Create a Twist account. Create a general integration and configure a valid OAuth Redirect URL. Refer to Using OAuth2 for more information. Supported authentication methods # OAuth2 Related resources # Refer to Twist's API documentation for more information about authenticating with the service. Using OAuth2 # To configure this credential, you'll need: A Client ID : Generated once you create a general integration. A Client Secret : Generated once you create a general integration. To generate your Client ID and Client Secret, create a general integration . Use these settings for your integration's OAuth Authentication : Copy the OAuth Redirect URL from n8n and enter it as the OAuth 2 redirect URL in Twist. OAuth Redirect URL for self-hosted n8n Twist doesn't accept a localhost Redirect URL. The Redirect URL should be a URL in your domain, for example: https://mytemplatemaker.example.com/gr_callback . If your n8n OAuth Redirect URL contains localhost, refer below to Local environment redirect URL for generating a URL that Twist will allow. Select Update OAuth settings to save those changes. Copy the Client ID and Client Secret from Twist and enter them in the appropriate fields in n8n. Local environment redirect URL # Twist doesn't accept a localhost callback URL. These steps should allow you to configure the OAuth credentials for the local environment: Use ngrok to expose the local server running on port 5678 to the internet. In your terminal, run the following command: 1 ngrok http 5678 Run the following command in a new terminal. Replace <YOUR-NGROK-URL> with the URL that you get from the previous step. 1 export WEBHOOK_URL = <YOUR-NGROK-URL> Use the generated URL as your OAuth 2 redirect URL in Twist. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/twitter/

X (formerly Twitter) credentials # You can use these credentials to authenticate the following nodes: X (formerly Twitter) Prerequisites # Create an X developer account. Create a Twitter app or use the default project and app created when you sign up for the developer portal. Refer to each supported authentication method below for more details on the app's configuration. Supported authentication methods # OAuth2 Deprecation warning n8n used to support an OAuth authentication method, which used X's OAuth 1.0a authentication method. n8n deprecated this method with the release of V2 of the X node in n8n version 0.236.0 . Related resources # Refer to X's API documentation for more information about the service. Refer to X's API authentication documentation for more information about authenticating with the service. Refer to Application-only Authentication for more information about app-only authentication. Using OAuth2 # Use this method if you're using n8n version 0.236.0 or later. To configure this credential, you'll need: A Client ID A Client Secret To generate your Client ID and Client Secret: In the Twitter developer portal , open your project. On the project's Overview tab, find the Apps section and select Add App . Give your app a Name and select Next . Go to the App Settings . In the User authentication settings , select Set Up . Set the App permissions . Choose Read and write and Direct message if you want to use all functions of the n8n X node. In the Type of app section, select Web App, Automated App or Bot . In n8n, copy the OAuth Redirect URL . In your X app, find the App Info section and paste that URL in as the Callback URI / Redirect URL . Add a Website URL . Save your changes. Copy the Client ID and Client Secret displayed in X and add them to the corresponding fields in your n8n credential. Refer to X's OAuth 2.0 Authentication documentation for more information on working with this authentication method. X rate limits This credential uses the OAuth 2.0 Bearer Token authentication method, so you'll be subject to app rate limits. Refer to X rate limits below for more information. X rate limits # X has time-based rate limits per endpoint based on your developer access plan level. X calculates app rate limits and user rate limits independently. Refer to Rate limits for the access plan level rate limits and guidance on avoiding hitting them. Use the guidance below for calculating rate limits: If you're using the deprecated OAuth method, user rate limits apply. You'll have one limit per time window for each set of users' access tokens. If you're Using OAuth2 , app rate limits apply. You'll have a limit per time window for requests made by your app. X calculates user rate limits and app rate limits independently. Refer to X's Rate limits and authentication methods for more information about these rate limit types. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/uproc/

uProc credentials # You can use these credentials to authenticate the following nodes: uProc Prerequisites # Create a uProc account. Supported authentication methods # API key Related resources # Refer to uProc's API documentation for more information about the service. Using API Key # To configure this credential, you'll need: An Email address: Enter the email address you use to log in to uProc. This is also displayed in Settings > Integrations > API Credentials . An API Key : Go to Settings > Integrations > API Credentials . Copy the API Key (real) from the API Credentials section and enter it in your n8n credential. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/uptimerobot/

UptimeRobot credentials # You can use these credentials to authenticate the following nodes: UptimeRobot Prerequisites # Create an UptimeRobot account. Supported authentication methods # API key Related resources # Refer to UptimeRobot's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Get your API Key from My Settings > API Settings . Create a Main API Key and enter this key in your n8n credential. API key types # UptimeRobot supports three API key types: Account-specific (also known as main ): Pulls data for multiple monitors. Monitor-specific : Pulls data for a single monitor. Read-only : Only runs GET API calls. To complete all of the operations in the UptimeRobot node, use the Main or Account-specific API key type. Refer to API authentication for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/urlscanio/

urlscan.io credentials # You can use these credentials to authenticate the following nodes: urlscan.io Prerequisites # Create an urlscan.io account. Supported authentication methods # API key Related resources # Refer to urlscan.io's API documentation for more information about the service. Using API key # To configure this credential, you'll need: An API Key : Get your API key from Settings & API > API Keys . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/virustotal/

VirusTotal credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create a VirusTotal account. Supported authentication methods # API key Related resources # Refer to VirusTotal's documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using API key # To configure this credential, you'll need: An API Token : Go to your user account menu > API key to get your API key. Enter this as the API Token in your n8n credential. Refer to API authentication for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/webflow/

Webflow credentials # You can use these credentials to authenticate the following nodes: Webflow Webflow Trigger Prerequisites # Create a Webflow account. Create a site : Required for API access token authentication only. Supported authentication methods # API access token OAuth2 Related resources # Refer to Webflow's API documentation for more information about the service. Using API access token # To configure this credential, you'll need: A Site Access Token : Access tokens are site-specific. Go to your site's Site Settings > Apps & integrations > API access and select Generate API token . Refer to Get a Site Token for more information. Using OAuth2 # Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. If you need to configure OAuth2 from scratch, register an application in your workspace. Use these settings for your application: Copy the OAuth callback URL from n8n and add it as a Redirect URI in your application. Once you've created your application, copy the Client ID and Client Secret and enter them in your n8n credential. If you are using the Webflow Data API V1 (deprecated), enable the Legacy toggle. Otherwise, leave this inactive. Refer to OAuth for more information on Webflow's OAuth web flow. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/webhook/

Webhook credentials # You can use these credentials to authenticate the following nodes: Webhook Prerequisites # You must use the authentication method required by the app or service you want to query. Supported authentication methods # Basic auth Header auth JWT auth None Using basic auth # Use this generic authentication if your app or service supports basic authentication. To configure this credential, enter: The Username you use to access the app or service your HTTP Request is targeting The Password that goes with that username Using header auth # Use this generic authentication if your app or service supports header authentication. To configure this credential, enter: The header Name you need to pass to the app or service your HTTP request is targeting The Value for the header Read more about HTTP headers . Credential data can vary The credential data required for header auth credentials depends on the type used. For example, if you need to provide an Authorization: Bearer <token> header, the credential data Name will be Authorization and the Value will be Bearer <token> . Using JWT auth # JWT Auth is a method of authentication that uses JSON Web Tokens (JWT) to digitally sign data. This authentication method uses the JWT credential and can use either a Passphrase or PEM Key as key type. Refer to JWT credential for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/wekan/

Wekan credentials # You can use these credentials to authenticate the following nodes: Wekan Prerequisites # Install Wekan on your server. Supported authentication methods # Basic auth Related resources # Refer to Wekan's API documentation for more information about authenticating with the service. Using basic auth # To configure this credential, you'll need: A Username : Enter your Wekan username. A Password : Enter your Wekan password. A URL : Enter your Wekan domain. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/whatsapp/

WhatsApp Business Cloud credentials # You can use these credentials to authenticate the following nodes: WhatsApp Business Cloud WhatsApp Trigger Requirements # To create credentials for WhatsApp, you need the following Meta assets: A Meta developer account: A developer account allows you to create and manage Meta apps, including WhatsApp integrations. Set up a Meta developer account Visit the Facebook Developers site . Click Getting Started in the upper-right corner (if the link says My Apps , you've already set up a developer account). Agree to terms and conditions. Provide a phone number for verification. Select your occupation or role. A Meta business portfolio : WhatsApp messaging services require a Meta business portfolio, formerly called a Business Manager account. The UI may still show either option. Set up a Meta business portfolio Visit the Facebook Business site . Select Create an account . If you already have a Facebook Business account and portfolio, but want a new portfolio, open the business portfolio selector in the left-side menu and select Create a business portfolio . Enter a Business portfolio name . Enter your name . Enter a business email . Select Submit or Create . A Meta business app configured with WhatsApp: Once you have a developer account, you will create a Meta business app. Set up a Meta business app with WhatsApp Visit the Meta for Developers Apps dashboard Select Create app . In Add products to your app , select Set up in the WhatsApp tile. Refer to Add the WhatsApp Product for more detail. This opens the WhatsApp Quickstart page. Select your business portfolio. Select Continue . In the left-side menu, go to App settings > Basic . Set the Privacy Policy URL and Terms of Service URL for the app. Change the App Mode to Live . Supported authentication methods # API key: Use for the WhatsApp Business Cloud node. OAuth2: Use for the WhatsApp Trigger node. Related resources # Refer to WhatsApp's API documentation for more information about the service. Meta classifies users who create WhatsApp business apps as Tech Providers; refer to Meta's Get Started for Tech Providers for more information. Using API key # You need WhatsApp API key credentials to use the WhatsApp Business Cloud node. To configure this credential, you'll need: An API Access Token A Business Account ID To generate an access token, follow these steps: Visit the Meta for Developers Apps dashboard . Select your Meta app. In the left-side menu, select WhatsApp > API Setup . Select Generate access token and confirm the access you want to grant. Copy the Access token and add it to n8n as the Access Token . Copy the WhatsApp Business Account ID and add it to n8n as the Business Account ID . Refer to Test Business Messaging on WhatsApp for more information on the above steps. Fully verifying and launching your app will take further configuration. Refer to Meta's Get Started for Tech Providers Steps 5 and beyond for more information. Refer to App Review for more information on the Meta App Review process. Using OAuth2 # You need WhatsApp OAuth2 credentials to use the WhatsApp Trigger node. To configure this credential, you'll need: A Client ID A Client Secret To retrieve these items, follow these steps: Visit the Meta for Developers Apps dashboard . Select your Meta app. In the left-side menu, select App settings > Basic . Copy the App ID and enter it as the Client ID within the n8n credential. Copy the App Secret and enter it as the Client Secret within the n8n credential. Fully verifying and launching your app will take further configuration. Refer to Meta's Get Started for Tech Providers Steps 5 and beyond for more information. Refer to App Review for more information on the Meta App Review process. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/wise/

Wise credentials # You can use these credentials to authenticate the following nodes: Wise Wise Trigger Prerequisites # Create a Wise account. Supported authentication methods # API token Related resources # Refer to Wise's API documentation for more information about the service. Using API token # To configure this credential, you'll need: An API Token : Go to your user menu > Settings > API tokens to generate an API token. Enter the generated API key in your n8n credential. Refer to Getting started with the API for more information. Your Environment : Select the environment that best matches your Wise account environment. If you're using a Wise test sandbox account, select Test . Otherwise, select Live . Private Key (Optional) : For live endpoints requiring Strong Customer Authentication (SCA), generate a public and private key. Enter the private key here. Refer to Add a private key for more information. If you're using a Test environment, you'll only need to enter a Private Key if you've enabled Strong Customer Authentication on the public keys management page . Add a private key # Wise protects some live endpoints and operations with Strong Customer Authentication (SCA). Refer to Strong Customer Authentication & 2FA for details. If you make a request to an endpoint that requires SCA, Wise returns a 403 Forbidden HTTP status code. The error returned will look like this: This request requires Strong Customer Authentication (SCA). Please add a key pair to your account and n8n credentials. See https://api-docs.transferwise.com/#strong-customer-authentication-personal-token To use endpoints requiring SCA, generate an RSA key pair and add the relevant key information to both Wise and n8n: Generate an RSA key pair: 1 2 $ openssl genrsa -out private.pem 2048 $ openssl rsa -pubout -in private.pem -out public.pem Add the content of the public key public.pem to your Wise user menu > Settings > API tokens > Manage public keys . Add the content of the private key private.pem in n8n to the Private Key (Optional) . Refer to Personal Token SCA for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/wolframalpha/

Wolfram|Alpha credentials # You can use these credentials to authenticate the following nodes: Wolfram|Alpha Supported authentication methods # API key Related resources # Refer to Wolfram|Alpha's Simple API documentation for more information about the service. View n8n's Advanced AI documentation. Using API key # To configure this credential, you'll need a registered Wolfram ID and: An App ID To get an App ID: Open the Wolfram|Alpha Developer Portal and go to API Access . Select Get an App ID . Enter a Name for your application, like n8n integration . Enter a Description for your application. Select Simple API as the API . Select Submit . Copy the generated App ID and enter it in your n8n credential. Refer to Getting Started in the Wolfram|Alpha Simple API documentation for more information. Resolve Forbidden connection error # If you enter your App ID and get an error that the credential is Forbidden , make sure that you have verified your email address for your Wolfram ID: Go to your Wolfram ID Details . If you don't see the Verified label underneath your Email address , select the link to Send a verification email . You must open the link in that email to verify your email address. It may take several minutes for the verification to populate to the API, but once it does, retrying the n8n credential should succeed. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/woocommerce/

WooCommerce credentials # You can use these credentials to authenticate the following nodes: WooCommerce WooCommerce Trigger Prerequisites # Install the WooCommerce plugin on your WordPress website. In WordPress, go to Settings > Permalinks and set your WordPress permalinks to use something other than Plain . Supported authentication methods # API key Related resources # Refer to WooCommerce's REST API documentation for more information about the service. Using API key # To configure this credential, you'll need: A Consumer Key : Created when you generate an API key. A Consumer Secret : Created when you generate an API key. A WooCommerce URL To generate an API key and set up your credential: Go to WooCommerce > Settings > Advanced > Rest API > Add key . Select Read/Write from the Permissions dropdown. Copy the generated Consumer Key and Consumer Secret and enter them into your n8n credentials. Enter your WordPress site URL as the WooCommerce URL . By default, n8n passes your credential details in the Authorization header. If you need to pass them as query string parameters instead, turn on Include Credentials in Query . Refer to Generate Keys for more information. Resolve "Consumer key is missing" error # When you try to connect your credentials, you may receive an error like this: Consumer key is missing . This occurs when the server can't parse the Authorization header details when authenticating over SSL. To resolve it, turn on the Include Credentials in Query toggle to pass the consumer key/secret as query string parameters instead and retry the credential. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/wordpress/

WordPress credentials # You can use these credentials to authenticate the following nodes: WordPress Prerequisites # Create a WordPress account or deploy WordPress on a server. Supported authentication methods # Basic auth Related resources # Refer to WordPress's API documentation for more information about the service. Using basic auth # To configure this credential, you'll need: Your WordPress Username A WordPress application Password Your WordPress URL Decide whether to Ignore SSL Issues Using this credential involves three steps: Enable two-step authentication . Create an application password . Set up the credential . Refer to the detailed instructions below for each step. Enable two-step authentication # To generate an application password, you must first enable Two-Step Authentication in WordPress. If you've already done this, skip to the next section . Open your WordPress profile . Select Security from the left menu. Select Two-Step Authentication . The Two-Step Authentication page opens. If Two-Step Authentication isn't enabled, you must enable it. Choose whether to enable it using an authenticator app or SMS codes and follow the on-screen instructions. Refer to WordPress's Enable Two-Step Authentication for detailed instructions. Create an application password # With Two-Step Authentication enabled, you can now generate an application password: From the WordPress Security > Two-Step Authentication page, select + Add new application password in the Application passwords section. Enter an Application name , like n8n integration . Select Generate Password . Copy the password it generates. You'll use this in your n8n credential. Set up the credential # Congratulations! You're now ready to set up your n8n credential: Enter your WordPress Username in your n8n credential. Enter the application password you copied above as the Password in your n8n credential. Enter the URL of your WordPress site as the WordPress URL . Optional: Use the Ignore SSL Issues to choose whether you want the n8n credential to connect even if SSL certificate validation fails (turned on) or whether to respect SSL certificate validation (turned off). Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/workable/

Workable credentials # You can use these credentials to authenticate the following nodes: Workable Trigger Prerequisites # Create a Workable account. Supported authentication methods # API key Related resources # Refer to Workable's API documentation for more information about the service. Using API key # To configure this credential, you'll need: A Subdomain : Your Workable subdomain is the part of your Workable domain between https:// and .workable.com . So if the full domain is https://n8n.workable.com , the subdomain is n8n . The subdomain is also displayed on your Workable Company Profile page. An Access Token : Go to your profile > Integrations > Apps and select Generate API token . Refer to Generate a new token for more information. Token scopes If you're using this credential with the Workable Trigger node, select the r_candidates and r_jobs scopes when you generate your token. If you're using this credential in other ways, select scopes that are relevant for your use case. Refer to Supported API scopes for more information on scopes. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/xata/

Xata credentials # You can use these credentials to authenticate the following nodes: Xata Prerequisites # Create a Xata database or an account on an existing database. Supported authentication methods # API key Related resources # Refer to Xata's documentation for more information about the service. View n8n's Advanced AI documentation. Using API key # To configure this credential, you'll need: The Database Endpoint : The Workspace API requires that you identify the database you're requesting information from using this format: https://{workspace-display-name}-{workspace-id}.{region}.xata.sh/db/{dbname} . Refer to Workspace API for more information. {workspace-display-name} : The workspace display name is an optional identifier you can include in your Database Endpoint. The API ignores it, but including it can make it easier to figure out which workspace this database is in if you're saving multiple credentials. {workspace-id} : The unique ID of the workspace, 6 alphanumeric characters. {region} : The hosting region for the database. This value must match the database region configuration. {dbname} : The name of the database you're interacting with. A Branch : Enter the name of the GitHub branch for your database. An API Key : To generate an API key, go to Account Settings and select + Add a key . Refer to Generate an API Key for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/xero/

Xero credentials # You can use these credentials to authenticate the following nodes: Xero Prerequisites # Create a Xero account. Supported authentication methods # OAuth2 Related resources # Refer to Zero's API documentation for more information about the service. Using OAuth2 # To configure this credential, you'll need: A Client ID : Generated when you create a new app for a custom connection. A Client Secret : Generated when you create a new app for a custom connection. To generate your Client ID and Client Secret, create an OAuth2 custom connection app in your Xero developer portal My Apps . Use these settings for your app: Xero App Name Xero doesn't support app instances within the Xero Developer Centre that contain n8n in their name. Select Web app as the Integration Type . For the Company or Application URL , enter the URL of your n8n server or reverse proxy address. For cloud users, for example, this is: https://your-username.app.n8n.cloud/ . Copy the OAuth Redirect URL from n8n and add it as an OAuth 2.0 redirect URI in your app. Select appropriate scopes for your app. Refer to OAuth2 Scopes for more information. To use all functionality in the Xero node, add the accounting.contacts and accounting.transactions scopes. Refer to Xero's OAuth Custom Connections documentation for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/sendemail/yahoo/

Yahoo Send Email credentials # Follow these steps to configure the Send Email credentials with a Yahoo account. Prerequisites # To follow these instructions, you must first generate an app password: Log in to your Yahoo account Security page . Select Generate app password or Generate and manage app passwords . Select Get Started . Enter an App name for your new app password, like n8n credential . Select Generate password . Copy the generated app password. You'll use this in your n8n credential. Refer to Yahoo's Generate and manage 3rd-party app passwords for more information. Set up the credential # To configure the Send Email credential to use Yahoo Mail: Enter your Yahoo email address as the User . Enter the app password you generated above as the Password . Enter smtp.mail.yahoo.com as the Host . For the Port : Keep the default 465 for SSL or if you're unsure what to use. Enter 587 for TLS. Turn on the SSL/TLS toggle. Refer to IMAP server settings for Yahoo Mail for more information. If the settings above don't work for you, check with your email administrator. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/imap/yahoo/

Yahoo IMAP credentials # Follow these steps to configure the IMAP credentials with a Yahoo account. Prerequisites # To follow these instructions, you must first generate an app password: Log in to your Yahoo account Security page . Select Generate app password or Generate and manage app passwords . Select Get Started . Enter an App name for your new app password, like n8n credential . Select Generate password . Copy the generated app password. You'll use this in your n8n credential. Refer to Yahoo's Generate and manage 3rd-party app passwords for more information. Set up the credential # To set up the IMAP credential with a Yahoo Mail account, use these settings: Enter your Yahoo email address as the User . Enter the app password you generated above as the Password . Enter imap.mail.yahoo.com as the Host . Keep the default Port number of 993 . Check with your email administrator if this port doesn't work. Turn on the SSL/TLS toggle. Check with your email administrator about whether to Allow Self-Signed Certificates . Refer to Set up IMAP for Yahoo mail account for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/zabbix/

Zabbix credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create a Zabbix Cloud account or self-host your own Zabbix server. Supported authentication methods # API key Related resources # Refer to Zabbix's API documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using API key # To configure this credential, you'll need: an API Token : An API key for your Zabbix user. the URL : The URL of your Zabbix server. Don't include /zabbix as part of the URL. Refer to Zabbix's API documentation for more information about authenticating to the service. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/zammad/

Zammad credentials # You can use these credentials to authenticate the following nodes: Zammad Prerequisites # Create a hosted Zammad account or set up your own Zammad instance. For token authentication, enable API Token Access in Settings > System > API . Refer to Setting up a Zammad for more information. Supported authentication methods # Basic auth Token auth: Zammad recommends using this authentication method. Related resources # Refer to Zammad's API Authentication documentation for more information about authenticating with the service. Using basic auth # To configure this credential, you'll need: A Base URL : Enter the URL of your Zammad instance. An Email address: Enter the email address you use to log in to Zammad. A Password : Enter your Zammad password. Ignore SSL Issues : When turned on, n8n will connect even if SSL certificate validation fails. Using token auth # To configure this credential, you'll need: A Base URL : Enter the URL of your Zammad instance. An Access Token : Once API Token Access is enabled for the Zammad instance, any user with the user_preferences.access_token permission can generate an Access Token by going to your avatar > Profile > Token Access and Create a new token. The access token permissions depend on what actions you'd like to complete with this credential. For all functionality within the Zammad node, select: admin.group admin.organization admin.user ticket.agent ticket.customer Ignore SSL Issues : When turned on, n8n will connect even if SSL certificate validation fails. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/zendesk/

Zendesk credentials # You can use these credentials to authenticate the following nodes: Zendesk Zendesk Trigger Prerequisites # Create a Zendesk account. For API token authentication, enable token access to the API in Admin Center under Apps and integrations > APIs > Zendesk APIs . Supported authentication methods # API token OAuth2 Related resources # Refer to Zendesk's API documentation for more information about the service. Using API token # To configure this credential, you'll need: Your Subdomain : Your Zendesk subdomain is the portion of the URL between https:// and .zendesk.com . For example, if the Zendesk URL is https://n8n-example.zendesk.com/agent/dashboard , the subdomain is n8n-example . An Email address: Enter the email address you use to log in to Zendesk. An API Token : Generate an API token in Apps and integrations > APIs > Zendesk API . Refer to API token for more information. Using OAuth2 # To configure this credential, you'll need: A Client ID : Generated when you create a new OAuth client. A Client Secret : Generated when you create a new OAuth client. Your Subdomain : Your Zendesk subdomain is the portion of the URL between https:// and .zendesk.com . For example, if the Zendesk URL is https://n8n-example.zendesk.com/agent/dashboard , the subdomain is n8n-example . To create a new OAuth client, go to Apps and integrations > APIs > Zendesk API > OAuth Clients . Use these settings: Copy the OAuth Redirect URL from n8n and enter it as a Redirect URL in the OAuth client. Copy the Unique identifier for the Zendesk client and enter this as your n8n Client ID . Copy the Secret from Zendesk and enter this as your n8n Client Secret Refer to Registering your application with Zendesk for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/zep/

Zep credentials # You can use these credentials to authenticate the following nodes: Zep Zep Vector Store Supported authentication methods # API key Related resources # Refer to Zep's Cloud SDK documentation and Open Source SDK documentation for more information about the service. Refer to Zep's REST API documentation for information about the API. View n8n's Advanced AI documentation. Using API key # To configure this credential, you'll need a Zep server with at least one project and: An API URL An API Key Setup depends on whether you're using Zep Cloud or self-hosted Zep Open Source. Zep Cloud setup # Follow these instructions if you're using Zep Cloud : In Zep, open the Project Settings . In the Project Keys section, select Add Key . Enter a Key Name , like n8n integration . Select Create . Copy the key and enter it in your n8n integration as the API Key . Turn on the Cloud toggle. Self-hosted Zep Open Source setup # Follow these instructions if you're self-hosting Zep Open Source : Enter the JWT token for your Zep server as the API Key in n8n. If you haven't generated a JWT token for your Zep server before, refer to Zep's Configuring Authentication for instructions. Make sure the Cloud toggle is off. Enter the URL for your Zep server as the API URL . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/zoho/

Zoho credentials # You can use these credentials to authenticate the following nodes: Zoho CRM Prerequisites # Create a Zoho account. Supported authentication methods # OAuth2 Related resources # Refer to Zoho's CRM API documentation for more information about the service. Using OAuth2 # To configure this credential, you'll need: An Access Token URL : Zoho provides region-specific access token URLs. Select the region that best fits your Zoho data center: AU : Select this option for Australia data center. CN : Select this option for Canada data center. EU : Select this option for the European Union data center. IN : Select this option for the India data center. US : Select this option for the United States data center. Refer to Multi DC for more information about selecting a data center. Note for n8n Cloud users Cloud users don't need to provide connection details. Select Connect my account to connect through your browser. If you need to configure OAuth2 from scratch, register an application with Zoho. Use these settings for your application: Select Server-based Applications as the Client Type . Copy the OAuth Callback URL from n8n and enter it in the Zoho Authorized Redirect URIs field. Copy the Client ID and Client Secret from the application and enter them in your n8n credential. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/zoom/

Zoom credentials # You can use these credentials to authenticate the following nodes: Zoom Prerequisites # Create a Zoom account. Your account must have one of the following permissions: Account owner Account admin Zoom for developers role Supported authentication methods # API JWT token OAuth2 API JWT token deprecation Zoom removed support for JWT access tokens in June 2023. You must use OAuth2 for all new credentials. Related resources # Refer to Zoom's API documentation for more information about the service. Using API JWT token # This authentication method has been fully deprecated by Zoom. Don't create new credentials with it. To configure this credential, you'll need: A JWT token : To create a JWT token, create a new JWT app in the Zoom App Marketplace . Using OAuth2 # To configure this credential, you'll need: A Client ID : Generated when you create an OAuth app on the Zoom App Marketplace. A Client Secret : Generated when you create an OAuth app. To generate your Client ID and Client Secret , create an OAuth app . Use these settings for your OAuth app: Select User-managed app for Select how the app is managed . Copy the OAuth Callback URL from n8n and enter it as an OAuth Redirect URL in Zoom. If your n8n credential displays a Whitelist URL , also enter that URL as a an OAuth Redirect URL . Enter Scopes for the scopes you plan to use. For all functionality in the Zoom node, select: meeting:read meeting:write Refer to OAuth scopes | Meeting scopes for more information on meeting scopes. Copy the Client ID and Client Secret provided in the Zoom app and enter them in your n8n credential. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/zscalerzia/

Zscaler ZIA credentials # You can use these credentials to authenticate when using the HTTP Request node to make a Custom API call . Prerequisites # Create an admin account on a Zscaler Internet Access (ZIA) cloud instance. Supported authentication methods # Basic auth and API key combo Related resources # Refer to Zscaler ZIA's documentation for more information about the service. This is a credential-only node. Refer to Custom API operations to learn more. View example workflows and related content on n8n's website. Using basic auth and API key combo # To configure this credential, you'll need: A Base URL : Enter the base URL of your Zscaler ZIA cloud name. To get your base URL, log in to the ZIA Admin Portal and go to Administration > Cloud Service API Security . The base URL is displayed in both the Cloud Service API Key tab and the OAuth 2.0 Authorization Servers tab. A Username : Enter your ZIA admin username. A Password : Enter your ZIA admin password. An Api Key : Get an API key by creating one from Administration > Cloud Service API Security > Cloud Service API Key . Refer to About Cloud Service API Key for more detailed instructions. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/credentials/zulip/

Zulip credentials # You can use these credentials to authenticate the following nodes: Zulip Prerequisites # Create a Zulip account. Supported authentication methods # API key Related resources # Refer to Zulip's API documentation for more information about the service. Using API key # To configure this credential, you'll need: A URL : Enter the URL of your Zulip domain. An Email address: Enter the email address you use to log in to Zulip. An API Key : Get your API key in the Gear cog > Personal Settings > Account & privacy > API Key . Refer to API Keys for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================
