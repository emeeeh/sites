### Content from Other URLs ###


================================================================================
Source URL: https://docs.n8n.io/user-management/account-types/

Account types # There are three account types: owner, admin, and member. The account type affects the user permissions and access. Feature availability To use admin accounts, you need a pro or enterprise plan. Account types and role types Account types and role types are different things. Role types are part of RBAC . Every account has one type. The account can have different role types for different projects . Create a member-level account for the owner n8n recommends that owners create a member-level account for themselves. Owners can see and edit all workflows, credentials, and projects. However, there is no way to see who created a particular workflow, so there is a risk of overriding other people's work if you build and edit workflows as an owner. Permission Owner Admin Member Manage own email and password Manage own workflows View, create, and use tags Delete tags View and share all workflows View, edit, and share all credentials Set up and use Source control Create projects View all projects Add and remove users Access the Cloud dashboard Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/credentials/add-edit-credentials/

Create and edit credentials # Credentials are securely stored authentication information used to connect n8n workflows to external services such as APIs, or databases. Create a credential # Select the button in the upper-left corner of the side menu. Select credential. If your n8n instance supports projects , you'll also need to choose whether to create the credential inside your personal space or a specific project you have access to. If you're using the community version, you'll create the credential inside your personal space. Select the app or service you wish to connect to. Or: Using the Create button in the upper-right corner from either the Overview page or a specific project. Select Credential. If you're doing this from the Overview page, you'll create the credential inside your personal space. If you're doing this from inside a project, you'll create the credential inside that specific project. Select the app or service you wish to connect to. You can also create new credential in the credential drop down when editing a node on the workflow editor. Once in the credential modal, enter the details required by your service. Refer to your service's page in the credentials library for guidance. When you save a credential, n8n tests it to confirm it works. Credentials naming n8n names new credentials " node name account" by default. You can rename the credentials by clicking on the name, similarly to renaming nodes. It's good practice to give them names that identify the app or service, type, and purpose of the credential. A naming convention makes it easier to keep track of and identify your credentials. Expressions in credentials # You can use expressions to set credentials dynamically as your workflow runs: In your workflow, find the data path containing the credential. This varies depending on the exact parameter names in your data. Make sure that the data containing the credential is available in the workflow when you get to the node that needs it. When creating your credential, hover over the field where you want to use an expression. Toggle Expression on. Enter your expression. Example workflow # View workflow file Using the example # To load the template into your n8n instance: Download the workflow JSON file. Open a new workflow in your n8n instance. Copy in the JSON, or select Workflow menu > Import from file... . The example workflows use Sticky Notes to guide you: Yellow: notes and information. Green: instructions to run the workflow. Orange: you need to change something to make the workflow work. Blue: draws attention to a key feature of the example. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/advanced-ai/

Advanced AI # Build AI functionality using n8n: from creating your own chat bot, to using AI to process documents and data from other sources. Feature availability This feature is available on Cloud and self-hosted n8n, in version 1.19.4 and above. Get started Work through the short tutorial to learn the basics of building AI workflows in n8n. Tutorial Use a Starter Kit Try n8n's Self-hosted AI Starter Kit to quickly start building AI workflows. Self-hosted AI Starter Kit Explore examples and concepts Browse examples and workflow templates to help you build. Includes explanations of important AI concepts. Examples How n8n uses LangChain Learn more about how n8n builds on LangChain. LangChain in n8n Browse AI templates Explore a wide range of AI workflow templates on the n8n website. AI workflows on n8n.io Related resources # Related documentation and tools. Node types # This feature uses Cluster nodes : groups of root and sub nodes that work together. Cluster nodes are node groups that work together to provide functionality in an n8n workflow. Instead of using a single node, you use a root node and one or more sub-nodes that extend the functionality of the node. Workflow templates # You can browse workflow templates in-app or on the n8n website Workflows page. Refer to Templates for information on accessing templates in-app. Chat trigger # Use the n8n Chat Trigger to trigger a workflow based on chat interactions. Chatbot widget # n8n provides a chatbot widget that you can use as a frontend for AI-powered chat workflows. Refer to the @n8n/chat npm page for usage information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/advanced-ai/examples/agent-chain-comparison/

Demonstration of key differences between agents and chains # In this workflow you can choose whether your chat query goes to an agent or chain . It shows some of the ways that agents are more powerful than chains. View workflow file Key features # This workflow uses: Chat Trigger : start your workflow and respond to user chat interactions. The node provides a customizable chat interface. Switch node : directs your query to either the agent or chain, depending on which you specify in your query. If you say "agent" it sends it to the agent. If you say "chain" it sends it to the chain. Agent : the Agent node interacts with other components of the workflow and makes decisions about what tools to use. Basic LLM Chain : the Basic LLM Chain node supports chatting with a connected LLM, but doesn't support memory or tools. Using the example # To load the template into your n8n instance: Download the workflow JSON file. Open a new workflow in your n8n instance. Copy in the JSON, or select Workflow menu > Import from file... . The example workflows use Sticky Notes to guide you: Yellow: notes and information. Green: instructions to run the workflow. Orange: you need to change something to make the workflow work. Blue: draws attention to a key feature of the example. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows/advanced-ai/examples/agents_vs_chains.json

{ "name": "Agents vs chains", "nodes": [ { "parameters": {}, "id": "9e1d8f35-e1ba-4600-977d-e54a919c2c62", "name": "Chat Trigger", "type": "@n8n/n8n-nodes-langchain.chatTrigger", "typeVersion": 1, "position": [ 520, 420 ], "webhookId": "84bfdbd0-e2ce-4bfa-b746-985e64a14484" }, { "parameters": { "options": {} }, "id": "4b89df4b-4f78-4f52-a51d-eeb66a7948e5", "name": "OpenAI Chat Model", "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi", "typeVersion": 1, "position": [ 1020, 420 ], "credentials": { "openAiApi": { "id": "tW3bkXa0SAK0OzvR", "name": "OpenAi account Debs" } } }, { "parameters": { "options": {} }, "id": "a0045df2-d212-4e6a-a2d4-722136dcb8b5", "name": "OpenAI Chat Model1", "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi", "typeVersion": 1, "position": [ 980, 880 ], "credentials": { "openAiApi": { "id": "tW3bkXa0SAK0OzvR", "name": "OpenAi account Debs" } } }, { "parameters": {}, "id": "d702f647-1fa7-4b4f-91b1-e0152326ea11", "name": "Window Buffer Memory", "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow", "typeVersion": 1.2, "position": [ 1280, 460 ] }, { "parameters": {}, "id": "76cc359a-5ec8-446a-a8e0-9035d18247cb", "name": "Wikipedia", "type": "@n8n/n8n-nodes-langchain.toolWikipedia", "typeVersion": 1, "position": [ 1540, 340 ] }, { "parameters": { "options": {} }, "id": "01d1785f-f7c4-47d2-97b7-76eeff68002d", "name": "AI Agent", "type": "@n8n/n8n-nodes-langchain.agent", "typeVersion": 1.5, "position": [ 1060, 140 ] }, { "parameters": { "messages": { "messageValues": [ { "message": "Every time you respond, start your response with the sentence: \"This message came from the chain\"." } ] } }, "id": "bcdcd704-13f5-4906-b337-7ec4629b9781", "name": "Basic LLM Chain", "type": "@n8n/n8n-nodes-langchain.chainLlm", "typeVersion": 1.4, "position": [ 1040, 680 ] }, { "parameters": { "content": "## Try it out\n\nSelect **Chat**, and try out these queries:\n\n- Please show me a Wikipedia article about cats (agent)\n- Please show me a Wikipedia article about cats (chain)\n- What was my last question? (chain)\n- What was my last question? (agent)\n", "height": 343.8587887368956, "color": 4 }, "id": "f08e231b-739a-4b9d-b738-139b7e3bd60b", "name": "Sticky Note", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 240, 420 ] }, { "parameters": { "content": "**Set your credentials**", "height": 193, "width": 167, "color": 2 }, "id": "5421fd4d-c82f-483a-8238-869b9a10000d", "name": "Sticky Note1", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 980, 360 ] }, { "parameters": { "content": "**Set your credentials**", "height": 193, "width": 167, "color": 2 }, "id": "23fac3a8-a220-40a5-8d3d-4a3013b0f1da", "name": "Sticky Note2", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 940, 820 ] }, { "parameters": { "content": "**Memory allows the agent to access previous parts of the chat**\n", "height": 244, "color": 5 }, "id": "08397bde-06e4-4bff-b130-cbc4408a0ecc", "name": "Sticky Note3", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 1200, 360 ] }, { "parameters": { "content": "**The agent can use the Wikipedia tool to access articles from Wikipedia**", "height": 238, "color": 5 }, "id": "a53ff4f2-9d06-4166-9ad6-760cd8fe4a54", "name": "Sticky Note4", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 1460, 240 ] }, { "parameters": { "rules": { "values": [ { "conditions": { "options": { "caseSensitive": false, "leftValue": "", "typeValidation": "strict" }, "conditions": [ { "leftValue": "={{ $json.chatInput }}", "rightValue": "agent", "operator": { "type": "string", "operation": "contains" } } ], "combinator": "and" } }, { "conditions": { "options": { "caseSensitive": false, "leftValue": "", "typeValidation": "strict" }, "conditions": [ { "id": "248f4a34-89c1-4d1e-867a-daa024c8635a", "leftValue": "={{ $json.chatInput }}", "rightValue": "chain", "operator": { "type": "string", "operation": "contains" } } ], "combinator": "and" } } ] }, "options": { "ignoreCase": true } }, "id": "ab2bff8d-e914-421d-9aa3-9d0ad815cea6", "name": "Check user input for \"chain\" or \"agent\"", "type": "n8n-nodes-base.switch", "typeVersion": 3, "position": [ 740, 420 ] }, { "parameters": { "content": "## Next steps\n\nLearn more about [Advanced AI in n8n](https://docs.n8n.io/advanced-ai/)" }, "id": "f077f8e6-789a-4db1-8402-fb173c296017", "name": "Sticky Note5", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 1560, 840 ] } ], "pinData": {}, "connections": { "Chat Trigger": { "main": [ [ { "node": "Check user input for \"chain\" or \"agent\"", "type": "main", "index": 0 } ] ] }, "OpenAI Chat Model": { "ai_languageModel": [ [ { "node": "AI Agent", "type": "ai_languageModel", "index": 0 } ] ] }, "OpenAI Chat Model1": { "ai_languageModel": [ [ { "node": "Basic LLM Chain", "type": "ai_languageModel", "index": 0 } ] ] }, "Window Buffer Memory": { "ai_memory": [ [ { "node": "AI Agent", "type": "ai_memory", "index": 0 } ] ] }, "Wikipedia": { "ai_tool": [ [ { "node": "AI Agent", "type": "ai_tool", "index": 0 } ] ] }, "Check user input for \"chain\" or \"agent\"": { "main": [ [ { "node": "AI Agent", "type": "main", "index": 0 } ], [ { "node": "Basic LLM Chain", "type": "main", "index": 0 } ] ] } }, "active": false, "settings": { "executionOrder": "v1" }, "versionId": "59784a0f-0601-4456-b48d-9a191e203461", "meta": { "templateCredsSetupCompleted": true, "instanceId": "cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7" }, "id": "qK43vJw6dRZkXo6h", "tags": [ { "createdAt": "2021-06-25T07:47:07.640Z", "updatedAt": "2021-06-25T07:47:07.640Z", "id": "1", "name": "docs" }, { "createdAt": "2023-02-22T12:06:03.372Z", "updatedAt": "2023-02-22T12:06:03.372Z", "id": "63", "name": "createdBy:Debs" } ] }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/ai-code/#feature-limits

AI coding with GPT # Not available on self-hosted. Python isn't supported. /// Use AI in the Code node # Feature availability AI assistance in the Code node is available to Cloud users. It isn't available in self-hosted n8n. AI generated code overwrites your code If you've already written some code on the Code tab, the AI generated code will replace it. n8n recommends using AI as a starting point to create your initial code, then editing it as needed. To use ChatGPT to generate code in the Code node: In the Code node, set Language to JavaScript . Select the Ask AI tab. Write your query. Select Generate Code . n8n sends your query to ChatGPT, then displays the result in the Code tab. Usage limits # During the trial phase there are no usage limits. If n8n makes the feature permanent, there may be usage limits as part of your pricing tier. Feature limits # The ChatGPT implementation in n8n has the following limitations: The AI writes code that manipulates data from the n8n workflow. You can't ask it to pull in data from other sources. The AI doesn't know your data, just the schema, so you need to tell it things like how to find the data you want to extract, or how to check for null. Nodes before the Code node must execute and deliver data to the Code node before you run your AI query. Doesn't work with large incoming data schemas. May have issues if there are a lot of nodes before the code node. Writing good prompts # Writing good prompts increases the chance of getting useful code back. Some general tips: Provide examples: if possible, give a sample expected output. This helps the AI to better understand the transformation or logic you’re aiming for. Describe the processing steps: if there are specific processing steps or logic that should apply to the data, list them in sequence. For example: "First, filter out all users under 18. Then, sort the remaining users by their last name." Avoid ambiguities: while the AI understands various instructions, being clear and direct ensures you get the most accurate code. Instead of saying "Get the older users," you might say "Filter users who are 60 years and above." Be clear about what you expect as the output. Do you want the data transformed, filtered, aggregated, or sorted? Provide as much detail as possible. And some n8n-specific guidance: Think about the input data: make sure ChatGPT knows which pieces of the data you want to access, and what the incoming data represents. You may need to tell ChatGPT about the availability of n8n's built-in methods and variables. Declare interactions between nodes: if your logic involves data from multiple nodes, specify how they should interact. "Merge the output of 'Node A' with 'Node B' based on the 'userID' property". if you prefer data to come from certain nodes or to ignore others, be clear: "Only consider data from the 'Purchases' node and ignore the 'Refunds' node." Ensure the output is compatible with n8n. Refer to Data structure for more information on the data structure n8n requires. Example prompts # These examples show a range of possible prompts and tasks. Example 1: Find a piece of data inside a second dataset # To try the example yourself, download the example workflow and import it into n8n. In the third Code node, enter this prompt: The slack data contains only one item. The input data represents all Notion users. Sometimes the person property that holds the email can be null. I want to find the notionId of the Slack user and return it. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 const slackUser = $ ( "Mock Slack" ). all ()[ 0 ]; const notionUsers = $input . all (); const slackUserEmail = slackUser . json . email ; const notionUser = notionUsers . find ( ( user ) => user . json . person && user . json . person . email === slackUserEmail ); return notionUser ? [{ json : { notionId : notionUser . json . id } }] : []; Example 2: Data transformation # To try the example yourself, download the example workflow and import it into n8n. In the Join items Code node, enter this prompt: Return a single line of text that has all usernames listed with a comma. Each username should be enquoted with a double quotation mark. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 const items = $input . all (); const usernames = items . map (( item ) => `" ${ item . json . username } "` ); const result = usernames . join ( ", " ); return [{ json : { usernames : result } }]; Example 3: Summarize data and create a Slack message # To try the example yourself, download the example workflow and import it into n8n. In the Summarize Code node, enter this prompt: Create a markdown text for Slack that counts how many ideas, features and bugs have been submitted. The type of submission is saved in the property_type field. A feature has the property "Feature", a bug has the property "Bug" and an idea has the property "Bug". Also, list the five top submissions by vote in that message. Use " " as markdown for links. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 const submissions = $input . all (); // Count the number of ideas, features, and bugs let ideaCount = 0 ; let featureCount = 0 ; let bugCount = 0 ; submissions . forEach (( submission ) => { switch ( submission . json . property_type [ 0 ]) { case "Idea" : ideaCount ++ ; break ; case "Feature" : featureCount ++ ; break ; case "Bug" : bugCount ++ ; break ; } }); // Sort submissions by votes and take the top 5 const topSubmissions = submissions . sort (( a , b ) => b . json . property_votes - a . json . property_votes ) . slice ( 0 , 5 ); let topSubmissionText = "" ; topSubmissions . forEach (( submission ) => { topSubmissionText += `< ${ submission . json . url } | ${ submission . json . name } > with ${ submission . json . property_votes } votes\n` ; }); // Construct the Slack message const slackMessage = `*Summary of Submissions*\n Ideas: ${ ideaCount } \n Features: ${ featureCount } \n Bugs: ${ bugCount } \n Top 5 Submissions:\n ${ topSubmissionText } ` ; return [{ json : { slackMessage } }]; Reference incoming node data explicitly # If your incoming data contains nested fields, using dot notation to reference them can help the AI understand what data you want. To try the example yourself, download the example workflow and import it into n8n. In the second Code node, enter this prompt: The data in "Mock data" represents a list of people. For each person, return a new item containing personal_info.first_name and work_info.job_title. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 const items = $input . all (); const newItems = items . map (( item ) => { const firstName = item . json . personal_info . first_name ; const jobTitle = item . json . work_info . job_title ; return { json : { firstName , jobTitle , }, }; }); return newItems ; Related resources # Pluralsight offer a short guide on How to use ChatGPT to write code , which includes example prompts. Fixing the code # The AI-generated code may work without any changes, but you may have to edit it. You need to be aware of n8n's Data structure . You may also find n8n's built-in methods and variables useful. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/ai-code/#reference-incoming-node-data-explicitly

AI coding with GPT # Not available on self-hosted. Python isn't supported. /// Use AI in the Code node # Feature availability AI assistance in the Code node is available to Cloud users. It isn't available in self-hosted n8n. AI generated code overwrites your code If you've already written some code on the Code tab, the AI generated code will replace it. n8n recommends using AI as a starting point to create your initial code, then editing it as needed. To use ChatGPT to generate code in the Code node: In the Code node, set Language to JavaScript . Select the Ask AI tab. Write your query. Select Generate Code . n8n sends your query to ChatGPT, then displays the result in the Code tab. Usage limits # During the trial phase there are no usage limits. If n8n makes the feature permanent, there may be usage limits as part of your pricing tier. Feature limits # The ChatGPT implementation in n8n has the following limitations: The AI writes code that manipulates data from the n8n workflow. You can't ask it to pull in data from other sources. The AI doesn't know your data, just the schema, so you need to tell it things like how to find the data you want to extract, or how to check for null. Nodes before the Code node must execute and deliver data to the Code node before you run your AI query. Doesn't work with large incoming data schemas. May have issues if there are a lot of nodes before the code node. Writing good prompts # Writing good prompts increases the chance of getting useful code back. Some general tips: Provide examples: if possible, give a sample expected output. This helps the AI to better understand the transformation or logic you’re aiming for. Describe the processing steps: if there are specific processing steps or logic that should apply to the data, list them in sequence. For example: "First, filter out all users under 18. Then, sort the remaining users by their last name." Avoid ambiguities: while the AI understands various instructions, being clear and direct ensures you get the most accurate code. Instead of saying "Get the older users," you might say "Filter users who are 60 years and above." Be clear about what you expect as the output. Do you want the data transformed, filtered, aggregated, or sorted? Provide as much detail as possible. And some n8n-specific guidance: Think about the input data: make sure ChatGPT knows which pieces of the data you want to access, and what the incoming data represents. You may need to tell ChatGPT about the availability of n8n's built-in methods and variables. Declare interactions between nodes: if your logic involves data from multiple nodes, specify how they should interact. "Merge the output of 'Node A' with 'Node B' based on the 'userID' property". if you prefer data to come from certain nodes or to ignore others, be clear: "Only consider data from the 'Purchases' node and ignore the 'Refunds' node." Ensure the output is compatible with n8n. Refer to Data structure for more information on the data structure n8n requires. Example prompts # These examples show a range of possible prompts and tasks. Example 1: Find a piece of data inside a second dataset # To try the example yourself, download the example workflow and import it into n8n. In the third Code node, enter this prompt: The slack data contains only one item. The input data represents all Notion users. Sometimes the person property that holds the email can be null. I want to find the notionId of the Slack user and return it. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 const slackUser = $ ( "Mock Slack" ). all ()[ 0 ]; const notionUsers = $input . all (); const slackUserEmail = slackUser . json . email ; const notionUser = notionUsers . find ( ( user ) => user . json . person && user . json . person . email === slackUserEmail ); return notionUser ? [{ json : { notionId : notionUser . json . id } }] : []; Example 2: Data transformation # To try the example yourself, download the example workflow and import it into n8n. In the Join items Code node, enter this prompt: Return a single line of text that has all usernames listed with a comma. Each username should be enquoted with a double quotation mark. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 const items = $input . all (); const usernames = items . map (( item ) => `" ${ item . json . username } "` ); const result = usernames . join ( ", " ); return [{ json : { usernames : result } }]; Example 3: Summarize data and create a Slack message # To try the example yourself, download the example workflow and import it into n8n. In the Summarize Code node, enter this prompt: Create a markdown text for Slack that counts how many ideas, features and bugs have been submitted. The type of submission is saved in the property_type field. A feature has the property "Feature", a bug has the property "Bug" and an idea has the property "Bug". Also, list the five top submissions by vote in that message. Use " " as markdown for links. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 const submissions = $input . all (); // Count the number of ideas, features, and bugs let ideaCount = 0 ; let featureCount = 0 ; let bugCount = 0 ; submissions . forEach (( submission ) => { switch ( submission . json . property_type [ 0 ]) { case "Idea" : ideaCount ++ ; break ; case "Feature" : featureCount ++ ; break ; case "Bug" : bugCount ++ ; break ; } }); // Sort submissions by votes and take the top 5 const topSubmissions = submissions . sort (( a , b ) => b . json . property_votes - a . json . property_votes ) . slice ( 0 , 5 ); let topSubmissionText = "" ; topSubmissions . forEach (( submission ) => { topSubmissionText += `< ${ submission . json . url } | ${ submission . json . name } > with ${ submission . json . property_votes } votes\n` ; }); // Construct the Slack message const slackMessage = `*Summary of Submissions*\n Ideas: ${ ideaCount } \n Features: ${ featureCount } \n Bugs: ${ bugCount } \n Top 5 Submissions:\n ${ topSubmissionText } ` ; return [{ json : { slackMessage } }]; Reference incoming node data explicitly # If your incoming data contains nested fields, using dot notation to reference them can help the AI understand what data you want. To try the example yourself, download the example workflow and import it into n8n. In the second Code node, enter this prompt: The data in "Mock data" represents a list of people. For each person, return a new item containing personal_info.first_name and work_info.job_title. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 const items = $input . all (); const newItems = items . map (( item ) => { const firstName = item . json . personal_info . first_name ; const jobTitle = item . json . work_info . job_title ; return { json : { firstName , jobTitle , }, }; }); return newItems ; Related resources # Pluralsight offer a short guide on How to use ChatGPT to write code , which includes example prompts. Fixing the code # The AI-generated code may work without any changes, but you may have to edit it. You need to be aware of n8n's Data structure . You may also find n8n's built-in methods and variables useful. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/ai-code/#usage-limits

AI coding with GPT # Not available on self-hosted. Python isn't supported. /// Use AI in the Code node # Feature availability AI assistance in the Code node is available to Cloud users. It isn't available in self-hosted n8n. AI generated code overwrites your code If you've already written some code on the Code tab, the AI generated code will replace it. n8n recommends using AI as a starting point to create your initial code, then editing it as needed. To use ChatGPT to generate code in the Code node: In the Code node, set Language to JavaScript . Select the Ask AI tab. Write your query. Select Generate Code . n8n sends your query to ChatGPT, then displays the result in the Code tab. Usage limits # During the trial phase there are no usage limits. If n8n makes the feature permanent, there may be usage limits as part of your pricing tier. Feature limits # The ChatGPT implementation in n8n has the following limitations: The AI writes code that manipulates data from the n8n workflow. You can't ask it to pull in data from other sources. The AI doesn't know your data, just the schema, so you need to tell it things like how to find the data you want to extract, or how to check for null. Nodes before the Code node must execute and deliver data to the Code node before you run your AI query. Doesn't work with large incoming data schemas. May have issues if there are a lot of nodes before the code node. Writing good prompts # Writing good prompts increases the chance of getting useful code back. Some general tips: Provide examples: if possible, give a sample expected output. This helps the AI to better understand the transformation or logic you’re aiming for. Describe the processing steps: if there are specific processing steps or logic that should apply to the data, list them in sequence. For example: "First, filter out all users under 18. Then, sort the remaining users by their last name." Avoid ambiguities: while the AI understands various instructions, being clear and direct ensures you get the most accurate code. Instead of saying "Get the older users," you might say "Filter users who are 60 years and above." Be clear about what you expect as the output. Do you want the data transformed, filtered, aggregated, or sorted? Provide as much detail as possible. And some n8n-specific guidance: Think about the input data: make sure ChatGPT knows which pieces of the data you want to access, and what the incoming data represents. You may need to tell ChatGPT about the availability of n8n's built-in methods and variables. Declare interactions between nodes: if your logic involves data from multiple nodes, specify how they should interact. "Merge the output of 'Node A' with 'Node B' based on the 'userID' property". if you prefer data to come from certain nodes or to ignore others, be clear: "Only consider data from the 'Purchases' node and ignore the 'Refunds' node." Ensure the output is compatible with n8n. Refer to Data structure for more information on the data structure n8n requires. Example prompts # These examples show a range of possible prompts and tasks. Example 1: Find a piece of data inside a second dataset # To try the example yourself, download the example workflow and import it into n8n. In the third Code node, enter this prompt: The slack data contains only one item. The input data represents all Notion users. Sometimes the person property that holds the email can be null. I want to find the notionId of the Slack user and return it. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 const slackUser = $ ( "Mock Slack" ). all ()[ 0 ]; const notionUsers = $input . all (); const slackUserEmail = slackUser . json . email ; const notionUser = notionUsers . find ( ( user ) => user . json . person && user . json . person . email === slackUserEmail ); return notionUser ? [{ json : { notionId : notionUser . json . id } }] : []; Example 2: Data transformation # To try the example yourself, download the example workflow and import it into n8n. In the Join items Code node, enter this prompt: Return a single line of text that has all usernames listed with a comma. Each username should be enquoted with a double quotation mark. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 const items = $input . all (); const usernames = items . map (( item ) => `" ${ item . json . username } "` ); const result = usernames . join ( ", " ); return [{ json : { usernames : result } }]; Example 3: Summarize data and create a Slack message # To try the example yourself, download the example workflow and import it into n8n. In the Summarize Code node, enter this prompt: Create a markdown text for Slack that counts how many ideas, features and bugs have been submitted. The type of submission is saved in the property_type field. A feature has the property "Feature", a bug has the property "Bug" and an idea has the property "Bug". Also, list the five top submissions by vote in that message. Use " " as markdown for links. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 const submissions = $input . all (); // Count the number of ideas, features, and bugs let ideaCount = 0 ; let featureCount = 0 ; let bugCount = 0 ; submissions . forEach (( submission ) => { switch ( submission . json . property_type [ 0 ]) { case "Idea" : ideaCount ++ ; break ; case "Feature" : featureCount ++ ; break ; case "Bug" : bugCount ++ ; break ; } }); // Sort submissions by votes and take the top 5 const topSubmissions = submissions . sort (( a , b ) => b . json . property_votes - a . json . property_votes ) . slice ( 0 , 5 ); let topSubmissionText = "" ; topSubmissions . forEach (( submission ) => { topSubmissionText += `< ${ submission . json . url } | ${ submission . json . name } > with ${ submission . json . property_votes } votes\n` ; }); // Construct the Slack message const slackMessage = `*Summary of Submissions*\n Ideas: ${ ideaCount } \n Features: ${ featureCount } \n Bugs: ${ bugCount } \n Top 5 Submissions:\n ${ topSubmissionText } ` ; return [{ json : { slackMessage } }]; Reference incoming node data explicitly # If your incoming data contains nested fields, using dot notation to reference them can help the AI understand what data you want. To try the example yourself, download the example workflow and import it into n8n. In the second Code node, enter this prompt: The data in "Mock data" represents a list of people. For each person, return a new item containing personal_info.first_name and work_info.job_title. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 const items = $input . all (); const newItems = items . map (( item ) => { const firstName = item . json . personal_info . first_name ; const jobTitle = item . json . work_info . job_title ; return { json : { firstName , jobTitle , }, }; }); return newItems ; Related resources # Pluralsight offer a short guide on How to use ChatGPT to write code , which includes example prompts. Fixing the code # The AI-generated code may work without any changes, but you may have to edit it. You need to be aware of n8n's Data structure . You may also find n8n's built-in methods and variables useful. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/ai-code/#fixing-the-code

AI coding with GPT # Not available on self-hosted. Python isn't supported. /// Use AI in the Code node # Feature availability AI assistance in the Code node is available to Cloud users. It isn't available in self-hosted n8n. AI generated code overwrites your code If you've already written some code on the Code tab, the AI generated code will replace it. n8n recommends using AI as a starting point to create your initial code, then editing it as needed. To use ChatGPT to generate code in the Code node: In the Code node, set Language to JavaScript . Select the Ask AI tab. Write your query. Select Generate Code . n8n sends your query to ChatGPT, then displays the result in the Code tab. Usage limits # During the trial phase there are no usage limits. If n8n makes the feature permanent, there may be usage limits as part of your pricing tier. Feature limits # The ChatGPT implementation in n8n has the following limitations: The AI writes code that manipulates data from the n8n workflow. You can't ask it to pull in data from other sources. The AI doesn't know your data, just the schema, so you need to tell it things like how to find the data you want to extract, or how to check for null. Nodes before the Code node must execute and deliver data to the Code node before you run your AI query. Doesn't work with large incoming data schemas. May have issues if there are a lot of nodes before the code node. Writing good prompts # Writing good prompts increases the chance of getting useful code back. Some general tips: Provide examples: if possible, give a sample expected output. This helps the AI to better understand the transformation or logic you’re aiming for. Describe the processing steps: if there are specific processing steps or logic that should apply to the data, list them in sequence. For example: "First, filter out all users under 18. Then, sort the remaining users by their last name." Avoid ambiguities: while the AI understands various instructions, being clear and direct ensures you get the most accurate code. Instead of saying "Get the older users," you might say "Filter users who are 60 years and above." Be clear about what you expect as the output. Do you want the data transformed, filtered, aggregated, or sorted? Provide as much detail as possible. And some n8n-specific guidance: Think about the input data: make sure ChatGPT knows which pieces of the data you want to access, and what the incoming data represents. You may need to tell ChatGPT about the availability of n8n's built-in methods and variables. Declare interactions between nodes: if your logic involves data from multiple nodes, specify how they should interact. "Merge the output of 'Node A' with 'Node B' based on the 'userID' property". if you prefer data to come from certain nodes or to ignore others, be clear: "Only consider data from the 'Purchases' node and ignore the 'Refunds' node." Ensure the output is compatible with n8n. Refer to Data structure for more information on the data structure n8n requires. Example prompts # These examples show a range of possible prompts and tasks. Example 1: Find a piece of data inside a second dataset # To try the example yourself, download the example workflow and import it into n8n. In the third Code node, enter this prompt: The slack data contains only one item. The input data represents all Notion users. Sometimes the person property that holds the email can be null. I want to find the notionId of the Slack user and return it. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 const slackUser = $ ( "Mock Slack" ). all ()[ 0 ]; const notionUsers = $input . all (); const slackUserEmail = slackUser . json . email ; const notionUser = notionUsers . find ( ( user ) => user . json . person && user . json . person . email === slackUserEmail ); return notionUser ? [{ json : { notionId : notionUser . json . id } }] : []; Example 2: Data transformation # To try the example yourself, download the example workflow and import it into n8n. In the Join items Code node, enter this prompt: Return a single line of text that has all usernames listed with a comma. Each username should be enquoted with a double quotation mark. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 const items = $input . all (); const usernames = items . map (( item ) => `" ${ item . json . username } "` ); const result = usernames . join ( ", " ); return [{ json : { usernames : result } }]; Example 3: Summarize data and create a Slack message # To try the example yourself, download the example workflow and import it into n8n. In the Summarize Code node, enter this prompt: Create a markdown text for Slack that counts how many ideas, features and bugs have been submitted. The type of submission is saved in the property_type field. A feature has the property "Feature", a bug has the property "Bug" and an idea has the property "Bug". Also, list the five top submissions by vote in that message. Use " " as markdown for links. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 const submissions = $input . all (); // Count the number of ideas, features, and bugs let ideaCount = 0 ; let featureCount = 0 ; let bugCount = 0 ; submissions . forEach (( submission ) => { switch ( submission . json . property_type [ 0 ]) { case "Idea" : ideaCount ++ ; break ; case "Feature" : featureCount ++ ; break ; case "Bug" : bugCount ++ ; break ; } }); // Sort submissions by votes and take the top 5 const topSubmissions = submissions . sort (( a , b ) => b . json . property_votes - a . json . property_votes ) . slice ( 0 , 5 ); let topSubmissionText = "" ; topSubmissions . forEach (( submission ) => { topSubmissionText += `< ${ submission . json . url } | ${ submission . json . name } > with ${ submission . json . property_votes } votes\n` ; }); // Construct the Slack message const slackMessage = `*Summary of Submissions*\n Ideas: ${ ideaCount } \n Features: ${ featureCount } \n Bugs: ${ bugCount } \n Top 5 Submissions:\n ${ topSubmissionText } ` ; return [{ json : { slackMessage } }]; Reference incoming node data explicitly # If your incoming data contains nested fields, using dot notation to reference them can help the AI understand what data you want. To try the example yourself, download the example workflow and import it into n8n. In the second Code node, enter this prompt: The data in "Mock data" represents a list of people. For each person, return a new item containing personal_info.first_name and work_info.job_title. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 const items = $input . all (); const newItems = items . map (( item ) => { const firstName = item . json . personal_info . first_name ; const jobTitle = item . json . work_info . job_title ; return { json : { firstName , jobTitle , }, }; }); return newItems ; Related resources # Pluralsight offer a short guide on How to use ChatGPT to write code , which includes example prompts. Fixing the code # The AI-generated code may work without any changes, but you may have to edit it. You need to be aware of n8n's Data structure . You may also find n8n's built-in methods and variables useful. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/ai-code/#example-3-summarize-data-and-create-a-slack-message

AI coding with GPT # Not available on self-hosted. Python isn't supported. /// Use AI in the Code node # Feature availability AI assistance in the Code node is available to Cloud users. It isn't available in self-hosted n8n. AI generated code overwrites your code If you've already written some code on the Code tab, the AI generated code will replace it. n8n recommends using AI as a starting point to create your initial code, then editing it as needed. To use ChatGPT to generate code in the Code node: In the Code node, set Language to JavaScript . Select the Ask AI tab. Write your query. Select Generate Code . n8n sends your query to ChatGPT, then displays the result in the Code tab. Usage limits # During the trial phase there are no usage limits. If n8n makes the feature permanent, there may be usage limits as part of your pricing tier. Feature limits # The ChatGPT implementation in n8n has the following limitations: The AI writes code that manipulates data from the n8n workflow. You can't ask it to pull in data from other sources. The AI doesn't know your data, just the schema, so you need to tell it things like how to find the data you want to extract, or how to check for null. Nodes before the Code node must execute and deliver data to the Code node before you run your AI query. Doesn't work with large incoming data schemas. May have issues if there are a lot of nodes before the code node. Writing good prompts # Writing good prompts increases the chance of getting useful code back. Some general tips: Provide examples: if possible, give a sample expected output. This helps the AI to better understand the transformation or logic you’re aiming for. Describe the processing steps: if there are specific processing steps or logic that should apply to the data, list them in sequence. For example: "First, filter out all users under 18. Then, sort the remaining users by their last name." Avoid ambiguities: while the AI understands various instructions, being clear and direct ensures you get the most accurate code. Instead of saying "Get the older users," you might say "Filter users who are 60 years and above." Be clear about what you expect as the output. Do you want the data transformed, filtered, aggregated, or sorted? Provide as much detail as possible. And some n8n-specific guidance: Think about the input data: make sure ChatGPT knows which pieces of the data you want to access, and what the incoming data represents. You may need to tell ChatGPT about the availability of n8n's built-in methods and variables. Declare interactions between nodes: if your logic involves data from multiple nodes, specify how they should interact. "Merge the output of 'Node A' with 'Node B' based on the 'userID' property". if you prefer data to come from certain nodes or to ignore others, be clear: "Only consider data from the 'Purchases' node and ignore the 'Refunds' node." Ensure the output is compatible with n8n. Refer to Data structure for more information on the data structure n8n requires. Example prompts # These examples show a range of possible prompts and tasks. Example 1: Find a piece of data inside a second dataset # To try the example yourself, download the example workflow and import it into n8n. In the third Code node, enter this prompt: The slack data contains only one item. The input data represents all Notion users. Sometimes the person property that holds the email can be null. I want to find the notionId of the Slack user and return it. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 const slackUser = $ ( "Mock Slack" ). all ()[ 0 ]; const notionUsers = $input . all (); const slackUserEmail = slackUser . json . email ; const notionUser = notionUsers . find ( ( user ) => user . json . person && user . json . person . email === slackUserEmail ); return notionUser ? [{ json : { notionId : notionUser . json . id } }] : []; Example 2: Data transformation # To try the example yourself, download the example workflow and import it into n8n. In the Join items Code node, enter this prompt: Return a single line of text that has all usernames listed with a comma. Each username should be enquoted with a double quotation mark. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 const items = $input . all (); const usernames = items . map (( item ) => `" ${ item . json . username } "` ); const result = usernames . join ( ", " ); return [{ json : { usernames : result } }]; Example 3: Summarize data and create a Slack message # To try the example yourself, download the example workflow and import it into n8n. In the Summarize Code node, enter this prompt: Create a markdown text for Slack that counts how many ideas, features and bugs have been submitted. The type of submission is saved in the property_type field. A feature has the property "Feature", a bug has the property "Bug" and an idea has the property "Bug". Also, list the five top submissions by vote in that message. Use " " as markdown for links. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 const submissions = $input . all (); // Count the number of ideas, features, and bugs let ideaCount = 0 ; let featureCount = 0 ; let bugCount = 0 ; submissions . forEach (( submission ) => { switch ( submission . json . property_type [ 0 ]) { case "Idea" : ideaCount ++ ; break ; case "Feature" : featureCount ++ ; break ; case "Bug" : bugCount ++ ; break ; } }); // Sort submissions by votes and take the top 5 const topSubmissions = submissions . sort (( a , b ) => b . json . property_votes - a . json . property_votes ) . slice ( 0 , 5 ); let topSubmissionText = "" ; topSubmissions . forEach (( submission ) => { topSubmissionText += `< ${ submission . json . url } | ${ submission . json . name } > with ${ submission . json . property_votes } votes\n` ; }); // Construct the Slack message const slackMessage = `*Summary of Submissions*\n Ideas: ${ ideaCount } \n Features: ${ featureCount } \n Bugs: ${ bugCount } \n Top 5 Submissions:\n ${ topSubmissionText } ` ; return [{ json : { slackMessage } }]; Reference incoming node data explicitly # If your incoming data contains nested fields, using dot notation to reference them can help the AI understand what data you want. To try the example yourself, download the example workflow and import it into n8n. In the second Code node, enter this prompt: The data in "Mock data" represents a list of people. For each person, return a new item containing personal_info.first_name and work_info.job_title. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 const items = $input . all (); const newItems = items . map (( item ) => { const firstName = item . json . personal_info . first_name ; const jobTitle = item . json . work_info . job_title ; return { json : { firstName , jobTitle , }, }; }); return newItems ; Related resources # Pluralsight offer a short guide on How to use ChatGPT to write code , which includes example prompts. Fixing the code # The AI-generated code may work without any changes, but you may have to edit it. You need to be aware of n8n's Data structure . You may also find n8n's built-in methods and variables useful. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/ai-code/#related-resources

AI coding with GPT # Not available on self-hosted. Python isn't supported. /// Use AI in the Code node # Feature availability AI assistance in the Code node is available to Cloud users. It isn't available in self-hosted n8n. AI generated code overwrites your code If you've already written some code on the Code tab, the AI generated code will replace it. n8n recommends using AI as a starting point to create your initial code, then editing it as needed. To use ChatGPT to generate code in the Code node: In the Code node, set Language to JavaScript . Select the Ask AI tab. Write your query. Select Generate Code . n8n sends your query to ChatGPT, then displays the result in the Code tab. Usage limits # During the trial phase there are no usage limits. If n8n makes the feature permanent, there may be usage limits as part of your pricing tier. Feature limits # The ChatGPT implementation in n8n has the following limitations: The AI writes code that manipulates data from the n8n workflow. You can't ask it to pull in data from other sources. The AI doesn't know your data, just the schema, so you need to tell it things like how to find the data you want to extract, or how to check for null. Nodes before the Code node must execute and deliver data to the Code node before you run your AI query. Doesn't work with large incoming data schemas. May have issues if there are a lot of nodes before the code node. Writing good prompts # Writing good prompts increases the chance of getting useful code back. Some general tips: Provide examples: if possible, give a sample expected output. This helps the AI to better understand the transformation or logic you’re aiming for. Describe the processing steps: if there are specific processing steps or logic that should apply to the data, list them in sequence. For example: "First, filter out all users under 18. Then, sort the remaining users by their last name." Avoid ambiguities: while the AI understands various instructions, being clear and direct ensures you get the most accurate code. Instead of saying "Get the older users," you might say "Filter users who are 60 years and above." Be clear about what you expect as the output. Do you want the data transformed, filtered, aggregated, or sorted? Provide as much detail as possible. And some n8n-specific guidance: Think about the input data: make sure ChatGPT knows which pieces of the data you want to access, and what the incoming data represents. You may need to tell ChatGPT about the availability of n8n's built-in methods and variables. Declare interactions between nodes: if your logic involves data from multiple nodes, specify how they should interact. "Merge the output of 'Node A' with 'Node B' based on the 'userID' property". if you prefer data to come from certain nodes or to ignore others, be clear: "Only consider data from the 'Purchases' node and ignore the 'Refunds' node." Ensure the output is compatible with n8n. Refer to Data structure for more information on the data structure n8n requires. Example prompts # These examples show a range of possible prompts and tasks. Example 1: Find a piece of data inside a second dataset # To try the example yourself, download the example workflow and import it into n8n. In the third Code node, enter this prompt: The slack data contains only one item. The input data represents all Notion users. Sometimes the person property that holds the email can be null. I want to find the notionId of the Slack user and return it. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 const slackUser = $ ( "Mock Slack" ). all ()[ 0 ]; const notionUsers = $input . all (); const slackUserEmail = slackUser . json . email ; const notionUser = notionUsers . find ( ( user ) => user . json . person && user . json . person . email === slackUserEmail ); return notionUser ? [{ json : { notionId : notionUser . json . id } }] : []; Example 2: Data transformation # To try the example yourself, download the example workflow and import it into n8n. In the Join items Code node, enter this prompt: Return a single line of text that has all usernames listed with a comma. Each username should be enquoted with a double quotation mark. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 const items = $input . all (); const usernames = items . map (( item ) => `" ${ item . json . username } "` ); const result = usernames . join ( ", " ); return [{ json : { usernames : result } }]; Example 3: Summarize data and create a Slack message # To try the example yourself, download the example workflow and import it into n8n. In the Summarize Code node, enter this prompt: Create a markdown text for Slack that counts how many ideas, features and bugs have been submitted. The type of submission is saved in the property_type field. A feature has the property "Feature", a bug has the property "Bug" and an idea has the property "Bug". Also, list the five top submissions by vote in that message. Use " " as markdown for links. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 const submissions = $input . all (); // Count the number of ideas, features, and bugs let ideaCount = 0 ; let featureCount = 0 ; let bugCount = 0 ; submissions . forEach (( submission ) => { switch ( submission . json . property_type [ 0 ]) { case "Idea" : ideaCount ++ ; break ; case "Feature" : featureCount ++ ; break ; case "Bug" : bugCount ++ ; break ; } }); // Sort submissions by votes and take the top 5 const topSubmissions = submissions . sort (( a , b ) => b . json . property_votes - a . json . property_votes ) . slice ( 0 , 5 ); let topSubmissionText = "" ; topSubmissions . forEach (( submission ) => { topSubmissionText += `< ${ submission . json . url } | ${ submission . json . name } > with ${ submission . json . property_votes } votes\n` ; }); // Construct the Slack message const slackMessage = `*Summary of Submissions*\n Ideas: ${ ideaCount } \n Features: ${ featureCount } \n Bugs: ${ bugCount } \n Top 5 Submissions:\n ${ topSubmissionText } ` ; return [{ json : { slackMessage } }]; Reference incoming node data explicitly # If your incoming data contains nested fields, using dot notation to reference them can help the AI understand what data you want. To try the example yourself, download the example workflow and import it into n8n. In the second Code node, enter this prompt: The data in "Mock data" represents a list of people. For each person, return a new item containing personal_info.first_name and work_info.job_title. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 const items = $input . all (); const newItems = items . map (( item ) => { const firstName = item . json . personal_info . first_name ; const jobTitle = item . json . work_info . job_title ; return { json : { firstName , jobTitle , }, }; }); return newItems ; Related resources # Pluralsight offer a short guide on How to use ChatGPT to write code , which includes example prompts. Fixing the code # The AI-generated code may work without any changes, but you may have to edit it. You need to be aware of n8n's Data structure . You may also find n8n's built-in methods and variables useful. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/ai-code/#example-1-find-a-piece-of-data-inside-a-second-dataset

AI coding with GPT # Not available on self-hosted. Python isn't supported. /// Use AI in the Code node # Feature availability AI assistance in the Code node is available to Cloud users. It isn't available in self-hosted n8n. AI generated code overwrites your code If you've already written some code on the Code tab, the AI generated code will replace it. n8n recommends using AI as a starting point to create your initial code, then editing it as needed. To use ChatGPT to generate code in the Code node: In the Code node, set Language to JavaScript . Select the Ask AI tab. Write your query. Select Generate Code . n8n sends your query to ChatGPT, then displays the result in the Code tab. Usage limits # During the trial phase there are no usage limits. If n8n makes the feature permanent, there may be usage limits as part of your pricing tier. Feature limits # The ChatGPT implementation in n8n has the following limitations: The AI writes code that manipulates data from the n8n workflow. You can't ask it to pull in data from other sources. The AI doesn't know your data, just the schema, so you need to tell it things like how to find the data you want to extract, or how to check for null. Nodes before the Code node must execute and deliver data to the Code node before you run your AI query. Doesn't work with large incoming data schemas. May have issues if there are a lot of nodes before the code node. Writing good prompts # Writing good prompts increases the chance of getting useful code back. Some general tips: Provide examples: if possible, give a sample expected output. This helps the AI to better understand the transformation or logic you’re aiming for. Describe the processing steps: if there are specific processing steps or logic that should apply to the data, list them in sequence. For example: "First, filter out all users under 18. Then, sort the remaining users by their last name." Avoid ambiguities: while the AI understands various instructions, being clear and direct ensures you get the most accurate code. Instead of saying "Get the older users," you might say "Filter users who are 60 years and above." Be clear about what you expect as the output. Do you want the data transformed, filtered, aggregated, or sorted? Provide as much detail as possible. And some n8n-specific guidance: Think about the input data: make sure ChatGPT knows which pieces of the data you want to access, and what the incoming data represents. You may need to tell ChatGPT about the availability of n8n's built-in methods and variables. Declare interactions between nodes: if your logic involves data from multiple nodes, specify how they should interact. "Merge the output of 'Node A' with 'Node B' based on the 'userID' property". if you prefer data to come from certain nodes or to ignore others, be clear: "Only consider data from the 'Purchases' node and ignore the 'Refunds' node." Ensure the output is compatible with n8n. Refer to Data structure for more information on the data structure n8n requires. Example prompts # These examples show a range of possible prompts and tasks. Example 1: Find a piece of data inside a second dataset # To try the example yourself, download the example workflow and import it into n8n. In the third Code node, enter this prompt: The slack data contains only one item. The input data represents all Notion users. Sometimes the person property that holds the email can be null. I want to find the notionId of the Slack user and return it. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 const slackUser = $ ( "Mock Slack" ). all ()[ 0 ]; const notionUsers = $input . all (); const slackUserEmail = slackUser . json . email ; const notionUser = notionUsers . find ( ( user ) => user . json . person && user . json . person . email === slackUserEmail ); return notionUser ? [{ json : { notionId : notionUser . json . id } }] : []; Example 2: Data transformation # To try the example yourself, download the example workflow and import it into n8n. In the Join items Code node, enter this prompt: Return a single line of text that has all usernames listed with a comma. Each username should be enquoted with a double quotation mark. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 const items = $input . all (); const usernames = items . map (( item ) => `" ${ item . json . username } "` ); const result = usernames . join ( ", " ); return [{ json : { usernames : result } }]; Example 3: Summarize data and create a Slack message # To try the example yourself, download the example workflow and import it into n8n. In the Summarize Code node, enter this prompt: Create a markdown text for Slack that counts how many ideas, features and bugs have been submitted. The type of submission is saved in the property_type field. A feature has the property "Feature", a bug has the property "Bug" and an idea has the property "Bug". Also, list the five top submissions by vote in that message. Use " " as markdown for links. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 const submissions = $input . all (); // Count the number of ideas, features, and bugs let ideaCount = 0 ; let featureCount = 0 ; let bugCount = 0 ; submissions . forEach (( submission ) => { switch ( submission . json . property_type [ 0 ]) { case "Idea" : ideaCount ++ ; break ; case "Feature" : featureCount ++ ; break ; case "Bug" : bugCount ++ ; break ; } }); // Sort submissions by votes and take the top 5 const topSubmissions = submissions . sort (( a , b ) => b . json . property_votes - a . json . property_votes ) . slice ( 0 , 5 ); let topSubmissionText = "" ; topSubmissions . forEach (( submission ) => { topSubmissionText += `< ${ submission . json . url } | ${ submission . json . name } > with ${ submission . json . property_votes } votes\n` ; }); // Construct the Slack message const slackMessage = `*Summary of Submissions*\n Ideas: ${ ideaCount } \n Features: ${ featureCount } \n Bugs: ${ bugCount } \n Top 5 Submissions:\n ${ topSubmissionText } ` ; return [{ json : { slackMessage } }]; Reference incoming node data explicitly # If your incoming data contains nested fields, using dot notation to reference them can help the AI understand what data you want. To try the example yourself, download the example workflow and import it into n8n. In the second Code node, enter this prompt: The data in "Mock data" represents a list of people. For each person, return a new item containing personal_info.first_name and work_info.job_title. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 const items = $input . all (); const newItems = items . map (( item ) => { const firstName = item . json . personal_info . first_name ; const jobTitle = item . json . work_info . job_title ; return { json : { firstName , jobTitle , }, }; }); return newItems ; Related resources # Pluralsight offer a short guide on How to use ChatGPT to write code , which includes example prompts. Fixing the code # The AI-generated code may work without any changes, but you may have to edit it. You need to be aware of n8n's Data structure . You may also find n8n's built-in methods and variables useful. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/ai-code/#example-2-data-transformation

AI coding with GPT # Not available on self-hosted. Python isn't supported. /// Use AI in the Code node # Feature availability AI assistance in the Code node is available to Cloud users. It isn't available in self-hosted n8n. AI generated code overwrites your code If you've already written some code on the Code tab, the AI generated code will replace it. n8n recommends using AI as a starting point to create your initial code, then editing it as needed. To use ChatGPT to generate code in the Code node: In the Code node, set Language to JavaScript . Select the Ask AI tab. Write your query. Select Generate Code . n8n sends your query to ChatGPT, then displays the result in the Code tab. Usage limits # During the trial phase there are no usage limits. If n8n makes the feature permanent, there may be usage limits as part of your pricing tier. Feature limits # The ChatGPT implementation in n8n has the following limitations: The AI writes code that manipulates data from the n8n workflow. You can't ask it to pull in data from other sources. The AI doesn't know your data, just the schema, so you need to tell it things like how to find the data you want to extract, or how to check for null. Nodes before the Code node must execute and deliver data to the Code node before you run your AI query. Doesn't work with large incoming data schemas. May have issues if there are a lot of nodes before the code node. Writing good prompts # Writing good prompts increases the chance of getting useful code back. Some general tips: Provide examples: if possible, give a sample expected output. This helps the AI to better understand the transformation or logic you’re aiming for. Describe the processing steps: if there are specific processing steps or logic that should apply to the data, list them in sequence. For example: "First, filter out all users under 18. Then, sort the remaining users by their last name." Avoid ambiguities: while the AI understands various instructions, being clear and direct ensures you get the most accurate code. Instead of saying "Get the older users," you might say "Filter users who are 60 years and above." Be clear about what you expect as the output. Do you want the data transformed, filtered, aggregated, or sorted? Provide as much detail as possible. And some n8n-specific guidance: Think about the input data: make sure ChatGPT knows which pieces of the data you want to access, and what the incoming data represents. You may need to tell ChatGPT about the availability of n8n's built-in methods and variables. Declare interactions between nodes: if your logic involves data from multiple nodes, specify how they should interact. "Merge the output of 'Node A' with 'Node B' based on the 'userID' property". if you prefer data to come from certain nodes or to ignore others, be clear: "Only consider data from the 'Purchases' node and ignore the 'Refunds' node." Ensure the output is compatible with n8n. Refer to Data structure for more information on the data structure n8n requires. Example prompts # These examples show a range of possible prompts and tasks. Example 1: Find a piece of data inside a second dataset # To try the example yourself, download the example workflow and import it into n8n. In the third Code node, enter this prompt: The slack data contains only one item. The input data represents all Notion users. Sometimes the person property that holds the email can be null. I want to find the notionId of the Slack user and return it. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 const slackUser = $ ( "Mock Slack" ). all ()[ 0 ]; const notionUsers = $input . all (); const slackUserEmail = slackUser . json . email ; const notionUser = notionUsers . find ( ( user ) => user . json . person && user . json . person . email === slackUserEmail ); return notionUser ? [{ json : { notionId : notionUser . json . id } }] : []; Example 2: Data transformation # To try the example yourself, download the example workflow and import it into n8n. In the Join items Code node, enter this prompt: Return a single line of text that has all usernames listed with a comma. Each username should be enquoted with a double quotation mark. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 const items = $input . all (); const usernames = items . map (( item ) => `" ${ item . json . username } "` ); const result = usernames . join ( ", " ); return [{ json : { usernames : result } }]; Example 3: Summarize data and create a Slack message # To try the example yourself, download the example workflow and import it into n8n. In the Summarize Code node, enter this prompt: Create a markdown text for Slack that counts how many ideas, features and bugs have been submitted. The type of submission is saved in the property_type field. A feature has the property "Feature", a bug has the property "Bug" and an idea has the property "Bug". Also, list the five top submissions by vote in that message. Use " " as markdown for links. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 const submissions = $input . all (); // Count the number of ideas, features, and bugs let ideaCount = 0 ; let featureCount = 0 ; let bugCount = 0 ; submissions . forEach (( submission ) => { switch ( submission . json . property_type [ 0 ]) { case "Idea" : ideaCount ++ ; break ; case "Feature" : featureCount ++ ; break ; case "Bug" : bugCount ++ ; break ; } }); // Sort submissions by votes and take the top 5 const topSubmissions = submissions . sort (( a , b ) => b . json . property_votes - a . json . property_votes ) . slice ( 0 , 5 ); let topSubmissionText = "" ; topSubmissions . forEach (( submission ) => { topSubmissionText += `< ${ submission . json . url } | ${ submission . json . name } > with ${ submission . json . property_votes } votes\n` ; }); // Construct the Slack message const slackMessage = `*Summary of Submissions*\n Ideas: ${ ideaCount } \n Features: ${ featureCount } \n Bugs: ${ bugCount } \n Top 5 Submissions:\n ${ topSubmissionText } ` ; return [{ json : { slackMessage } }]; Reference incoming node data explicitly # If your incoming data contains nested fields, using dot notation to reference them can help the AI understand what data you want. To try the example yourself, download the example workflow and import it into n8n. In the second Code node, enter this prompt: The data in "Mock data" represents a list of people. For each person, return a new item containing personal_info.first_name and work_info.job_title. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 const items = $input . all (); const newItems = items . map (( item ) => { const firstName = item . json . personal_info . first_name ; const jobTitle = item . json . work_info . job_title ; return { json : { firstName , jobTitle , }, }; }); return newItems ; Related resources # Pluralsight offer a short guide on How to use ChatGPT to write code , which includes example prompts. Fixing the code # The AI-generated code may work without any changes, but you may have to edit it. You need to be aware of n8n's Data structure . You may also find n8n's built-in methods and variables useful. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/ai-code/#use-ai-in-the-code-node

AI coding with GPT # Not available on self-hosted. Python isn't supported. /// Use AI in the Code node # Feature availability AI assistance in the Code node is available to Cloud users. It isn't available in self-hosted n8n. AI generated code overwrites your code If you've already written some code on the Code tab, the AI generated code will replace it. n8n recommends using AI as a starting point to create your initial code, then editing it as needed. To use ChatGPT to generate code in the Code node: In the Code node, set Language to JavaScript . Select the Ask AI tab. Write your query. Select Generate Code . n8n sends your query to ChatGPT, then displays the result in the Code tab. Usage limits # During the trial phase there are no usage limits. If n8n makes the feature permanent, there may be usage limits as part of your pricing tier. Feature limits # The ChatGPT implementation in n8n has the following limitations: The AI writes code that manipulates data from the n8n workflow. You can't ask it to pull in data from other sources. The AI doesn't know your data, just the schema, so you need to tell it things like how to find the data you want to extract, or how to check for null. Nodes before the Code node must execute and deliver data to the Code node before you run your AI query. Doesn't work with large incoming data schemas. May have issues if there are a lot of nodes before the code node. Writing good prompts # Writing good prompts increases the chance of getting useful code back. Some general tips: Provide examples: if possible, give a sample expected output. This helps the AI to better understand the transformation or logic you’re aiming for. Describe the processing steps: if there are specific processing steps or logic that should apply to the data, list them in sequence. For example: "First, filter out all users under 18. Then, sort the remaining users by their last name." Avoid ambiguities: while the AI understands various instructions, being clear and direct ensures you get the most accurate code. Instead of saying "Get the older users," you might say "Filter users who are 60 years and above." Be clear about what you expect as the output. Do you want the data transformed, filtered, aggregated, or sorted? Provide as much detail as possible. And some n8n-specific guidance: Think about the input data: make sure ChatGPT knows which pieces of the data you want to access, and what the incoming data represents. You may need to tell ChatGPT about the availability of n8n's built-in methods and variables. Declare interactions between nodes: if your logic involves data from multiple nodes, specify how they should interact. "Merge the output of 'Node A' with 'Node B' based on the 'userID' property". if you prefer data to come from certain nodes or to ignore others, be clear: "Only consider data from the 'Purchases' node and ignore the 'Refunds' node." Ensure the output is compatible with n8n. Refer to Data structure for more information on the data structure n8n requires. Example prompts # These examples show a range of possible prompts and tasks. Example 1: Find a piece of data inside a second dataset # To try the example yourself, download the example workflow and import it into n8n. In the third Code node, enter this prompt: The slack data contains only one item. The input data represents all Notion users. Sometimes the person property that holds the email can be null. I want to find the notionId of the Slack user and return it. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 const slackUser = $ ( "Mock Slack" ). all ()[ 0 ]; const notionUsers = $input . all (); const slackUserEmail = slackUser . json . email ; const notionUser = notionUsers . find ( ( user ) => user . json . person && user . json . person . email === slackUserEmail ); return notionUser ? [{ json : { notionId : notionUser . json . id } }] : []; Example 2: Data transformation # To try the example yourself, download the example workflow and import it into n8n. In the Join items Code node, enter this prompt: Return a single line of text that has all usernames listed with a comma. Each username should be enquoted with a double quotation mark. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 const items = $input . all (); const usernames = items . map (( item ) => `" ${ item . json . username } "` ); const result = usernames . join ( ", " ); return [{ json : { usernames : result } }]; Example 3: Summarize data and create a Slack message # To try the example yourself, download the example workflow and import it into n8n. In the Summarize Code node, enter this prompt: Create a markdown text for Slack that counts how many ideas, features and bugs have been submitted. The type of submission is saved in the property_type field. A feature has the property "Feature", a bug has the property "Bug" and an idea has the property "Bug". Also, list the five top submissions by vote in that message. Use " " as markdown for links. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 const submissions = $input . all (); // Count the number of ideas, features, and bugs let ideaCount = 0 ; let featureCount = 0 ; let bugCount = 0 ; submissions . forEach (( submission ) => { switch ( submission . json . property_type [ 0 ]) { case "Idea" : ideaCount ++ ; break ; case "Feature" : featureCount ++ ; break ; case "Bug" : bugCount ++ ; break ; } }); // Sort submissions by votes and take the top 5 const topSubmissions = submissions . sort (( a , b ) => b . json . property_votes - a . json . property_votes ) . slice ( 0 , 5 ); let topSubmissionText = "" ; topSubmissions . forEach (( submission ) => { topSubmissionText += `< ${ submission . json . url } | ${ submission . json . name } > with ${ submission . json . property_votes } votes\n` ; }); // Construct the Slack message const slackMessage = `*Summary of Submissions*\n Ideas: ${ ideaCount } \n Features: ${ featureCount } \n Bugs: ${ bugCount } \n Top 5 Submissions:\n ${ topSubmissionText } ` ; return [{ json : { slackMessage } }]; Reference incoming node data explicitly # If your incoming data contains nested fields, using dot notation to reference them can help the AI understand what data you want. To try the example yourself, download the example workflow and import it into n8n. In the second Code node, enter this prompt: The data in "Mock data" represents a list of people. For each person, return a new item containing personal_info.first_name and work_info.job_title. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 const items = $input . all (); const newItems = items . map (( item ) => { const firstName = item . json . personal_info . first_name ; const jobTitle = item . json . work_info . job_title ; return { json : { firstName , jobTitle , }, }; }); return newItems ; Related resources # Pluralsight offer a short guide on How to use ChatGPT to write code , which includes example prompts. Fixing the code # The AI-generated code may work without any changes, but you may have to edit it. You need to be aware of n8n's Data structure . You may also find n8n's built-in methods and variables useful. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/ai-code/#ai-coding-with-gpt

AI coding with GPT # Not available on self-hosted. Python isn't supported. /// Use AI in the Code node # Feature availability AI assistance in the Code node is available to Cloud users. It isn't available in self-hosted n8n. AI generated code overwrites your code If you've already written some code on the Code tab, the AI generated code will replace it. n8n recommends using AI as a starting point to create your initial code, then editing it as needed. To use ChatGPT to generate code in the Code node: In the Code node, set Language to JavaScript . Select the Ask AI tab. Write your query. Select Generate Code . n8n sends your query to ChatGPT, then displays the result in the Code tab. Usage limits # During the trial phase there are no usage limits. If n8n makes the feature permanent, there may be usage limits as part of your pricing tier. Feature limits # The ChatGPT implementation in n8n has the following limitations: The AI writes code that manipulates data from the n8n workflow. You can't ask it to pull in data from other sources. The AI doesn't know your data, just the schema, so you need to tell it things like how to find the data you want to extract, or how to check for null. Nodes before the Code node must execute and deliver data to the Code node before you run your AI query. Doesn't work with large incoming data schemas. May have issues if there are a lot of nodes before the code node. Writing good prompts # Writing good prompts increases the chance of getting useful code back. Some general tips: Provide examples: if possible, give a sample expected output. This helps the AI to better understand the transformation or logic you’re aiming for. Describe the processing steps: if there are specific processing steps or logic that should apply to the data, list them in sequence. For example: "First, filter out all users under 18. Then, sort the remaining users by their last name." Avoid ambiguities: while the AI understands various instructions, being clear and direct ensures you get the most accurate code. Instead of saying "Get the older users," you might say "Filter users who are 60 years and above." Be clear about what you expect as the output. Do you want the data transformed, filtered, aggregated, or sorted? Provide as much detail as possible. And some n8n-specific guidance: Think about the input data: make sure ChatGPT knows which pieces of the data you want to access, and what the incoming data represents. You may need to tell ChatGPT about the availability of n8n's built-in methods and variables. Declare interactions between nodes: if your logic involves data from multiple nodes, specify how they should interact. "Merge the output of 'Node A' with 'Node B' based on the 'userID' property". if you prefer data to come from certain nodes or to ignore others, be clear: "Only consider data from the 'Purchases' node and ignore the 'Refunds' node." Ensure the output is compatible with n8n. Refer to Data structure for more information on the data structure n8n requires. Example prompts # These examples show a range of possible prompts and tasks. Example 1: Find a piece of data inside a second dataset # To try the example yourself, download the example workflow and import it into n8n. In the third Code node, enter this prompt: The slack data contains only one item. The input data represents all Notion users. Sometimes the person property that holds the email can be null. I want to find the notionId of the Slack user and return it. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 const slackUser = $ ( "Mock Slack" ). all ()[ 0 ]; const notionUsers = $input . all (); const slackUserEmail = slackUser . json . email ; const notionUser = notionUsers . find ( ( user ) => user . json . person && user . json . person . email === slackUserEmail ); return notionUser ? [{ json : { notionId : notionUser . json . id } }] : []; Example 2: Data transformation # To try the example yourself, download the example workflow and import it into n8n. In the Join items Code node, enter this prompt: Return a single line of text that has all usernames listed with a comma. Each username should be enquoted with a double quotation mark. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 const items = $input . all (); const usernames = items . map (( item ) => `" ${ item . json . username } "` ); const result = usernames . join ( ", " ); return [{ json : { usernames : result } }]; Example 3: Summarize data and create a Slack message # To try the example yourself, download the example workflow and import it into n8n. In the Summarize Code node, enter this prompt: Create a markdown text for Slack that counts how many ideas, features and bugs have been submitted. The type of submission is saved in the property_type field. A feature has the property "Feature", a bug has the property "Bug" and an idea has the property "Bug". Also, list the five top submissions by vote in that message. Use " " as markdown for links. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 const submissions = $input . all (); // Count the number of ideas, features, and bugs let ideaCount = 0 ; let featureCount = 0 ; let bugCount = 0 ; submissions . forEach (( submission ) => { switch ( submission . json . property_type [ 0 ]) { case "Idea" : ideaCount ++ ; break ; case "Feature" : featureCount ++ ; break ; case "Bug" : bugCount ++ ; break ; } }); // Sort submissions by votes and take the top 5 const topSubmissions = submissions . sort (( a , b ) => b . json . property_votes - a . json . property_votes ) . slice ( 0 , 5 ); let topSubmissionText = "" ; topSubmissions . forEach (( submission ) => { topSubmissionText += `< ${ submission . json . url } | ${ submission . json . name } > with ${ submission . json . property_votes } votes\n` ; }); // Construct the Slack message const slackMessage = `*Summary of Submissions*\n Ideas: ${ ideaCount } \n Features: ${ featureCount } \n Bugs: ${ bugCount } \n Top 5 Submissions:\n ${ topSubmissionText } ` ; return [{ json : { slackMessage } }]; Reference incoming node data explicitly # If your incoming data contains nested fields, using dot notation to reference them can help the AI understand what data you want. To try the example yourself, download the example workflow and import it into n8n. In the second Code node, enter this prompt: The data in "Mock data" represents a list of people. For each person, return a new item containing personal_info.first_name and work_info.job_title. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 const items = $input . all (); const newItems = items . map (( item ) => { const firstName = item . json . personal_info . first_name ; const jobTitle = item . json . work_info . job_title ; return { json : { firstName , jobTitle , }, }; }); return newItems ; Related resources # Pluralsight offer a short guide on How to use ChatGPT to write code , which includes example prompts. Fixing the code # The AI-generated code may work without any changes, but you may have to edit it. You need to be aware of n8n's Data structure . You may also find n8n's built-in methods and variables useful. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/ai-code/#example-prompts

AI coding with GPT # Not available on self-hosted. Python isn't supported. /// Use AI in the Code node # Feature availability AI assistance in the Code node is available to Cloud users. It isn't available in self-hosted n8n. AI generated code overwrites your code If you've already written some code on the Code tab, the AI generated code will replace it. n8n recommends using AI as a starting point to create your initial code, then editing it as needed. To use ChatGPT to generate code in the Code node: In the Code node, set Language to JavaScript . Select the Ask AI tab. Write your query. Select Generate Code . n8n sends your query to ChatGPT, then displays the result in the Code tab. Usage limits # During the trial phase there are no usage limits. If n8n makes the feature permanent, there may be usage limits as part of your pricing tier. Feature limits # The ChatGPT implementation in n8n has the following limitations: The AI writes code that manipulates data from the n8n workflow. You can't ask it to pull in data from other sources. The AI doesn't know your data, just the schema, so you need to tell it things like how to find the data you want to extract, or how to check for null. Nodes before the Code node must execute and deliver data to the Code node before you run your AI query. Doesn't work with large incoming data schemas. May have issues if there are a lot of nodes before the code node. Writing good prompts # Writing good prompts increases the chance of getting useful code back. Some general tips: Provide examples: if possible, give a sample expected output. This helps the AI to better understand the transformation or logic you’re aiming for. Describe the processing steps: if there are specific processing steps or logic that should apply to the data, list them in sequence. For example: "First, filter out all users under 18. Then, sort the remaining users by their last name." Avoid ambiguities: while the AI understands various instructions, being clear and direct ensures you get the most accurate code. Instead of saying "Get the older users," you might say "Filter users who are 60 years and above." Be clear about what you expect as the output. Do you want the data transformed, filtered, aggregated, or sorted? Provide as much detail as possible. And some n8n-specific guidance: Think about the input data: make sure ChatGPT knows which pieces of the data you want to access, and what the incoming data represents. You may need to tell ChatGPT about the availability of n8n's built-in methods and variables. Declare interactions between nodes: if your logic involves data from multiple nodes, specify how they should interact. "Merge the output of 'Node A' with 'Node B' based on the 'userID' property". if you prefer data to come from certain nodes or to ignore others, be clear: "Only consider data from the 'Purchases' node and ignore the 'Refunds' node." Ensure the output is compatible with n8n. Refer to Data structure for more information on the data structure n8n requires. Example prompts # These examples show a range of possible prompts and tasks. Example 1: Find a piece of data inside a second dataset # To try the example yourself, download the example workflow and import it into n8n. In the third Code node, enter this prompt: The slack data contains only one item. The input data represents all Notion users. Sometimes the person property that holds the email can be null. I want to find the notionId of the Slack user and return it. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 const slackUser = $ ( "Mock Slack" ). all ()[ 0 ]; const notionUsers = $input . all (); const slackUserEmail = slackUser . json . email ; const notionUser = notionUsers . find ( ( user ) => user . json . person && user . json . person . email === slackUserEmail ); return notionUser ? [{ json : { notionId : notionUser . json . id } }] : []; Example 2: Data transformation # To try the example yourself, download the example workflow and import it into n8n. In the Join items Code node, enter this prompt: Return a single line of text that has all usernames listed with a comma. Each username should be enquoted with a double quotation mark. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 const items = $input . all (); const usernames = items . map (( item ) => `" ${ item . json . username } "` ); const result = usernames . join ( ", " ); return [{ json : { usernames : result } }]; Example 3: Summarize data and create a Slack message # To try the example yourself, download the example workflow and import it into n8n. In the Summarize Code node, enter this prompt: Create a markdown text for Slack that counts how many ideas, features and bugs have been submitted. The type of submission is saved in the property_type field. A feature has the property "Feature", a bug has the property "Bug" and an idea has the property "Bug". Also, list the five top submissions by vote in that message. Use " " as markdown for links. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 const submissions = $input . all (); // Count the number of ideas, features, and bugs let ideaCount = 0 ; let featureCount = 0 ; let bugCount = 0 ; submissions . forEach (( submission ) => { switch ( submission . json . property_type [ 0 ]) { case "Idea" : ideaCount ++ ; break ; case "Feature" : featureCount ++ ; break ; case "Bug" : bugCount ++ ; break ; } }); // Sort submissions by votes and take the top 5 const topSubmissions = submissions . sort (( a , b ) => b . json . property_votes - a . json . property_votes ) . slice ( 0 , 5 ); let topSubmissionText = "" ; topSubmissions . forEach (( submission ) => { topSubmissionText += `< ${ submission . json . url } | ${ submission . json . name } > with ${ submission . json . property_votes } votes\n` ; }); // Construct the Slack message const slackMessage = `*Summary of Submissions*\n Ideas: ${ ideaCount } \n Features: ${ featureCount } \n Bugs: ${ bugCount } \n Top 5 Submissions:\n ${ topSubmissionText } ` ; return [{ json : { slackMessage } }]; Reference incoming node data explicitly # If your incoming data contains nested fields, using dot notation to reference them can help the AI understand what data you want. To try the example yourself, download the example workflow and import it into n8n. In the second Code node, enter this prompt: The data in "Mock data" represents a list of people. For each person, return a new item containing personal_info.first_name and work_info.job_title. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 const items = $input . all (); const newItems = items . map (( item ) => { const firstName = item . json . personal_info . first_name ; const jobTitle = item . json . work_info . job_title ; return { json : { firstName , jobTitle , }, }; }); return newItems ; Related resources # Pluralsight offer a short guide on How to use ChatGPT to write code , which includes example prompts. Fixing the code # The AI-generated code may work without any changes, but you may have to edit it. You need to be aware of n8n's Data structure . You may also find n8n's built-in methods and variables useful. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/ai-code/

AI coding with GPT # Not available on self-hosted. Python isn't supported. /// Use AI in the Code node # Feature availability AI assistance in the Code node is available to Cloud users. It isn't available in self-hosted n8n. AI generated code overwrites your code If you've already written some code on the Code tab, the AI generated code will replace it. n8n recommends using AI as a starting point to create your initial code, then editing it as needed. To use ChatGPT to generate code in the Code node: In the Code node, set Language to JavaScript . Select the Ask AI tab. Write your query. Select Generate Code . n8n sends your query to ChatGPT, then displays the result in the Code tab. Usage limits # During the trial phase there are no usage limits. If n8n makes the feature permanent, there may be usage limits as part of your pricing tier. Feature limits # The ChatGPT implementation in n8n has the following limitations: The AI writes code that manipulates data from the n8n workflow. You can't ask it to pull in data from other sources. The AI doesn't know your data, just the schema, so you need to tell it things like how to find the data you want to extract, or how to check for null. Nodes before the Code node must execute and deliver data to the Code node before you run your AI query. Doesn't work with large incoming data schemas. May have issues if there are a lot of nodes before the code node. Writing good prompts # Writing good prompts increases the chance of getting useful code back. Some general tips: Provide examples: if possible, give a sample expected output. This helps the AI to better understand the transformation or logic you’re aiming for. Describe the processing steps: if there are specific processing steps or logic that should apply to the data, list them in sequence. For example: "First, filter out all users under 18. Then, sort the remaining users by their last name." Avoid ambiguities: while the AI understands various instructions, being clear and direct ensures you get the most accurate code. Instead of saying "Get the older users," you might say "Filter users who are 60 years and above." Be clear about what you expect as the output. Do you want the data transformed, filtered, aggregated, or sorted? Provide as much detail as possible. And some n8n-specific guidance: Think about the input data: make sure ChatGPT knows which pieces of the data you want to access, and what the incoming data represents. You may need to tell ChatGPT about the availability of n8n's built-in methods and variables. Declare interactions between nodes: if your logic involves data from multiple nodes, specify how they should interact. "Merge the output of 'Node A' with 'Node B' based on the 'userID' property". if you prefer data to come from certain nodes or to ignore others, be clear: "Only consider data from the 'Purchases' node and ignore the 'Refunds' node." Ensure the output is compatible with n8n. Refer to Data structure for more information on the data structure n8n requires. Example prompts # These examples show a range of possible prompts and tasks. Example 1: Find a piece of data inside a second dataset # To try the example yourself, download the example workflow and import it into n8n. In the third Code node, enter this prompt: The slack data contains only one item. The input data represents all Notion users. Sometimes the person property that holds the email can be null. I want to find the notionId of the Slack user and return it. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 const slackUser = $ ( "Mock Slack" ). all ()[ 0 ]; const notionUsers = $input . all (); const slackUserEmail = slackUser . json . email ; const notionUser = notionUsers . find ( ( user ) => user . json . person && user . json . person . email === slackUserEmail ); return notionUser ? [{ json : { notionId : notionUser . json . id } }] : []; Example 2: Data transformation # To try the example yourself, download the example workflow and import it into n8n. In the Join items Code node, enter this prompt: Return a single line of text that has all usernames listed with a comma. Each username should be enquoted with a double quotation mark. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 const items = $input . all (); const usernames = items . map (( item ) => `" ${ item . json . username } "` ); const result = usernames . join ( ", " ); return [{ json : { usernames : result } }]; Example 3: Summarize data and create a Slack message # To try the example yourself, download the example workflow and import it into n8n. In the Summarize Code node, enter this prompt: Create a markdown text for Slack that counts how many ideas, features and bugs have been submitted. The type of submission is saved in the property_type field. A feature has the property "Feature", a bug has the property "Bug" and an idea has the property "Bug". Also, list the five top submissions by vote in that message. Use " " as markdown for links. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 const submissions = $input . all (); // Count the number of ideas, features, and bugs let ideaCount = 0 ; let featureCount = 0 ; let bugCount = 0 ; submissions . forEach (( submission ) => { switch ( submission . json . property_type [ 0 ]) { case "Idea" : ideaCount ++ ; break ; case "Feature" : featureCount ++ ; break ; case "Bug" : bugCount ++ ; break ; } }); // Sort submissions by votes and take the top 5 const topSubmissions = submissions . sort (( a , b ) => b . json . property_votes - a . json . property_votes ) . slice ( 0 , 5 ); let topSubmissionText = "" ; topSubmissions . forEach (( submission ) => { topSubmissionText += `< ${ submission . json . url } | ${ submission . json . name } > with ${ submission . json . property_votes } votes\n` ; }); // Construct the Slack message const slackMessage = `*Summary of Submissions*\n Ideas: ${ ideaCount } \n Features: ${ featureCount } \n Bugs: ${ bugCount } \n Top 5 Submissions:\n ${ topSubmissionText } ` ; return [{ json : { slackMessage } }]; Reference incoming node data explicitly # If your incoming data contains nested fields, using dot notation to reference them can help the AI understand what data you want. To try the example yourself, download the example workflow and import it into n8n. In the second Code node, enter this prompt: The data in "Mock data" represents a list of people. For each person, return a new item containing personal_info.first_name and work_info.job_title. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 const items = $input . all (); const newItems = items . map (( item ) => { const firstName = item . json . personal_info . first_name ; const jobTitle = item . json . work_info . job_title ; return { json : { firstName , jobTitle , }, }; }); return newItems ; Related resources # Pluralsight offer a short guide on How to use ChatGPT to write code , which includes example prompts. Fixing the code # The AI-generated code may work without any changes, but you may have to edit it. You need to be aware of n8n's Data structure . You may also find n8n's built-in methods and variables useful. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/ai-code/#writing-good-prompts

AI coding with GPT # Not available on self-hosted. Python isn't supported. /// Use AI in the Code node # Feature availability AI assistance in the Code node is available to Cloud users. It isn't available in self-hosted n8n. AI generated code overwrites your code If you've already written some code on the Code tab, the AI generated code will replace it. n8n recommends using AI as a starting point to create your initial code, then editing it as needed. To use ChatGPT to generate code in the Code node: In the Code node, set Language to JavaScript . Select the Ask AI tab. Write your query. Select Generate Code . n8n sends your query to ChatGPT, then displays the result in the Code tab. Usage limits # During the trial phase there are no usage limits. If n8n makes the feature permanent, there may be usage limits as part of your pricing tier. Feature limits # The ChatGPT implementation in n8n has the following limitations: The AI writes code that manipulates data from the n8n workflow. You can't ask it to pull in data from other sources. The AI doesn't know your data, just the schema, so you need to tell it things like how to find the data you want to extract, or how to check for null. Nodes before the Code node must execute and deliver data to the Code node before you run your AI query. Doesn't work with large incoming data schemas. May have issues if there are a lot of nodes before the code node. Writing good prompts # Writing good prompts increases the chance of getting useful code back. Some general tips: Provide examples: if possible, give a sample expected output. This helps the AI to better understand the transformation or logic you’re aiming for. Describe the processing steps: if there are specific processing steps or logic that should apply to the data, list them in sequence. For example: "First, filter out all users under 18. Then, sort the remaining users by their last name." Avoid ambiguities: while the AI understands various instructions, being clear and direct ensures you get the most accurate code. Instead of saying "Get the older users," you might say "Filter users who are 60 years and above." Be clear about what you expect as the output. Do you want the data transformed, filtered, aggregated, or sorted? Provide as much detail as possible. And some n8n-specific guidance: Think about the input data: make sure ChatGPT knows which pieces of the data you want to access, and what the incoming data represents. You may need to tell ChatGPT about the availability of n8n's built-in methods and variables. Declare interactions between nodes: if your logic involves data from multiple nodes, specify how they should interact. "Merge the output of 'Node A' with 'Node B' based on the 'userID' property". if you prefer data to come from certain nodes or to ignore others, be clear: "Only consider data from the 'Purchases' node and ignore the 'Refunds' node." Ensure the output is compatible with n8n. Refer to Data structure for more information on the data structure n8n requires. Example prompts # These examples show a range of possible prompts and tasks. Example 1: Find a piece of data inside a second dataset # To try the example yourself, download the example workflow and import it into n8n. In the third Code node, enter this prompt: The slack data contains only one item. The input data represents all Notion users. Sometimes the person property that holds the email can be null. I want to find the notionId of the Slack user and return it. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 const slackUser = $ ( "Mock Slack" ). all ()[ 0 ]; const notionUsers = $input . all (); const slackUserEmail = slackUser . json . email ; const notionUser = notionUsers . find ( ( user ) => user . json . person && user . json . person . email === slackUserEmail ); return notionUser ? [{ json : { notionId : notionUser . json . id } }] : []; Example 2: Data transformation # To try the example yourself, download the example workflow and import it into n8n. In the Join items Code node, enter this prompt: Return a single line of text that has all usernames listed with a comma. Each username should be enquoted with a double quotation mark. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 const items = $input . all (); const usernames = items . map (( item ) => `" ${ item . json . username } "` ); const result = usernames . join ( ", " ); return [{ json : { usernames : result } }]; Example 3: Summarize data and create a Slack message # To try the example yourself, download the example workflow and import it into n8n. In the Summarize Code node, enter this prompt: Create a markdown text for Slack that counts how many ideas, features and bugs have been submitted. The type of submission is saved in the property_type field. A feature has the property "Feature", a bug has the property "Bug" and an idea has the property "Bug". Also, list the five top submissions by vote in that message. Use " " as markdown for links. Take a look at the code the AI generates. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 const submissions = $input . all (); // Count the number of ideas, features, and bugs let ideaCount = 0 ; let featureCount = 0 ; let bugCount = 0 ; submissions . forEach (( submission ) => { switch ( submission . json . property_type [ 0 ]) { case "Idea" : ideaCount ++ ; break ; case "Feature" : featureCount ++ ; break ; case "Bug" : bugCount ++ ; break ; } }); // Sort submissions by votes and take the top 5 const topSubmissions = submissions . sort (( a , b ) => b . json . property_votes - a . json . property_votes ) . slice ( 0 , 5 ); let topSubmissionText = "" ; topSubmissions . forEach (( submission ) => { topSubmissionText += `< ${ submission . json . url } | ${ submission . json . name } > with ${ submission . json . property_votes } votes\n` ; }); // Construct the Slack message const slackMessage = `*Summary of Submissions*\n Ideas: ${ ideaCount } \n Features: ${ featureCount } \n Bugs: ${ bugCount } \n Top 5 Submissions:\n ${ topSubmissionText } ` ; return [{ json : { slackMessage } }]; Reference incoming node data explicitly # If your incoming data contains nested fields, using dot notation to reference them can help the AI understand what data you want. To try the example yourself, download the example workflow and import it into n8n. In the second Code node, enter this prompt: The data in "Mock data" represents a list of people. For each person, return a new item containing personal_info.first_name and work_info.job_title. This is the JavaScript you need: 1 2 3 4 5 6 7 8 9 10 11 12 const items = $input . all (); const newItems = items . map (( item ) => { const firstName = item . json . personal_info . first_name ; const jobTitle = item . json . work_info . job_title ; return { json : { firstName , jobTitle , }, }; }); return newItems ; Related resources # Pluralsight offer a short guide on How to use ChatGPT to write code , which includes example prompts. Fixing the code # The AI-generated code may work without any changes, but you may have to edit it. You need to be aware of n8n's Data structure . You may also find n8n's built-in methods and variables useful. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/starter-kits/ai-starter-kit/

Self-hosted AI Starter Kit # The Self-hosted AI Starter Kit is an open, docker compose template that bootstraps a fully featured Local AI and Low Code development environment. Curated by n8n , it combines the self-hosted n8n platform with a list of compatible AI products and components to get you started building self-hosted AI workflows. What’s included # ✅ Self-hosted n8n : Low-code platform with over 400 integrations and advanced AI components. ✅ Ollama : Cross-platform LLM platform to install and run the latest local LLMs. ✅ Qdrant : Open-source, high performance vector store with a comprehensive API. ✅ PostgreSQL : The workhorse of the Data Engineering world, handles large amounts of data safely. What you can build # ⭐️ AI Agents that can schedule appointments ⭐️ Summaries of company PDFs without leaking data ⭐️ Smarter Slackbots for company communications and IT-ops ⭐️ Private, low-cost analyses of financial documents Get the kit # Head to the GitHub repository to clone the repo and get started! For testing only n8n designed this kit to help you get started with self-hosted AI workflows. While it’s not fully optimized for production environments, it combines robust components that work well together for proof-of-concept projects. Customize it to meet your needs. Secure and harden it before using in production. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/executions/all-executions/

All executions # To view all executions from an n8n instance, navigate to the Overview page and then click into the Executions tab. This will show you all executions from the workflows you have access to. If your n8n instance supports projects , you'll also be able to view the executions tab within projects you have access to. This will show you executions only from the workflows within the specified project. Deleted workflows When you delete a workflow, n8n deletes its execution history as well. This means you can't view executions for deleted workflows. Filter executions # You can filter the executions list: Select the Executions tab either from within the Overview page or a specific project to open the list. Select Filters . Enter your filters. You can filter by: Workflows : choose all workflows, or a specific workflow name. Status : choose from Failed , Running , Success , or Waiting . Execution start : see executions that started in the given time. Saved custom data : this is data you create within the workflow using the Code node. Enter the key and value to filter. Refer to Custom executions data for information on adding custom data. Feature availability Custom executions data is available on: Cloud: Pro, Enterprise Self-Hosted: Enterprise, registered Community Available in version 0.222.0 and above. Retry failed workflows # If your workflow execution fails, you can retry the execution. To retry a failed workflow: Select the Executions tab from within either the Overview page or a specific project to open the list. On the execution you want to retry, select Retry execution . Select either of the following options to retry the execution: Retry with currently saved workflow : Once you make changes to your workflow, you can select this option to execute the workflow with the previous execution data. Retry with original workflow : If you want to retry the execution without making changes to your workflow, you can select this option to retry the execution with the previous execution data. Load data from previous executions into your current workflow # You can load data from a previous workflow back into the canvas. Refer to Debug executions for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/api/api-reference/#tag/Workflow/paths/~1workflows/post

Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/api/api-reference/#tag/Workflow/paths/~1workflows~1%7Bid%7D/put

Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/api/api-reference/

Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/advanced-ai/examples/api-workflow-tool/

Call an API to fetch data # Use n8n to bring data from any API to your AI. This workflow uses the Chat Trigger to provide the chat interface, and the Custom n8n Workflow Tool to call a second workflow that calls the API. The second workflow uses AI functionality to refine the API request based on the user's query. View workflow file Key features # This workflow uses: Chat Trigger : start your workflow and respond to user chat interactions. The node provides a customizable chat interface. Agent : the key piece of the AI workflow. The Agent interacts with other components of the workflow and makes decisions about what tools to use. Custom n8n Workflow Tool : plug in n8n workflows as custom tools. In AI, a tool is an interface the AI can use to interact with the world (in this case, the data provided by your workflow). The AI model uses the tool to access information beyond its built-in dataset. A Basic LLM Chain with an Auto-fixing Output Parser and Structured Output Parser to read the user's query and set parameters for the API call based on the user input. Using the example # To load the template into your n8n instance: Download the workflow JSON file. Open a new workflow in your n8n instance. Copy in the JSON, or select Workflow menu > Import from file... . The example workflows use Sticky Notes to guide you: Yellow: notes and information. Green: instructions to run the workflow. Orange: you need to change something to make the workflow work. Blue: draws attention to a key feature of the example. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/api/

n8n public REST API # Feature availability The n8n API isn't available during the free trial. Please upgrade to access this feature. Using n8n's public API , you can programmatically perform many of the same tasks as you can in the GUI. This section introduces n8n's REST API, including: How to authenticate Paginating results Using the built-in API playground (self-hosted n8n only) Endpoint reference n8n provides an n8n API node to access the API in your workflows. Learn about REST APIs # The API documentation assumes you are familiar with REST APIs. If you're not, these resources may be helpful: KnowledgeOwl's guide to working with APIs : a basic introduction, including examples of how to call REST APIs. IBM Cloud Learn Hub - What is an Application Programming Interface (API) : this gives a general, but technical, introduction to APIs. IBM Cloud Learn Hub - What is a REST API? : more detailed information about REST APIs. MDN web docs - An overview of HTTP : REST APIs work over HTTP and use HTTP verbs, or methods, to specify the action to perform. Use the API playground (self-hosted n8n only) Trying out the API in the playground can help you understand how APIs work. If you're worried about changing live data, consider setting up a test workflow, or test n8n instance, to explore safely. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/builtin/data-transformation-functions/arrays/

Arrays # A reference document listing built-in convenience functions to support data transformation in expressions for arrays. JavaScript in expressions You can use any JavaScript in expressions. Refer to Expressions for more information. average(): Number # Returns the value of elements in an array chunk(size: Number): Array # Splits arrays into chunks with a length of size Function parameters # size Required Number The size of each chunk. compact(): Array # Removes empty values from the array. difference(arr: Array): Array # Compares two arrays. Returns all elements in the base array that aren't present in arr. Function parameters # arr Required Array The array to compare to the base array. intersection(arr: Array): Array # Compares two arrays. Returns all elements in the base array that are present in arr. Function parameters # arr Required Array The array to compare to the base array. first(): Array item # Returns the first element of the array. isEmpty(): Boolean # Checks if the array doesn't have any elements. isNotEmpty(): Boolean # Checks if the array has elements. last(): Array item # Returns the last element of the array. max(): Number # Returns the highest value in an array. merge(arr: Array): Array # Merges two Object-arrays into one array by merging the key-value pairs of each element. Function parameters # arr Required Array The array to merge into the base array. min(): Number # Gets the minimum value from a number-only array. pluck(fieldName?: String): Array # Returns an array of Objects where keys equal the given field names. Function parameters # fieldName Optional String The key(s) you want to retrieve. You can enter as many keys as you want, as comma-separated strings. randomItem(): Array item # Returns a random element from an array. removeDuplicates(key?: String): Array # Removes duplicates from an array. Function parameters # key Optional String A key, or comma-separated list of keys, to check for duplicates. renameKeys(from: String, to: String): Array # Renames all matching keys in the array. You can rename more than one key by entering a series of comma separated strings, in the pattern oldKeyName, newKeyName. Function parameters # from Required String The key you want to rename. to Required String The new name. smartJoin(keyField: String, nameField: String): Array # Operates on an array of objects where each object contains key-value pairs. Creates a new object containing key-value pairs, where the key is the value of the first pair, and the value is the value of the second pair. Removes non-matching and empty values and trims any whitespace before joining. Function parameters # keyField Required String The key to join. nameField Required String The value to join. Example Basic usage 1 2 3 4 // Input {{ [{ "type" : "fruit" , "name" : "apple" },{ "type" : "vegetable" , "name" : "carrot" } ]. smartJoin ( "type" , "name" ) }} // Output [ Object : { "fruit" : "apple" , "vegetable" : "carrot" }] sum(): Number # Returns the total sum all the values in an array of parsable numbers. toJsonString(): String # Convert an array to a JSON string. Equivalent of JSON.stringify . union(arr: Array): Array # Concatenates two arrays and then removes duplicate. Function parameters # arr Required Array The array to compare to the base array. unique(key?: String): Array # Remove duplicates from an array. Function parameters # key Optional String A key, or comma-separated list of keys, to check for duplicates. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows/advanced-ai/examples/ask_a_human.json

{ "name": "Ask a human", "nodes": [ { "parameters": {}, "id": "a60c8572-56c1-4bf3-8352-a6419a475887", "name": "Window Buffer Memory", "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow", "typeVersion": 1.1, "position": [ 900, 760 ] }, { "parameters": { "name": "dont_know_tool", "description": "Use this tool if you don't know the answer to the user's question, or if you're not very confident about your answer.", "workflowId": "={{ $workflow.id}}", "fields": { "values": [ { "name": "chatInput", "stringValue": "={{ $('Chat Trigger').item.json.chatInput }}" } ] } }, "id": "b4f2e26c-903b-46b8-bd8b-110fd64de9e4", "name": "Not sure?", "type": "@n8n/n8n-nodes-langchain.toolWorkflow", "typeVersion": 1, "position": [ 1120, 760 ] }, { "parameters": {}, "id": "951cc691-b422-4ce6-901f-b7feb3afd1ad", "name": "Execute Workflow Trigger", "type": "n8n-nodes-base.executeWorkflowTrigger", "typeVersion": 1, "position": [ 540, 1360 ] }, { "parameters": { "content": "### Sub-workflow: Custom tool\nThe agent above can call this workflow. It checks if the user has supplied an email address. If they haven't it prompts them to provide one. If they have, it messages a customer support channel for help.", "height": 775.3931210698682, "width": 1118.3459011229047, "color": 7 }, "id": "194ba9c0-e256-449a-8da7-ac5339123a99", "name": "Sticky Note1", "type": "n8n-nodes-base.stickyNote", "position": [ 500, 1020 ], "typeVersion": 1 }, { "parameters": { "content": "### Main workflow: AI agent using custom tool", "height": 486.5625, "width": 927.5, "color": 7 }, "id": "38c6b363-45a7-4e72-9e40-8c0df3cc480f", "name": "Sticky Note2", "type": "n8n-nodes-base.stickyNote", "position": [ 500, 460 ], "typeVersion": 1 }, { "parameters": { "content": "**This tool calls the sub-workflow below**", "height": 179.21380662202682, "width": 197.45572294791873, "color": 5 }, "id": "0389315b-e48d-4b00-b9a1-899302b1b094", "name": "Sticky Note", "type": "n8n-nodes-base.stickyNote", "position": [ 1060, 700 ], "typeVersion": 1 }, { "parameters": { "content": "**Set your credentials**", "height": 213.44323866265472, "width": 150, "color": 2 }, "id": "fb11064a-4cf5-4110-9e39-af24a3225164", "name": "Sticky Note5", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 700, 680 ] }, { "parameters": { "content": "**Set your credentials and Slack details**", "height": 250.57252651663197, "width": 178.0499248677781, "color": 2 }, "id": "d689021d-0a46-4dff-a01a-0b01ecdd198b", "name": "Sticky Note4", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 1020, 1180 ] }, { "parameters": { "content": "## Try it out\n\nSelect **Chat** at the bottom and enter:\n\n_Hi! Please respond to this as if you don't know the answer to my query._", "height": 214.8397420554627, "width": 185.9375, "color": 4 }, "id": "0926cd61-c0b8-4bae-ae65-9afd130d17cd", "name": "Sticky Note3", "type": "n8n-nodes-base.stickyNote", "position": [ 340, 520 ], "typeVersion": 1 }, { "parameters": { "content": "## Next steps\n\nLearn more about [Advanced AI in n8n](https://docs.n8n.io/advanced-ai/)", "height": 144.50520156238127 }, "id": "cde69dfe-252e-4a05-8d56-fa79431df5d8", "name": "Sticky Note6", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 1580, 1600 ] }, { "parameters": {}, "id": "927b775a-47f6-4067-a1a5-5f13dea28e45", "name": "Chat Trigger", "type": "@n8n/n8n-nodes-langchain.chatTrigger", "typeVersion": 1, "position": [ 600, 520 ], "webhookId": "785e0c0c-12e5-4249-9abe-47bb131975cb" }, { "parameters": { "jsCode": "response = {\"response\":\"I'm sorry I don't know the answer. Please repeat your question and include your email address so I can request help.\"};\nreturn response;" }, "id": "971e7b90-c2d8-4292-9da8-732d7d399f04", "name": "Prompt the user to provide an email", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ 1060, 1520 ] }, { "parameters": { "jsCode": "response = {\"response\": \"Thank you for getting in touch. I've messaged a human to help.\"}\nreturn response;" }, "id": "6f5a21b3-c145-46c8-8e69-660100c4a6fc", "name": "Confirm that we've messaged a human", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ 1300, 1260 ] }, { "parameters": { "options": { "systemMessage": "Try to answer the user's question. When you can't answer, or you're not confident of the answer, use the appropriate tool. When you use the dont_know_tool, respond with the message from the tool." } }, "id": "8b17da5e-e392-4028-91b0-bc02d34e46ed", "name": "AI Agent", "type": "@n8n/n8n-nodes-langchain.agent", "typeVersion": 1.2, "position": [ 820, 520 ] }, { "parameters": { "conditions": { "options": { "caseSensitive": true, "leftValue": "", "typeValidation": "strict" }, "conditions": [ { "id": "5e21e7c5-db60-4111-bb17-c289ae0fc159", "leftValue": "={{ $('Execute Workflow Trigger').item.json.chatInput }}", "rightValue": "/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)/gi", "operator": { "type": "string", "operation": "regex" } } ], "combinator": "and" }, "options": {} }, "id": "990ecd3b-6aa0-4b17-8d01-d606b9164fa8", "name": "Check if user has provided email", "type": "n8n-nodes-base.if", "typeVersion": 2, "position": [ 760, 1360 ] }, { "parameters": { "select": "channel", "channelId": { "__rl": true, "value": "", "mode": "name" }, "text": "={{ \"A user had a question the bot couldn't answer. Here's their message: \" + $('Execute Workflow Trigger').item.json.chatInput }}", "otherOptions": {} }, "id": "d14da0ae-06ca-422b-b5b6-e7759e74c787", "name": "Message Slack for help", "type": "n8n-nodes-base.slack", "typeVersion": 2.1, "position": [ 1060, 1260 ] }, { "parameters": { "model": "gpt-4", "options": { "temperature": 0.2 } }, "id": "278391c7-6945-495e-a4f1-74fb8fcc3549", "name": "GPT4", "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi", "typeVersion": 1, "position": [ 740, 740 ] } ], "pinData": {}, "connections": { "Window Buffer Memory": { "ai_memory": [ [ { "node": "AI Agent", "type": "ai_memory", "index": 0 } ] ] }, "Not sure?": { "ai_tool": [ [ { "node": "AI Agent", "type": "ai_tool", "index": 0 } ] ] }, "Execute Workflow Trigger": { "main": [ [ { "node": "Check if user has provided email", "type": "main", "index": 0 } ] ] }, "Chat Trigger": { "main": [ [ { "node": "AI Agent", "type": "main", "index": 0 } ] ] }, "Check if user has provided email": { "main": [ [ { "node": "Message Slack for help", "type": "main", "index": 0 } ], [ { "node": "Prompt the user to provide an email", "type": "main", "index": 0 } ] ] }, "Message Slack for help": { "main": [ [ { "node": "Confirm that we've messaged a human", "type": "main", "index": 0 } ] ] }, "GPT4": { "ai_languageModel": [ [ { "node": "AI Agent", "type": "ai_languageModel", "index": 0 } ] ] } } }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/api/authentication/

API authentication # n8n uses API keys to authenticate API calls. Create an API key # Log in to n8n. Go to Settings > n8n API . Select Create an API key . Copy My API Key and use this key to authenticate your calls. Delete an API key # Log in to n8n. Go to Settings > n8n API . Select Delete next to the key you want to delete. Confirm the delete by selecting Delete Forever . Call the API using your key # Send the API key in your API call as a header named X-N8N-API-KEY . For example, say you want to get all active workflows. Your curl request will look like this: 1 2 3 4 5 6 7 8 9 10 11 # For a self-hosted n8n instance curl -X 'GET' \ '<N8N_HOST>:<N8N_PORT>/<N8N_PATH>/api/v<version-number>/workflows?active=true' \ -H 'accept: application/json' \ -H 'X-N8N-API-KEY: <your-api-key>' # For n8n Cloud curl -X 'GET' \ '<your-cloud-instance>/api/v<version-number>/workflows?active=true' \ -H 'accept: application/json' \ -H 'X-N8N-API-KEY: <your-api-key>' Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/installation/server-setups/aws/

Hosting n8n on Amazon Web Services # This hosting guide shows you how to self-host n8n with Amazon Web Services (AWS). It uses n8n with Postgres as a database backend using Kubernetes to manage the necessary resources and reverse proxy. Hosting options # AWS offers several ways suitable for hosting n8n, including EC2 (virtual machines), and EKS (containers running with Kubernetes). This guide uses EKS as the hosting option. Using Kubernetes requires some additional complexity and configuration, but is the best method for scaling n8n as demand changes. Prerequisites # The steps in this guide use a mix of the AWS UI and the eksctl CLI tool for EKS . While not mentioned in the documentation for eksctl, you also need to install the AWS CLI tool , and configure authentication of the tool . Self-hosting knowledge prerequisites Self-hosting n8n requires technical knowledge, including: Setting up and configuring servers and containers Managing application resources and scaling Securing servers and applications Configuring n8n n8n recommends self-hosting for expert users. Mistakes can lead to data loss, security issues, and downtime. If you aren't experienced at managing servers, n8n recommends n8n Cloud . Latest and Next versions n8n releases a new minor version most weeks. The latest version is for production use. next is the most recent release. You should treat next as a beta: it may be unstable. To report issues, use the forum . Current latest : 1.81.4 Current next : 1.82.0 Create a cluster # Use the eksctl tool to create a cluster specifying a name and a region with the following command: 1 eksctl create cluster --name n8n --region <your-aws-region> This can take a while to create the cluster. Once the cluster is created, eksctl automatically sets the kubectl context to the cluster. Clone configuration repository # Kubernetes and n8n require a series of configuration files. You can clone these from this repository . The following steps tell you what each file does, and what settings you need to change. Clone the repository with the following command: 1 git clone https://github.com/n8n-io/n8n-kubernetes-hosting.git -b aws And change directory to the root of the repository you cloned: 1 cd n8n-kubernetes-hosting Configure Postgres # For larger scale n8n deployments, Postgres provides a more robust database backend than SQLite. Configure volume for persistent storage # To maintain data between pod restarts, the Postgres deployment needs a persistent volume. The default AWS storage class, gp2 , is suitable for this purpose. This is defined in the postgres-claaim0-persistentvolumeclaim.yaml manifest. 1 2 3 4 5 6 … spec : storageClassName : gp2 accessModes : - ReadWriteOnce … Postgres environment variables # Postgres needs some environment variables set to pass to the application running in the containers. The example postgres-secret.yaml file contains placeholders you need to replace with values of your own for user details and the database to use. The postgres-deployment.yaml manifest then uses the values from this manifest file to send to the application pods. Configure n8n # Create a volume for file storage # While not essential for running n8n, using persistent volumes helps maintain files uploaded while using n8n and if you want to persist manual n8n encryption keys between restarts, which saves a file containing the key into file storage during startup. The n8n-claim0-persistentvolumeclaim.yaml manifest creates this, and the n8n Deployment mounts that claim in the volumes section of the n8n-deployment.yaml manifest. 1 2 3 4 5 6 … volumes : - name : n8n-claim0 persistentVolumeClaim : claimName : n8n-claim0 … Pod resources # Kubernetes lets you specify the minimum resources application containers need and the limits they can run to. The example YAML files cloned above contain the following in the resources section of the n8n-deployment.yaml file: 1 2 3 4 5 6 7 … resources : requests : memory : "250Mi" limits : memory : "500Mi" … This defines a minimum of 250mb per container, a maximum of 500mb, and lets Kubernetes handle CPU. You can change these values to match your own needs. As a guide, here are the resources values for the n8n cloud offerings: Start : 320mb RAM, 10 millicore CPU burstable Pro (10k executions) : 640mb RAM, 20 millicore CPU burstable Pro (50k executions) : 1280mb RAM, 80 millicore CPU burstable Optional: Environment variables # You can configure n8n settings and behaviors using environment variables. Create an n8n-secret.yaml file. Refer to Environment variables for n8n environment variables details. Deployments # The two deployment manifests ( n8n-deployment.yaml and postgres-deployment.yaml ) define the n8n and Postgres applications to Kubernetes. The manifests define the following: Send the environment variables defined to each application pod Define the container image to use Set resource consumption limits The volumes defined earlier and volumeMounts to define the path in the container to mount volumes. Scaling and restart policies. The example manifests define one instance of each pod. You should change this to meet your needs. Services # The two service manifests ( postgres-service.yaml and n8n-service.yaml ) expose the services to the outside world using the Kubernetes load balancer using ports 5432 and 5678 respectively by default. Send to Kubernetes cluster # Send all the manifests to the cluster by running the following command in the n8n-kubernetes-hosting directory: 1 kubectl apply -f . Namespace error You may see an error message about not finding an "n8n" namespace as that resources isn't ready yet. You can run the same command again, or apply the namespace manifest first with the following command: 1 kubectl apply -f namespace.yaml Set up DNS # n8n typically operates on a subdomain. Create a DNS record with your provider for the subdomain and point it to a static address of the instance. To find the address of the n8n service running on the instance: Open the Clusters section of the Amazon Elastic Kubernetes Service page in the AWS console. Select the name of the cluster to open its configuration page. Select the Resources tab, then Service and networking > Services . Select the n8n service and copy the Load balancer URLs value. Use this value suffixed with the n8n service port (5678) for DNS. Use HTTP This guide uses HTTP connections for the services it defines, for example in n8n-deployment.yaml . However, if you click the Load balancer URLs value, EKS takes you to an "HTTPS" URL which results in an error. To solve this, when you open the n8n subdomain, make sure to use HTTP. Delete resources # If you need to delete the setup, you can remove the resources created by the manifests with the following command: 1 kubectl delete -f . Next steps # Learn more about configuring and scaling n8n. Or explore using n8n: try the Quickstarts . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/installation/server-setups/azure/

Hosting n8n on Azure # This hosting guide shows you how to self-host n8n on Azure. It uses n8n with Postgres as a database backend using Kubernetes to manage the necessary resources and reverse proxy. Prerequisites # You need The Azure command line tool Self-hosting knowledge prerequisites Self-hosting n8n requires technical knowledge, including: Setting up and configuring servers and containers Managing application resources and scaling Securing servers and applications Configuring n8n n8n recommends self-hosting for expert users. Mistakes can lead to data loss, security issues, and downtime. If you aren't experienced at managing servers, n8n recommends n8n Cloud . Latest and Next versions n8n releases a new minor version most weeks. The latest version is for production use. next is the most recent release. You should treat next as a beta: it may be unstable. To report issues, use the forum . Current latest : 1.81.4 Current next : 1.82.0 Hosting options # Azure offers several ways suitable for hosting n8n, including Azure Container Instances (optimized for running containers), Linux Virtual Machines, and Azure Kubernetes Service (containers running with Kubernetes). This guide uses the Azure Kubernetes Service (AKS) as the hosting option. Using Kubernetes requires some additional complexity and configuration, but is the best method for scaling n8n as demand changes. The steps in this guide use a mix of the Azure UI and command line tool, but you can use either to accomplish most tasks. Open the Azure Kubernetes Service # From the Azure portal select Kubernetes services . Create a cluster # From the Kubernetes services page, select Create > Create a Kubernetes cluster . You can select any of the configuration options that suit your needs, then select Create when done. Set Kubectl context # The remainder of the steps in this guide require you to set the Azure instance as the Kubectl context. You can find the connection details for a cluster instance by opening its details page and then the Connect button. The resulting code snippets shows the steps to paste and run into a terminal to change your local Kubernetes settings to use the new cluster. Clone configuration repository # Kubernetes and n8n require a series of configuration files. You can clone these from this repository . The following steps tell you which file configures what and what you need to change. Clone the repository with the following command: 1 git clone https://github.com/n8n-io/n8n-kubernetes-hosting.git -b azure And change directory to the root of the repository you cloned: 1 cd azure Configure Postgres # For larger scale n8n deployments, Postgres provides a more robust database backend than SQLite. Configure volume for persistent storage # To maintain data between pod restarts, the Postgres deployment needs a persistent volume. The default storage class is suitable for this purpose and is defined in the postgres-claim0-persistentvolumeclaim.yaml manifest. Specialized storage classes If you have specialised or higher requirements for storage classes, read more on the options Azure offers in the documentation . Postgres environment variables # Postgres needs some environment variables set to pass to the application running in the containers. The example postgres-secret.yaml file contains placeholders you need to replace with your own values. Postgres will use these details when creating the database.. The postgres-deployment.yaml manifest then uses the values from this manifest file to send to the application pods. Configure n8n # Create a volume for file storage # While not essential for running n8n, using persistent volumes is required for: Using nodes that interact with files, such as the binary data node. If you want to persist manual n8n encryption keys between restarts. This saves a file containing the key into file storage during startup. The n8n-claim0-persistentvolumeclaim.yaml manifest creates this, and the n8n Deployment mounts that claim in the volumes section of the n8n-deployment.yaml manifest. 1 2 3 4 5 6 … volumes : - name : n8n-claim0 persistentVolumeClaim : claimName : n8n-claim0 … Pod resources # Kubernetes lets you optionally specify the minimum resources application containers need and the limits they can run to. The example YAML files cloned above contain the following in the resources section of the n8n-deployment.yaml file: 1 2 3 4 5 6 7 … resources : requests : memory : "250Mi" limits : memory : "500Mi" … This defines a minimum of 250mb per container, a maximum of 500mb, and lets Kubernetes handle CPU. You can change these values to match your own needs. As a guide, here are the resources values for the n8n cloud offerings: Start : 320mb RAM, 10 millicore CPU burstable Pro (10k executions) : 640mb RAM, 20 millicore CPU burstable Pro (50k executions) : 1280mb RAM, 80 millicore CPU burstable Optional: Environment variables # You can configure n8n settings and behaviors using environment variables. Create an n8n-secret.yaml file. Refer to Environment variables for n8n environment variables details. Deployments # The two deployment manifests ( n8n-deployment.yaml and postgres-deployment.yaml ) define the n8n and Postgres applications to Kubernetes. The manifests define the following: Send the environment variables defined to each application pod Define the container image to use Set resource consumption limits with the resources object The volumes defined earlier and volumeMounts to define the path in the container to mount volumes. Scaling and restart policies. The example manifests define one instance of each pod. You should change this to meet your needs. Services # The two service manifests ( postgres-service.yaml and n8n-service.yaml ) expose the services to the outside world using the Kubernetes load balancer using ports 5432 and 5678 respectively. Send to Kubernetes cluster # Send all the manifests to the cluster with the following command: 1 kubectl apply -f . Namespace error You may see an error message about not finding an "n8n" namespace as that resources isn't ready yet. You can run the same command again, or apply the namespace manifest first with the following command: 1 kubectl apply -f namespace.yaml Set up DNS # n8n typically operates on a subdomain. Create a DNS record with your provider for the subdomain and point it to the IP address of the n8n service. Find the IP address of the n8n service from the Services & ingresses menu item of the cluster you want to use under the External IP column. You need to add the n8n port, "5678" to the URL. Static IP addresses with AKS Read this tutorial for more details on how to use a static IP address with AKS. Delete resources # Remove the resources created by the manifests with the following command: 1 kubectl delete -f . Next steps # Learn more about configuring and scaling n8n. Or explore using n8n: try the Quickstarts . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/configuration-examples/base-url/

Configure the Base URL for n8n's front end access # Requires manual UI build This use case involves configuring the VUE_APP_URL_BASE_API environmental variable which requires a manual build of the n8n-editor-ui package. You can't use it with the default n8n Docker image where the default setting for this variable is / , meaning that it uses the root-domain. You can configure the Base URL that the front end uses to connect to the back end's REST API. This is relevant when you want to host n8n's front end and back end separately. 1 export VUE_APP_URL_BASE_API = https://n8n.example.com/ Refer to Environment variables reference for more information on this variable. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/user-management/best-practices/

Best practices for user management # This page contains advice on best practices relating to user management in n8n. All platforms # n8n recommends that owners create a member-level account for themselves. Owners can see all workflows, but there is no way to see who created a particular workflow, so there is a risk of overriding other people's work if you build and edit workflows as an owner. Users must be careful not to edit the same workflow simultaneously. It's possible to do it, but the users will overwrite each other's changes. To move workflows between accounts, export the workflow as JSON, then import it to the new account. Note that this action loses the workflow history. Webhook paths must be unique across the entire instance. This means each webhook path must be unique for all workflows and all users. By default, n8n generates a long random value for the webhook path, but users can edit this to their own custom path. If two users set the same path value: The path works for the first workflow that's run or activated. Other workflows will error if they try to run with the same path. Self-hosted # If you run n8n behind a reverse proxy, set the following environment variables so that n8n generates emails with the correct URL: N8N_HOST N8N_PORT N8N_PROTOCOL N8N_EDITOR_BASE_URL More information on these variables is available in Environment variables . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/binary-data/

Binary data environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. By default, n8n uses memory to store binary data. Enterprise users can choose to use an external service instead. Refer to External storage for more information on using external storage for binary data. Variable Type Default Description N8N_AVAILABLE_BINARY_DATA_MODES String filesystem A comma separated list of available binary data modes. N8N_BINARY_DATA_STORAGE_PATH String N8N_USER_FOLDER/binaryData The path where n8n stores binary data. N8N_DEFAULT_BINARY_DATA_MODE String default The default binary data mode. default keeps binary data in memory. Set to filesystem to use the filesystem, or s3 to AWS S3. Note that binary data pruning operates on the active binary data mode. For example, if your instance stored data in S3, and you later switched to filesystem mode, n8n only prunes binary data in the filesystem. This may change in future. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/securing/blocking-nodes/

Block access to nodes # For security reasons, you may want to block your users from accessing or working with specific n8n nodes. This is helpful if your users might be untrustworthy. Use the NODES_EXCLUDE environment variable to prevent your users from accessing specific nodes. Exclude nodes # Update your NODES_EXCLUDE environment variable to include an array of strings containing any nodes you want to block your users from using. For example, setting the variable this way: 1 NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" Blocks the Execute Command and Read/Write Files from Disk nodes. Your n8n users won't be able to search for or use these nodes. Suggested nodes to block # The nodes that can pose security risks vary based on your use case and user profile. Here are some nodes you might want to start with: Execute Command Read/Write Files from Disk Related resources # Refer to Nodes environment variables for more information on this environment variable. Refer to Configuration for more information on setting environment variables. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/community-nodes/blocklist/

n8n community node blocklist # n8n maintains a blocklist of community nodes. You can't install any node on this list. n8n may add community nodes to the blocklist for a range of reasons, including: The node is intentionally malicious It's low quality (low enough to be harmful) If you are a community node creator whose node is on the blocklist, and you believe this is a mistake, contact hello@n8n.io . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/build/

Build a node # This section provides tutorials on building nodes. It covers: Tutorial: Build a declarative-style node Reference material on file structure , parameter definitions for base , codex , and credentials files, node UI elements , and more. Coming soon: More tutorials Revised guidance on standards Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/courses/level-one/chapter-1/#adding-nodes

Navigating the Editor UI # In this lesson you will learn how to navigate the Editor UI . We will walk through the canvas and show you what each icon means and where to find things you will need while building workflows in n8n. Getting started # Begin by setting up n8n. There are two ways you can do this: n8n Cloud - Hosted solution, no installation needed. Great for all levels of experience. Self-host - Recommended for advanced users with technical knowledge For more details on the different ways to set up n8n, see our platforms documentation . n8n version This course was developed on n8n version 1.30.0. In other versions, some of the user interface might look different, but the core functionality shouldn't be impacted. Once you have n8n running, open the Editor UI in a browser window. It should look like this: Editor UI Editor UI settings # The editor UI is the web interface where you build workflows . You can access all your workflows and credentials , as well as support pages, from the Editor UI. Left-side panel # On the left side of the Editor UI , there is a panel which contains the core functionalities and settings for managing your workflows. Expand and collapse it by selecting the small arrow icon. The panel contains the following sections: Overview : Contains all the workflows and credentials you have access to. During this course, create new workflows here. Templates : A collection of pre-made workflows. Great place to get started with common use cases. Variables : Used to store and access fixed data across your workflows. This feature is available on the Pro and Enterprise Plans. All executions : Contains information about your workflow executions. Settings : Manage users and access settings for a variety of features. Help : Contains resources around n8n product and community. Admin Panel : n8n Cloud only. Access your n8n instance usage, billing, and version settings. Update : n8n Cloud only. Indicator for any recently released product updates. Editor UI left-side menu Top bar # The top bar of the Editor UI contains the following information: Workflow Name : By default, n8n names a new workflow as “My Workflow,” but you can edit the name at any time. +Add Tag : Tags help you organise your workflows by category, use case, or whatever is relevant for you. Tags are optional. Inactive/active toggle : This button activates or deactivates the current workflow. By default, workflows are deactivated. Share : You can share and collaborate with others on workflows on the Starter, Pro, and Enterprise plans. Save : This button saves the current workflow. Editor UI top bar Canvas # The canvas is the gray dotted grid background in the Editor UI. It displays several icons and a node with different functionalities: Buttons to zoom the canvas to fit the screen, zoom in or out of the canvas, and reset the canvas to the original resolution. A button to Execute Workflow . When you click on it, all nodes on the canvas are executed. A button with a + sign inside. This button opens the nodes panel. A button with a note icon inside. This button adds a sticky note to the canvas. (Visible when hovering on the top right + icon) A dotted square with the text "Add first step." This is where you add your first node. Workflow canvas Moving the canvas You can move the workflow canvas around in three ways: Select Ctrl + Left Mouse Button on the canvas and move it around. Select Middle Mouse Button on the canvas and move it around. Place two fingers on your touchpad and slide. Don't worry about workflow execution and activation for now; we'll explain these concepts later on in the course. Nodes # You can think of nodes as building blocks that serve different functions that, when put together, make up a functioning machine: an automated workflow. Node A node is an individual step in your workflow: one that either (a) loads, (b) processes, or (c) sends data. Based on their function, n8n classifies nodes into four types: App or Action Nodes add, remove, and edit data; request and send external data; and trigger events in other systems. Refer to the Action nodes library for a full list of these nodes. Trigger Nodes start a workflow and supply the initial data. Refer to the Trigger nodes library for a full list of trigger nodes. Core Nodes can be core or app nodes. Whereas most nodes connect to a specific external service, core nodes provide functionality such as logic, scheduling, or generic API calls. Refer to the Core Nodes library for a full list of core nodes. Cluster Nodes are node groups that work together to provide functionality in a workflow. Refer to Cluster nodes for more information. Learn more Refer to Node types for a more detailed explanation of all node types. Finding nodes # You can find all available nodes in the nodes panel on the right side of the Editor UI. There are three ways in which you can open the nodes panel: Click the + icon in the top right corner of the canvas. Click the + icon on the right side of an existing node on the canvas (the node to which you want to add another one). Click the Tab key on your keyboard. Nodes panel In the nodes panel, notice that when adding your first node, you will see the different trigger node categories. After you have added your trigger node, you'll see that the nodes panel changes to show Action, Data transformation, Helper, Flow and File nodes. If you want to find a specific node, use the search input at the top of the nodes panel. Adding nodes # There are two ways to add nodes to your canvas: Select the node you want in the nodes panel. The new node will automatically connect to the selected node on the canvas. Drag and drop the node from the nodes panel to the canvas. Node buttons # If you hover on a node, you'll notice that three icons appear on top: Execute the node (Play icon) Deactivate/Activate the node (Power icon) Delete the node (Trash icon) Additionally, you'll see an elipsis icon, which opens a context menu containing other node options . Moving a workflow To move a workflow around the canvas, select all nodes with your mouse or by selecting Ctrl + A , select and hold on a node, then drag it to any point you want on the canvas. Summary # In this lesson you learned how to navigate the Editor UI, what the icons mean, how to access the left-side and node panels, and how to add nodes to the canvas and interpret their execution results. In the next lesson, you will build a mini-workflow to put into practice what you've learned so far. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/courses/level-two/chapter-1/

Understanding the data structure # In this chapter, you will learn about the data structure of n8n and how to use the Code node to transform data and simulate node outputs. Data structure of n8n # In a basic sense, n8n nodes function as an Extract, Transform, Load (ETL) tool. The nodes allow you to access (extract) data from multiple disparate sources, modify (transform) that data in a particular way, and pass (load) it along to where it needs to be. The data that moves along from node to node in your workflow must be in a format (structure) that can be recognized and interpreted by each node. In n8n, this required structure is an array of objects. About array of objects An array is a list of values. The array can be empty or contain several elements. Each element is stored at a position (index) in the list, starting at 0, and can be referenced by the index number. For example, in the array ["Leonardo", "Michelangelo", "Donatello", "Raphael"]; the element Donatello is stored at index 2. An object stores key-value pairs, instead of values at numbered indexes as in arrays. The order of the pairs isn't important, as the values can be accessed by referencing the key name. For example, the object below contains two properties ( name and color ): 1 2 3 4 { na me : 'Michela n gelo' , color : 'blue' , } An array of objects is an array that contains one or more objects. For example, the array turtles below contains four objects: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 var turtles = [ { name : 'Michelangelo' , color : 'orange' , }, { name : 'Donatello' , color : 'purple' , }, { name : 'Raphael' , color : 'red' , }, { name : 'Leonardo' , color : 'blue' , } ]; You can access the properties of an object using dot notation with the syntax object.property . For example, turtles[1].color gets the color of the second turtle. Data sent from one node to another is sent as an array of JSON objects. The elements in this collection are called items. Items An n8n node performs its action on each item of incoming data. Items in the Customer Datastore node Creating data sets with the Code node # Now that you are familiar with the n8n data structure, you can use it to create your own data sets or simulate node outputs. To do this, use the Code node to write JavaScript code defining your array of objects with the following structure: 1 2 3 4 5 6 7 return [ { json : { apple : 'beets' , } } ]; For example, the array of objects representing the Ninja turtles would look like this in the Code node: Array of objects in the Code node JSON objects Notice that this array of objects contains an extra key: json . n8n expects you to wrap each object in an array in another object, with the key json . Illustration of data structure in n8n It's good practice to pass the data in the right structure used by n8n. But don't worry if you forget to add the json key to an item, n8n (version 0.166.0 and above) adds it automatically. You can also have nested pairs, for example if you want to define a primary and a secondary color. In this case, you need to further wrap the key-value pairs in curly braces {} . n8n data structure video This talk offers a more detailed explanation of data structure in n8n. Exercise # In a Code node, create an array of objects named myContacts that contains the properties name and email , and the email property is further split into personal and work . Show me the solution In the Code node , in the JavaScript Code field you have to write the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 var myContacts = [ { json : { name : 'Alice' , email : { personal : 'alice@home.com' , work : 'alice@wonderland.org' }, } }, { json : { name : 'Bob' , email : { personal : 'bob@mail.com' , work : 'contact@thebuilder.com' }, } }, ]; return myContacts ; When you execute the Code node , the result should look like this: Result of Code node Referencing node data with the Code node # Just like you can use expressions to reference data from other nodes, you can also use some methods and variables in the Code node . Please make sure you read these pages before continuing to the next exercise. Exercise # Let's build on the previous exercise, in which you used the Code node to create a data set of two contacts with their names and emails. Now, connect a second Code node to the first one. In the new node, write code to create a new column named workEmail that references the work email of the first contact. Show me the solution In the Code node , in the JavaScript Code field you have to write the following code: 1 2 3 let items = $input . all (); items [ 0 ]. json . workEmail = items [ 0 ]. json . email [ 'work' ]; return items ; When you execute the Code node , the result should look like this: Code node reference Transforming data # The incoming data from some nodes may have a different data structure than the one used in n8n. In this case, you need to transform the data , so that each item can be processed individually. The two most common operations for data transformation are: Creating multiple items from one item Creating a single item from multiple items There are several ways to transform data for the purposes mentioned above: Use n8n's data transformation nodes . Use these nodes to modify the structure of incoming data that contain lists (arrays) without needing to use JavaScript code in the Code node : Use the Split Out node to separate a single data item containing a list into multiple items. Use the Aggregate node to take separate items, or portions of them, and group them together into individual items. Use the Code node to write JavaScript functions to modify the data structure of incoming data using the Run Once for All Items mode: To create multiple items from a single item, you can use JavaScript code like this. This example assumes that the item has a key named data set to an array of items in the form of: [{ "data": [{<item_1>}, {<item_2>}, ...] }] : 1 2 3 4 5 return $input . first (). json . data . map ( item => { return { json : item } }); To create a single item from multiple items, you can use this JavaScript code: 1 2 3 4 5 6 7 return [ { json : { data_object : $input . all (). map ( item => item . json ) } } ]; These JavaScript examples assume your entire input is what you want to transform. As in the exercise above, you can also execute either operation on a specific field by identifying that in the items list, for example, if our workEmail example had multiple emails in a single field, we could run some code like this: 1 2 3 4 5 6 let items = $input . all (); return items [ 0 ]. json . workEmail . map ( item => { return { json : item } }); Exercise # Use the HTTP Request node to make a GET request to the Quotable API https://api.quotable.io/quotes . (This API requires no authentication). Transform the data in the results field with the Split Out node . Transform the data in the results field with the Code node . Show me the solution To get the quotes from the Quotable API, execute the HTTP Request node with the following parameters: Authentication : None Request Method : GET URL : https://api.quotable.io/quotes To transform the data with the Split Out node , connect this node to the HTTP Request node and set the following parameters: Field To Split Out : results Include : No Other Fields To transform the data with the Code node , connect this node to the HTTP Request node and write the following code in the JavaScript Code field: 1 2 3 4 5 6 let items = $input . all (); return items [ 0 ]. json . results . map ( item => { return { json : item } }); Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/courses/level-one/chapter-1/

Navigating the Editor UI # In this lesson you will learn how to navigate the Editor UI . We will walk through the canvas and show you what each icon means and where to find things you will need while building workflows in n8n. Getting started # Begin by setting up n8n. There are two ways you can do this: n8n Cloud - Hosted solution, no installation needed. Great for all levels of experience. Self-host - Recommended for advanced users with technical knowledge For more details on the different ways to set up n8n, see our platforms documentation . n8n version This course was developed on n8n version 1.30.0. In other versions, some of the user interface might look different, but the core functionality shouldn't be impacted. Once you have n8n running, open the Editor UI in a browser window. It should look like this: Editor UI Editor UI settings # The editor UI is the web interface where you build workflows . You can access all your workflows and credentials , as well as support pages, from the Editor UI. Left-side panel # On the left side of the Editor UI , there is a panel which contains the core functionalities and settings for managing your workflows. Expand and collapse it by selecting the small arrow icon. The panel contains the following sections: Overview : Contains all the workflows and credentials you have access to. During this course, create new workflows here. Templates : A collection of pre-made workflows. Great place to get started with common use cases. Variables : Used to store and access fixed data across your workflows. This feature is available on the Pro and Enterprise Plans. All executions : Contains information about your workflow executions. Settings : Manage users and access settings for a variety of features. Help : Contains resources around n8n product and community. Admin Panel : n8n Cloud only. Access your n8n instance usage, billing, and version settings. Update : n8n Cloud only. Indicator for any recently released product updates. Editor UI left-side menu Top bar # The top bar of the Editor UI contains the following information: Workflow Name : By default, n8n names a new workflow as “My Workflow,” but you can edit the name at any time. +Add Tag : Tags help you organise your workflows by category, use case, or whatever is relevant for you. Tags are optional. Inactive/active toggle : This button activates or deactivates the current workflow. By default, workflows are deactivated. Share : You can share and collaborate with others on workflows on the Starter, Pro, and Enterprise plans. Save : This button saves the current workflow. Editor UI top bar Canvas # The canvas is the gray dotted grid background in the Editor UI. It displays several icons and a node with different functionalities: Buttons to zoom the canvas to fit the screen, zoom in or out of the canvas, and reset the canvas to the original resolution. A button to Execute Workflow . When you click on it, all nodes on the canvas are executed. A button with a + sign inside. This button opens the nodes panel. A button with a note icon inside. This button adds a sticky note to the canvas. (Visible when hovering on the top right + icon) A dotted square with the text "Add first step." This is where you add your first node. Workflow canvas Moving the canvas You can move the workflow canvas around in three ways: Select Ctrl + Left Mouse Button on the canvas and move it around. Select Middle Mouse Button on the canvas and move it around. Place two fingers on your touchpad and slide. Don't worry about workflow execution and activation for now; we'll explain these concepts later on in the course. Nodes # You can think of nodes as building blocks that serve different functions that, when put together, make up a functioning machine: an automated workflow. Node A node is an individual step in your workflow: one that either (a) loads, (b) processes, or (c) sends data. Based on their function, n8n classifies nodes into four types: App or Action Nodes add, remove, and edit data; request and send external data; and trigger events in other systems. Refer to the Action nodes library for a full list of these nodes. Trigger Nodes start a workflow and supply the initial data. Refer to the Trigger nodes library for a full list of trigger nodes. Core Nodes can be core or app nodes. Whereas most nodes connect to a specific external service, core nodes provide functionality such as logic, scheduling, or generic API calls. Refer to the Core Nodes library for a full list of core nodes. Cluster Nodes are node groups that work together to provide functionality in a workflow. Refer to Cluster nodes for more information. Learn more Refer to Node types for a more detailed explanation of all node types. Finding nodes # You can find all available nodes in the nodes panel on the right side of the Editor UI. There are three ways in which you can open the nodes panel: Click the + icon in the top right corner of the canvas. Click the + icon on the right side of an existing node on the canvas (the node to which you want to add another one). Click the Tab key on your keyboard. Nodes panel In the nodes panel, notice that when adding your first node, you will see the different trigger node categories. After you have added your trigger node, you'll see that the nodes panel changes to show Action, Data transformation, Helper, Flow and File nodes. If you want to find a specific node, use the search input at the top of the nodes panel. Adding nodes # There are two ways to add nodes to your canvas: Select the node you want in the nodes panel. The new node will automatically connect to the selected node on the canvas. Drag and drop the node from the nodes panel to the canvas. Node buttons # If you hover on a node, you'll notice that three icons appear on top: Execute the node (Play icon) Deactivate/Activate the node (Power icon) Delete the node (Trash icon) Additionally, you'll see an elipsis icon, which opens a context menu containing other node options . Moving a workflow To move a workflow around the canvas, select all nodes with your mouse or by selecting Ctrl + A , select and hold on a node, then drag it to any point you want on the canvas. Summary # In this lesson you learned how to navigate the Editor UI, what the icons mean, how to access the left-side and node panels, and how to add nodes to the canvas and interpret their execution results. In the next lesson, you will build a mini-workflow to put into practice what you've learned so far. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/courses/level-one/chapter-2/

Building a Mini-workflow # In this lesson, you will build a small workflow that gets 10 articles about automation from Hacker News. The workflow consists of five steps: Add a Manual Trigger node Add the Hacker News node Configure the Hacker News node Execute the node Save the workflow 1. Add a Manual Trigger node # Open the nodes panel (reminder: you can open this by selecting the + icon in the top right corner of the canvas or selecting Tab on your keyboard). Then: Search for the Manual Trigger node. Select it when it appears in the search. This will add the Manual Trigger node to your canvas, which will allow you to run the workflow any time by selecting the Test workflow button. Manual triggers For faster workflow creation, you can skip this step in the future. Adding any other node without a trigger will add the Manual Trigger node to the workflow. In a real-world scenario, you would likely want to set up a schedule or some other trigger to run the workflow. 2. Add the Hacker News node # Select the + icon to the right of the Manual Trigger node to open the nodes panel. Then: Search for the Hacker News node. Select it when it appears in the search. In the Actions section, select Get many items . n8n adds the node to your canvas and the node window opens to display its configuration details. 3. Configure the Hacker News node # When you add a new node to the Editor UI, the node is automatically activated. The node details will open in a window with several options: Parameters : Adjust parameters to refine and control the node's functionality. Settings : Adjust settings to control the node's design and executions. Docs : Open the n8n documentation for this node in a new window. Parameters vs. Settings Parameters are different for each node, depending on its functionality. Settings are the same for all nodes. Parameters # We need to configure several parameters for the Hacker News node to make it work: Resource : All This resource selects all data records (articles). Operation : Get Many This operation fetches all the selected articles. Limit : 10 This parameter sets a limit to how many results the Get Many operation returns. Additional Fields > Add Field > Keyword : automation Additional fields are options that you can add to certain nodes to make your request more specific or filter the results. For this example, we want to get only articles that include the keyword "automation." The configuration of the parameters for the Hacker News node should now look like this: Hacker News node parameters Settings # The Settings section includes several options for node design and executions. In this case, we'll configure only the final two settings, which set the node's appearance in the Editor UI canvas. In the Hacker News node Settings, edit: Notes : Get the 10 latest articles. Node notes It's often helpful to add a short description in the node about what it does. This is especially helpful for complex or shared workflows! Display note in flow? : toggle to true This option will display the Note under the node in the canvas. The configuration of the settings for the Hacker News node should now look like this: Hacker News node settings Renaming a node You can rename the node with a name that's more descriptive for your use case. There are three ways to do this: Select the node you want to rename and at the same time press the F2 key on your keyboard. Double-click on the node to open the node window. Click on the name of the node in the top left corner of the window, rename it as you like, then click Rename to save the node under the new name. Right-click on the node and select the Rename option, or select the node and press F2 on your keyboard. Renaming a node from the keyboard 4. Execute the node # Select the Test step button in the node details window. You should see 10 results in the Output Table view. Results in Table view for the Hacker News node Node executions # Node execution A node execution represents a run of that node to retrieve the specified data. If a node executes successfully, a small green checkmark appears on top of the node in the canvas Successfully executed workflow If the parameters are configured correctly and everything works fine, the requested data displays in the node window in Table , JSON , and Schema format. You can switch between these views by selecting the one you want from the Table|JSON|Schema button at the top of the node window. Table vs JSON views The Table view is the default. It displays the requested data in a table, where the rows are the records and the columns are the available attributes of those records. Here's our Hacker News output in JSON view: Results in JSON view for the Hacker News node The node window displays more information about the node execution: Next to the Output title, notice a small icon (this will be a green checkmark if the node executed successfully). If you hover on it, you'll get two more pieces of information that can provide insights into the performance of each individual node in a workflow: Start Time : When the node execution started Execution Time : How long it took for the node to return the results from the moment it started executing Just below the Output title, you'll notice another piece of information: 10 items . This field displays the number of items (records) that the node request returned. In this example, it's expected to be 10, since this is the limit we set in step 2. But if you don't set a limit, it's useful to see how many records are actually returned. Error in nodes A red warning icon on a node means that the node has errors. This might happen if the node credentials are missing or incorrect or the node parameters aren't configured correctly. Error in nodes 5. Save the workflow # Once you're finished editing the node, select Back to canvas to return to the main canvas. By default, your workflow is automatically saved as "My workflow." For this lesson, rename the workflow to be "Hacker News workflow." Reminder You can rename a workflow by clicking on the workflow's name at the top of the Editor UI. Once you've renamed the workflow, be sure to save it. There are two ways in which you can save a workflow: From the Canvas in Editor UI, click Ctrl + S or Cmd + S on your keyboard. Select the Save button in the top right corner of the Editor UI. You may need to leave the node editor first by clicking outside the dialog. Summary # Congratulations, you just built your first workflow! In this lesson, you learned how to use actions in app nodes, configure their parameters and settings, and save and execute your workflow. In the next lesson, you'll meet your new client, Nathan, who needs to automate his sales reporting work. You will build a more complex workflow for his use case, helping him become more productive at work. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/courses/level-one/chapter-3/

Automating a (Real-world) Use Case # Meet Nathan 🙋. Nathan works as an Analytics Manager at ABCorp. His job is to support the ABCorp team with reporting and analytics. Being a true jack of all trades, he also handles several miscellaneous initiatives. Some things that Nathan does are repetitive and mind-numbing. He wants to automate some of these tasks so that he doesn't burn out. As an Automation Expert , you are meeting with Nathan today to help him understand how he can offload some of his responsibilities to n8n. Understanding the scenario # You 👩‍🔧: Nice to meet you, Nathan. Glad to be doing this! What's a repetitive task that's error-prone and that you'd like to get off your plate first? Nathan 🙋: Thanks for coming in! The most annoying one's gotta be the weekly sales reporting. I have to collect sales data from our legacy data warehouse, which manages data from the main business processes of an organization, such as sales or production. Now, each sales order can have the status Processing or Booked. I have to calculate the sum of all the Booked orders and announce them in the company Discord every Monday. Then I have to create a spreadsheet of all the Processing sales so that the Sales Managers can review them and check if they need to follow up with customers. This manual work is tough and requires high attention to detail to make sure that all the numbers are right. Inevitably, I lose my focus and mistype a number or I don't get to do it on time. I've been criticized once by my manager for miscalculating the data. You 👩‍🔧: Oh no! Doesn't the data warehouse have a way to export the data? Nathan 🙋: The data warehouse was written in-house ages ago. It doesn't have a CSV export but they recently added a couple of API endpoints that expose this data, if that helps. You 👩‍🔧: Perfect! That's a good start. If you have a generic API, we can add some custom code and a couple of services to make an automated workflow. This gig has n8n written all over it. Let's get started! Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/courses/level-two/chapter-5/chapter-5.0/

Automating a business workflow # Remember our friend Nathan ? Nathan 🙋: Hello, it's me again. My manager was so impressed with my first workflow automation solution that she entrusted me with more responsibility. You 👩‍🔧: More work and responsibility. Congratulations, I guess. What do you need to do now? Nathan 🙋: I got access to all our sales data and I'm now responsible for creating two reports: one for regional sales and one for orders prices. They're based on data from different sources and come in different formats. You 👩‍🔧: Sounds like a lot of manual work, but the kind that can be automated. Let's do it! Workflow design # Now that we know what Nathan wants to automate, let's list the steps he needs to take to achieve this: Get and combine data from all necessary sources. Sort the data and format the dates. Write binary files. Send notifications using email and Discord. n8n provides core nodes for all these steps. This use case is somewhat complex. We should build it from three separate workflows: A workflow that merges the company data with external information. A workflow that generates the reports. A workflow that monitors errors in the second workflow. Workflow prerequisites # To build the workflows, you will need the following: An Airtable account and credentials . A Google account and credentials to access Gmail. A Discord account and webhook URL (you receive this using email when you sign up for this course). Next, you will build these three workflows with step-by-step instructions. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/courses/level-one/chapter-5/chapter-5.1/

1. Getting data from the data warehouse # In this part of the workflow you will learn how to get data by making HTTP requests using the HTTP Request node. First, let's set up the scene for building Nathan's workflow. Create new workflow # Open your Editor UI and create a new workflow with one of the two possible commands: Select Ctrl + Alt + N or Cmd + Option + N on your keyboard. Open the left menu, navigate to Workflows , and select Add workflow . Name this new workflow "Nathan's workflow." The first thing you need to do is get data from ABCorp's old data warehouse. In the previous chapter, you used an action node connected to a specific app (Hacker News). But not all apps or services have dedicated nodes, like the legacy data warehouse from Nathan's company. Though we can't directly export the data, Nathan told us that the data warehouse has a couple of API endpoints. That's all we need to access the data using the HTTP Request node in n8n. No node for that service? The HTTP Request node is one of the most versatile nodes, allowing you to make HTTP requests to query data from apps and services. You can use it to access data from apps or services that don't have a dedicated node in n8n. Add an HTTP Request node # Now, in your Editor UI, add an HTTP Request node like you learned in the lesson Adding nodes . The node window will open, where you need to configure some parameters. HTTP Request node This node will use credentials. Credentials Credentials are unique pieces of information that identify a user or a service and enable them to access apps or services (in our case, represented as n8n nodes). A common form of credentials is a username and a password, but they can take other forms depending on the service. In this case, you'll need the credentials for the ABCorp data warehouse API included in the email from n8n you received when you signed up for this course. If you haven't signed up yet, sign up here . In the Parameters of the HTTP Request node, make the following adjustments: Method : This should default to GET. Make sure it's set to GET. URL : Add the Dataset URL you received in the email when you signed up for this course. Send Headers : Toggle this control to true. In Specify Headers , ensure Using Fields Below is selected. Header Parameters > Name : Enter unique_id . Header Parameters > Value : The Unique ID you received in the email when you signed up for this course. Authentication : Select Generic Credential Type . This option requires credentials to allow you to access the data. Generic Auth Type : Select Header Auth . (This field will appear after you select the Generic Credential Type for the Authentication.) Credential for Header Auth : To add your credentials, select Create New Credential . This will open the Credentials window. In the Credentials window, set Name to be the Header Auth name you received in the email when you signed up for this course. In the Credentials window, set Value to be the Header Auth value you received in the email when you signed up for this course. Click on the Save button in the Credentials window to save your credentials. Your Credentials Connection window should look like this: HTTP Request node credentials Credentials naming New credentials are named " node name account" by default. You can rename the credentials by clicking on the name, similarly to renaming nodes. It's good practice to give them names that identify the app/service, type, and purpose of the credential. A naming convention makes it easier to keep track of and identify your credentials. Get the data # Select the Test step button in the HTTP Request node window. The result of the HTTP request should look like this: HTTP Request node output This view should be familiar to you from the Building a mini-workflow . This is the data from ABCorp's data warehouse that Nathan needs to work with. This data set includes sales information of 30 customers with five columns: orderID : The unique id of each order. customerID : The unique id of each customer. employeeName : The name of Nathan's colleague who is responsible for the customer. orderPrice : The total price of the customer's order. orderStatus : Whether the customer's order status is booked (booked) or still in processing (processing). What's next? # Nathan 🙋 : This is great! You already automated an important part of my job with only one node. Now instead of manually accessing the data every time I need it, I can use the HTTP Request Node to automatically get the information. You 👩‍🔧 : Exactly! In the next step, I'll help you one step further and insert the received data into Airtable, as you need it. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows//advanced-ai/tutorials/chat_01.json

{ "name": "AI tutorial", "nodes": [ { "parameters": { "options": {} }, "type": "@n8n/n8n-nodes-langchain.chatTrigger", "typeVersion": 1.1, "position": [ -200, -40 ], "id": "a2d42e1f-36df-4a6a-a3b4-99a162074d11", "name": "When chat message received", "webhookId": "97c1a41f-8ef0-4d63-a924-92eb634384d3" } ], "pinData": {}, "connections": {}, "active": false, "settings": { "executionOrder": "v1" }, "versionId": "b1641385-c6b0-48a8-8e26-20d1f6bd7fda", "meta": { "instanceId": "cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7" }, "id": "l05TkWXXYbOiuL4o", "tags": [] }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows//advanced-ai/tutorials/chat_02.json

{ "name": "AI tutorial", "nodes": [ { "parameters": { "options": {} }, "type": "@n8n/n8n-nodes-langchain.chatTrigger", "typeVersion": 1.1, "position": [ -300, -40 ], "id": "a2d42e1f-36df-4a6a-a3b4-99a162074d11", "name": "When chat message received", "webhookId": "97c1a41f-8ef0-4d63-a924-92eb634384d3" }, { "parameters": { "options": {} }, "type": "@n8n/n8n-nodes-langchain.agent", "typeVersion": 1.7, "position": [ -80, -40 ], "id": "0f61a10f-668f-42f7-b835-cf3efb60082a", "name": "AI Agent" } ], "pinData": {}, "connections": { "When chat message received": { "main": [ [ { "node": "AI Agent", "type": "main", "index": 0 } ] ] } }, "active": false, "settings": { "executionOrder": "v1" }, "versionId": "b1641385-c6b0-48a8-8e26-20d1f6bd7fda", "meta": { "instanceId": "cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7" }, "id": "l05TkWXXYbOiuL4o", "tags": [] }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows//advanced-ai/tutorials/chat_complete.json

{ "name": "AI tutorial", "nodes": [ { "parameters": { "options": {} }, "type": "@n8n/n8n-nodes-langchain.chatTrigger", "typeVersion": 1.1, "position": [ -300, -40 ], "id": "a2d42e1f-36df-4a6a-a3b4-99a162074d11", "name": "When chat message received", "webhookId": "97c1a41f-8ef0-4d63-a924-92eb634384d3" }, { "parameters": { "options": {} }, "type": "@n8n/n8n-nodes-langchain.agent", "typeVersion": 1.7, "position": [ -80, -40 ], "id": "0f61a10f-668f-42f7-b835-cf3efb60082a", "name": "AI Agent" }, { "parameters": { "model": { "__rl": true, "mode": "list", "value": "gpt-4o-mini" }, "options": {} }, "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi", "typeVersion": 1.2, "position": [ -100, 160 ], "id": "b8129c6d-f201-4378-8f66-ce9a6cfd5f3b", "name": "OpenAI Chat Model", "credentials": { "openAiApi": { "id": "jiPPcYV9I70iKapN", "name": "OpenAi account 37" } } }, { "parameters": {}, "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow", "typeVersion": 1.3, "position": [ 20, 180 ], "id": "afbab05c-1e87-4f7a-9d66-c86f9db1ec64", "name": "Window Buffer Memory" } ], "pinData": {}, "connections": { "When chat message received": { "main": [ [ { "node": "AI Agent", "type": "main", "index": 0 } ] ] }, "OpenAI Chat Model": { "ai_languageModel": [ [ { "node": "AI Agent", "type": "ai_languageModel", "index": 0 } ] ] }, "Window Buffer Memory": { "ai_memory": [ [ { "node": "AI Agent", "type": "ai_memory", "index": 0 } ] ] } }, "active": false, "settings": { "executionOrder": "v1" }, "versionId": "b1641385-c6b0-48a8-8e26-20d1f6bd7fda", "meta": { "templateCredsSetupCompleted": true, "instanceId": "cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7" }, "id": "l05TkWXXYbOiuL4o", "tags": [] }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows/advanced-ai/examples/chat_with_google_sheets_docs_version.json

{ "name": "Chat with Google Sheets (docs version)", "nodes": [ { "parameters": {}, "id": "e96a5e41-f0d6-49c1-977e-ff724a857212", "name": "Execute Workflow Trigger", "type": "n8n-nodes-base.executeWorkflowTrigger", "position": [ 540, 1240 ], "typeVersion": 1 }, { "parameters": { "content": "### Sub-workflow: Custom tool\nThe agent above can call this workflow. It returns three different types of data from the Google Sheet, which can be used together for more complex queries without returning the whole sheet (which might be too big for GPT to handle).", "height": 612.0936015224503, "width": 1449.2963504228514, "color": 7 }, "id": "67facef0-e9c6-4280-8232-78f654b420d5", "name": "Sticky Note1", "type": "n8n-nodes-base.stickyNote", "position": [ 461.9740563285368, 970.616715060075 ], "typeVersion": 1 }, { "parameters": { "content": "### Main workflow: AI agent using custom tool", "height": 486.5625, "width": 927.5, "color": 7 }, "id": "bc448102-954b-451e-9bf7-bcadbc53bdbc", "name": "Sticky Note2", "type": "n8n-nodes-base.stickyNote", "position": [ 460, 460 ], "typeVersion": 1 }, { "parameters": { "content": "## Try it out\n\nSelect **Chat** at the bottom and enter:\n\n_Which is our biggest customer?_", "height": 183.85014518022527, "width": 185.9375, "color": 4 }, "id": "afb2da2f-8da2-4ee8-bff9-55a99eeecc5c", "name": "Sticky Note3", "type": "n8n-nodes-base.stickyNote", "position": [ 300, 540 ], "typeVersion": 1 }, { "parameters": {}, "id": "5d56d128-9a83-45ee-a34c-bc1190d59322", "name": "Chat Trigger", "type": "@n8n/n8n-nodes-langchain.chatTrigger", "position": [ 600, 560 ], "webhookId": "e3f23177-c7c1-417b-a513-1c1090dda0a2", "typeVersion": 1 }, { "parameters": { "authentication": "serviceAccount", "documentId": { "__rl": true, "mode": "url", "value": "={{ $json.sheetUrl }}" }, "sheetName": { "__rl": true, "mode": "url", "value": "={{ $json.sheetUrl }}" }, "options": {} }, "id": "3c0e4b48-a27b-472f-948e-9aa001c49149", "name": "Get Google sheet contents", "type": "n8n-nodes-base.googleSheets", "position": [ 980, 1240 ], "typeVersion": 4.2 }, { "parameters": { "fields": { "values": [ { "name": "sheetUrl" } ] }, "options": {} }, "id": "67f9c172-e70f-4a0f-afd3-513cfeae09db", "name": "Set Google Sheet URL", "type": "n8n-nodes-base.set", "position": [ 760, 1240 ], "typeVersion": 3.2 }, { "parameters": { "fields": { "values": [ { "name": "response", "stringValue": "={{ Object.keys($json) }}" } ] }, "include": "none", "options": {} }, "id": "d49223eb-2927-4ddd-bd2c-cd439f927341", "name": "Get column names", "type": "n8n-nodes-base.set", "position": [ 1440, 1060 ], "executeOnce": true, "typeVersion": 3.2 }, { "parameters": { "jsCode": "return {\n 'response': JSON.stringify($input.all().map(x => x.json))\n}" }, "id": "37ceba7a-1f0b-4de7-ae4a-d29a18dabaf6", "name": "Prepare output", "type": "n8n-nodes-base.code", "position": [ 1720, 1240 ], "typeVersion": 2 }, { "parameters": { "name": "list_columns_tool", "description": "=### List all column names in customer data\nThis is useful to find out what data is available for each customer. Returns a JSON array containing all the column names.", "workflowId": "={{ $workflow.id }}", "fields": { "values": [ { "name": "operation", "stringValue": "column_names" } ] } }, "id": "94516eb1-89fc-4d3f-8000-d0fa43cd71cd", "name": "List columns tool", "type": "@n8n/n8n-nodes-langchain.toolWorkflow", "position": [ 940, 780 ], "typeVersion": 1 }, { "parameters": { "name": "get_customer_tool", "description": "=### Get all columns for a given customer\nTo use this mode, pass the row number of the customer. Returns a JSON object with all the column names and their values.", "workflowId": "={{ $workflow.id }}", "fields": { "values": [ { "name": "operation", "stringValue": "row" } ] } }, "id": "006745a1-3df7-4de9-9483-c6e133272c55", "name": "Get customer tool", "type": "@n8n/n8n-nodes-langchain.toolWorkflow", "position": [ 1220, 780 ], "typeVersion": 1 }, { "parameters": {}, "id": "c3d20569-1374-4f8d-8779-23b98952d124", "name": "Window Buffer Memory", "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow", "position": [ 800, 780 ], "typeVersion": 1.1 }, { "parameters": { "name": "column_values_tool", "description": "=### Get the specified column value for all customers\nThis is useful if you want to find out which customers have a certain value for a given column. Returns an array of JSON objects, one per customer. Each JSON object includes the column being requested, plus the row_number column. (The row_number column can be used to request the full customer data in a second step.). To use this mode, pass the name of the column to fetch.\n\nYou may want to call the 'list columns' tool first to find out which columns you could be fetching.", "workflowId": "={{ $workflow.id }}", "fields": { "values": [ { "name": "operation", "stringValue": "column_values" } ] } }, "id": "3a370ae9-eaf8-4e84-948b-848c461ac9eb", "name": "Get column values tool", "type": "@n8n/n8n-nodes-langchain.toolWorkflow", "position": [ 1080, 780 ], "typeVersion": 1 }, { "parameters": { "text": "={{ $json.chatInput }}", "options": { "maxIterations": 10 } }, "id": "8f2a4854-2177-4ac8-9501-fa36cf2a3d73", "name": "AI Agent", "type": "@n8n/n8n-nodes-langchain.agent", "position": [ 820, 560 ], "typeVersion": 1.1 }, { "parameters": { "content": "**These tools all call the sub-workflow below**", "height": 179.21380662202682, "width": 432.3271051132649, "color": 5 }, "id": "2576563b-a104-4d99-b3c8-b53bff4c740c", "name": "Sticky Note", "type": "n8n-nodes-base.stickyNote", "position": [ 900, 740.8693557231958 ], "typeVersion": 1 }, { "parameters": { "content": "**Change the URL of the Google Sheet**", "height": 226.64416053838073, "width": 179.99762227826224, "color": 2 }, "id": "5b623d9e-e188-403d-a702-9ece6172a487", "name": "Sticky Note4", "type": "n8n-nodes-base.stickyNote", "position": [ 723, 1172 ], "typeVersion": 1 }, { "parameters": { "model": "gpt-4", "options": { "temperature": 0 } }, "id": "2b8c8a67-a4df-4f5c-8c13-3cb2d25d2c5f", "name": "GPT4 Model", "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi", "position": [ 660, 780 ], "typeVersion": 1 }, { "parameters": { "content": "**Set your credentials**", "height": 171, "width": 150, "color": 2 }, "id": "f39d0c9b-4055-4331-83c8-3dbffb43478e", "name": "Sticky Note5", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 620, 720 ] }, { "parameters": { "content": "**Set your credentials**", "height": 237, "width": 176, "color": 2 }, "id": "a8e09ef8-4dc6-4918-9194-047de402a8fa", "name": "Sticky Note6", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 940, 1172 ] }, { "parameters": { "content": "## Next steps\n\nLearn more about [Advanced AI in n8n](https://docs.n8n.io/advanced-ai/)", "height": 126.0084096222716, "width": 291.1204551358572 }, "id": "a391dfb1-f408-4498-99cd-d35a258d6c9a", "name": "Sticky Note7", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 1740, 1540 ] }, { "parameters": { "rules": { "values": [ { "conditions": { "options": { "caseSensitive": true, "leftValue": "", "typeValidation": "strict" }, "conditions": [ { "leftValue": "={{ $('Execute Workflow Trigger').item.json.operation }}", "rightValue": "column_names", "operator": { "type": "string", "operation": "equals" } } ], "combinator": "and" }, "renameOutput": true, "outputKey": "col names" }, { "conditions": { "options": { "caseSensitive": true, "leftValue": "", "typeValidation": "strict" }, "conditions": [ { "id": "9fe58592-72e2-4379-9bdb-10da19c8218b", "leftValue": "={{ $('Execute Workflow Trigger').item.json.operation }}", "rightValue": "column_values", "operator": { "type": "string", "operation": "equals", "name": "filter.operator.equals" } } ], "combinator": "and" }, "renameOutput": true, "outputKey": "col values" }, { "conditions": { "options": { "caseSensitive": true, "leftValue": "", "typeValidation": "strict" }, "conditions": [ { "id": "c1836f93-7874-43a4-98ff-cc487b276600", "leftValue": "={{ $('Execute Workflow Trigger').item.json.operation }}", "rightValue": "row", "operator": { "type": "string", "operation": "equals", "name": "filter.operator.equals" } } ], "combinator": "and" }, "renameOutput": true, "outputKey": "rows" } ] }, "options": {} }, "id": "907deea9-26cc-427e-93fc-52ce6b67e5e1", "name": "Check operations", "type": "n8n-nodes-base.switch", "typeVersion": 3, "position": [ 1220, 1240 ] }, { "parameters": { "fields": { "values": [ { "name": "={{ $('Execute Workflow Trigger').item.json.query }}", "stringValue": "={{ $json[$('Execute Workflow Trigger').item.json.query] }}" }, { "name": "row_number", "stringValue": "={{ $json.row_number }}" } ] }, "include": "none", "options": {} }, "id": "f2ebcae6-3cfb-4862-a927-dc66bd24f197", "name": "Prepare column data", "type": "n8n-nodes-base.set", "position": [ 1440, 1240 ], "typeVersion": 3.2 }, { "parameters": { "conditions": { "options": { "leftValue": "", "caseSensitive": true, "typeValidation": "loose" }, "combinator": "and", "conditions": [ { "id": "bf712098-97e4-42cb-8e08-2ee32d19d3e7", "operator": { "type": "number", "operation": "equals" }, "leftValue": "={{ $json.row_number }}", "rightValue": "={{ $('Execute Workflow Trigger').item.json.query }}" } ] }, "options": { "looseTypeValidation": true } }, "id": "f40acb04-ef06-4670-b8b1-86b04f066af8", "name": "Filter out other rows", "type": "n8n-nodes-base.filter", "position": [ 1440, 1420 ], "typeVersion": 2 } ], "pinData": {}, "connections": { "GPT4 Model": { "ai_languageModel": [ [ { "node": "AI Agent", "type": "ai_languageModel", "index": 0 } ] ] }, "Chat Trigger": { "main": [ [ { "node": "AI Agent", "type": "main", "index": 0 } ] ] }, "Get column names": { "main": [ [ { "node": "Prepare output", "type": "main", "index": 0 } ] ] }, "Get customer tool": { "ai_tool": [ [ { "node": "AI Agent", "type": "ai_tool", "index": 0 } ] ] }, "List columns tool": { "ai_tool": [ [ { "node": "AI Agent", "type": "ai_tool", "index": 0 } ] ] }, "Set Google Sheet URL": { "main": [ [ { "node": "Get Google sheet contents", "type": "main", "index": 0 } ] ] }, "Window Buffer Memory": { "ai_memory": [ [ { "node": "AI Agent", "type": "ai_memory", "index": 0 } ] ] }, "Get column values tool": { "ai_tool": [ [ { "node": "AI Agent", "type": "ai_tool", "index": 0 } ] ] }, "Execute Workflow Trigger": { "main": [ [ { "node": "Set Google Sheet URL", "type": "main", "index": 0 } ] ] }, "Get Google sheet contents": { "main": [ [ { "node": "Check operations", "type": "main", "index": 0 } ] ] }, "Check operations": { "main": [ [ { "node": "Get column names", "type": "main", "index": 0 } ], [ { "node": "Prepare column data", "type": "main", "index": 0 } ], [ { "node": "Filter out other rows", "type": "main", "index": 0 } ] ] }, "Prepare column data": { "main": [ [ { "node": "Prepare output", "type": "main", "index": 0 } ] ] }, "Filter out other rows": { "main": [ [ { "node": "Prepare output", "type": "main", "index": 0 } ] ] } } }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/cookbook/expressions/check-incoming-data/

Check incoming data # At times, you may want to check the incoming data. If the incoming data doesn't match a condition, you may want to return a different value. For example, you want to check if a variable from the previous node is empty and return a string if it's empty. Use the following code snippet to return not found if the variable is empty. 1 {{ $json [ "variable_name" ] ? $json [ "variable_name" ] : "not found" }} The above expression uses the ternary operator. You can learn more about the ternary operator here . As an alternative, you can use the nullish coalescing operator (??) or the logical or operator (||) : 1 2 {{ $x ?? "default value" }} {{ $x || "default value" }} In either of the above two cases, the value of $x will be used if it's set to a non-null, non-false value. The string default value is the fallback value. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/choose-n8n/#free-versions

Choose your n8n # This section contains information on n8n's range of platforms, pricing plans, and licenses. Platforms # There are different ways to set up n8n depending on how you intend to use it: n8n Cloud : hosted solution, no need to install anything. Self-host : recommended method for production or customized use cases. npm Docker Server setup guides for popular platforms Embed : n8n Embed allows you to white label n8n and build it into your own product. Contact n8n on the Embed website for pricing and support. Self-hosting knowledge prerequisites Self-hosting n8n requires technical knowledge, including: Setting up and configuring servers and containers Managing application resources and scaling Securing servers and applications Configuring n8n n8n recommends self-hosting for expert users. Mistakes can lead to data loss, security issues, and downtime. If you aren't experienced at managing servers, n8n recommends n8n Cloud . Licenses # n8n's Sustainable Use License and n8n Enterprise License are based on the fair-code model. For a detailed explanation of the license, refer to Sustainable Use License . Free versions # n8n offers the following free options: A free trial of Cloud A free self-hosted community edition for self-hosted users Paid versions # n8n has two paid versions: n8n Cloud: choose from a range of paid plans to suit your usage and feature needs. Self-hosted: there are both free and paid versions of self-hosted. For details of the Cloud plans and contact details for Enterprise Self-hosted, refer to Pricing on the n8n website. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/choose-n8n/#licenses

Choose your n8n # This section contains information on n8n's range of platforms, pricing plans, and licenses. Platforms # There are different ways to set up n8n depending on how you intend to use it: n8n Cloud : hosted solution, no need to install anything. Self-host : recommended method for production or customized use cases. npm Docker Server setup guides for popular platforms Embed : n8n Embed allows you to white label n8n and build it into your own product. Contact n8n on the Embed website for pricing and support. Self-hosting knowledge prerequisites Self-hosting n8n requires technical knowledge, including: Setting up and configuring servers and containers Managing application resources and scaling Securing servers and applications Configuring n8n n8n recommends self-hosting for expert users. Mistakes can lead to data loss, security issues, and downtime. If you aren't experienced at managing servers, n8n recommends n8n Cloud . Licenses # n8n's Sustainable Use License and n8n Enterprise License are based on the fair-code model. For a detailed explanation of the license, refer to Sustainable Use License . Free versions # n8n offers the following free options: A free trial of Cloud A free self-hosted community edition for self-hosted users Paid versions # n8n has two paid versions: n8n Cloud: choose from a range of paid plans to suit your usage and feature needs. Self-hosted: there are both free and paid versions of self-hosted. For details of the Cloud plans and contact details for Enterprise Self-hosted, refer to Pricing on the n8n website. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/choose-n8n/#choose-your-n8n

Choose your n8n # This section contains information on n8n's range of platforms, pricing plans, and licenses. Platforms # There are different ways to set up n8n depending on how you intend to use it: n8n Cloud : hosted solution, no need to install anything. Self-host : recommended method for production or customized use cases. npm Docker Server setup guides for popular platforms Embed : n8n Embed allows you to white label n8n and build it into your own product. Contact n8n on the Embed website for pricing and support. Self-hosting knowledge prerequisites Self-hosting n8n requires technical knowledge, including: Setting up and configuring servers and containers Managing application resources and scaling Securing servers and applications Configuring n8n n8n recommends self-hosting for expert users. Mistakes can lead to data loss, security issues, and downtime. If you aren't experienced at managing servers, n8n recommends n8n Cloud . Licenses # n8n's Sustainable Use License and n8n Enterprise License are based on the fair-code model. For a detailed explanation of the license, refer to Sustainable Use License . Free versions # n8n offers the following free options: A free trial of Cloud A free self-hosted community edition for self-hosted users Paid versions # n8n has two paid versions: n8n Cloud: choose from a range of paid plans to suit your usage and feature needs. Self-hosted: there are both free and paid versions of self-hosted. For details of the Cloud plans and contact details for Enterprise Self-hosted, refer to Pricing on the n8n website. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/choose-n8n/#paid-versions

Choose your n8n # This section contains information on n8n's range of platforms, pricing plans, and licenses. Platforms # There are different ways to set up n8n depending on how you intend to use it: n8n Cloud : hosted solution, no need to install anything. Self-host : recommended method for production or customized use cases. npm Docker Server setup guides for popular platforms Embed : n8n Embed allows you to white label n8n and build it into your own product. Contact n8n on the Embed website for pricing and support. Self-hosting knowledge prerequisites Self-hosting n8n requires technical knowledge, including: Setting up and configuring servers and containers Managing application resources and scaling Securing servers and applications Configuring n8n n8n recommends self-hosting for expert users. Mistakes can lead to data loss, security issues, and downtime. If you aren't experienced at managing servers, n8n recommends n8n Cloud . Licenses # n8n's Sustainable Use License and n8n Enterprise License are based on the fair-code model. For a detailed explanation of the license, refer to Sustainable Use License . Free versions # n8n offers the following free options: A free trial of Cloud A free self-hosted community edition for self-hosted users Paid versions # n8n has two paid versions: n8n Cloud: choose from a range of paid plans to suit your usage and feature needs. Self-hosted: there are both free and paid versions of self-hosted. For details of the Cloud plans and contact details for Enterprise Self-hosted, refer to Pricing on the n8n website. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/choose-n8n/#platforms

Choose your n8n # This section contains information on n8n's range of platforms, pricing plans, and licenses. Platforms # There are different ways to set up n8n depending on how you intend to use it: n8n Cloud : hosted solution, no need to install anything. Self-host : recommended method for production or customized use cases. npm Docker Server setup guides for popular platforms Embed : n8n Embed allows you to white label n8n and build it into your own product. Contact n8n on the Embed website for pricing and support. Self-hosting knowledge prerequisites Self-hosting n8n requires technical knowledge, including: Setting up and configuring servers and containers Managing application resources and scaling Securing servers and applications Configuring n8n n8n recommends self-hosting for expert users. Mistakes can lead to data loss, security issues, and downtime. If you aren't experienced at managing servers, n8n recommends n8n Cloud . Licenses # n8n's Sustainable Use License and n8n Enterprise License are based on the fair-code model. For a detailed explanation of the license, refer to Sustainable Use License . Free versions # n8n offers the following free options: A free trial of Cloud A free self-hosted community edition for self-hosted users Paid versions # n8n has two paid versions: n8n Cloud: choose from a range of paid plans to suit your usage and feature needs. Self-hosted: there are both free and paid versions of self-hosted. For details of the Cloud plans and contact details for Enterprise Self-hosted, refer to Pricing on the n8n website. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/plan/choose-node-method/

Choose your node building approach # n8n has two node-building styles, declarative and programmatic. You should use the declarative style for most nodes. This style: Uses a JSON-based syntax, making it simpler to write, with less risk of introducing bugs. Is more future-proof. Supports integration with REST APIs. The programmatic style is more verbose. You must use the programmatic style for: Trigger nodes Any node that isn't REST-based. This includes nodes that need to call a GraphQL API and nodes that use external dependencies. Any node that needs to transform incoming data. Full versioning. Refer to Node versioning for more information on types of versioning. Data handling differences # The main difference between the declarative and programmatic styles is how they handle incoming data and build API requests. The programmatic style requires an execute() method, which reads incoming data and parameters, then builds a request. The declarative style handles this using the routing key in the operations object. Refer to Node base file for more information on node parameters and the execute() method. Syntax differences # To understand the difference between the declarative and programmatic styles, compare the two code snippets below. This example creates a simplified version of the SendGrid integration, called "FriendGrid." The following code snippets aren't complete: they emphasize the differences in the node building styles. In programmatic style: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 import { IExecuteFunctions , INodeExecutionData , INodeType , INodeTypeDescription , IRequestOptions , } from 'n8n-workflow' ; // Create the FriendGrid class export class FriendGrid implements INodeType { description : INodeTypeDescription = { displayName : 'FriendGrid' , name : 'friendGrid' , . . . properties : [ { displayName : 'Resource' , . . . }, { displayName : 'Operation' , name : 'operation' , type : 'options' , displayOptions : { show : { resource : [ 'contact' , ], }, }, options : [ { name : 'Create' , value : 'create' , description : 'Create a contact' , }, ], default : 'create' , description : 'The operation to perform.' , }, { displayName : 'Email' , name : 'email' , . . . }, { displayName : 'Additional Fields' , // Sets up optional fields }, ], }; async execute ( this : IExecuteFunctions ) : Promise < INodeExecutionData [][] > { let responseData ; const resource = this . getNodeParameter ( 'resource' , 0 ) as string ; const operation = this . getNodeParameter ( 'operation' , 0 ) as string ; //Get credentials the user provided for this node const credentials = await this . getCredentials ( 'friendGridApi' ) as IDataObject ; if ( resource === 'contact' ) { if ( operation === 'create' ) { // Get email input const email = this . getNodeParameter ( 'email' , 0 ) as string ; // Get additional fields input const additionalFields = this . getNodeParameter ( 'additionalFields' , 0 ) as IDataObject ; const data : IDataObject = { email , }; Object . assign ( data , additionalFields ); // Make HTTP request as defined in https://sendgrid.com/docs/api-reference/ const options : IRequestOptions = { headers : { 'Accept' : 'application/json' , 'Authorization' : `Bearer ${ credentials . apiKey } ` , }, method : 'PUT' , body : { contacts : [ data , ], }, url : `https://api.sendgrid.com/v3/marketing/contacts` , json : true , }; responseData = await this . helpers . httpRequest ( options ); } } // Map data to n8n data return [ this . helpers . returnJsonArray ( responseData )]; } } In declarative style: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 import { INodeType , INodeTypeDescription } from 'n8n-workflow' ; // Create the FriendGrid class export class FriendGrid implements INodeType { description : INodeTypeDescription = { displayName : 'FriendGrid' , name : 'friendGrid' , . . . // Set up the basic request configuration requestDefaults : { baseURL : 'https://api.sendgrid.com/v3/marketing' }, properties : [ { displayName : 'Resource' , . . . }, { displayName : 'Operation' , name : 'operation' , type : 'options' , displayOptions : { show : { resource : [ 'contact' , ], }, }, options : [ { name : 'Create' , value : 'create' , description : 'Create a contact' , // Add the routing object routing : { request : { method : 'POST' , url : '=/contacts' , send : { type : 'body' , properties : { email : {{ $parameter [ "email" ]}} } } } }, // Handle the response to contact creation output : { postReceive : [ { type : 'set' , properties : { value : '={{ { "success": $response } }}' } } ] } }, ], default : 'create' , description : 'The operation to perform.' , }, { displayName : 'Email' , . . . }, { displayName : 'Additional Fields' , // Sets up optional fields }, ], } // No execute method needed } Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/#running-cli-commands

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/#import-workflows-and-credentials

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/#workflows

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/#info

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/#credentials

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/#cli-commands-for-n8n

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/#disable-ldap

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/#user-management

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/#change-the-active-status-of-a-workflow

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/#disable-mfa-for-a-user

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/#workflows_1

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/#export-workflows-and-credentials

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/#credentials_1

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/#security-audit

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/#clear

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/#license

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/cli-commands/#start-a-workflow

CLI commands for n8n # n8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials. Running CLI commands # You can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands: npm: the n8n command is directly available. The documentation uses this in the examples below. Docker: the n8n command is available within your Docker container: 1 docker exec -u node -it <n8n-container-name> <n8n-cli-command> Start a workflow # You can start workflows directly using the CLI. Execute a saved workflow by its ID: 1 n8n execute --id <ID> Change the active status of a workflow # You can change the active status of a workflow using the CLI. Restart required These commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n. Set the active status of a workflow by its ID to false: 1 n8n update:workflow --id = <ID> --active = false Set the active status of a workflow by its ID to true: 1 n8n update:workflow --id = <ID> --active = true Set the active status to false for all the workflows: 1 n8n update:workflow --all --active = false Set the active status to true for all the workflows: 1 n8n update:workflow --all --active = true Export workflows and credentials # You can export your workflows and credentials from n8n using the CLI. Command flags: Flag Description --help Help prompt. --all Exports all workflows/credentials. --backup Sets --all --pretty --separate for backups. You can optionally set --output. --id The ID of the workflow to export. --output Outputs file name or directory if using separate files. --pretty Formats the output in an easier to read fashion. --separate Exports one file per workflow (useful for versioning). Must set a directory using --output. --decrypted Exports the credentials in a plain text format. Workflows # Export all your workflows to the standard output (terminal): 1 n8n export:workflow --all Export a workflow by its ID and specify the output file name: 1 n8n export:workflow --id = <ID> --output = file.json Export all workflows to a specific directory in a single file: 1 n8n export:workflow --all --output = backups/latest/file.json Export all the workflows to a specific directory using the --backup flag (details above): 1 n8n export:workflow --backup --output = backups/latest/ Credentials # Export all your credentials to the standard output (terminal): 1 n8n export:credentials --all Export credentials by their ID and specify the output file name: 1 n8n export:credentials --id = <ID> --output = file.json Export all credentials to a specific directory in a single file: 1 n8n export:credentials --all --output = backups/latest/file.json Export all the credentials to a specific directory using the --backup flag (details above): 1 n8n export:credentials --backup --output = backups/latest/ Export all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file. Sensitive information All sensitive information is visible in the files. 1 n8n export:credentials --all --decrypted --output = backups/decrypted.json Import workflows and credentials # You can import your workflows and credentials from n8n using the CLI. Update the IDs When exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing. Available flags: Flag Description --help Help prompt. --input Input file name or directory if you use --separate. --projectId Import the workflow or credential to the specified project. Can't be used with --userId . --separate Imports *.json files from directory provided by --input. --userId Import the workflow or credential to the specified user. Can't be used with --projectId . Migrating to SQLite n8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits. This might result in errors like Data too long for column name during the import process. In this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing. Workflows # Import workflows from a specific file: 1 n8n import:workflow --input = file.json Import all the workflow files as JSON from the specified directory: 1 n8n import:workflow --separate --input = backups/latest/ Credentials # Import credentials from a specific file: 1 n8n import:credentials --input = file.json Import all the credentials files as JSON from the specified directory: 1 n8n import:credentials --separate --input = backups/latest/ License # Clear # Clear your existing license from n8n's database and reset n8n to default features: 1 n8n license:clear Info # Display information about the existing license: 1 n8n license:info User management # You can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts. Use this if you forget your password, and don't have SMTP set up to do password resets by email. 1 n8n user-management:reset Disable MFA for a user # If a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again. 1 n8n mfa:disable --email = johndoe@example.com Disable LDAP # You can reset the LDAP settings using the command below. 1 n8n ldap:reset Security audit # You can run a security audit on your n8n instance, to detect common security issues. 1 n8n audit Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/manage-cloud/cloud-data-management/

Cloud data management # There are two concerns when managing data on Cloud: Memory usage: complex workflows processing large amounts of data can exceed n8n's memory limits. If this happens, the instance can crash and become inaccessible. Data storage: depending on your execution settings and volume, your n8n database can grow in size and run out of storage. To avoid these issues, n8n recommends that you build your workflows with memory efficiency in mind, and don't save unnecessary data Memory limits on each Cloud plan # Current plans: Trial: 320MiB RAM, 10 millicore CPU burstable Starter: 320MiB RAM, 10 millicore CPU burstable Pro-1 (10k executions): 640MiB RAM, 20 millicore CPU burstable Pro-2 (50k executions): 1280MiB RAM, 80 millicore CPU burstable Enterprise: 4096MiB RAM, 80 millicore CPU burstable Legacy plans: Start: 320MiB RAM, 10 millicore CPU burstable Power: 1280MiB RAM, 80 millicore CPU burstable n8n gives each instance up to 100GB of data storage. How to reduce memory consumption in your workflow # The way you build workflows affects how much data they consume when executed. Although these guidelines aren't applicable to all cases, they provide a baseline of best practices to avoid exceeding instance memory. Split the data processed into smaller chunks. For example, instead of fetching 10,000 rows with each execution, process 200 rows with each execution. Avoid using the Code node where possible. Avoid manual executions when processing larger amounts of data. Split the workflow up into sub-workflows and ensure each sub-workflow returns a limited amount of data to its parent workflow. Splitting the workflow might seem counter-intuitive at first as it usually requires adding at least two more nodes: the Loop Over Items node to split up the items into smaller batches and the Execute Workflow node to start the sub-workflow. However, as long as your sub-workflow does the heavy lifting for each batch and then returns only a small result set to the main workflow, this reduces memory consumption. This is because the sub-workflow only holds the data for the current batch in memory, after which the memory is free again. Note that n8n itself consumes memory to run. On average, the software alone uses around 180MiB RAM. Interactions with the UI also consume memory. Playing around with the workflow UI while it performs heavy executions could also push the memory capacity over the limit. How to manage execution data on Cloud # Execution data includes node data, parameters, variables, execution context, and binary data references. It's text-based. Binary data is non-textual data that n8n can't represent as plain text. This is files and media such as images, documents, audio files, and videos. It's much larger than textual data. If a workflow consumes a large amounts of data and is past testing stage, it's a good option to stop saving the successful executions. There are two ways you can control how much execution data n8n stores in the database: In the admin dashboard: From your workspace or editor, navigate to Admin Panel . Select Manage . In Executions to Save deselect the executions you don't want to log. In your workflow settings: Select the Options menu. Select Settings . n8n opens the Workflow settings modal. Change Save successful production executions to Do not save . Cloud data pruning and out of memory incident prevention # Automatic data pruning # n8n automatically prunes execution logs after a certain time or once you reach the max storage limit, whichever comes first. The pruning always happens from oldest to newest and the limits depend on your Could plan: Start and Starter plans: max 2500 executions saved and 7 days execution log retention; Pro and Power plans: max 25000 executions saved and 30 days execution log retention; Enterprise plan: max 50000 executions saved and unlimited execution log retention time. Manual data pruning # Heavier executions and use cases can exceed database capacity despite the automatic pruning practices. In cases like this, n8n will manually prune data to protect instance stability. An alert system warns n8n if an instance is at 85% disk capacity. n8n prunes execution data. n8n does this by running a backup of the instance (workflows, users, credentials and execution data) and restoring it without execution data. Due to the human steps in this process, the alert system isn't perfect. If warnings are triggered after hours or if data consumption rates are high, there might not be time to prune the data before the remaining disk space fills up. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/manage-cloud/cloud-ip/

Cloud IP addresses # Cloud IP addresses change without warning n8n can't guarantee static source IPs, as Cloud operates in a dynamic cloud provider environment and scales its infrastructure to meet demand. You should use strong authentication and secure transport protocols when connecting into and out of n8n. Outbound traffic may appear to originate from any of: 20.79.227.226/32 20.113.47.122/32 20.218.202.73/32 98.67.233.91/32 4.182.111.50/32 4.182.129.20/32 4.182.88.118/32 4.182.212.136/32 98.67.244.108/32 72.144.128.145/32 72.144.83.147/32 72.144.69.38/32 72.144.111.50/32 4.182.128.108/32 4.182.190.144/32 4.182.191.184/32 98.67.233.200/32 20.52.126.0/28 20.218.238.112/28 Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/user-management/cloud-setup/

Set up user management on n8n Cloud # To access user management, upgrade to version 0.195.0 or newer. Irreversible upgrade Once you upgrade your Cloud instance to an n8n version with user management, you can't downgrade your version. Step one: In-app setup # When you set up user management for the first time, you create an owner account. Open n8n. The app displays a signup screen. Enter your details. Your password must be at least eight characters, including at least one number and one capital letter. Click Next . n8n logs you in with your new owner account. Step two: Invite users # You can now invite other people to your n8n instance. Sign into your workspace with your owner account. (If you are in the Admin Panel open your Workspace from the Dashboard) Click the three dots next to your user icon at the bottom left and click Settings . n8n opens your Personal settings page. Click Users to go to the Users page. Click Invite . Enter the new user's email address. Click Invite user . n8n sends an email with a link for the new user to join. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/cookbook/code-node/

Code node cookbook # This section contains examples and recipes for tasks you can do with the Code node. Get number of items returned by last node Get the binary data buffer Output to the browser console Related resources # Built-in methods and variables reference Code node Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/code-node/

Using the Code node # Use the Code node to write custom JavaScript or Python and run it as a step in your workflow. Coding in n8n This page gives usage information about the Code node. For more guidance on coding in n8n, refer to the Code section. It includes: Reference documentation on Built-in methods and variables Guidance on Handling dates and Querying JSON A growing collection of examples in the Cookbook Examples and templates For usage examples and templates to help you get started, refer to n8n's Code integrations page. Function and Function Item nodes The Code node replaces the Function and Function Item nodes from version 0.198.0. If you're using an older version of n8n, you can still view the Function node documentation and Function Item node documentation . Usage # How to use the Code node. Choose a mode # There are two modes: Run Once for All Items : this is the default. When your workflow runs, the code in the code node executes once, regardless of how many input items there are. Run Once for Each Item : choose this if you want your code to run for every input item. JavaScript # The Code node supports Node.js. Supported JavaScript features # The Code node supports: Promises. Instead of returning the items directly, you can return a promise which resolves accordingly. Writing to your browser console using console.log . This is useful for debugging and troubleshooting your workflows. External libraries # If you self-host n8n, you can import and use built-in and external npm modules in the Code node. To learn how to enable external modules, refer to the Enable modules in Code node guide. If you use n8n Cloud, you can't import external npm modules. n8n makes two modules available for you: crypto Node.js module moment npm package Built-in methods and variables # n8n provides built-in methods and variables for working with data and accessing n8n data. Refer to Built-in methods and variables for more information. The syntax to use the built-in methods and variables is $variableName or $methodName() . Type $ in the Code node or expressions editor to see a list of suggested methods and variables. Keyboard shortcuts # The Code node editing environment supports time-saving and useful keyboard shortcuts for a range of operations from autocompletion to code-folding and using multiple-cursors. A full list can be found in the list of keyboard shortcuts . Python # n8n added Python support in version 1.0. It doesn't include a Python executable. Instead, n8n provides Python support using Pyodide , which is a port of CPython to WebAssembly. This limits the available Python packages to the Packages included with Pyodide . n8n downloads the package automatically the first time you use it. Slower than JavaScript The Code node takes longer to process Python than JavaScript. This is due to the extra compilation steps. Built-in methods and variables # n8n provides built-in methods and variables for working with data and accessing n8n data. Refer to Built-in methods and variables for more information. The syntax to use the built-in methods and variables is _variableName or _methodName() . Type _ in the Code node to see a list of suggested methods and variables. Keyboard shortcuts # The Code node editing environment supports time-saving and useful keyboard shortcuts for a range of operations from autocompletion to code-folding and using multiple-cursors. A full list can be found in the list of keyboard shortcuts . File system and HTTP requests # You can't access the file system or make HTTP requests. Use the following nodes instead: Read/Write File From Disk HTTP Request Coding in n8n # There are two places where you can use code in n8n: the Code node and the expressions editor. When using either area, there are some key concepts you need to know, as well as some built-in methods and variables to help with common tasks. Key concepts # When working with the Code node, you need to understand the following concepts: Data structure : understand the data you receive in the Code node, and requirements for outputting data from the node. Item linking : learn how data items work, and how to link to items from previous nodes. You need to handle item linking in your code when the number of input and output items doesn't match. Built-in methods and variables # n8n includes built-in methods and variables. These provide support for: Accessing specific item data Accessing data about workflows, executions, and your n8n environment Convenience variables to help with data and time Refer to Built-in methods and variables for more information. Use AI in the Code node # Feature availability AI assistance in the Code node is available to Cloud users. It isn't available in self-hosted n8n. AI generated code overwrites your code If you've already written some code on the Code tab, the AI generated code will replace it. n8n recommends using AI as a starting point to create your initial code, then editing it as needed. To use ChatGPT to generate code in the Code node: In the Code node, set Language to JavaScript . Select the Ask AI tab. Write your query. Select Generate Code . n8n sends your query to ChatGPT, then displays the result in the Code tab. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/data/code/

Processing data with code # Function # A function is a block of code designed to perform a certain task. In n8n, you can write custom JavaScript or Python code snippets to add, remove, and update the data you receive from a node. The Code node gives you access to the incoming data and you can manipulate it. With this node you can create any function you want using JavaScript code. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/

Code in n8n # n8n is a low-code tool. This means you can do a lot without code, then add code when needed. Code in your workflows # There are two places in your workflows where you can use code: Expressions Use expressions to transform data in your nodes. You can use JavaScript in expressions, as well as n8n's Built-in methods and variables and Data transformation functions . Expressions Code node Use the Code node to add JavaScript or Python to your workflow. Code node Other technical resources # These are features that are relevant to technical users. Technical nodes # n8n provides core nodes, which simplify adding key functionality such as API requests, webhooks, scheduling, and file handling. Write a backend The HTTP Request , Webhook , and Code nodes help you make API calls, respond to webhooks, and write any JavaScript in your workflow. Use this do things like Create an API endpoint . Core nodes Represent complex logic You can build complex flows, using nodes like If , Switch , and Merge nodes. Flow logic Other developer resources # The n8n API n8n provides an API, where you can programmatically perform many of the same tasks as you can in the GUI. There's an n8n API node to access the API in your workflows. API Self-host You can self-host n8n. This keeps your data on your own infrastructure. Hosting Build your own nodes You can build custom nodes, install them on your n8n instance, and publish them to npm . Creating nodes Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/cookbook/expressions/common-issues/

Expressions common issues # Here are some common errors and issues related to expressions and steps to resolve or troubleshoot them. The 'JSON Output' in item 0 contains invalid JSON # This error occurs when you use JSON mode but don't provide a valid JSON object. Depending on the problem with the JSON object, the error sometimes display as The 'JSON Output' in item 0 does not contain a valid JSON object . To resolve this, make sure that the code you provide is valid JSON: Check the JSON with a JSON validator . Check that your JSON object doesn't reference undefined input data. This may occur if the incoming data doesn't always include the same fields. Can't get data for expression # This error occurs when n8n can't retrieve the data referenced by an expression. Often, this happens when the preceding node hasn't been run yet. Another variation of this may appear as Referenced node is unexecuted . In that case, the full text of this error will tell you the exact node that isn't executing in this format: An expression references the node '<node-name>', but it hasn’t been executed yet. Either change the expression, or re-wire your workflow to make sure that node executes first. To begin troubleshooting, test the workflow up to the named node. For nodes that use JavaScript or other custom code, you can check if a previous node has executed before trying to use its value by checking the following: 1 $ ( "<node-name>" ). isExecuted As an example, this JSON references the parameters of the input data. This error will display if you test this step without connecting it to another node: 1 2 3 { "my_field_1" : {{ $input . params }} } Invalid syntax # This error occurs when you use an expression that has a syntax error. For example, the expression in this JSON includes a trailing period, which results in an invalid syntax error: 1 2 3 4 { "my_field_1" : "value" , "my_field_2" : {{ $ ( 'If' ). item . json . }} } To resolve this error, check your expression syntax to make sure they follow the expected format. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/community-edition-features/

Community Edition Features # The community edition includes almost the complete feature set of n8n, except for the features listed here. The community edition doesn't include these features: Custom Variables Environments External secrets External storage for binary data Log streaming ( Logging is included) Multi-main mode ( Queue mode is included) Projects SSO ( SAML , LDAP ) Sharing ( workflows , credentials ) (Only the instance owner and the user who creates them can access workflows and credentials) Version control using Git Workflow history (You can get one day of workflow history with the community edition by registering ) These features are available on the Enterprise Cloud plan, including the self-hosted Enterprise edition. Some of these features are available on the Starter and Pro Cloud plan. See pricing for reference. Registered Community Edition # You can unlock extra features by registering your n8n community edition. You register with your email and receive a license key. Registering unlocks these features for the community edition: Debug in editor : Copy and pin execution data when working on a workflow One day of workflow history : 24 hours of workflow history so you can revert back to previous workflow versions Custom execution data : Save, find, and annotate execution metadata To register a new community edition instance, select the option during your initial account creation. To register an existing community edition instance: Select the three dots icon in the lower-left corner. Select Settings and then Usage and plan . Select Unlock to enter your email and then select Send me a free license key . Check your email for the account you entered. Once you have a license key, activate it by clicking the button in the license email or by visiting Options > Settings > Usage and plan and selecting Enter activation key . Once activated, your license will not expire. We may change the unlocked features in the future. This will not impact previously unlocked features. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/components/

Workflow components # This section contains: Nodes : integrations and operations. Connections : node connectors. Sticky notes : document your workflows. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/configuration-methods/

Configuration # You can change n8n's settings using environment variables. For a full list of available configurations see Environment Variables . Set environment variables by command line # npm # For npm, set your desired environment variables in terminal using the export command as shown below: 1 export <variable> = <value> Docker # In Docker you can use the -e flag from the command line: 1 2 3 4 5 docker run -it --rm \ --name n8n \ -p 5678 :5678 \ -e N8N_TEMPLATES_ENABLED = "false" \ docker.n8n.io/n8nio/n8n Set environment variables using a file # You can also configure n8n using a configuration file. Only define the values that need to be different from the default in your configuration file. You can use multiple files. For example, you can have a file with generic base settings, and files with specific values for different environments. npm # Set the path to the JSON configuration file using the environment variable N8N_CONFIG_FILES : 1 2 3 4 5 6 7 8 # Bash - Single file export N8N_CONFIG_FILES = /<path-to-config>/my-config.json # Bash - Multiple files are comma-separated export N8N_CONFIG_FILES = /<path-to-config>/my-config.json,/<path-to-config>/production.json # PowerShell - Single file, persist for current user # Note that setting scope (Process, User, Machine) has no effect on Unix systems [ Environment ] ::SetEnvironmentVariable ( 'N8N_CONFIG_FILES' , '<path-to-config>\config.json' , 'User' ) Example file: 1 2 3 4 5 6 7 8 9 10 11 { "executions" : { "saveDataOnSuccess" : "none" }, "generic" : { "timezone" : "Europe/Berlin" }, "nodes" : { "exclude" : "[\"n8n-nodes-base.executeCommand\",\"n8n-nodes-base.writeBinaryFile\"]" } } Formatting as JSON You can't always work out the correct JSON from the Environment variables reference . For example, to set N8N_METRICS to true , you need to do: 1 2 3 4 5 6 7 { "endpoints" : { "metrics" : { "enable" : true } } } Refer to the Schema file in the source code for full details of the expected settings. Docker # In Docker, you can set your environment variables in the n8n: environment: element of your docker-compose.yaml file. For example: 1 2 3 n8n : environment : - N8N_TEMPLATES_ENABLED=false Keeping sensitive data in separate files # You can append _FILE to individual environment variables to provide their configuration in a separate file, enabling you to avoid passing sensitive details using environment variables. n8n loads the data from the file with the given name, making it possible to load data from Docker-Secrets and Kubernetes-Secrets . Refer to Environment variables for details on each variable. While most environment variables can use the _FILE suffix, it's more beneficial for sensitive data such as credentials and database configuration. Here are some examples: 1 2 3 4 5 6 7 8 9 10 11 12 CREDENTIALS_OVERWRITE_DATA_FILE=/path/to/credentials_data DB_TYPE_FILE=/path/to/db_type DB_POSTGRESDB_DATABASE_FILE=/path/to/database_name DB_POSTGRESDB_HOST_FILE=/path/to/database_host DB_POSTGRESDB_PORT_FILE=/path/to/database_port DB_POSTGRESDB_USER_FILE=/path/to/database_user DB_POSTGRESDB_PASSWORD_FILE=/path/to/database_password DB_POSTGRESDB_SCHEMA_FILE=/path/to/database_schema DB_POSTGRESDB_SSL_CA_FILE=/path/to/ssl_ca DB_POSTGRESDB_SSL_CERT_FILE=/path/to/ssl_cert DB_POSTGRESDB_SSL_KEY_FILE=/path/to/ssl_key DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED_FILE=/path/to/ssl_reject_unauth Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/configuration-methods/#keeping-sensitive-data-in-separate-files

Configuration # You can change n8n's settings using environment variables. For a full list of available configurations see Environment Variables . Set environment variables by command line # npm # For npm, set your desired environment variables in terminal using the export command as shown below: 1 export <variable> = <value> Docker # In Docker you can use the -e flag from the command line: 1 2 3 4 5 docker run -it --rm \ --name n8n \ -p 5678 :5678 \ -e N8N_TEMPLATES_ENABLED = "false" \ docker.n8n.io/n8nio/n8n Set environment variables using a file # You can also configure n8n using a configuration file. Only define the values that need to be different from the default in your configuration file. You can use multiple files. For example, you can have a file with generic base settings, and files with specific values for different environments. npm # Set the path to the JSON configuration file using the environment variable N8N_CONFIG_FILES : 1 2 3 4 5 6 7 8 # Bash - Single file export N8N_CONFIG_FILES = /<path-to-config>/my-config.json # Bash - Multiple files are comma-separated export N8N_CONFIG_FILES = /<path-to-config>/my-config.json,/<path-to-config>/production.json # PowerShell - Single file, persist for current user # Note that setting scope (Process, User, Machine) has no effect on Unix systems [ Environment ] ::SetEnvironmentVariable ( 'N8N_CONFIG_FILES' , '<path-to-config>\config.json' , 'User' ) Example file: 1 2 3 4 5 6 7 8 9 10 11 { "executions" : { "saveDataOnSuccess" : "none" }, "generic" : { "timezone" : "Europe/Berlin" }, "nodes" : { "exclude" : "[\"n8n-nodes-base.executeCommand\",\"n8n-nodes-base.writeBinaryFile\"]" } } Formatting as JSON You can't always work out the correct JSON from the Environment variables reference . For example, to set N8N_METRICS to true , you need to do: 1 2 3 4 5 6 7 { "endpoints" : { "metrics" : { "enable" : true } } } Refer to the Schema file in the source code for full details of the expected settings. Docker # In Docker, you can set your environment variables in the n8n: environment: element of your docker-compose.yaml file. For example: 1 2 3 n8n : environment : - N8N_TEMPLATES_ENABLED=false Keeping sensitive data in separate files # You can append _FILE to individual environment variables to provide their configuration in a separate file, enabling you to avoid passing sensitive details using environment variables. n8n loads the data from the file with the given name, making it possible to load data from Docker-Secrets and Kubernetes-Secrets . Refer to Environment variables for details on each variable. While most environment variables can use the _FILE suffix, it's more beneficial for sensitive data such as credentials and database configuration. Here are some examples: 1 2 3 4 5 6 7 8 9 10 11 12 CREDENTIALS_OVERWRITE_DATA_FILE=/path/to/credentials_data DB_TYPE_FILE=/path/to/db_type DB_POSTGRESDB_DATABASE_FILE=/path/to/database_name DB_POSTGRESDB_HOST_FILE=/path/to/database_host DB_POSTGRESDB_PORT_FILE=/path/to/database_port DB_POSTGRESDB_USER_FILE=/path/to/database_user DB_POSTGRESDB_PASSWORD_FILE=/path/to/database_password DB_POSTGRESDB_SCHEMA_FILE=/path/to/database_schema DB_POSTGRESDB_SSL_CA_FILE=/path/to/ssl_ca DB_POSTGRESDB_SSL_CERT_FILE=/path/to/ssl_cert DB_POSTGRESDB_SSL_KEY_FILE=/path/to/ssl_key DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED_FILE=/path/to/ssl_reject_unauth Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/embed/configuration/#using-rest-apis

Configuration # Feature availability Embed requires an embed license. For more information about when to use Embed, as well as costs and licensing processes, refer to Embed on the n8n website. Authentication # You can secure n8n by setting up User management , n8n's built-in authentication feature. n8n supports LDAP and SAML . Credential overwrites # To offer OAuth login to users, it's possible to overwrite credentials on a global basis. This credential data isn't visible to users but the backend uses it automatically. In the Editor UI, n8n hides all overwritten fields by default. This means that users are able to authenticate using OAuth by pressing the "connect" button on the credentials. n8n offers two ways to apply credential overwrites: using Environment Variable and using the REST API. Using environment variables # You can set credential overwrites using environment variable by setting the CREDENTIALS_OVERWRITE_DATA to { CREDENTIAL_NAME: { PARAMETER: VALUE }} . Warning Even though this is possible, it isn't recommended. Environment variables aren't protected in n8n, so the data can leak to users. Using REST APIs # The recommended way is to load the data using a custom REST endpoint. Set the CREDENTIALS_OVERWRITE_ENDPOINT to a path under which this endpoint should be made available. Note The endpoints can be called just one at a time for security reasons. For example: Activate the endpoint by setting the environment variable in the environment n8n runs under: 1 export CREDENTIALS_OVERWRITE_ENDPOINT = send-credentials A JSON file with the credentials to overwrite is then needed. For example, a oauth-credentials.json file to overwrite credentials for Asana and GitHub could look like this: 1 2 3 4 5 6 7 8 9 10 { "asanaOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" }, "githubOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" } } Then apply it to the instance by sending it using curl: 1 curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials Note There are cases when credentials are based on others. For example, the googleSheetsOAuth2Api extends the googleOAuth2Api . In this case, you can set parameters on the parent credentials ( googleOAuth2Api ) for all child-credentials ( googleSheetsOAuth2Api ) to use. Environment variables # n8n has many environment variables you can configure. Here are the most relevant environment variables for your hosted solution: Variable Type Default Description EXECUTIONS_TIMEOUT Number -1 Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX . Set EXECUTIONS_TIMEOUT to -1 to disable. EXECUTIONS_DATA_PRUNE Boolean true Whether to delete data of past executions on a rolling basis. EXECUTIONS_DATA_MAX_AGE Number 336 The execution age (in hours) before it's deleted. EXECUTIONS_DATA_PRUNE_MAX_COUNT Number 10000 Maximum number of executions to keep in the database. 0 = no limit NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODES_INCLUDE Array of strings - Specify which nodes to load. N8N_TEMPLATES_ENABLED Boolean true Enable workflow templates (true) or disable (false). N8N_TEMPLATES_HOST String https://api.n8n.io Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information. Backend hooks # It's possible to define external hooks that n8n executes whenever a specific operation runs. You can use these, for example, to log data, change data, or forbid an action by throwing an error. Available hooks # Hook Arguments Description credentials.create [credentialData: ICredentialsDb] Called before new credentials get created. Use to restrict the number of credentials. credentials.delete [id: credentialId] Called before credentials get deleted. credentials.update [credentialData: ICredentialsDb] Called before existing credentials are saved. frontend.settings [frontendSettings: IN8nUISettings] Gets called on n8n startup. Allows you to, for example, overwrite frontend data like the displayed OAuth URL. n8n.ready [app: App] Called once n8n is ready. Use to, for example, register custom API endpoints. n8n.stop Called when an n8n process gets stopped. Allows you to save some process data. oauth1.authenticate [oAuthOptions: clientOAuth1.Options, oauthRequestData: {oauth_callback: string}] Called before an OAuth1 authentication. Use to overwrite an OAuth callback URL. oauth2.callback [oAuth2Parameters: {clientId: string, clientSecret: string \| undefined, accessTokenUri: string, authorizationUri: string, redirectUri: string, scopes: string[]}] Called in an OAuth2 callback. Use to overwrite an OAuth callback URL. workflow.activate [workflowData: IWorkflowDb] Called before a workflow gets activated. Use to restrict the number of active workflows. workflow.afterDelete [workflowId: string] Called after a workflow gets deleted. workflow.afterUpdate [workflowData: IWorkflowBase] Called after an existing workflow gets saved. workflow.create [workflowData: IWorkflowBase] Called before a workflow gets created. Use to restrict the number of saved workflows. workflow.delete [workflowId: string] Called before a workflow gets delete. workflow.postExecute [run: IRun, workflowData: IWorkflowBase] Called after a workflow gets executed. workflow.preExecute [workflow: Workflow: mode: WorkflowExecuteMode] Called before a workflow gets executed. Allows you to count or limit the number of workflow executions. workflow.update [workflowData: IWorkflowBase] Called before an existing workflow gets saved. Registering hooks # Set hooks by registering a hook file that contains the hook functions. To register a hook, set the environment variable EXTERNAL_HOOK_FILES . You can set the variable to a single file: EXTERNAL_HOOK_FILES=/data/hook.js Or to contain multiple files separated by a semicolon: EXTERNAL_HOOK_FILES=/data/hook1.js;/data/hook2.js Backend hook files # Hook files are regular JavaScript files that have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { "frontend" : { "settings" : [ async function ( settings ) { settings . oauthCallbackUrls . oauth1 = 'https://n8n.example.com/oauth1/callback' ; settings . oauthCallbackUrls . oauth2 = 'https://n8n.example.com/oauth2/callback' ; } ] }, "workflow" : { "activate" : [ async function ( workflowData ) { const activeWorkflows = await this . dbCollections . Workflow . count ({ active : true }); if ( activeWorkflows > 1 ) { throw new Error ( 'Active workflow limit reached.' ); } } ] } } Backend hook functions # A hook or a hook file can contain multiple hook functions, with all functions executed one after another. If the parameters of the hook function are objects, it's possible to change the data of that parameter to change the behavior of n8n. You can also access the database in any hook function using this.dbCollections (refer to the code sample in Backend hook files . Frontend external hooks # Like backend external hooks, it's possible to define external hooks in the frontend code that get executed by n8n whenever a user performs a specific operation. You can use them, for example, to log data and change data. Available hooks # Hook Description credentialsEdit.credentialTypeChanged Called when an existing credential's type changes. credentials.create Called when someone creates a new credential. credentialsList.dialogVisibleChanged dataDisplay.nodeTypeChanged dataDisplay.onDocumentationUrlClick Called when someone selects the help documentation link. execution.open Called when an existing execution opens. executionsList.openDialog Called when someone selects an execution from existing Workflow Executions. expressionEdit.itemSelected expressionEdit.dialogVisibleChanged nodeCreateList.filteredNodeTypesComputed nodeCreateList.nodeFilterChanged Called when someone makes any changes to the node panel filter. nodeCreateList.selectedTypeChanged nodeCreateList.mounted nodeCreateList.destroyed nodeSettings.credentialSelected nodeSettings.valueChanged nodeView.createNodeActiveChanged nodeView.addNodeButton nodeView.createNodeActiveChanged nodeView.mount pushConnection.executionFinished showMessage.showError runData.displayModeChanged workflow.activeChange workflow.activeChangeCurrent workflow.afterUpdate Called when someone updates an existing workflow. workflow.open workflowRun.runError workflowRun.runWorkflow Called when a workflow executes. workflowSettings.dialogVisibleChanged workflowSettings.saveSettings Called when someone saves the settings of a workflow. Registering hooks # You can set hooks by loading the hooks script on the page. One way to do this is by creating a hooks file in the project and adding a script tag in your editor-ui/public/index.html file: 1 < script src = "frontend-hooks.js" ></ script > Frontend hook files # Frontend external hook files are regular JavaScript files which have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 window . n8nExternalHooks = { nodeView : { mount : [ function ( store , meta ) { // do something }, ], createNodeActiveChanged : [ function ( store , meta ) { // do something }, function ( store , meta ) { // do something else }, ], addNodeButton : [ function ( store , meta ) { // do something }, ], }, }; Frontend hook functions # You can define multiple hook functions per hook. Each hook function is invoked with the following arguments arguments: store : The Vuex store object. You can use this to change or get data from the store. metadata : The object that contains any data provided by the hook. To see what's passed, search for the hook in the editor-ui package. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/embed/configuration/#configuration

Configuration # Feature availability Embed requires an embed license. For more information about when to use Embed, as well as costs and licensing processes, refer to Embed on the n8n website. Authentication # You can secure n8n by setting up User management , n8n's built-in authentication feature. n8n supports LDAP and SAML . Credential overwrites # To offer OAuth login to users, it's possible to overwrite credentials on a global basis. This credential data isn't visible to users but the backend uses it automatically. In the Editor UI, n8n hides all overwritten fields by default. This means that users are able to authenticate using OAuth by pressing the "connect" button on the credentials. n8n offers two ways to apply credential overwrites: using Environment Variable and using the REST API. Using environment variables # You can set credential overwrites using environment variable by setting the CREDENTIALS_OVERWRITE_DATA to { CREDENTIAL_NAME: { PARAMETER: VALUE }} . Warning Even though this is possible, it isn't recommended. Environment variables aren't protected in n8n, so the data can leak to users. Using REST APIs # The recommended way is to load the data using a custom REST endpoint. Set the CREDENTIALS_OVERWRITE_ENDPOINT to a path under which this endpoint should be made available. Note The endpoints can be called just one at a time for security reasons. For example: Activate the endpoint by setting the environment variable in the environment n8n runs under: 1 export CREDENTIALS_OVERWRITE_ENDPOINT = send-credentials A JSON file with the credentials to overwrite is then needed. For example, a oauth-credentials.json file to overwrite credentials for Asana and GitHub could look like this: 1 2 3 4 5 6 7 8 9 10 { "asanaOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" }, "githubOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" } } Then apply it to the instance by sending it using curl: 1 curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials Note There are cases when credentials are based on others. For example, the googleSheetsOAuth2Api extends the googleOAuth2Api . In this case, you can set parameters on the parent credentials ( googleOAuth2Api ) for all child-credentials ( googleSheetsOAuth2Api ) to use. Environment variables # n8n has many environment variables you can configure. Here are the most relevant environment variables for your hosted solution: Variable Type Default Description EXECUTIONS_TIMEOUT Number -1 Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX . Set EXECUTIONS_TIMEOUT to -1 to disable. EXECUTIONS_DATA_PRUNE Boolean true Whether to delete data of past executions on a rolling basis. EXECUTIONS_DATA_MAX_AGE Number 336 The execution age (in hours) before it's deleted. EXECUTIONS_DATA_PRUNE_MAX_COUNT Number 10000 Maximum number of executions to keep in the database. 0 = no limit NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODES_INCLUDE Array of strings - Specify which nodes to load. N8N_TEMPLATES_ENABLED Boolean true Enable workflow templates (true) or disable (false). N8N_TEMPLATES_HOST String https://api.n8n.io Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information. Backend hooks # It's possible to define external hooks that n8n executes whenever a specific operation runs. You can use these, for example, to log data, change data, or forbid an action by throwing an error. Available hooks # Hook Arguments Description credentials.create [credentialData: ICredentialsDb] Called before new credentials get created. Use to restrict the number of credentials. credentials.delete [id: credentialId] Called before credentials get deleted. credentials.update [credentialData: ICredentialsDb] Called before existing credentials are saved. frontend.settings [frontendSettings: IN8nUISettings] Gets called on n8n startup. Allows you to, for example, overwrite frontend data like the displayed OAuth URL. n8n.ready [app: App] Called once n8n is ready. Use to, for example, register custom API endpoints. n8n.stop Called when an n8n process gets stopped. Allows you to save some process data. oauth1.authenticate [oAuthOptions: clientOAuth1.Options, oauthRequestData: {oauth_callback: string}] Called before an OAuth1 authentication. Use to overwrite an OAuth callback URL. oauth2.callback [oAuth2Parameters: {clientId: string, clientSecret: string \| undefined, accessTokenUri: string, authorizationUri: string, redirectUri: string, scopes: string[]}] Called in an OAuth2 callback. Use to overwrite an OAuth callback URL. workflow.activate [workflowData: IWorkflowDb] Called before a workflow gets activated. Use to restrict the number of active workflows. workflow.afterDelete [workflowId: string] Called after a workflow gets deleted. workflow.afterUpdate [workflowData: IWorkflowBase] Called after an existing workflow gets saved. workflow.create [workflowData: IWorkflowBase] Called before a workflow gets created. Use to restrict the number of saved workflows. workflow.delete [workflowId: string] Called before a workflow gets delete. workflow.postExecute [run: IRun, workflowData: IWorkflowBase] Called after a workflow gets executed. workflow.preExecute [workflow: Workflow: mode: WorkflowExecuteMode] Called before a workflow gets executed. Allows you to count or limit the number of workflow executions. workflow.update [workflowData: IWorkflowBase] Called before an existing workflow gets saved. Registering hooks # Set hooks by registering a hook file that contains the hook functions. To register a hook, set the environment variable EXTERNAL_HOOK_FILES . You can set the variable to a single file: EXTERNAL_HOOK_FILES=/data/hook.js Or to contain multiple files separated by a semicolon: EXTERNAL_HOOK_FILES=/data/hook1.js;/data/hook2.js Backend hook files # Hook files are regular JavaScript files that have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { "frontend" : { "settings" : [ async function ( settings ) { settings . oauthCallbackUrls . oauth1 = 'https://n8n.example.com/oauth1/callback' ; settings . oauthCallbackUrls . oauth2 = 'https://n8n.example.com/oauth2/callback' ; } ] }, "workflow" : { "activate" : [ async function ( workflowData ) { const activeWorkflows = await this . dbCollections . Workflow . count ({ active : true }); if ( activeWorkflows > 1 ) { throw new Error ( 'Active workflow limit reached.' ); } } ] } } Backend hook functions # A hook or a hook file can contain multiple hook functions, with all functions executed one after another. If the parameters of the hook function are objects, it's possible to change the data of that parameter to change the behavior of n8n. You can also access the database in any hook function using this.dbCollections (refer to the code sample in Backend hook files . Frontend external hooks # Like backend external hooks, it's possible to define external hooks in the frontend code that get executed by n8n whenever a user performs a specific operation. You can use them, for example, to log data and change data. Available hooks # Hook Description credentialsEdit.credentialTypeChanged Called when an existing credential's type changes. credentials.create Called when someone creates a new credential. credentialsList.dialogVisibleChanged dataDisplay.nodeTypeChanged dataDisplay.onDocumentationUrlClick Called when someone selects the help documentation link. execution.open Called when an existing execution opens. executionsList.openDialog Called when someone selects an execution from existing Workflow Executions. expressionEdit.itemSelected expressionEdit.dialogVisibleChanged nodeCreateList.filteredNodeTypesComputed nodeCreateList.nodeFilterChanged Called when someone makes any changes to the node panel filter. nodeCreateList.selectedTypeChanged nodeCreateList.mounted nodeCreateList.destroyed nodeSettings.credentialSelected nodeSettings.valueChanged nodeView.createNodeActiveChanged nodeView.addNodeButton nodeView.createNodeActiveChanged nodeView.mount pushConnection.executionFinished showMessage.showError runData.displayModeChanged workflow.activeChange workflow.activeChangeCurrent workflow.afterUpdate Called when someone updates an existing workflow. workflow.open workflowRun.runError workflowRun.runWorkflow Called when a workflow executes. workflowSettings.dialogVisibleChanged workflowSettings.saveSettings Called when someone saves the settings of a workflow. Registering hooks # You can set hooks by loading the hooks script on the page. One way to do this is by creating a hooks file in the project and adding a script tag in your editor-ui/public/index.html file: 1 < script src = "frontend-hooks.js" ></ script > Frontend hook files # Frontend external hook files are regular JavaScript files which have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 window . n8nExternalHooks = { nodeView : { mount : [ function ( store , meta ) { // do something }, ], createNodeActiveChanged : [ function ( store , meta ) { // do something }, function ( store , meta ) { // do something else }, ], addNodeButton : [ function ( store , meta ) { // do something }, ], }, }; Frontend hook functions # You can define multiple hook functions per hook. Each hook function is invoked with the following arguments arguments: store : The Vuex store object. You can use this to change or get data from the store. metadata : The object that contains any data provided by the hook. To see what's passed, search for the hook in the editor-ui package. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/embed/configuration/#backend-hook-functions

Configuration # Feature availability Embed requires an embed license. For more information about when to use Embed, as well as costs and licensing processes, refer to Embed on the n8n website. Authentication # You can secure n8n by setting up User management , n8n's built-in authentication feature. n8n supports LDAP and SAML . Credential overwrites # To offer OAuth login to users, it's possible to overwrite credentials on a global basis. This credential data isn't visible to users but the backend uses it automatically. In the Editor UI, n8n hides all overwritten fields by default. This means that users are able to authenticate using OAuth by pressing the "connect" button on the credentials. n8n offers two ways to apply credential overwrites: using Environment Variable and using the REST API. Using environment variables # You can set credential overwrites using environment variable by setting the CREDENTIALS_OVERWRITE_DATA to { CREDENTIAL_NAME: { PARAMETER: VALUE }} . Warning Even though this is possible, it isn't recommended. Environment variables aren't protected in n8n, so the data can leak to users. Using REST APIs # The recommended way is to load the data using a custom REST endpoint. Set the CREDENTIALS_OVERWRITE_ENDPOINT to a path under which this endpoint should be made available. Note The endpoints can be called just one at a time for security reasons. For example: Activate the endpoint by setting the environment variable in the environment n8n runs under: 1 export CREDENTIALS_OVERWRITE_ENDPOINT = send-credentials A JSON file with the credentials to overwrite is then needed. For example, a oauth-credentials.json file to overwrite credentials for Asana and GitHub could look like this: 1 2 3 4 5 6 7 8 9 10 { "asanaOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" }, "githubOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" } } Then apply it to the instance by sending it using curl: 1 curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials Note There are cases when credentials are based on others. For example, the googleSheetsOAuth2Api extends the googleOAuth2Api . In this case, you can set parameters on the parent credentials ( googleOAuth2Api ) for all child-credentials ( googleSheetsOAuth2Api ) to use. Environment variables # n8n has many environment variables you can configure. Here are the most relevant environment variables for your hosted solution: Variable Type Default Description EXECUTIONS_TIMEOUT Number -1 Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX . Set EXECUTIONS_TIMEOUT to -1 to disable. EXECUTIONS_DATA_PRUNE Boolean true Whether to delete data of past executions on a rolling basis. EXECUTIONS_DATA_MAX_AGE Number 336 The execution age (in hours) before it's deleted. EXECUTIONS_DATA_PRUNE_MAX_COUNT Number 10000 Maximum number of executions to keep in the database. 0 = no limit NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODES_INCLUDE Array of strings - Specify which nodes to load. N8N_TEMPLATES_ENABLED Boolean true Enable workflow templates (true) or disable (false). N8N_TEMPLATES_HOST String https://api.n8n.io Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information. Backend hooks # It's possible to define external hooks that n8n executes whenever a specific operation runs. You can use these, for example, to log data, change data, or forbid an action by throwing an error. Available hooks # Hook Arguments Description credentials.create [credentialData: ICredentialsDb] Called before new credentials get created. Use to restrict the number of credentials. credentials.delete [id: credentialId] Called before credentials get deleted. credentials.update [credentialData: ICredentialsDb] Called before existing credentials are saved. frontend.settings [frontendSettings: IN8nUISettings] Gets called on n8n startup. Allows you to, for example, overwrite frontend data like the displayed OAuth URL. n8n.ready [app: App] Called once n8n is ready. Use to, for example, register custom API endpoints. n8n.stop Called when an n8n process gets stopped. Allows you to save some process data. oauth1.authenticate [oAuthOptions: clientOAuth1.Options, oauthRequestData: {oauth_callback: string}] Called before an OAuth1 authentication. Use to overwrite an OAuth callback URL. oauth2.callback [oAuth2Parameters: {clientId: string, clientSecret: string \| undefined, accessTokenUri: string, authorizationUri: string, redirectUri: string, scopes: string[]}] Called in an OAuth2 callback. Use to overwrite an OAuth callback URL. workflow.activate [workflowData: IWorkflowDb] Called before a workflow gets activated. Use to restrict the number of active workflows. workflow.afterDelete [workflowId: string] Called after a workflow gets deleted. workflow.afterUpdate [workflowData: IWorkflowBase] Called after an existing workflow gets saved. workflow.create [workflowData: IWorkflowBase] Called before a workflow gets created. Use to restrict the number of saved workflows. workflow.delete [workflowId: string] Called before a workflow gets delete. workflow.postExecute [run: IRun, workflowData: IWorkflowBase] Called after a workflow gets executed. workflow.preExecute [workflow: Workflow: mode: WorkflowExecuteMode] Called before a workflow gets executed. Allows you to count or limit the number of workflow executions. workflow.update [workflowData: IWorkflowBase] Called before an existing workflow gets saved. Registering hooks # Set hooks by registering a hook file that contains the hook functions. To register a hook, set the environment variable EXTERNAL_HOOK_FILES . You can set the variable to a single file: EXTERNAL_HOOK_FILES=/data/hook.js Or to contain multiple files separated by a semicolon: EXTERNAL_HOOK_FILES=/data/hook1.js;/data/hook2.js Backend hook files # Hook files are regular JavaScript files that have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { "frontend" : { "settings" : [ async function ( settings ) { settings . oauthCallbackUrls . oauth1 = 'https://n8n.example.com/oauth1/callback' ; settings . oauthCallbackUrls . oauth2 = 'https://n8n.example.com/oauth2/callback' ; } ] }, "workflow" : { "activate" : [ async function ( workflowData ) { const activeWorkflows = await this . dbCollections . Workflow . count ({ active : true }); if ( activeWorkflows > 1 ) { throw new Error ( 'Active workflow limit reached.' ); } } ] } } Backend hook functions # A hook or a hook file can contain multiple hook functions, with all functions executed one after another. If the parameters of the hook function are objects, it's possible to change the data of that parameter to change the behavior of n8n. You can also access the database in any hook function using this.dbCollections (refer to the code sample in Backend hook files . Frontend external hooks # Like backend external hooks, it's possible to define external hooks in the frontend code that get executed by n8n whenever a user performs a specific operation. You can use them, for example, to log data and change data. Available hooks # Hook Description credentialsEdit.credentialTypeChanged Called when an existing credential's type changes. credentials.create Called when someone creates a new credential. credentialsList.dialogVisibleChanged dataDisplay.nodeTypeChanged dataDisplay.onDocumentationUrlClick Called when someone selects the help documentation link. execution.open Called when an existing execution opens. executionsList.openDialog Called when someone selects an execution from existing Workflow Executions. expressionEdit.itemSelected expressionEdit.dialogVisibleChanged nodeCreateList.filteredNodeTypesComputed nodeCreateList.nodeFilterChanged Called when someone makes any changes to the node panel filter. nodeCreateList.selectedTypeChanged nodeCreateList.mounted nodeCreateList.destroyed nodeSettings.credentialSelected nodeSettings.valueChanged nodeView.createNodeActiveChanged nodeView.addNodeButton nodeView.createNodeActiveChanged nodeView.mount pushConnection.executionFinished showMessage.showError runData.displayModeChanged workflow.activeChange workflow.activeChangeCurrent workflow.afterUpdate Called when someone updates an existing workflow. workflow.open workflowRun.runError workflowRun.runWorkflow Called when a workflow executes. workflowSettings.dialogVisibleChanged workflowSettings.saveSettings Called when someone saves the settings of a workflow. Registering hooks # You can set hooks by loading the hooks script on the page. One way to do this is by creating a hooks file in the project and adding a script tag in your editor-ui/public/index.html file: 1 < script src = "frontend-hooks.js" ></ script > Frontend hook files # Frontend external hook files are regular JavaScript files which have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 window . n8nExternalHooks = { nodeView : { mount : [ function ( store , meta ) { // do something }, ], createNodeActiveChanged : [ function ( store , meta ) { // do something }, function ( store , meta ) { // do something else }, ], addNodeButton : [ function ( store , meta ) { // do something }, ], }, }; Frontend hook functions # You can define multiple hook functions per hook. Each hook function is invoked with the following arguments arguments: store : The Vuex store object. You can use this to change or get data from the store. metadata : The object that contains any data provided by the hook. To see what's passed, search for the hook in the editor-ui package. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/embed/configuration/#using-environment-variables

Configuration # Feature availability Embed requires an embed license. For more information about when to use Embed, as well as costs and licensing processes, refer to Embed on the n8n website. Authentication # You can secure n8n by setting up User management , n8n's built-in authentication feature. n8n supports LDAP and SAML . Credential overwrites # To offer OAuth login to users, it's possible to overwrite credentials on a global basis. This credential data isn't visible to users but the backend uses it automatically. In the Editor UI, n8n hides all overwritten fields by default. This means that users are able to authenticate using OAuth by pressing the "connect" button on the credentials. n8n offers two ways to apply credential overwrites: using Environment Variable and using the REST API. Using environment variables # You can set credential overwrites using environment variable by setting the CREDENTIALS_OVERWRITE_DATA to { CREDENTIAL_NAME: { PARAMETER: VALUE }} . Warning Even though this is possible, it isn't recommended. Environment variables aren't protected in n8n, so the data can leak to users. Using REST APIs # The recommended way is to load the data using a custom REST endpoint. Set the CREDENTIALS_OVERWRITE_ENDPOINT to a path under which this endpoint should be made available. Note The endpoints can be called just one at a time for security reasons. For example: Activate the endpoint by setting the environment variable in the environment n8n runs under: 1 export CREDENTIALS_OVERWRITE_ENDPOINT = send-credentials A JSON file with the credentials to overwrite is then needed. For example, a oauth-credentials.json file to overwrite credentials for Asana and GitHub could look like this: 1 2 3 4 5 6 7 8 9 10 { "asanaOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" }, "githubOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" } } Then apply it to the instance by sending it using curl: 1 curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials Note There are cases when credentials are based on others. For example, the googleSheetsOAuth2Api extends the googleOAuth2Api . In this case, you can set parameters on the parent credentials ( googleOAuth2Api ) for all child-credentials ( googleSheetsOAuth2Api ) to use. Environment variables # n8n has many environment variables you can configure. Here are the most relevant environment variables for your hosted solution: Variable Type Default Description EXECUTIONS_TIMEOUT Number -1 Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX . Set EXECUTIONS_TIMEOUT to -1 to disable. EXECUTIONS_DATA_PRUNE Boolean true Whether to delete data of past executions on a rolling basis. EXECUTIONS_DATA_MAX_AGE Number 336 The execution age (in hours) before it's deleted. EXECUTIONS_DATA_PRUNE_MAX_COUNT Number 10000 Maximum number of executions to keep in the database. 0 = no limit NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODES_INCLUDE Array of strings - Specify which nodes to load. N8N_TEMPLATES_ENABLED Boolean true Enable workflow templates (true) or disable (false). N8N_TEMPLATES_HOST String https://api.n8n.io Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information. Backend hooks # It's possible to define external hooks that n8n executes whenever a specific operation runs. You can use these, for example, to log data, change data, or forbid an action by throwing an error. Available hooks # Hook Arguments Description credentials.create [credentialData: ICredentialsDb] Called before new credentials get created. Use to restrict the number of credentials. credentials.delete [id: credentialId] Called before credentials get deleted. credentials.update [credentialData: ICredentialsDb] Called before existing credentials are saved. frontend.settings [frontendSettings: IN8nUISettings] Gets called on n8n startup. Allows you to, for example, overwrite frontend data like the displayed OAuth URL. n8n.ready [app: App] Called once n8n is ready. Use to, for example, register custom API endpoints. n8n.stop Called when an n8n process gets stopped. Allows you to save some process data. oauth1.authenticate [oAuthOptions: clientOAuth1.Options, oauthRequestData: {oauth_callback: string}] Called before an OAuth1 authentication. Use to overwrite an OAuth callback URL. oauth2.callback [oAuth2Parameters: {clientId: string, clientSecret: string \| undefined, accessTokenUri: string, authorizationUri: string, redirectUri: string, scopes: string[]}] Called in an OAuth2 callback. Use to overwrite an OAuth callback URL. workflow.activate [workflowData: IWorkflowDb] Called before a workflow gets activated. Use to restrict the number of active workflows. workflow.afterDelete [workflowId: string] Called after a workflow gets deleted. workflow.afterUpdate [workflowData: IWorkflowBase] Called after an existing workflow gets saved. workflow.create [workflowData: IWorkflowBase] Called before a workflow gets created. Use to restrict the number of saved workflows. workflow.delete [workflowId: string] Called before a workflow gets delete. workflow.postExecute [run: IRun, workflowData: IWorkflowBase] Called after a workflow gets executed. workflow.preExecute [workflow: Workflow: mode: WorkflowExecuteMode] Called before a workflow gets executed. Allows you to count or limit the number of workflow executions. workflow.update [workflowData: IWorkflowBase] Called before an existing workflow gets saved. Registering hooks # Set hooks by registering a hook file that contains the hook functions. To register a hook, set the environment variable EXTERNAL_HOOK_FILES . You can set the variable to a single file: EXTERNAL_HOOK_FILES=/data/hook.js Or to contain multiple files separated by a semicolon: EXTERNAL_HOOK_FILES=/data/hook1.js;/data/hook2.js Backend hook files # Hook files are regular JavaScript files that have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { "frontend" : { "settings" : [ async function ( settings ) { settings . oauthCallbackUrls . oauth1 = 'https://n8n.example.com/oauth1/callback' ; settings . oauthCallbackUrls . oauth2 = 'https://n8n.example.com/oauth2/callback' ; } ] }, "workflow" : { "activate" : [ async function ( workflowData ) { const activeWorkflows = await this . dbCollections . Workflow . count ({ active : true }); if ( activeWorkflows > 1 ) { throw new Error ( 'Active workflow limit reached.' ); } } ] } } Backend hook functions # A hook or a hook file can contain multiple hook functions, with all functions executed one after another. If the parameters of the hook function are objects, it's possible to change the data of that parameter to change the behavior of n8n. You can also access the database in any hook function using this.dbCollections (refer to the code sample in Backend hook files . Frontend external hooks # Like backend external hooks, it's possible to define external hooks in the frontend code that get executed by n8n whenever a user performs a specific operation. You can use them, for example, to log data and change data. Available hooks # Hook Description credentialsEdit.credentialTypeChanged Called when an existing credential's type changes. credentials.create Called when someone creates a new credential. credentialsList.dialogVisibleChanged dataDisplay.nodeTypeChanged dataDisplay.onDocumentationUrlClick Called when someone selects the help documentation link. execution.open Called when an existing execution opens. executionsList.openDialog Called when someone selects an execution from existing Workflow Executions. expressionEdit.itemSelected expressionEdit.dialogVisibleChanged nodeCreateList.filteredNodeTypesComputed nodeCreateList.nodeFilterChanged Called when someone makes any changes to the node panel filter. nodeCreateList.selectedTypeChanged nodeCreateList.mounted nodeCreateList.destroyed nodeSettings.credentialSelected nodeSettings.valueChanged nodeView.createNodeActiveChanged nodeView.addNodeButton nodeView.createNodeActiveChanged nodeView.mount pushConnection.executionFinished showMessage.showError runData.displayModeChanged workflow.activeChange workflow.activeChangeCurrent workflow.afterUpdate Called when someone updates an existing workflow. workflow.open workflowRun.runError workflowRun.runWorkflow Called when a workflow executes. workflowSettings.dialogVisibleChanged workflowSettings.saveSettings Called when someone saves the settings of a workflow. Registering hooks # You can set hooks by loading the hooks script on the page. One way to do this is by creating a hooks file in the project and adding a script tag in your editor-ui/public/index.html file: 1 < script src = "frontend-hooks.js" ></ script > Frontend hook files # Frontend external hook files are regular JavaScript files which have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 window . n8nExternalHooks = { nodeView : { mount : [ function ( store , meta ) { // do something }, ], createNodeActiveChanged : [ function ( store , meta ) { // do something }, function ( store , meta ) { // do something else }, ], addNodeButton : [ function ( store , meta ) { // do something }, ], }, }; Frontend hook functions # You can define multiple hook functions per hook. Each hook function is invoked with the following arguments arguments: store : The Vuex store object. You can use this to change or get data from the store. metadata : The object that contains any data provided by the hook. To see what's passed, search for the hook in the editor-ui package. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/embed/configuration/#frontend-hook-functions

Configuration # Feature availability Embed requires an embed license. For more information about when to use Embed, as well as costs and licensing processes, refer to Embed on the n8n website. Authentication # You can secure n8n by setting up User management , n8n's built-in authentication feature. n8n supports LDAP and SAML . Credential overwrites # To offer OAuth login to users, it's possible to overwrite credentials on a global basis. This credential data isn't visible to users but the backend uses it automatically. In the Editor UI, n8n hides all overwritten fields by default. This means that users are able to authenticate using OAuth by pressing the "connect" button on the credentials. n8n offers two ways to apply credential overwrites: using Environment Variable and using the REST API. Using environment variables # You can set credential overwrites using environment variable by setting the CREDENTIALS_OVERWRITE_DATA to { CREDENTIAL_NAME: { PARAMETER: VALUE }} . Warning Even though this is possible, it isn't recommended. Environment variables aren't protected in n8n, so the data can leak to users. Using REST APIs # The recommended way is to load the data using a custom REST endpoint. Set the CREDENTIALS_OVERWRITE_ENDPOINT to a path under which this endpoint should be made available. Note The endpoints can be called just one at a time for security reasons. For example: Activate the endpoint by setting the environment variable in the environment n8n runs under: 1 export CREDENTIALS_OVERWRITE_ENDPOINT = send-credentials A JSON file with the credentials to overwrite is then needed. For example, a oauth-credentials.json file to overwrite credentials for Asana and GitHub could look like this: 1 2 3 4 5 6 7 8 9 10 { "asanaOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" }, "githubOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" } } Then apply it to the instance by sending it using curl: 1 curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials Note There are cases when credentials are based on others. For example, the googleSheetsOAuth2Api extends the googleOAuth2Api . In this case, you can set parameters on the parent credentials ( googleOAuth2Api ) for all child-credentials ( googleSheetsOAuth2Api ) to use. Environment variables # n8n has many environment variables you can configure. Here are the most relevant environment variables for your hosted solution: Variable Type Default Description EXECUTIONS_TIMEOUT Number -1 Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX . Set EXECUTIONS_TIMEOUT to -1 to disable. EXECUTIONS_DATA_PRUNE Boolean true Whether to delete data of past executions on a rolling basis. EXECUTIONS_DATA_MAX_AGE Number 336 The execution age (in hours) before it's deleted. EXECUTIONS_DATA_PRUNE_MAX_COUNT Number 10000 Maximum number of executions to keep in the database. 0 = no limit NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODES_INCLUDE Array of strings - Specify which nodes to load. N8N_TEMPLATES_ENABLED Boolean true Enable workflow templates (true) or disable (false). N8N_TEMPLATES_HOST String https://api.n8n.io Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information. Backend hooks # It's possible to define external hooks that n8n executes whenever a specific operation runs. You can use these, for example, to log data, change data, or forbid an action by throwing an error. Available hooks # Hook Arguments Description credentials.create [credentialData: ICredentialsDb] Called before new credentials get created. Use to restrict the number of credentials. credentials.delete [id: credentialId] Called before credentials get deleted. credentials.update [credentialData: ICredentialsDb] Called before existing credentials are saved. frontend.settings [frontendSettings: IN8nUISettings] Gets called on n8n startup. Allows you to, for example, overwrite frontend data like the displayed OAuth URL. n8n.ready [app: App] Called once n8n is ready. Use to, for example, register custom API endpoints. n8n.stop Called when an n8n process gets stopped. Allows you to save some process data. oauth1.authenticate [oAuthOptions: clientOAuth1.Options, oauthRequestData: {oauth_callback: string}] Called before an OAuth1 authentication. Use to overwrite an OAuth callback URL. oauth2.callback [oAuth2Parameters: {clientId: string, clientSecret: string \| undefined, accessTokenUri: string, authorizationUri: string, redirectUri: string, scopes: string[]}] Called in an OAuth2 callback. Use to overwrite an OAuth callback URL. workflow.activate [workflowData: IWorkflowDb] Called before a workflow gets activated. Use to restrict the number of active workflows. workflow.afterDelete [workflowId: string] Called after a workflow gets deleted. workflow.afterUpdate [workflowData: IWorkflowBase] Called after an existing workflow gets saved. workflow.create [workflowData: IWorkflowBase] Called before a workflow gets created. Use to restrict the number of saved workflows. workflow.delete [workflowId: string] Called before a workflow gets delete. workflow.postExecute [run: IRun, workflowData: IWorkflowBase] Called after a workflow gets executed. workflow.preExecute [workflow: Workflow: mode: WorkflowExecuteMode] Called before a workflow gets executed. Allows you to count or limit the number of workflow executions. workflow.update [workflowData: IWorkflowBase] Called before an existing workflow gets saved. Registering hooks # Set hooks by registering a hook file that contains the hook functions. To register a hook, set the environment variable EXTERNAL_HOOK_FILES . You can set the variable to a single file: EXTERNAL_HOOK_FILES=/data/hook.js Or to contain multiple files separated by a semicolon: EXTERNAL_HOOK_FILES=/data/hook1.js;/data/hook2.js Backend hook files # Hook files are regular JavaScript files that have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { "frontend" : { "settings" : [ async function ( settings ) { settings . oauthCallbackUrls . oauth1 = 'https://n8n.example.com/oauth1/callback' ; settings . oauthCallbackUrls . oauth2 = 'https://n8n.example.com/oauth2/callback' ; } ] }, "workflow" : { "activate" : [ async function ( workflowData ) { const activeWorkflows = await this . dbCollections . Workflow . count ({ active : true }); if ( activeWorkflows > 1 ) { throw new Error ( 'Active workflow limit reached.' ); } } ] } } Backend hook functions # A hook or a hook file can contain multiple hook functions, with all functions executed one after another. If the parameters of the hook function are objects, it's possible to change the data of that parameter to change the behavior of n8n. You can also access the database in any hook function using this.dbCollections (refer to the code sample in Backend hook files . Frontend external hooks # Like backend external hooks, it's possible to define external hooks in the frontend code that get executed by n8n whenever a user performs a specific operation. You can use them, for example, to log data and change data. Available hooks # Hook Description credentialsEdit.credentialTypeChanged Called when an existing credential's type changes. credentials.create Called when someone creates a new credential. credentialsList.dialogVisibleChanged dataDisplay.nodeTypeChanged dataDisplay.onDocumentationUrlClick Called when someone selects the help documentation link. execution.open Called when an existing execution opens. executionsList.openDialog Called when someone selects an execution from existing Workflow Executions. expressionEdit.itemSelected expressionEdit.dialogVisibleChanged nodeCreateList.filteredNodeTypesComputed nodeCreateList.nodeFilterChanged Called when someone makes any changes to the node panel filter. nodeCreateList.selectedTypeChanged nodeCreateList.mounted nodeCreateList.destroyed nodeSettings.credentialSelected nodeSettings.valueChanged nodeView.createNodeActiveChanged nodeView.addNodeButton nodeView.createNodeActiveChanged nodeView.mount pushConnection.executionFinished showMessage.showError runData.displayModeChanged workflow.activeChange workflow.activeChangeCurrent workflow.afterUpdate Called when someone updates an existing workflow. workflow.open workflowRun.runError workflowRun.runWorkflow Called when a workflow executes. workflowSettings.dialogVisibleChanged workflowSettings.saveSettings Called when someone saves the settings of a workflow. Registering hooks # You can set hooks by loading the hooks script on the page. One way to do this is by creating a hooks file in the project and adding a script tag in your editor-ui/public/index.html file: 1 < script src = "frontend-hooks.js" ></ script > Frontend hook files # Frontend external hook files are regular JavaScript files which have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 window . n8nExternalHooks = { nodeView : { mount : [ function ( store , meta ) { // do something }, ], createNodeActiveChanged : [ function ( store , meta ) { // do something }, function ( store , meta ) { // do something else }, ], addNodeButton : [ function ( store , meta ) { // do something }, ], }, }; Frontend hook functions # You can define multiple hook functions per hook. Each hook function is invoked with the following arguments arguments: store : The Vuex store object. You can use this to change or get data from the store. metadata : The object that contains any data provided by the hook. To see what's passed, search for the hook in the editor-ui package. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/embed/configuration/#credential-overwrites

Configuration # Feature availability Embed requires an embed license. For more information about when to use Embed, as well as costs and licensing processes, refer to Embed on the n8n website. Authentication # You can secure n8n by setting up User management , n8n's built-in authentication feature. n8n supports LDAP and SAML . Credential overwrites # To offer OAuth login to users, it's possible to overwrite credentials on a global basis. This credential data isn't visible to users but the backend uses it automatically. In the Editor UI, n8n hides all overwritten fields by default. This means that users are able to authenticate using OAuth by pressing the "connect" button on the credentials. n8n offers two ways to apply credential overwrites: using Environment Variable and using the REST API. Using environment variables # You can set credential overwrites using environment variable by setting the CREDENTIALS_OVERWRITE_DATA to { CREDENTIAL_NAME: { PARAMETER: VALUE }} . Warning Even though this is possible, it isn't recommended. Environment variables aren't protected in n8n, so the data can leak to users. Using REST APIs # The recommended way is to load the data using a custom REST endpoint. Set the CREDENTIALS_OVERWRITE_ENDPOINT to a path under which this endpoint should be made available. Note The endpoints can be called just one at a time for security reasons. For example: Activate the endpoint by setting the environment variable in the environment n8n runs under: 1 export CREDENTIALS_OVERWRITE_ENDPOINT = send-credentials A JSON file with the credentials to overwrite is then needed. For example, a oauth-credentials.json file to overwrite credentials for Asana and GitHub could look like this: 1 2 3 4 5 6 7 8 9 10 { "asanaOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" }, "githubOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" } } Then apply it to the instance by sending it using curl: 1 curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials Note There are cases when credentials are based on others. For example, the googleSheetsOAuth2Api extends the googleOAuth2Api . In this case, you can set parameters on the parent credentials ( googleOAuth2Api ) for all child-credentials ( googleSheetsOAuth2Api ) to use. Environment variables # n8n has many environment variables you can configure. Here are the most relevant environment variables for your hosted solution: Variable Type Default Description EXECUTIONS_TIMEOUT Number -1 Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX . Set EXECUTIONS_TIMEOUT to -1 to disable. EXECUTIONS_DATA_PRUNE Boolean true Whether to delete data of past executions on a rolling basis. EXECUTIONS_DATA_MAX_AGE Number 336 The execution age (in hours) before it's deleted. EXECUTIONS_DATA_PRUNE_MAX_COUNT Number 10000 Maximum number of executions to keep in the database. 0 = no limit NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODES_INCLUDE Array of strings - Specify which nodes to load. N8N_TEMPLATES_ENABLED Boolean true Enable workflow templates (true) or disable (false). N8N_TEMPLATES_HOST String https://api.n8n.io Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information. Backend hooks # It's possible to define external hooks that n8n executes whenever a specific operation runs. You can use these, for example, to log data, change data, or forbid an action by throwing an error. Available hooks # Hook Arguments Description credentials.create [credentialData: ICredentialsDb] Called before new credentials get created. Use to restrict the number of credentials. credentials.delete [id: credentialId] Called before credentials get deleted. credentials.update [credentialData: ICredentialsDb] Called before existing credentials are saved. frontend.settings [frontendSettings: IN8nUISettings] Gets called on n8n startup. Allows you to, for example, overwrite frontend data like the displayed OAuth URL. n8n.ready [app: App] Called once n8n is ready. Use to, for example, register custom API endpoints. n8n.stop Called when an n8n process gets stopped. Allows you to save some process data. oauth1.authenticate [oAuthOptions: clientOAuth1.Options, oauthRequestData: {oauth_callback: string}] Called before an OAuth1 authentication. Use to overwrite an OAuth callback URL. oauth2.callback [oAuth2Parameters: {clientId: string, clientSecret: string \| undefined, accessTokenUri: string, authorizationUri: string, redirectUri: string, scopes: string[]}] Called in an OAuth2 callback. Use to overwrite an OAuth callback URL. workflow.activate [workflowData: IWorkflowDb] Called before a workflow gets activated. Use to restrict the number of active workflows. workflow.afterDelete [workflowId: string] Called after a workflow gets deleted. workflow.afterUpdate [workflowData: IWorkflowBase] Called after an existing workflow gets saved. workflow.create [workflowData: IWorkflowBase] Called before a workflow gets created. Use to restrict the number of saved workflows. workflow.delete [workflowId: string] Called before a workflow gets delete. workflow.postExecute [run: IRun, workflowData: IWorkflowBase] Called after a workflow gets executed. workflow.preExecute [workflow: Workflow: mode: WorkflowExecuteMode] Called before a workflow gets executed. Allows you to count or limit the number of workflow executions. workflow.update [workflowData: IWorkflowBase] Called before an existing workflow gets saved. Registering hooks # Set hooks by registering a hook file that contains the hook functions. To register a hook, set the environment variable EXTERNAL_HOOK_FILES . You can set the variable to a single file: EXTERNAL_HOOK_FILES=/data/hook.js Or to contain multiple files separated by a semicolon: EXTERNAL_HOOK_FILES=/data/hook1.js;/data/hook2.js Backend hook files # Hook files are regular JavaScript files that have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { "frontend" : { "settings" : [ async function ( settings ) { settings . oauthCallbackUrls . oauth1 = 'https://n8n.example.com/oauth1/callback' ; settings . oauthCallbackUrls . oauth2 = 'https://n8n.example.com/oauth2/callback' ; } ] }, "workflow" : { "activate" : [ async function ( workflowData ) { const activeWorkflows = await this . dbCollections . Workflow . count ({ active : true }); if ( activeWorkflows > 1 ) { throw new Error ( 'Active workflow limit reached.' ); } } ] } } Backend hook functions # A hook or a hook file can contain multiple hook functions, with all functions executed one after another. If the parameters of the hook function are objects, it's possible to change the data of that parameter to change the behavior of n8n. You can also access the database in any hook function using this.dbCollections (refer to the code sample in Backend hook files . Frontend external hooks # Like backend external hooks, it's possible to define external hooks in the frontend code that get executed by n8n whenever a user performs a specific operation. You can use them, for example, to log data and change data. Available hooks # Hook Description credentialsEdit.credentialTypeChanged Called when an existing credential's type changes. credentials.create Called when someone creates a new credential. credentialsList.dialogVisibleChanged dataDisplay.nodeTypeChanged dataDisplay.onDocumentationUrlClick Called when someone selects the help documentation link. execution.open Called when an existing execution opens. executionsList.openDialog Called when someone selects an execution from existing Workflow Executions. expressionEdit.itemSelected expressionEdit.dialogVisibleChanged nodeCreateList.filteredNodeTypesComputed nodeCreateList.nodeFilterChanged Called when someone makes any changes to the node panel filter. nodeCreateList.selectedTypeChanged nodeCreateList.mounted nodeCreateList.destroyed nodeSettings.credentialSelected nodeSettings.valueChanged nodeView.createNodeActiveChanged nodeView.addNodeButton nodeView.createNodeActiveChanged nodeView.mount pushConnection.executionFinished showMessage.showError runData.displayModeChanged workflow.activeChange workflow.activeChangeCurrent workflow.afterUpdate Called when someone updates an existing workflow. workflow.open workflowRun.runError workflowRun.runWorkflow Called when a workflow executes. workflowSettings.dialogVisibleChanged workflowSettings.saveSettings Called when someone saves the settings of a workflow. Registering hooks # You can set hooks by loading the hooks script on the page. One way to do this is by creating a hooks file in the project and adding a script tag in your editor-ui/public/index.html file: 1 < script src = "frontend-hooks.js" ></ script > Frontend hook files # Frontend external hook files are regular JavaScript files which have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 window . n8nExternalHooks = { nodeView : { mount : [ function ( store , meta ) { // do something }, ], createNodeActiveChanged : [ function ( store , meta ) { // do something }, function ( store , meta ) { // do something else }, ], addNodeButton : [ function ( store , meta ) { // do something }, ], }, }; Frontend hook functions # You can define multiple hook functions per hook. Each hook function is invoked with the following arguments arguments: store : The Vuex store object. You can use this to change or get data from the store. metadata : The object that contains any data provided by the hook. To see what's passed, search for the hook in the editor-ui package. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/embed/configuration/#registering-hooks

Configuration # Feature availability Embed requires an embed license. For more information about when to use Embed, as well as costs and licensing processes, refer to Embed on the n8n website. Authentication # You can secure n8n by setting up User management , n8n's built-in authentication feature. n8n supports LDAP and SAML . Credential overwrites # To offer OAuth login to users, it's possible to overwrite credentials on a global basis. This credential data isn't visible to users but the backend uses it automatically. In the Editor UI, n8n hides all overwritten fields by default. This means that users are able to authenticate using OAuth by pressing the "connect" button on the credentials. n8n offers two ways to apply credential overwrites: using Environment Variable and using the REST API. Using environment variables # You can set credential overwrites using environment variable by setting the CREDENTIALS_OVERWRITE_DATA to { CREDENTIAL_NAME: { PARAMETER: VALUE }} . Warning Even though this is possible, it isn't recommended. Environment variables aren't protected in n8n, so the data can leak to users. Using REST APIs # The recommended way is to load the data using a custom REST endpoint. Set the CREDENTIALS_OVERWRITE_ENDPOINT to a path under which this endpoint should be made available. Note The endpoints can be called just one at a time for security reasons. For example: Activate the endpoint by setting the environment variable in the environment n8n runs under: 1 export CREDENTIALS_OVERWRITE_ENDPOINT = send-credentials A JSON file with the credentials to overwrite is then needed. For example, a oauth-credentials.json file to overwrite credentials for Asana and GitHub could look like this: 1 2 3 4 5 6 7 8 9 10 { "asanaOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" }, "githubOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" } } Then apply it to the instance by sending it using curl: 1 curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials Note There are cases when credentials are based on others. For example, the googleSheetsOAuth2Api extends the googleOAuth2Api . In this case, you can set parameters on the parent credentials ( googleOAuth2Api ) for all child-credentials ( googleSheetsOAuth2Api ) to use. Environment variables # n8n has many environment variables you can configure. Here are the most relevant environment variables for your hosted solution: Variable Type Default Description EXECUTIONS_TIMEOUT Number -1 Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX . Set EXECUTIONS_TIMEOUT to -1 to disable. EXECUTIONS_DATA_PRUNE Boolean true Whether to delete data of past executions on a rolling basis. EXECUTIONS_DATA_MAX_AGE Number 336 The execution age (in hours) before it's deleted. EXECUTIONS_DATA_PRUNE_MAX_COUNT Number 10000 Maximum number of executions to keep in the database. 0 = no limit NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODES_INCLUDE Array of strings - Specify which nodes to load. N8N_TEMPLATES_ENABLED Boolean true Enable workflow templates (true) or disable (false). N8N_TEMPLATES_HOST String https://api.n8n.io Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information. Backend hooks # It's possible to define external hooks that n8n executes whenever a specific operation runs. You can use these, for example, to log data, change data, or forbid an action by throwing an error. Available hooks # Hook Arguments Description credentials.create [credentialData: ICredentialsDb] Called before new credentials get created. Use to restrict the number of credentials. credentials.delete [id: credentialId] Called before credentials get deleted. credentials.update [credentialData: ICredentialsDb] Called before existing credentials are saved. frontend.settings [frontendSettings: IN8nUISettings] Gets called on n8n startup. Allows you to, for example, overwrite frontend data like the displayed OAuth URL. n8n.ready [app: App] Called once n8n is ready. Use to, for example, register custom API endpoints. n8n.stop Called when an n8n process gets stopped. Allows you to save some process data. oauth1.authenticate [oAuthOptions: clientOAuth1.Options, oauthRequestData: {oauth_callback: string}] Called before an OAuth1 authentication. Use to overwrite an OAuth callback URL. oauth2.callback [oAuth2Parameters: {clientId: string, clientSecret: string \| undefined, accessTokenUri: string, authorizationUri: string, redirectUri: string, scopes: string[]}] Called in an OAuth2 callback. Use to overwrite an OAuth callback URL. workflow.activate [workflowData: IWorkflowDb] Called before a workflow gets activated. Use to restrict the number of active workflows. workflow.afterDelete [workflowId: string] Called after a workflow gets deleted. workflow.afterUpdate [workflowData: IWorkflowBase] Called after an existing workflow gets saved. workflow.create [workflowData: IWorkflowBase] Called before a workflow gets created. Use to restrict the number of saved workflows. workflow.delete [workflowId: string] Called before a workflow gets delete. workflow.postExecute [run: IRun, workflowData: IWorkflowBase] Called after a workflow gets executed. workflow.preExecute [workflow: Workflow: mode: WorkflowExecuteMode] Called before a workflow gets executed. Allows you to count or limit the number of workflow executions. workflow.update [workflowData: IWorkflowBase] Called before an existing workflow gets saved. Registering hooks # Set hooks by registering a hook file that contains the hook functions. To register a hook, set the environment variable EXTERNAL_HOOK_FILES . You can set the variable to a single file: EXTERNAL_HOOK_FILES=/data/hook.js Or to contain multiple files separated by a semicolon: EXTERNAL_HOOK_FILES=/data/hook1.js;/data/hook2.js Backend hook files # Hook files are regular JavaScript files that have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { "frontend" : { "settings" : [ async function ( settings ) { settings . oauthCallbackUrls . oauth1 = 'https://n8n.example.com/oauth1/callback' ; settings . oauthCallbackUrls . oauth2 = 'https://n8n.example.com/oauth2/callback' ; } ] }, "workflow" : { "activate" : [ async function ( workflowData ) { const activeWorkflows = await this . dbCollections . Workflow . count ({ active : true }); if ( activeWorkflows > 1 ) { throw new Error ( 'Active workflow limit reached.' ); } } ] } } Backend hook functions # A hook or a hook file can contain multiple hook functions, with all functions executed one after another. If the parameters of the hook function are objects, it's possible to change the data of that parameter to change the behavior of n8n. You can also access the database in any hook function using this.dbCollections (refer to the code sample in Backend hook files . Frontend external hooks # Like backend external hooks, it's possible to define external hooks in the frontend code that get executed by n8n whenever a user performs a specific operation. You can use them, for example, to log data and change data. Available hooks # Hook Description credentialsEdit.credentialTypeChanged Called when an existing credential's type changes. credentials.create Called when someone creates a new credential. credentialsList.dialogVisibleChanged dataDisplay.nodeTypeChanged dataDisplay.onDocumentationUrlClick Called when someone selects the help documentation link. execution.open Called when an existing execution opens. executionsList.openDialog Called when someone selects an execution from existing Workflow Executions. expressionEdit.itemSelected expressionEdit.dialogVisibleChanged nodeCreateList.filteredNodeTypesComputed nodeCreateList.nodeFilterChanged Called when someone makes any changes to the node panel filter. nodeCreateList.selectedTypeChanged nodeCreateList.mounted nodeCreateList.destroyed nodeSettings.credentialSelected nodeSettings.valueChanged nodeView.createNodeActiveChanged nodeView.addNodeButton nodeView.createNodeActiveChanged nodeView.mount pushConnection.executionFinished showMessage.showError runData.displayModeChanged workflow.activeChange workflow.activeChangeCurrent workflow.afterUpdate Called when someone updates an existing workflow. workflow.open workflowRun.runError workflowRun.runWorkflow Called when a workflow executes. workflowSettings.dialogVisibleChanged workflowSettings.saveSettings Called when someone saves the settings of a workflow. Registering hooks # You can set hooks by loading the hooks script on the page. One way to do this is by creating a hooks file in the project and adding a script tag in your editor-ui/public/index.html file: 1 < script src = "frontend-hooks.js" ></ script > Frontend hook files # Frontend external hook files are regular JavaScript files which have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 window . n8nExternalHooks = { nodeView : { mount : [ function ( store , meta ) { // do something }, ], createNodeActiveChanged : [ function ( store , meta ) { // do something }, function ( store , meta ) { // do something else }, ], addNodeButton : [ function ( store , meta ) { // do something }, ], }, }; Frontend hook functions # You can define multiple hook functions per hook. Each hook function is invoked with the following arguments arguments: store : The Vuex store object. You can use this to change or get data from the store. metadata : The object that contains any data provided by the hook. To see what's passed, search for the hook in the editor-ui package. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/embed/configuration/#registering-hooks_1

Configuration # Feature availability Embed requires an embed license. For more information about when to use Embed, as well as costs and licensing processes, refer to Embed on the n8n website. Authentication # You can secure n8n by setting up User management , n8n's built-in authentication feature. n8n supports LDAP and SAML . Credential overwrites # To offer OAuth login to users, it's possible to overwrite credentials on a global basis. This credential data isn't visible to users but the backend uses it automatically. In the Editor UI, n8n hides all overwritten fields by default. This means that users are able to authenticate using OAuth by pressing the "connect" button on the credentials. n8n offers two ways to apply credential overwrites: using Environment Variable and using the REST API. Using environment variables # You can set credential overwrites using environment variable by setting the CREDENTIALS_OVERWRITE_DATA to { CREDENTIAL_NAME: { PARAMETER: VALUE }} . Warning Even though this is possible, it isn't recommended. Environment variables aren't protected in n8n, so the data can leak to users. Using REST APIs # The recommended way is to load the data using a custom REST endpoint. Set the CREDENTIALS_OVERWRITE_ENDPOINT to a path under which this endpoint should be made available. Note The endpoints can be called just one at a time for security reasons. For example: Activate the endpoint by setting the environment variable in the environment n8n runs under: 1 export CREDENTIALS_OVERWRITE_ENDPOINT = send-credentials A JSON file with the credentials to overwrite is then needed. For example, a oauth-credentials.json file to overwrite credentials for Asana and GitHub could look like this: 1 2 3 4 5 6 7 8 9 10 { "asanaOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" }, "githubOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" } } Then apply it to the instance by sending it using curl: 1 curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials Note There are cases when credentials are based on others. For example, the googleSheetsOAuth2Api extends the googleOAuth2Api . In this case, you can set parameters on the parent credentials ( googleOAuth2Api ) for all child-credentials ( googleSheetsOAuth2Api ) to use. Environment variables # n8n has many environment variables you can configure. Here are the most relevant environment variables for your hosted solution: Variable Type Default Description EXECUTIONS_TIMEOUT Number -1 Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX . Set EXECUTIONS_TIMEOUT to -1 to disable. EXECUTIONS_DATA_PRUNE Boolean true Whether to delete data of past executions on a rolling basis. EXECUTIONS_DATA_MAX_AGE Number 336 The execution age (in hours) before it's deleted. EXECUTIONS_DATA_PRUNE_MAX_COUNT Number 10000 Maximum number of executions to keep in the database. 0 = no limit NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODES_INCLUDE Array of strings - Specify which nodes to load. N8N_TEMPLATES_ENABLED Boolean true Enable workflow templates (true) or disable (false). N8N_TEMPLATES_HOST String https://api.n8n.io Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information. Backend hooks # It's possible to define external hooks that n8n executes whenever a specific operation runs. You can use these, for example, to log data, change data, or forbid an action by throwing an error. Available hooks # Hook Arguments Description credentials.create [credentialData: ICredentialsDb] Called before new credentials get created. Use to restrict the number of credentials. credentials.delete [id: credentialId] Called before credentials get deleted. credentials.update [credentialData: ICredentialsDb] Called before existing credentials are saved. frontend.settings [frontendSettings: IN8nUISettings] Gets called on n8n startup. Allows you to, for example, overwrite frontend data like the displayed OAuth URL. n8n.ready [app: App] Called once n8n is ready. Use to, for example, register custom API endpoints. n8n.stop Called when an n8n process gets stopped. Allows you to save some process data. oauth1.authenticate [oAuthOptions: clientOAuth1.Options, oauthRequestData: {oauth_callback: string}] Called before an OAuth1 authentication. Use to overwrite an OAuth callback URL. oauth2.callback [oAuth2Parameters: {clientId: string, clientSecret: string \| undefined, accessTokenUri: string, authorizationUri: string, redirectUri: string, scopes: string[]}] Called in an OAuth2 callback. Use to overwrite an OAuth callback URL. workflow.activate [workflowData: IWorkflowDb] Called before a workflow gets activated. Use to restrict the number of active workflows. workflow.afterDelete [workflowId: string] Called after a workflow gets deleted. workflow.afterUpdate [workflowData: IWorkflowBase] Called after an existing workflow gets saved. workflow.create [workflowData: IWorkflowBase] Called before a workflow gets created. Use to restrict the number of saved workflows. workflow.delete [workflowId: string] Called before a workflow gets delete. workflow.postExecute [run: IRun, workflowData: IWorkflowBase] Called after a workflow gets executed. workflow.preExecute [workflow: Workflow: mode: WorkflowExecuteMode] Called before a workflow gets executed. Allows you to count or limit the number of workflow executions. workflow.update [workflowData: IWorkflowBase] Called before an existing workflow gets saved. Registering hooks # Set hooks by registering a hook file that contains the hook functions. To register a hook, set the environment variable EXTERNAL_HOOK_FILES . You can set the variable to a single file: EXTERNAL_HOOK_FILES=/data/hook.js Or to contain multiple files separated by a semicolon: EXTERNAL_HOOK_FILES=/data/hook1.js;/data/hook2.js Backend hook files # Hook files are regular JavaScript files that have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { "frontend" : { "settings" : [ async function ( settings ) { settings . oauthCallbackUrls . oauth1 = 'https://n8n.example.com/oauth1/callback' ; settings . oauthCallbackUrls . oauth2 = 'https://n8n.example.com/oauth2/callback' ; } ] }, "workflow" : { "activate" : [ async function ( workflowData ) { const activeWorkflows = await this . dbCollections . Workflow . count ({ active : true }); if ( activeWorkflows > 1 ) { throw new Error ( 'Active workflow limit reached.' ); } } ] } } Backend hook functions # A hook or a hook file can contain multiple hook functions, with all functions executed one after another. If the parameters of the hook function are objects, it's possible to change the data of that parameter to change the behavior of n8n. You can also access the database in any hook function using this.dbCollections (refer to the code sample in Backend hook files . Frontend external hooks # Like backend external hooks, it's possible to define external hooks in the frontend code that get executed by n8n whenever a user performs a specific operation. You can use them, for example, to log data and change data. Available hooks # Hook Description credentialsEdit.credentialTypeChanged Called when an existing credential's type changes. credentials.create Called when someone creates a new credential. credentialsList.dialogVisibleChanged dataDisplay.nodeTypeChanged dataDisplay.onDocumentationUrlClick Called when someone selects the help documentation link. execution.open Called when an existing execution opens. executionsList.openDialog Called when someone selects an execution from existing Workflow Executions. expressionEdit.itemSelected expressionEdit.dialogVisibleChanged nodeCreateList.filteredNodeTypesComputed nodeCreateList.nodeFilterChanged Called when someone makes any changes to the node panel filter. nodeCreateList.selectedTypeChanged nodeCreateList.mounted nodeCreateList.destroyed nodeSettings.credentialSelected nodeSettings.valueChanged nodeView.createNodeActiveChanged nodeView.addNodeButton nodeView.createNodeActiveChanged nodeView.mount pushConnection.executionFinished showMessage.showError runData.displayModeChanged workflow.activeChange workflow.activeChangeCurrent workflow.afterUpdate Called when someone updates an existing workflow. workflow.open workflowRun.runError workflowRun.runWorkflow Called when a workflow executes. workflowSettings.dialogVisibleChanged workflowSettings.saveSettings Called when someone saves the settings of a workflow. Registering hooks # You can set hooks by loading the hooks script on the page. One way to do this is by creating a hooks file in the project and adding a script tag in your editor-ui/public/index.html file: 1 < script src = "frontend-hooks.js" ></ script > Frontend hook files # Frontend external hook files are regular JavaScript files which have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 window . n8nExternalHooks = { nodeView : { mount : [ function ( store , meta ) { // do something }, ], createNodeActiveChanged : [ function ( store , meta ) { // do something }, function ( store , meta ) { // do something else }, ], addNodeButton : [ function ( store , meta ) { // do something }, ], }, }; Frontend hook functions # You can define multiple hook functions per hook. Each hook function is invoked with the following arguments arguments: store : The Vuex store object. You can use this to change or get data from the store. metadata : The object that contains any data provided by the hook. To see what's passed, search for the hook in the editor-ui package. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/embed/configuration/#environment-variables

Configuration # Feature availability Embed requires an embed license. For more information about when to use Embed, as well as costs and licensing processes, refer to Embed on the n8n website. Authentication # You can secure n8n by setting up User management , n8n's built-in authentication feature. n8n supports LDAP and SAML . Credential overwrites # To offer OAuth login to users, it's possible to overwrite credentials on a global basis. This credential data isn't visible to users but the backend uses it automatically. In the Editor UI, n8n hides all overwritten fields by default. This means that users are able to authenticate using OAuth by pressing the "connect" button on the credentials. n8n offers two ways to apply credential overwrites: using Environment Variable and using the REST API. Using environment variables # You can set credential overwrites using environment variable by setting the CREDENTIALS_OVERWRITE_DATA to { CREDENTIAL_NAME: { PARAMETER: VALUE }} . Warning Even though this is possible, it isn't recommended. Environment variables aren't protected in n8n, so the data can leak to users. Using REST APIs # The recommended way is to load the data using a custom REST endpoint. Set the CREDENTIALS_OVERWRITE_ENDPOINT to a path under which this endpoint should be made available. Note The endpoints can be called just one at a time for security reasons. For example: Activate the endpoint by setting the environment variable in the environment n8n runs under: 1 export CREDENTIALS_OVERWRITE_ENDPOINT = send-credentials A JSON file with the credentials to overwrite is then needed. For example, a oauth-credentials.json file to overwrite credentials for Asana and GitHub could look like this: 1 2 3 4 5 6 7 8 9 10 { "asanaOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" }, "githubOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" } } Then apply it to the instance by sending it using curl: 1 curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials Note There are cases when credentials are based on others. For example, the googleSheetsOAuth2Api extends the googleOAuth2Api . In this case, you can set parameters on the parent credentials ( googleOAuth2Api ) for all child-credentials ( googleSheetsOAuth2Api ) to use. Environment variables # n8n has many environment variables you can configure. Here are the most relevant environment variables for your hosted solution: Variable Type Default Description EXECUTIONS_TIMEOUT Number -1 Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX . Set EXECUTIONS_TIMEOUT to -1 to disable. EXECUTIONS_DATA_PRUNE Boolean true Whether to delete data of past executions on a rolling basis. EXECUTIONS_DATA_MAX_AGE Number 336 The execution age (in hours) before it's deleted. EXECUTIONS_DATA_PRUNE_MAX_COUNT Number 10000 Maximum number of executions to keep in the database. 0 = no limit NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODES_INCLUDE Array of strings - Specify which nodes to load. N8N_TEMPLATES_ENABLED Boolean true Enable workflow templates (true) or disable (false). N8N_TEMPLATES_HOST String https://api.n8n.io Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information. Backend hooks # It's possible to define external hooks that n8n executes whenever a specific operation runs. You can use these, for example, to log data, change data, or forbid an action by throwing an error. Available hooks # Hook Arguments Description credentials.create [credentialData: ICredentialsDb] Called before new credentials get created. Use to restrict the number of credentials. credentials.delete [id: credentialId] Called before credentials get deleted. credentials.update [credentialData: ICredentialsDb] Called before existing credentials are saved. frontend.settings [frontendSettings: IN8nUISettings] Gets called on n8n startup. Allows you to, for example, overwrite frontend data like the displayed OAuth URL. n8n.ready [app: App] Called once n8n is ready. Use to, for example, register custom API endpoints. n8n.stop Called when an n8n process gets stopped. Allows you to save some process data. oauth1.authenticate [oAuthOptions: clientOAuth1.Options, oauthRequestData: {oauth_callback: string}] Called before an OAuth1 authentication. Use to overwrite an OAuth callback URL. oauth2.callback [oAuth2Parameters: {clientId: string, clientSecret: string \| undefined, accessTokenUri: string, authorizationUri: string, redirectUri: string, scopes: string[]}] Called in an OAuth2 callback. Use to overwrite an OAuth callback URL. workflow.activate [workflowData: IWorkflowDb] Called before a workflow gets activated. Use to restrict the number of active workflows. workflow.afterDelete [workflowId: string] Called after a workflow gets deleted. workflow.afterUpdate [workflowData: IWorkflowBase] Called after an existing workflow gets saved. workflow.create [workflowData: IWorkflowBase] Called before a workflow gets created. Use to restrict the number of saved workflows. workflow.delete [workflowId: string] Called before a workflow gets delete. workflow.postExecute [run: IRun, workflowData: IWorkflowBase] Called after a workflow gets executed. workflow.preExecute [workflow: Workflow: mode: WorkflowExecuteMode] Called before a workflow gets executed. Allows you to count or limit the number of workflow executions. workflow.update [workflowData: IWorkflowBase] Called before an existing workflow gets saved. Registering hooks # Set hooks by registering a hook file that contains the hook functions. To register a hook, set the environment variable EXTERNAL_HOOK_FILES . You can set the variable to a single file: EXTERNAL_HOOK_FILES=/data/hook.js Or to contain multiple files separated by a semicolon: EXTERNAL_HOOK_FILES=/data/hook1.js;/data/hook2.js Backend hook files # Hook files are regular JavaScript files that have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { "frontend" : { "settings" : [ async function ( settings ) { settings . oauthCallbackUrls . oauth1 = 'https://n8n.example.com/oauth1/callback' ; settings . oauthCallbackUrls . oauth2 = 'https://n8n.example.com/oauth2/callback' ; } ] }, "workflow" : { "activate" : [ async function ( workflowData ) { const activeWorkflows = await this . dbCollections . Workflow . count ({ active : true }); if ( activeWorkflows > 1 ) { throw new Error ( 'Active workflow limit reached.' ); } } ] } } Backend hook functions # A hook or a hook file can contain multiple hook functions, with all functions executed one after another. If the parameters of the hook function are objects, it's possible to change the data of that parameter to change the behavior of n8n. You can also access the database in any hook function using this.dbCollections (refer to the code sample in Backend hook files . Frontend external hooks # Like backend external hooks, it's possible to define external hooks in the frontend code that get executed by n8n whenever a user performs a specific operation. You can use them, for example, to log data and change data. Available hooks # Hook Description credentialsEdit.credentialTypeChanged Called when an existing credential's type changes. credentials.create Called when someone creates a new credential. credentialsList.dialogVisibleChanged dataDisplay.nodeTypeChanged dataDisplay.onDocumentationUrlClick Called when someone selects the help documentation link. execution.open Called when an existing execution opens. executionsList.openDialog Called when someone selects an execution from existing Workflow Executions. expressionEdit.itemSelected expressionEdit.dialogVisibleChanged nodeCreateList.filteredNodeTypesComputed nodeCreateList.nodeFilterChanged Called when someone makes any changes to the node panel filter. nodeCreateList.selectedTypeChanged nodeCreateList.mounted nodeCreateList.destroyed nodeSettings.credentialSelected nodeSettings.valueChanged nodeView.createNodeActiveChanged nodeView.addNodeButton nodeView.createNodeActiveChanged nodeView.mount pushConnection.executionFinished showMessage.showError runData.displayModeChanged workflow.activeChange workflow.activeChangeCurrent workflow.afterUpdate Called when someone updates an existing workflow. workflow.open workflowRun.runError workflowRun.runWorkflow Called when a workflow executes. workflowSettings.dialogVisibleChanged workflowSettings.saveSettings Called when someone saves the settings of a workflow. Registering hooks # You can set hooks by loading the hooks script on the page. One way to do this is by creating a hooks file in the project and adding a script tag in your editor-ui/public/index.html file: 1 < script src = "frontend-hooks.js" ></ script > Frontend hook files # Frontend external hook files are regular JavaScript files which have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 window . n8nExternalHooks = { nodeView : { mount : [ function ( store , meta ) { // do something }, ], createNodeActiveChanged : [ function ( store , meta ) { // do something }, function ( store , meta ) { // do something else }, ], addNodeButton : [ function ( store , meta ) { // do something }, ], }, }; Frontend hook functions # You can define multiple hook functions per hook. Each hook function is invoked with the following arguments arguments: store : The Vuex store object. You can use this to change or get data from the store. metadata : The object that contains any data provided by the hook. To see what's passed, search for the hook in the editor-ui package. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/embed/configuration/#backend-hook-files

Configuration # Feature availability Embed requires an embed license. For more information about when to use Embed, as well as costs and licensing processes, refer to Embed on the n8n website. Authentication # You can secure n8n by setting up User management , n8n's built-in authentication feature. n8n supports LDAP and SAML . Credential overwrites # To offer OAuth login to users, it's possible to overwrite credentials on a global basis. This credential data isn't visible to users but the backend uses it automatically. In the Editor UI, n8n hides all overwritten fields by default. This means that users are able to authenticate using OAuth by pressing the "connect" button on the credentials. n8n offers two ways to apply credential overwrites: using Environment Variable and using the REST API. Using environment variables # You can set credential overwrites using environment variable by setting the CREDENTIALS_OVERWRITE_DATA to { CREDENTIAL_NAME: { PARAMETER: VALUE }} . Warning Even though this is possible, it isn't recommended. Environment variables aren't protected in n8n, so the data can leak to users. Using REST APIs # The recommended way is to load the data using a custom REST endpoint. Set the CREDENTIALS_OVERWRITE_ENDPOINT to a path under which this endpoint should be made available. Note The endpoints can be called just one at a time for security reasons. For example: Activate the endpoint by setting the environment variable in the environment n8n runs under: 1 export CREDENTIALS_OVERWRITE_ENDPOINT = send-credentials A JSON file with the credentials to overwrite is then needed. For example, a oauth-credentials.json file to overwrite credentials for Asana and GitHub could look like this: 1 2 3 4 5 6 7 8 9 10 { "asanaOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" }, "githubOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" } } Then apply it to the instance by sending it using curl: 1 curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials Note There are cases when credentials are based on others. For example, the googleSheetsOAuth2Api extends the googleOAuth2Api . In this case, you can set parameters on the parent credentials ( googleOAuth2Api ) for all child-credentials ( googleSheetsOAuth2Api ) to use. Environment variables # n8n has many environment variables you can configure. Here are the most relevant environment variables for your hosted solution: Variable Type Default Description EXECUTIONS_TIMEOUT Number -1 Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX . Set EXECUTIONS_TIMEOUT to -1 to disable. EXECUTIONS_DATA_PRUNE Boolean true Whether to delete data of past executions on a rolling basis. EXECUTIONS_DATA_MAX_AGE Number 336 The execution age (in hours) before it's deleted. EXECUTIONS_DATA_PRUNE_MAX_COUNT Number 10000 Maximum number of executions to keep in the database. 0 = no limit NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODES_INCLUDE Array of strings - Specify which nodes to load. N8N_TEMPLATES_ENABLED Boolean true Enable workflow templates (true) or disable (false). N8N_TEMPLATES_HOST String https://api.n8n.io Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information. Backend hooks # It's possible to define external hooks that n8n executes whenever a specific operation runs. You can use these, for example, to log data, change data, or forbid an action by throwing an error. Available hooks # Hook Arguments Description credentials.create [credentialData: ICredentialsDb] Called before new credentials get created. Use to restrict the number of credentials. credentials.delete [id: credentialId] Called before credentials get deleted. credentials.update [credentialData: ICredentialsDb] Called before existing credentials are saved. frontend.settings [frontendSettings: IN8nUISettings] Gets called on n8n startup. Allows you to, for example, overwrite frontend data like the displayed OAuth URL. n8n.ready [app: App] Called once n8n is ready. Use to, for example, register custom API endpoints. n8n.stop Called when an n8n process gets stopped. Allows you to save some process data. oauth1.authenticate [oAuthOptions: clientOAuth1.Options, oauthRequestData: {oauth_callback: string}] Called before an OAuth1 authentication. Use to overwrite an OAuth callback URL. oauth2.callback [oAuth2Parameters: {clientId: string, clientSecret: string \| undefined, accessTokenUri: string, authorizationUri: string, redirectUri: string, scopes: string[]}] Called in an OAuth2 callback. Use to overwrite an OAuth callback URL. workflow.activate [workflowData: IWorkflowDb] Called before a workflow gets activated. Use to restrict the number of active workflows. workflow.afterDelete [workflowId: string] Called after a workflow gets deleted. workflow.afterUpdate [workflowData: IWorkflowBase] Called after an existing workflow gets saved. workflow.create [workflowData: IWorkflowBase] Called before a workflow gets created. Use to restrict the number of saved workflows. workflow.delete [workflowId: string] Called before a workflow gets delete. workflow.postExecute [run: IRun, workflowData: IWorkflowBase] Called after a workflow gets executed. workflow.preExecute [workflow: Workflow: mode: WorkflowExecuteMode] Called before a workflow gets executed. Allows you to count or limit the number of workflow executions. workflow.update [workflowData: IWorkflowBase] Called before an existing workflow gets saved. Registering hooks # Set hooks by registering a hook file that contains the hook functions. To register a hook, set the environment variable EXTERNAL_HOOK_FILES . You can set the variable to a single file: EXTERNAL_HOOK_FILES=/data/hook.js Or to contain multiple files separated by a semicolon: EXTERNAL_HOOK_FILES=/data/hook1.js;/data/hook2.js Backend hook files # Hook files are regular JavaScript files that have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { "frontend" : { "settings" : [ async function ( settings ) { settings . oauthCallbackUrls . oauth1 = 'https://n8n.example.com/oauth1/callback' ; settings . oauthCallbackUrls . oauth2 = 'https://n8n.example.com/oauth2/callback' ; } ] }, "workflow" : { "activate" : [ async function ( workflowData ) { const activeWorkflows = await this . dbCollections . Workflow . count ({ active : true }); if ( activeWorkflows > 1 ) { throw new Error ( 'Active workflow limit reached.' ); } } ] } } Backend hook functions # A hook or a hook file can contain multiple hook functions, with all functions executed one after another. If the parameters of the hook function are objects, it's possible to change the data of that parameter to change the behavior of n8n. You can also access the database in any hook function using this.dbCollections (refer to the code sample in Backend hook files . Frontend external hooks # Like backend external hooks, it's possible to define external hooks in the frontend code that get executed by n8n whenever a user performs a specific operation. You can use them, for example, to log data and change data. Available hooks # Hook Description credentialsEdit.credentialTypeChanged Called when an existing credential's type changes. credentials.create Called when someone creates a new credential. credentialsList.dialogVisibleChanged dataDisplay.nodeTypeChanged dataDisplay.onDocumentationUrlClick Called when someone selects the help documentation link. execution.open Called when an existing execution opens. executionsList.openDialog Called when someone selects an execution from existing Workflow Executions. expressionEdit.itemSelected expressionEdit.dialogVisibleChanged nodeCreateList.filteredNodeTypesComputed nodeCreateList.nodeFilterChanged Called when someone makes any changes to the node panel filter. nodeCreateList.selectedTypeChanged nodeCreateList.mounted nodeCreateList.destroyed nodeSettings.credentialSelected nodeSettings.valueChanged nodeView.createNodeActiveChanged nodeView.addNodeButton nodeView.createNodeActiveChanged nodeView.mount pushConnection.executionFinished showMessage.showError runData.displayModeChanged workflow.activeChange workflow.activeChangeCurrent workflow.afterUpdate Called when someone updates an existing workflow. workflow.open workflowRun.runError workflowRun.runWorkflow Called when a workflow executes. workflowSettings.dialogVisibleChanged workflowSettings.saveSettings Called when someone saves the settings of a workflow. Registering hooks # You can set hooks by loading the hooks script on the page. One way to do this is by creating a hooks file in the project and adding a script tag in your editor-ui/public/index.html file: 1 < script src = "frontend-hooks.js" ></ script > Frontend hook files # Frontend external hook files are regular JavaScript files which have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 window . n8nExternalHooks = { nodeView : { mount : [ function ( store , meta ) { // do something }, ], createNodeActiveChanged : [ function ( store , meta ) { // do something }, function ( store , meta ) { // do something else }, ], addNodeButton : [ function ( store , meta ) { // do something }, ], }, }; Frontend hook functions # You can define multiple hook functions per hook. Each hook function is invoked with the following arguments arguments: store : The Vuex store object. You can use this to change or get data from the store. metadata : The object that contains any data provided by the hook. To see what's passed, search for the hook in the editor-ui package. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/embed/configuration/#available-hooks

Configuration # Feature availability Embed requires an embed license. For more information about when to use Embed, as well as costs and licensing processes, refer to Embed on the n8n website. Authentication # You can secure n8n by setting up User management , n8n's built-in authentication feature. n8n supports LDAP and SAML . Credential overwrites # To offer OAuth login to users, it's possible to overwrite credentials on a global basis. This credential data isn't visible to users but the backend uses it automatically. In the Editor UI, n8n hides all overwritten fields by default. This means that users are able to authenticate using OAuth by pressing the "connect" button on the credentials. n8n offers two ways to apply credential overwrites: using Environment Variable and using the REST API. Using environment variables # You can set credential overwrites using environment variable by setting the CREDENTIALS_OVERWRITE_DATA to { CREDENTIAL_NAME: { PARAMETER: VALUE }} . Warning Even though this is possible, it isn't recommended. Environment variables aren't protected in n8n, so the data can leak to users. Using REST APIs # The recommended way is to load the data using a custom REST endpoint. Set the CREDENTIALS_OVERWRITE_ENDPOINT to a path under which this endpoint should be made available. Note The endpoints can be called just one at a time for security reasons. For example: Activate the endpoint by setting the environment variable in the environment n8n runs under: 1 export CREDENTIALS_OVERWRITE_ENDPOINT = send-credentials A JSON file with the credentials to overwrite is then needed. For example, a oauth-credentials.json file to overwrite credentials for Asana and GitHub could look like this: 1 2 3 4 5 6 7 8 9 10 { "asanaOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" }, "githubOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" } } Then apply it to the instance by sending it using curl: 1 curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials Note There are cases when credentials are based on others. For example, the googleSheetsOAuth2Api extends the googleOAuth2Api . In this case, you can set parameters on the parent credentials ( googleOAuth2Api ) for all child-credentials ( googleSheetsOAuth2Api ) to use. Environment variables # n8n has many environment variables you can configure. Here are the most relevant environment variables for your hosted solution: Variable Type Default Description EXECUTIONS_TIMEOUT Number -1 Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX . Set EXECUTIONS_TIMEOUT to -1 to disable. EXECUTIONS_DATA_PRUNE Boolean true Whether to delete data of past executions on a rolling basis. EXECUTIONS_DATA_MAX_AGE Number 336 The execution age (in hours) before it's deleted. EXECUTIONS_DATA_PRUNE_MAX_COUNT Number 10000 Maximum number of executions to keep in the database. 0 = no limit NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODES_INCLUDE Array of strings - Specify which nodes to load. N8N_TEMPLATES_ENABLED Boolean true Enable workflow templates (true) or disable (false). N8N_TEMPLATES_HOST String https://api.n8n.io Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information. Backend hooks # It's possible to define external hooks that n8n executes whenever a specific operation runs. You can use these, for example, to log data, change data, or forbid an action by throwing an error. Available hooks # Hook Arguments Description credentials.create [credentialData: ICredentialsDb] Called before new credentials get created. Use to restrict the number of credentials. credentials.delete [id: credentialId] Called before credentials get deleted. credentials.update [credentialData: ICredentialsDb] Called before existing credentials are saved. frontend.settings [frontendSettings: IN8nUISettings] Gets called on n8n startup. Allows you to, for example, overwrite frontend data like the displayed OAuth URL. n8n.ready [app: App] Called once n8n is ready. Use to, for example, register custom API endpoints. n8n.stop Called when an n8n process gets stopped. Allows you to save some process data. oauth1.authenticate [oAuthOptions: clientOAuth1.Options, oauthRequestData: {oauth_callback: string}] Called before an OAuth1 authentication. Use to overwrite an OAuth callback URL. oauth2.callback [oAuth2Parameters: {clientId: string, clientSecret: string \| undefined, accessTokenUri: string, authorizationUri: string, redirectUri: string, scopes: string[]}] Called in an OAuth2 callback. Use to overwrite an OAuth callback URL. workflow.activate [workflowData: IWorkflowDb] Called before a workflow gets activated. Use to restrict the number of active workflows. workflow.afterDelete [workflowId: string] Called after a workflow gets deleted. workflow.afterUpdate [workflowData: IWorkflowBase] Called after an existing workflow gets saved. workflow.create [workflowData: IWorkflowBase] Called before a workflow gets created. Use to restrict the number of saved workflows. workflow.delete [workflowId: string] Called before a workflow gets delete. workflow.postExecute [run: IRun, workflowData: IWorkflowBase] Called after a workflow gets executed. workflow.preExecute [workflow: Workflow: mode: WorkflowExecuteMode] Called before a workflow gets executed. Allows you to count or limit the number of workflow executions. workflow.update [workflowData: IWorkflowBase] Called before an existing workflow gets saved. Registering hooks # Set hooks by registering a hook file that contains the hook functions. To register a hook, set the environment variable EXTERNAL_HOOK_FILES . You can set the variable to a single file: EXTERNAL_HOOK_FILES=/data/hook.js Or to contain multiple files separated by a semicolon: EXTERNAL_HOOK_FILES=/data/hook1.js;/data/hook2.js Backend hook files # Hook files are regular JavaScript files that have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { "frontend" : { "settings" : [ async function ( settings ) { settings . oauthCallbackUrls . oauth1 = 'https://n8n.example.com/oauth1/callback' ; settings . oauthCallbackUrls . oauth2 = 'https://n8n.example.com/oauth2/callback' ; } ] }, "workflow" : { "activate" : [ async function ( workflowData ) { const activeWorkflows = await this . dbCollections . Workflow . count ({ active : true }); if ( activeWorkflows > 1 ) { throw new Error ( 'Active workflow limit reached.' ); } } ] } } Backend hook functions # A hook or a hook file can contain multiple hook functions, with all functions executed one after another. If the parameters of the hook function are objects, it's possible to change the data of that parameter to change the behavior of n8n. You can also access the database in any hook function using this.dbCollections (refer to the code sample in Backend hook files . Frontend external hooks # Like backend external hooks, it's possible to define external hooks in the frontend code that get executed by n8n whenever a user performs a specific operation. You can use them, for example, to log data and change data. Available hooks # Hook Description credentialsEdit.credentialTypeChanged Called when an existing credential's type changes. credentials.create Called when someone creates a new credential. credentialsList.dialogVisibleChanged dataDisplay.nodeTypeChanged dataDisplay.onDocumentationUrlClick Called when someone selects the help documentation link. execution.open Called when an existing execution opens. executionsList.openDialog Called when someone selects an execution from existing Workflow Executions. expressionEdit.itemSelected expressionEdit.dialogVisibleChanged nodeCreateList.filteredNodeTypesComputed nodeCreateList.nodeFilterChanged Called when someone makes any changes to the node panel filter. nodeCreateList.selectedTypeChanged nodeCreateList.mounted nodeCreateList.destroyed nodeSettings.credentialSelected nodeSettings.valueChanged nodeView.createNodeActiveChanged nodeView.addNodeButton nodeView.createNodeActiveChanged nodeView.mount pushConnection.executionFinished showMessage.showError runData.displayModeChanged workflow.activeChange workflow.activeChangeCurrent workflow.afterUpdate Called when someone updates an existing workflow. workflow.open workflowRun.runError workflowRun.runWorkflow Called when a workflow executes. workflowSettings.dialogVisibleChanged workflowSettings.saveSettings Called when someone saves the settings of a workflow. Registering hooks # You can set hooks by loading the hooks script on the page. One way to do this is by creating a hooks file in the project and adding a script tag in your editor-ui/public/index.html file: 1 < script src = "frontend-hooks.js" ></ script > Frontend hook files # Frontend external hook files are regular JavaScript files which have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 window . n8nExternalHooks = { nodeView : { mount : [ function ( store , meta ) { // do something }, ], createNodeActiveChanged : [ function ( store , meta ) { // do something }, function ( store , meta ) { // do something else }, ], addNodeButton : [ function ( store , meta ) { // do something }, ], }, }; Frontend hook functions # You can define multiple hook functions per hook. Each hook function is invoked with the following arguments arguments: store : The Vuex store object. You can use this to change or get data from the store. metadata : The object that contains any data provided by the hook. To see what's passed, search for the hook in the editor-ui package. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/embed/configuration/#frontend-external-hooks

Configuration # Feature availability Embed requires an embed license. For more information about when to use Embed, as well as costs and licensing processes, refer to Embed on the n8n website. Authentication # You can secure n8n by setting up User management , n8n's built-in authentication feature. n8n supports LDAP and SAML . Credential overwrites # To offer OAuth login to users, it's possible to overwrite credentials on a global basis. This credential data isn't visible to users but the backend uses it automatically. In the Editor UI, n8n hides all overwritten fields by default. This means that users are able to authenticate using OAuth by pressing the "connect" button on the credentials. n8n offers two ways to apply credential overwrites: using Environment Variable and using the REST API. Using environment variables # You can set credential overwrites using environment variable by setting the CREDENTIALS_OVERWRITE_DATA to { CREDENTIAL_NAME: { PARAMETER: VALUE }} . Warning Even though this is possible, it isn't recommended. Environment variables aren't protected in n8n, so the data can leak to users. Using REST APIs # The recommended way is to load the data using a custom REST endpoint. Set the CREDENTIALS_OVERWRITE_ENDPOINT to a path under which this endpoint should be made available. Note The endpoints can be called just one at a time for security reasons. For example: Activate the endpoint by setting the environment variable in the environment n8n runs under: 1 export CREDENTIALS_OVERWRITE_ENDPOINT = send-credentials A JSON file with the credentials to overwrite is then needed. For example, a oauth-credentials.json file to overwrite credentials for Asana and GitHub could look like this: 1 2 3 4 5 6 7 8 9 10 { "asanaOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" }, "githubOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" } } Then apply it to the instance by sending it using curl: 1 curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials Note There are cases when credentials are based on others. For example, the googleSheetsOAuth2Api extends the googleOAuth2Api . In this case, you can set parameters on the parent credentials ( googleOAuth2Api ) for all child-credentials ( googleSheetsOAuth2Api ) to use. Environment variables # n8n has many environment variables you can configure. Here are the most relevant environment variables for your hosted solution: Variable Type Default Description EXECUTIONS_TIMEOUT Number -1 Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX . Set EXECUTIONS_TIMEOUT to -1 to disable. EXECUTIONS_DATA_PRUNE Boolean true Whether to delete data of past executions on a rolling basis. EXECUTIONS_DATA_MAX_AGE Number 336 The execution age (in hours) before it's deleted. EXECUTIONS_DATA_PRUNE_MAX_COUNT Number 10000 Maximum number of executions to keep in the database. 0 = no limit NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODES_INCLUDE Array of strings - Specify which nodes to load. N8N_TEMPLATES_ENABLED Boolean true Enable workflow templates (true) or disable (false). N8N_TEMPLATES_HOST String https://api.n8n.io Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information. Backend hooks # It's possible to define external hooks that n8n executes whenever a specific operation runs. You can use these, for example, to log data, change data, or forbid an action by throwing an error. Available hooks # Hook Arguments Description credentials.create [credentialData: ICredentialsDb] Called before new credentials get created. Use to restrict the number of credentials. credentials.delete [id: credentialId] Called before credentials get deleted. credentials.update [credentialData: ICredentialsDb] Called before existing credentials are saved. frontend.settings [frontendSettings: IN8nUISettings] Gets called on n8n startup. Allows you to, for example, overwrite frontend data like the displayed OAuth URL. n8n.ready [app: App] Called once n8n is ready. Use to, for example, register custom API endpoints. n8n.stop Called when an n8n process gets stopped. Allows you to save some process data. oauth1.authenticate [oAuthOptions: clientOAuth1.Options, oauthRequestData: {oauth_callback: string}] Called before an OAuth1 authentication. Use to overwrite an OAuth callback URL. oauth2.callback [oAuth2Parameters: {clientId: string, clientSecret: string \| undefined, accessTokenUri: string, authorizationUri: string, redirectUri: string, scopes: string[]}] Called in an OAuth2 callback. Use to overwrite an OAuth callback URL. workflow.activate [workflowData: IWorkflowDb] Called before a workflow gets activated. Use to restrict the number of active workflows. workflow.afterDelete [workflowId: string] Called after a workflow gets deleted. workflow.afterUpdate [workflowData: IWorkflowBase] Called after an existing workflow gets saved. workflow.create [workflowData: IWorkflowBase] Called before a workflow gets created. Use to restrict the number of saved workflows. workflow.delete [workflowId: string] Called before a workflow gets delete. workflow.postExecute [run: IRun, workflowData: IWorkflowBase] Called after a workflow gets executed. workflow.preExecute [workflow: Workflow: mode: WorkflowExecuteMode] Called before a workflow gets executed. Allows you to count or limit the number of workflow executions. workflow.update [workflowData: IWorkflowBase] Called before an existing workflow gets saved. Registering hooks # Set hooks by registering a hook file that contains the hook functions. To register a hook, set the environment variable EXTERNAL_HOOK_FILES . You can set the variable to a single file: EXTERNAL_HOOK_FILES=/data/hook.js Or to contain multiple files separated by a semicolon: EXTERNAL_HOOK_FILES=/data/hook1.js;/data/hook2.js Backend hook files # Hook files are regular JavaScript files that have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { "frontend" : { "settings" : [ async function ( settings ) { settings . oauthCallbackUrls . oauth1 = 'https://n8n.example.com/oauth1/callback' ; settings . oauthCallbackUrls . oauth2 = 'https://n8n.example.com/oauth2/callback' ; } ] }, "workflow" : { "activate" : [ async function ( workflowData ) { const activeWorkflows = await this . dbCollections . Workflow . count ({ active : true }); if ( activeWorkflows > 1 ) { throw new Error ( 'Active workflow limit reached.' ); } } ] } } Backend hook functions # A hook or a hook file can contain multiple hook functions, with all functions executed one after another. If the parameters of the hook function are objects, it's possible to change the data of that parameter to change the behavior of n8n. You can also access the database in any hook function using this.dbCollections (refer to the code sample in Backend hook files . Frontend external hooks # Like backend external hooks, it's possible to define external hooks in the frontend code that get executed by n8n whenever a user performs a specific operation. You can use them, for example, to log data and change data. Available hooks # Hook Description credentialsEdit.credentialTypeChanged Called when an existing credential's type changes. credentials.create Called when someone creates a new credential. credentialsList.dialogVisibleChanged dataDisplay.nodeTypeChanged dataDisplay.onDocumentationUrlClick Called when someone selects the help documentation link. execution.open Called when an existing execution opens. executionsList.openDialog Called when someone selects an execution from existing Workflow Executions. expressionEdit.itemSelected expressionEdit.dialogVisibleChanged nodeCreateList.filteredNodeTypesComputed nodeCreateList.nodeFilterChanged Called when someone makes any changes to the node panel filter. nodeCreateList.selectedTypeChanged nodeCreateList.mounted nodeCreateList.destroyed nodeSettings.credentialSelected nodeSettings.valueChanged nodeView.createNodeActiveChanged nodeView.addNodeButton nodeView.createNodeActiveChanged nodeView.mount pushConnection.executionFinished showMessage.showError runData.displayModeChanged workflow.activeChange workflow.activeChangeCurrent workflow.afterUpdate Called when someone updates an existing workflow. workflow.open workflowRun.runError workflowRun.runWorkflow Called when a workflow executes. workflowSettings.dialogVisibleChanged workflowSettings.saveSettings Called when someone saves the settings of a workflow. Registering hooks # You can set hooks by loading the hooks script on the page. One way to do this is by creating a hooks file in the project and adding a script tag in your editor-ui/public/index.html file: 1 < script src = "frontend-hooks.js" ></ script > Frontend hook files # Frontend external hook files are regular JavaScript files which have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 window . n8nExternalHooks = { nodeView : { mount : [ function ( store , meta ) { // do something }, ], createNodeActiveChanged : [ function ( store , meta ) { // do something }, function ( store , meta ) { // do something else }, ], addNodeButton : [ function ( store , meta ) { // do something }, ], }, }; Frontend hook functions # You can define multiple hook functions per hook. Each hook function is invoked with the following arguments arguments: store : The Vuex store object. You can use this to change or get data from the store. metadata : The object that contains any data provided by the hook. To see what's passed, search for the hook in the editor-ui package. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/embed/configuration/#frontend-hook-files

Configuration # Feature availability Embed requires an embed license. For more information about when to use Embed, as well as costs and licensing processes, refer to Embed on the n8n website. Authentication # You can secure n8n by setting up User management , n8n's built-in authentication feature. n8n supports LDAP and SAML . Credential overwrites # To offer OAuth login to users, it's possible to overwrite credentials on a global basis. This credential data isn't visible to users but the backend uses it automatically. In the Editor UI, n8n hides all overwritten fields by default. This means that users are able to authenticate using OAuth by pressing the "connect" button on the credentials. n8n offers two ways to apply credential overwrites: using Environment Variable and using the REST API. Using environment variables # You can set credential overwrites using environment variable by setting the CREDENTIALS_OVERWRITE_DATA to { CREDENTIAL_NAME: { PARAMETER: VALUE }} . Warning Even though this is possible, it isn't recommended. Environment variables aren't protected in n8n, so the data can leak to users. Using REST APIs # The recommended way is to load the data using a custom REST endpoint. Set the CREDENTIALS_OVERWRITE_ENDPOINT to a path under which this endpoint should be made available. Note The endpoints can be called just one at a time for security reasons. For example: Activate the endpoint by setting the environment variable in the environment n8n runs under: 1 export CREDENTIALS_OVERWRITE_ENDPOINT = send-credentials A JSON file with the credentials to overwrite is then needed. For example, a oauth-credentials.json file to overwrite credentials for Asana and GitHub could look like this: 1 2 3 4 5 6 7 8 9 10 { "asanaOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" }, "githubOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" } } Then apply it to the instance by sending it using curl: 1 curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials Note There are cases when credentials are based on others. For example, the googleSheetsOAuth2Api extends the googleOAuth2Api . In this case, you can set parameters on the parent credentials ( googleOAuth2Api ) for all child-credentials ( googleSheetsOAuth2Api ) to use. Environment variables # n8n has many environment variables you can configure. Here are the most relevant environment variables for your hosted solution: Variable Type Default Description EXECUTIONS_TIMEOUT Number -1 Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX . Set EXECUTIONS_TIMEOUT to -1 to disable. EXECUTIONS_DATA_PRUNE Boolean true Whether to delete data of past executions on a rolling basis. EXECUTIONS_DATA_MAX_AGE Number 336 The execution age (in hours) before it's deleted. EXECUTIONS_DATA_PRUNE_MAX_COUNT Number 10000 Maximum number of executions to keep in the database. 0 = no limit NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODES_INCLUDE Array of strings - Specify which nodes to load. N8N_TEMPLATES_ENABLED Boolean true Enable workflow templates (true) or disable (false). N8N_TEMPLATES_HOST String https://api.n8n.io Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information. Backend hooks # It's possible to define external hooks that n8n executes whenever a specific operation runs. You can use these, for example, to log data, change data, or forbid an action by throwing an error. Available hooks # Hook Arguments Description credentials.create [credentialData: ICredentialsDb] Called before new credentials get created. Use to restrict the number of credentials. credentials.delete [id: credentialId] Called before credentials get deleted. credentials.update [credentialData: ICredentialsDb] Called before existing credentials are saved. frontend.settings [frontendSettings: IN8nUISettings] Gets called on n8n startup. Allows you to, for example, overwrite frontend data like the displayed OAuth URL. n8n.ready [app: App] Called once n8n is ready. Use to, for example, register custom API endpoints. n8n.stop Called when an n8n process gets stopped. Allows you to save some process data. oauth1.authenticate [oAuthOptions: clientOAuth1.Options, oauthRequestData: {oauth_callback: string}] Called before an OAuth1 authentication. Use to overwrite an OAuth callback URL. oauth2.callback [oAuth2Parameters: {clientId: string, clientSecret: string \| undefined, accessTokenUri: string, authorizationUri: string, redirectUri: string, scopes: string[]}] Called in an OAuth2 callback. Use to overwrite an OAuth callback URL. workflow.activate [workflowData: IWorkflowDb] Called before a workflow gets activated. Use to restrict the number of active workflows. workflow.afterDelete [workflowId: string] Called after a workflow gets deleted. workflow.afterUpdate [workflowData: IWorkflowBase] Called after an existing workflow gets saved. workflow.create [workflowData: IWorkflowBase] Called before a workflow gets created. Use to restrict the number of saved workflows. workflow.delete [workflowId: string] Called before a workflow gets delete. workflow.postExecute [run: IRun, workflowData: IWorkflowBase] Called after a workflow gets executed. workflow.preExecute [workflow: Workflow: mode: WorkflowExecuteMode] Called before a workflow gets executed. Allows you to count or limit the number of workflow executions. workflow.update [workflowData: IWorkflowBase] Called before an existing workflow gets saved. Registering hooks # Set hooks by registering a hook file that contains the hook functions. To register a hook, set the environment variable EXTERNAL_HOOK_FILES . You can set the variable to a single file: EXTERNAL_HOOK_FILES=/data/hook.js Or to contain multiple files separated by a semicolon: EXTERNAL_HOOK_FILES=/data/hook1.js;/data/hook2.js Backend hook files # Hook files are regular JavaScript files that have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { "frontend" : { "settings" : [ async function ( settings ) { settings . oauthCallbackUrls . oauth1 = 'https://n8n.example.com/oauth1/callback' ; settings . oauthCallbackUrls . oauth2 = 'https://n8n.example.com/oauth2/callback' ; } ] }, "workflow" : { "activate" : [ async function ( workflowData ) { const activeWorkflows = await this . dbCollections . Workflow . count ({ active : true }); if ( activeWorkflows > 1 ) { throw new Error ( 'Active workflow limit reached.' ); } } ] } } Backend hook functions # A hook or a hook file can contain multiple hook functions, with all functions executed one after another. If the parameters of the hook function are objects, it's possible to change the data of that parameter to change the behavior of n8n. You can also access the database in any hook function using this.dbCollections (refer to the code sample in Backend hook files . Frontend external hooks # Like backend external hooks, it's possible to define external hooks in the frontend code that get executed by n8n whenever a user performs a specific operation. You can use them, for example, to log data and change data. Available hooks # Hook Description credentialsEdit.credentialTypeChanged Called when an existing credential's type changes. credentials.create Called when someone creates a new credential. credentialsList.dialogVisibleChanged dataDisplay.nodeTypeChanged dataDisplay.onDocumentationUrlClick Called when someone selects the help documentation link. execution.open Called when an existing execution opens. executionsList.openDialog Called when someone selects an execution from existing Workflow Executions. expressionEdit.itemSelected expressionEdit.dialogVisibleChanged nodeCreateList.filteredNodeTypesComputed nodeCreateList.nodeFilterChanged Called when someone makes any changes to the node panel filter. nodeCreateList.selectedTypeChanged nodeCreateList.mounted nodeCreateList.destroyed nodeSettings.credentialSelected nodeSettings.valueChanged nodeView.createNodeActiveChanged nodeView.addNodeButton nodeView.createNodeActiveChanged nodeView.mount pushConnection.executionFinished showMessage.showError runData.displayModeChanged workflow.activeChange workflow.activeChangeCurrent workflow.afterUpdate Called when someone updates an existing workflow. workflow.open workflowRun.runError workflowRun.runWorkflow Called when a workflow executes. workflowSettings.dialogVisibleChanged workflowSettings.saveSettings Called when someone saves the settings of a workflow. Registering hooks # You can set hooks by loading the hooks script on the page. One way to do this is by creating a hooks file in the project and adding a script tag in your editor-ui/public/index.html file: 1 < script src = "frontend-hooks.js" ></ script > Frontend hook files # Frontend external hook files are regular JavaScript files which have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 window . n8nExternalHooks = { nodeView : { mount : [ function ( store , meta ) { // do something }, ], createNodeActiveChanged : [ function ( store , meta ) { // do something }, function ( store , meta ) { // do something else }, ], addNodeButton : [ function ( store , meta ) { // do something }, ], }, }; Frontend hook functions # You can define multiple hook functions per hook. Each hook function is invoked with the following arguments arguments: store : The Vuex store object. You can use this to change or get data from the store. metadata : The object that contains any data provided by the hook. To see what's passed, search for the hook in the editor-ui package. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/embed/configuration/#authentication

Configuration # Feature availability Embed requires an embed license. For more information about when to use Embed, as well as costs and licensing processes, refer to Embed on the n8n website. Authentication # You can secure n8n by setting up User management , n8n's built-in authentication feature. n8n supports LDAP and SAML . Credential overwrites # To offer OAuth login to users, it's possible to overwrite credentials on a global basis. This credential data isn't visible to users but the backend uses it automatically. In the Editor UI, n8n hides all overwritten fields by default. This means that users are able to authenticate using OAuth by pressing the "connect" button on the credentials. n8n offers two ways to apply credential overwrites: using Environment Variable and using the REST API. Using environment variables # You can set credential overwrites using environment variable by setting the CREDENTIALS_OVERWRITE_DATA to { CREDENTIAL_NAME: { PARAMETER: VALUE }} . Warning Even though this is possible, it isn't recommended. Environment variables aren't protected in n8n, so the data can leak to users. Using REST APIs # The recommended way is to load the data using a custom REST endpoint. Set the CREDENTIALS_OVERWRITE_ENDPOINT to a path under which this endpoint should be made available. Note The endpoints can be called just one at a time for security reasons. For example: Activate the endpoint by setting the environment variable in the environment n8n runs under: 1 export CREDENTIALS_OVERWRITE_ENDPOINT = send-credentials A JSON file with the credentials to overwrite is then needed. For example, a oauth-credentials.json file to overwrite credentials for Asana and GitHub could look like this: 1 2 3 4 5 6 7 8 9 10 { "asanaOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" }, "githubOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" } } Then apply it to the instance by sending it using curl: 1 curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials Note There are cases when credentials are based on others. For example, the googleSheetsOAuth2Api extends the googleOAuth2Api . In this case, you can set parameters on the parent credentials ( googleOAuth2Api ) for all child-credentials ( googleSheetsOAuth2Api ) to use. Environment variables # n8n has many environment variables you can configure. Here are the most relevant environment variables for your hosted solution: Variable Type Default Description EXECUTIONS_TIMEOUT Number -1 Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX . Set EXECUTIONS_TIMEOUT to -1 to disable. EXECUTIONS_DATA_PRUNE Boolean true Whether to delete data of past executions on a rolling basis. EXECUTIONS_DATA_MAX_AGE Number 336 The execution age (in hours) before it's deleted. EXECUTIONS_DATA_PRUNE_MAX_COUNT Number 10000 Maximum number of executions to keep in the database. 0 = no limit NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODES_INCLUDE Array of strings - Specify which nodes to load. N8N_TEMPLATES_ENABLED Boolean true Enable workflow templates (true) or disable (false). N8N_TEMPLATES_HOST String https://api.n8n.io Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information. Backend hooks # It's possible to define external hooks that n8n executes whenever a specific operation runs. You can use these, for example, to log data, change data, or forbid an action by throwing an error. Available hooks # Hook Arguments Description credentials.create [credentialData: ICredentialsDb] Called before new credentials get created. Use to restrict the number of credentials. credentials.delete [id: credentialId] Called before credentials get deleted. credentials.update [credentialData: ICredentialsDb] Called before existing credentials are saved. frontend.settings [frontendSettings: IN8nUISettings] Gets called on n8n startup. Allows you to, for example, overwrite frontend data like the displayed OAuth URL. n8n.ready [app: App] Called once n8n is ready. Use to, for example, register custom API endpoints. n8n.stop Called when an n8n process gets stopped. Allows you to save some process data. oauth1.authenticate [oAuthOptions: clientOAuth1.Options, oauthRequestData: {oauth_callback: string}] Called before an OAuth1 authentication. Use to overwrite an OAuth callback URL. oauth2.callback [oAuth2Parameters: {clientId: string, clientSecret: string \| undefined, accessTokenUri: string, authorizationUri: string, redirectUri: string, scopes: string[]}] Called in an OAuth2 callback. Use to overwrite an OAuth callback URL. workflow.activate [workflowData: IWorkflowDb] Called before a workflow gets activated. Use to restrict the number of active workflows. workflow.afterDelete [workflowId: string] Called after a workflow gets deleted. workflow.afterUpdate [workflowData: IWorkflowBase] Called after an existing workflow gets saved. workflow.create [workflowData: IWorkflowBase] Called before a workflow gets created. Use to restrict the number of saved workflows. workflow.delete [workflowId: string] Called before a workflow gets delete. workflow.postExecute [run: IRun, workflowData: IWorkflowBase] Called after a workflow gets executed. workflow.preExecute [workflow: Workflow: mode: WorkflowExecuteMode] Called before a workflow gets executed. Allows you to count or limit the number of workflow executions. workflow.update [workflowData: IWorkflowBase] Called before an existing workflow gets saved. Registering hooks # Set hooks by registering a hook file that contains the hook functions. To register a hook, set the environment variable EXTERNAL_HOOK_FILES . You can set the variable to a single file: EXTERNAL_HOOK_FILES=/data/hook.js Or to contain multiple files separated by a semicolon: EXTERNAL_HOOK_FILES=/data/hook1.js;/data/hook2.js Backend hook files # Hook files are regular JavaScript files that have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { "frontend" : { "settings" : [ async function ( settings ) { settings . oauthCallbackUrls . oauth1 = 'https://n8n.example.com/oauth1/callback' ; settings . oauthCallbackUrls . oauth2 = 'https://n8n.example.com/oauth2/callback' ; } ] }, "workflow" : { "activate" : [ async function ( workflowData ) { const activeWorkflows = await this . dbCollections . Workflow . count ({ active : true }); if ( activeWorkflows > 1 ) { throw new Error ( 'Active workflow limit reached.' ); } } ] } } Backend hook functions # A hook or a hook file can contain multiple hook functions, with all functions executed one after another. If the parameters of the hook function are objects, it's possible to change the data of that parameter to change the behavior of n8n. You can also access the database in any hook function using this.dbCollections (refer to the code sample in Backend hook files . Frontend external hooks # Like backend external hooks, it's possible to define external hooks in the frontend code that get executed by n8n whenever a user performs a specific operation. You can use them, for example, to log data and change data. Available hooks # Hook Description credentialsEdit.credentialTypeChanged Called when an existing credential's type changes. credentials.create Called when someone creates a new credential. credentialsList.dialogVisibleChanged dataDisplay.nodeTypeChanged dataDisplay.onDocumentationUrlClick Called when someone selects the help documentation link. execution.open Called when an existing execution opens. executionsList.openDialog Called when someone selects an execution from existing Workflow Executions. expressionEdit.itemSelected expressionEdit.dialogVisibleChanged nodeCreateList.filteredNodeTypesComputed nodeCreateList.nodeFilterChanged Called when someone makes any changes to the node panel filter. nodeCreateList.selectedTypeChanged nodeCreateList.mounted nodeCreateList.destroyed nodeSettings.credentialSelected nodeSettings.valueChanged nodeView.createNodeActiveChanged nodeView.addNodeButton nodeView.createNodeActiveChanged nodeView.mount pushConnection.executionFinished showMessage.showError runData.displayModeChanged workflow.activeChange workflow.activeChangeCurrent workflow.afterUpdate Called when someone updates an existing workflow. workflow.open workflowRun.runError workflowRun.runWorkflow Called when a workflow executes. workflowSettings.dialogVisibleChanged workflowSettings.saveSettings Called when someone saves the settings of a workflow. Registering hooks # You can set hooks by loading the hooks script on the page. One way to do this is by creating a hooks file in the project and adding a script tag in your editor-ui/public/index.html file: 1 < script src = "frontend-hooks.js" ></ script > Frontend hook files # Frontend external hook files are regular JavaScript files which have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 window . n8nExternalHooks = { nodeView : { mount : [ function ( store , meta ) { // do something }, ], createNodeActiveChanged : [ function ( store , meta ) { // do something }, function ( store , meta ) { // do something else }, ], addNodeButton : [ function ( store , meta ) { // do something }, ], }, }; Frontend hook functions # You can define multiple hook functions per hook. Each hook function is invoked with the following arguments arguments: store : The Vuex store object. You can use this to change or get data from the store. metadata : The object that contains any data provided by the hook. To see what's passed, search for the hook in the editor-ui package. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/embed/configuration/#backend-hooks

Configuration # Feature availability Embed requires an embed license. For more information about when to use Embed, as well as costs and licensing processes, refer to Embed on the n8n website. Authentication # You can secure n8n by setting up User management , n8n's built-in authentication feature. n8n supports LDAP and SAML . Credential overwrites # To offer OAuth login to users, it's possible to overwrite credentials on a global basis. This credential data isn't visible to users but the backend uses it automatically. In the Editor UI, n8n hides all overwritten fields by default. This means that users are able to authenticate using OAuth by pressing the "connect" button on the credentials. n8n offers two ways to apply credential overwrites: using Environment Variable and using the REST API. Using environment variables # You can set credential overwrites using environment variable by setting the CREDENTIALS_OVERWRITE_DATA to { CREDENTIAL_NAME: { PARAMETER: VALUE }} . Warning Even though this is possible, it isn't recommended. Environment variables aren't protected in n8n, so the data can leak to users. Using REST APIs # The recommended way is to load the data using a custom REST endpoint. Set the CREDENTIALS_OVERWRITE_ENDPOINT to a path under which this endpoint should be made available. Note The endpoints can be called just one at a time for security reasons. For example: Activate the endpoint by setting the environment variable in the environment n8n runs under: 1 export CREDENTIALS_OVERWRITE_ENDPOINT = send-credentials A JSON file with the credentials to overwrite is then needed. For example, a oauth-credentials.json file to overwrite credentials for Asana and GitHub could look like this: 1 2 3 4 5 6 7 8 9 10 { "asanaOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" }, "githubOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" } } Then apply it to the instance by sending it using curl: 1 curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials Note There are cases when credentials are based on others. For example, the googleSheetsOAuth2Api extends the googleOAuth2Api . In this case, you can set parameters on the parent credentials ( googleOAuth2Api ) for all child-credentials ( googleSheetsOAuth2Api ) to use. Environment variables # n8n has many environment variables you can configure. Here are the most relevant environment variables for your hosted solution: Variable Type Default Description EXECUTIONS_TIMEOUT Number -1 Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX . Set EXECUTIONS_TIMEOUT to -1 to disable. EXECUTIONS_DATA_PRUNE Boolean true Whether to delete data of past executions on a rolling basis. EXECUTIONS_DATA_MAX_AGE Number 336 The execution age (in hours) before it's deleted. EXECUTIONS_DATA_PRUNE_MAX_COUNT Number 10000 Maximum number of executions to keep in the database. 0 = no limit NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODES_INCLUDE Array of strings - Specify which nodes to load. N8N_TEMPLATES_ENABLED Boolean true Enable workflow templates (true) or disable (false). N8N_TEMPLATES_HOST String https://api.n8n.io Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information. Backend hooks # It's possible to define external hooks that n8n executes whenever a specific operation runs. You can use these, for example, to log data, change data, or forbid an action by throwing an error. Available hooks # Hook Arguments Description credentials.create [credentialData: ICredentialsDb] Called before new credentials get created. Use to restrict the number of credentials. credentials.delete [id: credentialId] Called before credentials get deleted. credentials.update [credentialData: ICredentialsDb] Called before existing credentials are saved. frontend.settings [frontendSettings: IN8nUISettings] Gets called on n8n startup. Allows you to, for example, overwrite frontend data like the displayed OAuth URL. n8n.ready [app: App] Called once n8n is ready. Use to, for example, register custom API endpoints. n8n.stop Called when an n8n process gets stopped. Allows you to save some process data. oauth1.authenticate [oAuthOptions: clientOAuth1.Options, oauthRequestData: {oauth_callback: string}] Called before an OAuth1 authentication. Use to overwrite an OAuth callback URL. oauth2.callback [oAuth2Parameters: {clientId: string, clientSecret: string \| undefined, accessTokenUri: string, authorizationUri: string, redirectUri: string, scopes: string[]}] Called in an OAuth2 callback. Use to overwrite an OAuth callback URL. workflow.activate [workflowData: IWorkflowDb] Called before a workflow gets activated. Use to restrict the number of active workflows. workflow.afterDelete [workflowId: string] Called after a workflow gets deleted. workflow.afterUpdate [workflowData: IWorkflowBase] Called after an existing workflow gets saved. workflow.create [workflowData: IWorkflowBase] Called before a workflow gets created. Use to restrict the number of saved workflows. workflow.delete [workflowId: string] Called before a workflow gets delete. workflow.postExecute [run: IRun, workflowData: IWorkflowBase] Called after a workflow gets executed. workflow.preExecute [workflow: Workflow: mode: WorkflowExecuteMode] Called before a workflow gets executed. Allows you to count or limit the number of workflow executions. workflow.update [workflowData: IWorkflowBase] Called before an existing workflow gets saved. Registering hooks # Set hooks by registering a hook file that contains the hook functions. To register a hook, set the environment variable EXTERNAL_HOOK_FILES . You can set the variable to a single file: EXTERNAL_HOOK_FILES=/data/hook.js Or to contain multiple files separated by a semicolon: EXTERNAL_HOOK_FILES=/data/hook1.js;/data/hook2.js Backend hook files # Hook files are regular JavaScript files that have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { "frontend" : { "settings" : [ async function ( settings ) { settings . oauthCallbackUrls . oauth1 = 'https://n8n.example.com/oauth1/callback' ; settings . oauthCallbackUrls . oauth2 = 'https://n8n.example.com/oauth2/callback' ; } ] }, "workflow" : { "activate" : [ async function ( workflowData ) { const activeWorkflows = await this . dbCollections . Workflow . count ({ active : true }); if ( activeWorkflows > 1 ) { throw new Error ( 'Active workflow limit reached.' ); } } ] } } Backend hook functions # A hook or a hook file can contain multiple hook functions, with all functions executed one after another. If the parameters of the hook function are objects, it's possible to change the data of that parameter to change the behavior of n8n. You can also access the database in any hook function using this.dbCollections (refer to the code sample in Backend hook files . Frontend external hooks # Like backend external hooks, it's possible to define external hooks in the frontend code that get executed by n8n whenever a user performs a specific operation. You can use them, for example, to log data and change data. Available hooks # Hook Description credentialsEdit.credentialTypeChanged Called when an existing credential's type changes. credentials.create Called when someone creates a new credential. credentialsList.dialogVisibleChanged dataDisplay.nodeTypeChanged dataDisplay.onDocumentationUrlClick Called when someone selects the help documentation link. execution.open Called when an existing execution opens. executionsList.openDialog Called when someone selects an execution from existing Workflow Executions. expressionEdit.itemSelected expressionEdit.dialogVisibleChanged nodeCreateList.filteredNodeTypesComputed nodeCreateList.nodeFilterChanged Called when someone makes any changes to the node panel filter. nodeCreateList.selectedTypeChanged nodeCreateList.mounted nodeCreateList.destroyed nodeSettings.credentialSelected nodeSettings.valueChanged nodeView.createNodeActiveChanged nodeView.addNodeButton nodeView.createNodeActiveChanged nodeView.mount pushConnection.executionFinished showMessage.showError runData.displayModeChanged workflow.activeChange workflow.activeChangeCurrent workflow.afterUpdate Called when someone updates an existing workflow. workflow.open workflowRun.runError workflowRun.runWorkflow Called when a workflow executes. workflowSettings.dialogVisibleChanged workflowSettings.saveSettings Called when someone saves the settings of a workflow. Registering hooks # You can set hooks by loading the hooks script on the page. One way to do this is by creating a hooks file in the project and adding a script tag in your editor-ui/public/index.html file: 1 < script src = "frontend-hooks.js" ></ script > Frontend hook files # Frontend external hook files are regular JavaScript files which have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 window . n8nExternalHooks = { nodeView : { mount : [ function ( store , meta ) { // do something }, ], createNodeActiveChanged : [ function ( store , meta ) { // do something }, function ( store , meta ) { // do something else }, ], addNodeButton : [ function ( store , meta ) { // do something }, ], }, }; Frontend hook functions # You can define multiple hook functions per hook. Each hook function is invoked with the following arguments arguments: store : The Vuex store object. You can use this to change or get data from the store. metadata : The object that contains any data provided by the hook. To see what's passed, search for the hook in the editor-ui package. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/embed/configuration/#available-hooks_1

Configuration # Feature availability Embed requires an embed license. For more information about when to use Embed, as well as costs and licensing processes, refer to Embed on the n8n website. Authentication # You can secure n8n by setting up User management , n8n's built-in authentication feature. n8n supports LDAP and SAML . Credential overwrites # To offer OAuth login to users, it's possible to overwrite credentials on a global basis. This credential data isn't visible to users but the backend uses it automatically. In the Editor UI, n8n hides all overwritten fields by default. This means that users are able to authenticate using OAuth by pressing the "connect" button on the credentials. n8n offers two ways to apply credential overwrites: using Environment Variable and using the REST API. Using environment variables # You can set credential overwrites using environment variable by setting the CREDENTIALS_OVERWRITE_DATA to { CREDENTIAL_NAME: { PARAMETER: VALUE }} . Warning Even though this is possible, it isn't recommended. Environment variables aren't protected in n8n, so the data can leak to users. Using REST APIs # The recommended way is to load the data using a custom REST endpoint. Set the CREDENTIALS_OVERWRITE_ENDPOINT to a path under which this endpoint should be made available. Note The endpoints can be called just one at a time for security reasons. For example: Activate the endpoint by setting the environment variable in the environment n8n runs under: 1 export CREDENTIALS_OVERWRITE_ENDPOINT = send-credentials A JSON file with the credentials to overwrite is then needed. For example, a oauth-credentials.json file to overwrite credentials for Asana and GitHub could look like this: 1 2 3 4 5 6 7 8 9 10 { "asanaOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" }, "githubOAuth2Api" : { "clientId" : "<id>" , "clientSecret" : "<secret>" } } Then apply it to the instance by sending it using curl: 1 curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials Note There are cases when credentials are based on others. For example, the googleSheetsOAuth2Api extends the googleOAuth2Api . In this case, you can set parameters on the parent credentials ( googleOAuth2Api ) for all child-credentials ( googleSheetsOAuth2Api ) to use. Environment variables # n8n has many environment variables you can configure. Here are the most relevant environment variables for your hosted solution: Variable Type Default Description EXECUTIONS_TIMEOUT Number -1 Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX . Set EXECUTIONS_TIMEOUT to -1 to disable. EXECUTIONS_DATA_PRUNE Boolean true Whether to delete data of past executions on a rolling basis. EXECUTIONS_DATA_MAX_AGE Number 336 The execution age (in hours) before it's deleted. EXECUTIONS_DATA_PRUNE_MAX_COUNT Number 10000 Maximum number of executions to keep in the database. 0 = no limit NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODES_INCLUDE Array of strings - Specify which nodes to load. N8N_TEMPLATES_ENABLED Boolean true Enable workflow templates (true) or disable (false). N8N_TEMPLATES_HOST String https://api.n8n.io Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information. Backend hooks # It's possible to define external hooks that n8n executes whenever a specific operation runs. You can use these, for example, to log data, change data, or forbid an action by throwing an error. Available hooks # Hook Arguments Description credentials.create [credentialData: ICredentialsDb] Called before new credentials get created. Use to restrict the number of credentials. credentials.delete [id: credentialId] Called before credentials get deleted. credentials.update [credentialData: ICredentialsDb] Called before existing credentials are saved. frontend.settings [frontendSettings: IN8nUISettings] Gets called on n8n startup. Allows you to, for example, overwrite frontend data like the displayed OAuth URL. n8n.ready [app: App] Called once n8n is ready. Use to, for example, register custom API endpoints. n8n.stop Called when an n8n process gets stopped. Allows you to save some process data. oauth1.authenticate [oAuthOptions: clientOAuth1.Options, oauthRequestData: {oauth_callback: string}] Called before an OAuth1 authentication. Use to overwrite an OAuth callback URL. oauth2.callback [oAuth2Parameters: {clientId: string, clientSecret: string \| undefined, accessTokenUri: string, authorizationUri: string, redirectUri: string, scopes: string[]}] Called in an OAuth2 callback. Use to overwrite an OAuth callback URL. workflow.activate [workflowData: IWorkflowDb] Called before a workflow gets activated. Use to restrict the number of active workflows. workflow.afterDelete [workflowId: string] Called after a workflow gets deleted. workflow.afterUpdate [workflowData: IWorkflowBase] Called after an existing workflow gets saved. workflow.create [workflowData: IWorkflowBase] Called before a workflow gets created. Use to restrict the number of saved workflows. workflow.delete [workflowId: string] Called before a workflow gets delete. workflow.postExecute [run: IRun, workflowData: IWorkflowBase] Called after a workflow gets executed. workflow.preExecute [workflow: Workflow: mode: WorkflowExecuteMode] Called before a workflow gets executed. Allows you to count or limit the number of workflow executions. workflow.update [workflowData: IWorkflowBase] Called before an existing workflow gets saved. Registering hooks # Set hooks by registering a hook file that contains the hook functions. To register a hook, set the environment variable EXTERNAL_HOOK_FILES . You can set the variable to a single file: EXTERNAL_HOOK_FILES=/data/hook.js Or to contain multiple files separated by a semicolon: EXTERNAL_HOOK_FILES=/data/hook1.js;/data/hook2.js Backend hook files # Hook files are regular JavaScript files that have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { "frontend" : { "settings" : [ async function ( settings ) { settings . oauthCallbackUrls . oauth1 = 'https://n8n.example.com/oauth1/callback' ; settings . oauthCallbackUrls . oauth2 = 'https://n8n.example.com/oauth2/callback' ; } ] }, "workflow" : { "activate" : [ async function ( workflowData ) { const activeWorkflows = await this . dbCollections . Workflow . count ({ active : true }); if ( activeWorkflows > 1 ) { throw new Error ( 'Active workflow limit reached.' ); } } ] } } Backend hook functions # A hook or a hook file can contain multiple hook functions, with all functions executed one after another. If the parameters of the hook function are objects, it's possible to change the data of that parameter to change the behavior of n8n. You can also access the database in any hook function using this.dbCollections (refer to the code sample in Backend hook files . Frontend external hooks # Like backend external hooks, it's possible to define external hooks in the frontend code that get executed by n8n whenever a user performs a specific operation. You can use them, for example, to log data and change data. Available hooks # Hook Description credentialsEdit.credentialTypeChanged Called when an existing credential's type changes. credentials.create Called when someone creates a new credential. credentialsList.dialogVisibleChanged dataDisplay.nodeTypeChanged dataDisplay.onDocumentationUrlClick Called when someone selects the help documentation link. execution.open Called when an existing execution opens. executionsList.openDialog Called when someone selects an execution from existing Workflow Executions. expressionEdit.itemSelected expressionEdit.dialogVisibleChanged nodeCreateList.filteredNodeTypesComputed nodeCreateList.nodeFilterChanged Called when someone makes any changes to the node panel filter. nodeCreateList.selectedTypeChanged nodeCreateList.mounted nodeCreateList.destroyed nodeSettings.credentialSelected nodeSettings.valueChanged nodeView.createNodeActiveChanged nodeView.addNodeButton nodeView.createNodeActiveChanged nodeView.mount pushConnection.executionFinished showMessage.showError runData.displayModeChanged workflow.activeChange workflow.activeChangeCurrent workflow.afterUpdate Called when someone updates an existing workflow. workflow.open workflowRun.runError workflowRun.runWorkflow Called when a workflow executes. workflowSettings.dialogVisibleChanged workflowSettings.saveSettings Called when someone saves the settings of a workflow. Registering hooks # You can set hooks by loading the hooks script on the page. One way to do this is by creating a hooks file in the project and adding a script tag in your editor-ui/public/index.html file: 1 < script src = "frontend-hooks.js" ></ script > Frontend hook files # Frontend external hook files are regular JavaScript files which have the following format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 window . n8nExternalHooks = { nodeView : { mount : [ function ( store , meta ) { // do something }, ], createNodeActiveChanged : [ function ( store , meta ) { // do something }, function ( store , meta ) { // do something else }, ], addNodeButton : [ function ( store , meta ) { // do something }, ], }, }; Frontend hook functions # You can define multiple hook functions per hook. Each hook function is invoked with the following arguments arguments: store : The Vuex store object. You can use this to change or get data from the store. metadata : The object that contains any data provided by the hook. To see what's passed, search for the hook in the editor-ui package. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/components/connections/

Connections # A connection establishes a link between nodes to route data through the workflow. A connection between two nodes passes data from one node's output to another node's input. Create a connection # To create a connection between two nodes, select the grey dot or Add node on the right side of a node and slide the arrow to the grey rectangle on the left side of the following node. Delete a connection # Hover over the connection, then select Delete . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/cookbook/code-node/console-log/

Output to the browser console with console.log() or print() in the Code node # You can use console.log() or print() in the Code node to help when writing and debugging your code. For help opening your browser console, refer to this guide by Balsamiq . console.log (JavaScript) # For technical information on console.log() , refer to the MDN developer docs . For example, copy the following code into a Code node, then open your console and run the node: 1 2 let a = "apple" ; console . log ( a ); print (Python) # For technical information on print() , refer to the Real Python's guide . For example, set your Code node Language to Python , copy the following code into the node, then open your console and run the node: 1 2 a = "apple" print ( a ) Handling an output of [object Object] # If the console displays [object Object] when you print, check the data type, then convert it as needed. To check the data type: 1 print ( type ( myData )) JsProxy # If type() outputs <class 'pyodide.ffi.JsProxy'> , you need to convert the JsProxy to a native Python object using to_py() . This occurs when working with data in the n8n node data structure, such as node inputs and outputs. For example, if you want to print the data from a previous node in the workflow: 1 2 3 4 5 6 previousNodeData = _ ( "<node-name>" ) . all (); for item in previousNodeData : # item is of type <class 'pyodide.ffi.JsProxy'> # You need to convert it to a Dict itemDict = item . json . to_py () print ( itemDict ) Refer to the Pyodide documentation on JsProxy for more information on this class. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/reference/contributing.html

How can you contribute? # There are a several ways in which you can contribute to n8n, depending on your skills and interests. Each form of contribution is valuable to us! Share some love: Review us # Star n8n on GitHub and Docker Hub . Follow us on Twitter , LinkedIn , and Facebook . Upvote n8n on AlternativeTo and Alternative.me . Add n8n to your stack on Stackshare . Write a review about n8n on G2 , Slant , and Capterra . Help out the community # You can participate in the forum and help the community members out with their questions. When sharing workflows in the community forum for debugging, use code blocks. Use triple backticks ``` to wrap the workflow JSON in a code block. The following video demonstrates the steps of sharing workflows on the community forum: Contribute a workflow template # You can submit your workflows to n8n's template library. n8n is working on a creator program, and developing a marketplace of templates. This is an ongoing project, and details are likely to change. Refer to n8n Creator hub for information on how to submit templates and become a creator. Build a node # Create an integration for a third party service. Check out the node creation docs for guidance on how to create and publish a community node. Contribute to the code # There are different ways in which you can contribute to the n8n code base: Fix issues reported on GitHub. The CONTRIBUTING guide will help you get your development environment ready in minutes. Add additional functionality to an existing third party integration. Add a new feature to n8n. Contribute to the docs # You can contribute to the n8n documentation, for example by documenting nodes or fixing issues. The repository for the docs is here and the guidelines for contributing to the docs are here . Contribute to the blog # You can write an article for the n8n blog . Your article can be, for example, a workflow tutorial , an opinion piece on automation, or some domain-specific automation guides . How to submit a post # n8n appreciates all contributions. Publishing a tutorial on your own site that supports the community is a great contribution. If you want n8n to highlight your post on the blog, follow these steps: Email your idea to marketing@n8n.io with the subject "Blog contribution: [Your Topic]." Submit your draft: Write your post in a Google Doc following the style guide . If your blog post includes example workflows, include the workflow JSON in a separate section at the end. For author credit, provide a second Google Doc with your full name, a short byline, and your image. n8n will use this to create your author page and credit you as the author of the post. Wait for feedback. We will respond if your draft fits with the blog's strategy and requirements. If you don't hear back within 30 days, it means we won't be moving forward with your blog post. Refer a candidate # Do you know someone who would be a great fit for one of our open positions ? Refer them to us! In return, we'll pay you €1,000 when the referral successfully passes their probationary period. Here's how this works: Search : Have a look at the description and requirements of each role, and consider if someone you know would be a great fit. Referral : Once you've identified a potential candidate, send an email to Jobs at n8n with the subject line Employee referral - [job title] and a short description of the person you're referring (and the reason why). Also, tell your referral to apply for the job through our careers page . Evaluation : We'll screen the application and inform you about the next steps of the hiring process. Reward : As soon as your referral has successfully finished the probationary period, we'll reward you for your efforts by transferring the €1,000 to your bank account. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/builtin/convenience/

Convenience methods # n8n provides these methods to make it easier to perform common tasks in expressions . Python support You can use Python in the Code node. It isn't available in expressions. JavaScript Python Method Description Available in Code node? $evaluateExpression(expression: string, itemIndex?: number) Evaluates a string as an expression. If you don't provide itemIndex , n8n uses the data from item 0 in the Code node. $ifEmpty(value, defaultValue) The $ifEmpty() function takes two parameters, tests the first to check if it's empty, then returns either the parameter (if not empty) or the second parameter (if the first is empty). The first parameter is empty if it's: undefined null An empty string '' An array where value.length returns false An object where Object.keys(value).length returns false $if() The $if() function takes three parameters: a condition, the value to return if true, and the value to return if false. $max() Returns the highest of the provided numbers. $min() Returns the lowest of the provided numbers. Method Description _evaluateExpression(expression: string, itemIndex?: number) Evaluates a string as an expression. If you don't provide itemIndex , n8n uses the data from item 0 in the Code node. _ifEmpty(value, defaultValue) The _ifEmpty() function takes two parameters, tests the first to check if it's empty, then returns either the parameter (if not empty) or the second parameter (if the first is empty). The first parameter is empty if it's: undefined null An empty string '' An array where value.length returns false An object where Object.keys(value).length returns false Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/source-control-environments/using/copy-work/

Copy work between environments # The steps to send work from one n8n instance to another are different depending on whether you use a single Git branch or multiple branches. Single branch # If you have a single Git branch the steps to copy work are: Push work from one instance to the Git branch. Log in to the other instance to pull the work from Git. You can automate pulls . Multiple branches # If you have more than one Git branch, you need to merge the branches in your Git provider to copy work between environments. You can't copy work directly between environments in n8n. A common pattern is: Do work in your developments instance. Push the work to the development branch in Git. Merge your development branch into your production branch. Refer to the documentation for your Git provider for guidance on doing this: GitHub: Creating a pull request GitLab: Creating merge requests Git: Basic branching and merging In your production n8n instance, pull the changes. You can automate pulls . Automatically send changes to n8n # You can automate parts of the process of copying work, using the /source-control/pull API endpoint. Call the API after merging the changes: 1 2 3 4 5 curl --request POST \ --location '<YOUR-INSTANCE-URL>/api/v1/source-control/pull' \ --header 'Content-Type: application/json' \ --header 'X-N8N-API-KEY: <YOUR-API-KEY>' \ --data '{"force": true}' This means you can use a GitHub Action or GitLab CI/CD to automatically pull changes to the production instance on merge. A GitHub Action example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 name : CI on : # Trigger the workflow on push or pull request events for the "production" branch push : branches : [ "production" ] # Allows you to run this workflow manually from the Actions tab workflow_dispatch : jobs : run-pull : runs-on : ubuntu-latest steps : - name : PULL # Use GitHub secrets to protect sensitive information run : > curl --location '${{ secrets.INSTANCE_URL }}/version-control/pull' --header 'Content-Type: application/json' --header 'X-N8N-API-KEY: ${{ secrets.INSTANCE_API_KEY }}' Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/courses/

Text courses # If you've found your way here, it means you're serious about your interest in automation. Maybe you're tired of manually entering data into the same spreadsheet every day, of clicking through a series of tabs and buttons for that one piece of information you need, of managing tens of different tools and systems. Whatever the reason, one thing is clear: you shouldn't spend precious time doing things that don't spark joy or contribute to your personal and professional growth. These tasks can and should be automated! And you don't need advanced technical knowledge or excellent coding skills to do this–with no-code tools like n8n, automation is for everyone. Available courses # Level 1: Beginner course Level 2: Intermediate course Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/source-control-environments/create-environments/

Tutorial: Create environments with source control # Feature availability Available on Enterprise. You need to be an n8n instance owner, admin, or project owner to set up source control, and to send work to and from Git. This tutorial walks through the process of setting up environments end-to-end. You'll create two environments: development and production. It uses GitHub as the Git provider. The process is similar for other providers. n8n has built its environments feature on top of Git, a version control software. You link an n8n instance to a Git branch, and use a push-pull pattern to move work between environments. You should have some understanding of environments and Git. If you need more information on these topics, refer to: Environments in n8n : the purpose of environments, and how they work in n8n. Git and n8n : Git concepts and source control in n8n. Choose your source control pattern # Before setting up source control and environments, you need to plan your environments, and how they relate to Git branches. n8n supports different Branch patterns . For environments, you need to choose between two patterns: multi-instance, multi-branch, or multi-instance, single-branch. This tutorial covers both patterns. Recommendation: don't push and pull to the same n8n instance You can push work from an instance to a branch, and pull to the same instance. n8n doesn't recommend this. To reduce the risk of merge conflicts and overwriting work, try to create a process where work goes in one direction: either to Git, or from Git, but not both. Multiple instances, multiple branches # The advantages of this pattern are: An added safety layer to prevent changes getting into your production environment by mistake. You have to do a pull request in GitHub to copy work between environments. It supports more than two instances. The disadvantage is more manual steps to copy work between environments. Multiple instances, one branch # The advantage of this pattern is that work is instantly available to other environments when you push from one instance. The disadvantages are: If you push by mistake, there is a risk the work will make it into your production instance. If you use a GitHub Action to automate pulls to production, you must either use the multi-instance, multi-branch pattern, or be careful to never push work that you don't want in production. Pushing and pulling to the same instance can cause data loss as changes are overridden when performing these actions. You should set up processes to ensure content flows in one direction. Set up your repository # Once you've chosen your pattern, you need to set up your GitHub repository. Multi-branch Single-branch Create a new repository . Make sure the repository is private, unless you want your workflows, tags, and variable and credential stubs exposed to the internet. Create the new repository with a README so you can immediately create branches. Create one branch named production and another named development . Refer to Creating and deleting branches within your repository for guidance. Create a new repository . Make sure the repository is private, unless you want your workflows, tags, and variable and credential stubs exposed to the internet. Create the new repository with a README. This creates the main branch, which you'll connect to. Connect your n8n instances to your repository # Create two n8n instances, one for development, one for production. Configure Git in n8n # Go to Settings > Environments . In Git repository URL enter the SSH URL for your repository. n8n supports ED25519 and RSA public key algorithms. ED25519 is the default. Select RSA under SSH Key if your git host requires RSA. Copy the SSH key. Set up a deploy key # Set up SSH access by creating a deploy key for the repository using the SSH key from n8n. The key must have write access. Refer to GitHub | Managing deploy keys for guidance. Connect n8n and configure your instance # Multi-branch Single-branch In Settings > Environments in n8n, select Connect . n8n connects to your Git repository. Under Instance settings , choose which branch you want to use for the current n8n instance. Connect the production branch to the production instance, and the development branch to the development instance. Production instance only: select Protected instance to prevent users editing workflows in this instance. Select Save settings . In Settings > Environments in n8n, select Connect . Under Instance settings , select the main branch. Production instance only: select Protected instance to prevent users editing workflows in this instance. Select Save settings . Push work from development # In your development instance, create a few workflows, tags, variables, and credentials. To push work to Git: Select Push in the main menu. View screenshot Pull and push buttons when menu is closed Pull and push buttons when menu is open In the Commit and push changes modal, select which workflows you want to push. You can filter by status (new, modified, deleted) and search for workflows. n8n automatically pushes tags, and variable and credential stubs. Enter a commit message. This should be a one sentence description of the changes you're making. Select Commit and Push . n8n sends the work to Git, and displays a success message on completion. Pull work to production # Your work is now in GitHub. If you're using a multi-branch setup, it's on the development branch. If you chose the single-branch setup, it's on main. Multi-branch Single-branch In GitHub, create a pull request to merge development into production. Merge the pull request. In your production instance, select Pull in the main menu. In your production instance, select Pull in the main menu. View screenshot Pull and push buttons when menu is closed Pull and push buttons when menu is open Optional: Use a GitHub Action to automate pulls # If you want to avoid logging in to your production instance to pull, you can use a GitHub Action and the n8n API to automatically pull every time you push new work to your production or main branch. A GitHub Action example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 name : CI on : # Trigger the workflow on push or pull request events for the "production" branch push : branches : [ "production" ] # Allows you to run this workflow manually from the Actions tab workflow_dispatch : jobs : run-pull : runs-on : ubuntu-latest steps : - name : PULL # Use GitHub secrets to protect sensitive information run : > curl --location '${{ secrets.INSTANCE_URL }}/version-control/pull' --header 'Content-Type: application/json' --header 'X-N8N-API-KEY: ${{ secrets.INSTANCE_API_KEY }}' Next steps # Learn more about: Environments in n8n and Git and n8n Source control patterns Reusable Variables and Managing variables using the API when using source control. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/source-control-environments/create-environments/#optional-use-a-github-action-to-automate-pulls

Tutorial: Create environments with source control # Feature availability Available on Enterprise. You need to be an n8n instance owner, admin, or project owner to set up source control, and to send work to and from Git. This tutorial walks through the process of setting up environments end-to-end. You'll create two environments: development and production. It uses GitHub as the Git provider. The process is similar for other providers. n8n has built its environments feature on top of Git, a version control software. You link an n8n instance to a Git branch, and use a push-pull pattern to move work between environments. You should have some understanding of environments and Git. If you need more information on these topics, refer to: Environments in n8n : the purpose of environments, and how they work in n8n. Git and n8n : Git concepts and source control in n8n. Choose your source control pattern # Before setting up source control and environments, you need to plan your environments, and how they relate to Git branches. n8n supports different Branch patterns . For environments, you need to choose between two patterns: multi-instance, multi-branch, or multi-instance, single-branch. This tutorial covers both patterns. Recommendation: don't push and pull to the same n8n instance You can push work from an instance to a branch, and pull to the same instance. n8n doesn't recommend this. To reduce the risk of merge conflicts and overwriting work, try to create a process where work goes in one direction: either to Git, or from Git, but not both. Multiple instances, multiple branches # The advantages of this pattern are: An added safety layer to prevent changes getting into your production environment by mistake. You have to do a pull request in GitHub to copy work between environments. It supports more than two instances. The disadvantage is more manual steps to copy work between environments. Multiple instances, one branch # The advantage of this pattern is that work is instantly available to other environments when you push from one instance. The disadvantages are: If you push by mistake, there is a risk the work will make it into your production instance. If you use a GitHub Action to automate pulls to production, you must either use the multi-instance, multi-branch pattern, or be careful to never push work that you don't want in production. Pushing and pulling to the same instance can cause data loss as changes are overridden when performing these actions. You should set up processes to ensure content flows in one direction. Set up your repository # Once you've chosen your pattern, you need to set up your GitHub repository. Multi-branch Single-branch Create a new repository . Make sure the repository is private, unless you want your workflows, tags, and variable and credential stubs exposed to the internet. Create the new repository with a README so you can immediately create branches. Create one branch named production and another named development . Refer to Creating and deleting branches within your repository for guidance. Create a new repository . Make sure the repository is private, unless you want your workflows, tags, and variable and credential stubs exposed to the internet. Create the new repository with a README. This creates the main branch, which you'll connect to. Connect your n8n instances to your repository # Create two n8n instances, one for development, one for production. Configure Git in n8n # Go to Settings > Environments . In Git repository URL enter the SSH URL for your repository. n8n supports ED25519 and RSA public key algorithms. ED25519 is the default. Select RSA under SSH Key if your git host requires RSA. Copy the SSH key. Set up a deploy key # Set up SSH access by creating a deploy key for the repository using the SSH key from n8n. The key must have write access. Refer to GitHub | Managing deploy keys for guidance. Connect n8n and configure your instance # Multi-branch Single-branch In Settings > Environments in n8n, select Connect . n8n connects to your Git repository. Under Instance settings , choose which branch you want to use for the current n8n instance. Connect the production branch to the production instance, and the development branch to the development instance. Production instance only: select Protected instance to prevent users editing workflows in this instance. Select Save settings . In Settings > Environments in n8n, select Connect . Under Instance settings , select the main branch. Production instance only: select Protected instance to prevent users editing workflows in this instance. Select Save settings . Push work from development # In your development instance, create a few workflows, tags, variables, and credentials. To push work to Git: Select Push in the main menu. View screenshot Pull and push buttons when menu is closed Pull and push buttons when menu is open In the Commit and push changes modal, select which workflows you want to push. You can filter by status (new, modified, deleted) and search for workflows. n8n automatically pushes tags, and variable and credential stubs. Enter a commit message. This should be a one sentence description of the changes you're making. Select Commit and Push . n8n sends the work to Git, and displays a success message on completion. Pull work to production # Your work is now in GitHub. If you're using a multi-branch setup, it's on the development branch. If you chose the single-branch setup, it's on main. Multi-branch Single-branch In GitHub, create a pull request to merge development into production. Merge the pull request. In your production instance, select Pull in the main menu. In your production instance, select Pull in the main menu. View screenshot Pull and push buttons when menu is closed Pull and push buttons when menu is open Optional: Use a GitHub Action to automate pulls # If you want to avoid logging in to your production instance to pull, you can use a GitHub Action and the n8n API to automatically pull every time you push new work to your production or main branch. A GitHub Action example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 name : CI on : # Trigger the workflow on push or pull request events for the "production" branch push : branches : [ "production" ] # Allows you to run this workflow manually from the Actions tab workflow_dispatch : jobs : run-pull : runs-on : ubuntu-latest steps : - name : PULL # Use GitHub secrets to protect sensitive information run : > curl --location '${{ secrets.INSTANCE_URL }}/version-control/pull' --header 'Content-Type: application/json' --header 'X-N8N-API-KEY: ${{ secrets.INSTANCE_API_KEY }}' Next steps # Learn more about: Environments in n8n and Git and n8n Source control patterns Reusable Variables and Managing variables using the API when using source control. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/create/

Create a workflow # A workflow is a collection of nodes connected together to automate a process. You build workflows on the workflow canvas . Create a workflow # Select the button in the upper-left corner of the side menu. Select workflow. If your n8n instance supports projects, you'll also need to choose whether to create the workflow inside your personal space or a specific project you have access to. If you're using the community version, you'll always create workflows inside your personal space. Get started by adding a trigger node: select Add first step... Or: Select the create button in the upper-right corner from either the Overview page or a specific project . Select workflow. If you're doing this from the Overview page, you'll create the workflow inside your personal space. If you're doing this from inside a project, you'll create the workflow inside that specific project. Get started by adding a trigger node: select Add first step... If it's your first time building a workflow, you may want to use the quickstart guides to quickly try out n8n features. Run workflows manually # You may need to run your workflow manually when building and testing, or if your workflow doesn't have a trigger node. To run manually, select Test Workflow . Run workflows automatically # All new workflows are inactive by default. You need to activate workflows that start with a trigger node or Webhook node so that they can run automatically. When a workflow is inactive, you must run it manually. To activate or deactivate your workflow, open your workflow and toggle Inactive / Active . Once a workflow is active, it runs whenever its trigger conditions are met. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/credentials/credential-sharing/

Credential sharing # Feature availability Available on all Cloud plans, and Enterprise self-hosted plans. You can share a credential directly with other users to use in their own workflows. Or share a credential in a project for all members of that project to use. Any users using a shared credential won't be able to view or edit the credential details. Users can share credentials they created and own. Only project admins can share credentials created in and owned by a project. Instance owners and instance admins can view and share all credentials on an instance. Refer to Account types for more information about owners and admins. In projects , a user's role controls how they can interact with the workflows and credentials associated to the projects they're a member of. Share a credential # To share a credential: From the left menu, select either Overview or a project. Select Credentials to see a list of your credentials. Select the credential you want to share. Select Sharing . In the Share with projects or users dropdown, browse or search for the user or project with which you want to share your credentials. Select a user or project. Select Save to apply the changes. Remove access to a credential # To unshare a credential: From the left menu, select either Overview or a project. Select Credentials to see a list of your credentials. Select the credential you want to unshare. Select Sharing . Select trash icon on the user or project you want to remove from the list of shared users and projects. Select Save to apply the changes. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/build/reference/credentials-files/

Credentials file # The credentials file defines the authorization methods for the node. The settings in this file affect what n8n displays in the Credentials modal, and must reflect the authentication requirements of the service you're connecting to. In the credentials file, you can use all the n8n UI elements . n8n encrypts the data that's stored using credentials using an encryption key. Structure of the credentials file # The credentials file follows this basic structure: Import statements Create a class for the credentials Within the class, define the properties that control authentication for the node. Outline structure # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import { IAuthenticateGeneric , ICredentialTestRequest , ICredentialType , INodeProperties , } from 'n8n-workflow' ; export class ExampleNode implements ICredentialType { name = 'exampleNodeApi' ; displayName = 'Example Node API' ; documentationUrl = '' ; properties : INodeProperties [] = [ { displayName : 'API Key' , name : 'apiKey' , type : 'string' , default : '' , }, ]; authenticate : IAuthenticateGeneric = { type : 'generic' , properties : { // Can be body, header, qs or auth qs : { // Use the value from `apiKey` above 'api_key' : '={{$credentials.apiKey}}' } }, }; test : ICredentialTestRequest = { request : { baseURL : '={{$credentials?.domain}}' , url : '/bearer' , }, }; } Parameters # name # String. The internal name of the object. Used to reference it from other places in the node. displayName # String. The name n8n uses in the GUI. documentationUrl # String. URL to your credentials documentation. properties # Each object contains: displayName : the name n8n uses in the GUI. name : the internal name of the object. Used to reference it from other places in the node. type : the data type expected, such as string . default : the URL that n8n should use to test credentials. authenticate # authenticate : Object. Contains objects that tell n8n how to inject the authentication data as part of the API request. type # String. If you're using an authentication method that sends data in the header, body, or query string, set this to 'generic' . properties # Object. Defines the authentication methods. Options are: body : Object. Sends authentication data in the request body. Can contain nested objects. 1 2 3 4 5 6 7 8 9 authenticate : IAuthenticateGeneric = { type : 'generic' , properties : { body : { username : '={{$credentials.username}}' , password : '={{$credentials.password}}' , }, }, }; header : Object. Send authentication data in the request header. 1 2 3 4 5 6 7 8 authenticate : IAuthenticateGeneric = { type : 'generic' , properties : { header : { Authorization : '=Bearer {{$credentials.authToken}}' , }, }, }; qs : Object. Stands for "query string." Send authentication data in the request query string. 1 2 3 4 5 6 7 8 authenticate : IAuthenticateGeneric = { type : 'generic' , properties : { qs : { token : '={{$credentials.token}}' , }, }, }; auth : Object. Used for Basic Auth. Requires username and password as the key names. 1 2 3 4 5 6 7 8 9 authenticate : IAuthenticateGeneric = { type : 'generic' , properties : { auth : { username : '={{$credentials.username}}' , password : '={{$credentials.password}}' , }, }, }; test # Provide a request object containing a URL and authentication type that n8n can use to test the credential. 1 2 3 4 5 6 test : ICredentialTestRequest = { request : { baseURL : '={{$credentials?.domain}}' , url : '/bearer' , }, }; Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/credentials/

Credentials environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. Enable credential overwrites using the following environment variables. Refer to Credential overwrites for details. Variable Type Default Description CREDENTIALS_OVERWRITE_DATA / _FILE * - Overwrites for credentials. CREDENTIALS_OVERWRITE_ENDPOINT String - The API endpoint to fetch credentials. CREDENTIALS_DEFAULT_NAME String My credentials The default name for credentials. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/credentials/

Credentials # Credentials are private pieces of information issued by apps and services to authenticate you as a user and allow you to connect and share information between the app or service and the n8n node. Access the credentials UI by opening the left menu and selecting Credentials . n8n lists credentials you created on the My credentials tab. The All credentials tab shows all credentials you can use, included credentials shared with you by other users. Create and edit credentials . Learn about credential sharing . Find information on setting up credentials for your services in the credentials library . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/builtin/current-node-input/

Current node input # Methods for working with the input of the current node. Some methods and variables aren't available in the Code node. Python support You can use Python in the Code node. It isn't available in expressions. JavaScript Python Method Description Available in Code node? $binary Shorthand for $input.item.binary . Incoming binary data from a node $input.item The input item of the current node that's being processed. Refer to Item linking for more information on paired items and item linking. $input.all() All input items in current node. $input.first() First input item in current node. $input.last() Last input item in current node. $input.params Object containing the query settings of the previous node. This includes data such as the operation it ran, result limits, and so on. $json Shorthand for $input.item.json . Incoming JSON data from a node. Refer to Data structure for information on item structure. (when running once for each item) $input.context.noItemsLeft Boolean. Only available when working with the Loop Over Items node. Provides information about what's happening in the node. Use this to determine whether the node is still processing items. Method Description _input.item The input item of the current node that's being processed. Refer to Item linking for more information on paired items and item linking. _input.all() All input items in current node. _input.first() First input item in current node. _input.last() Last input item in current node. _input.params Object containing the query settings of the previous node. This includes data such as the operation it ran, result limits, and so on. _json Shorthand for _input.item.json . Incoming JSON data from a node. Refer to Data structure for information on item structure. Available when you set Mode to Run Once for Each Item . _input.context.noItemsLeft Boolean. Only available when working with the Loop Over Items node. Provides information about what's happening in the node. Use this to determine whether the node is still processing items. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/executions/custom-executions-data/

Custom executions data # You can set custom data on your workflow using the Code node or the Execution Data node . n8n records this with each execution. You can then use this data when filtering the executions list, or fetch it in your workflows using the Code node. Feature availability Custom executions data is available on: Cloud: Pro, Enterprise Self-Hosted: Enterprise, registered Community Available in version 0.222.0 and above. Set and access custom data using the Code node # This section describes how to set and access data using the Code node. Refer to Execution Data node for information on using the Execution Data node to set data. You can't retrieve custom data using the Execution Data node. Set custom executions data # Set a single piece of extra data: JavaScript Python 1 $execution . customData . set ( "key" , "value" ); 1 _execution . customData . set ( "key" , "value" ); Set all extra data. This overwrites the whole custom data object for this execution: JavaScript Python 1 $execution . customData . setAll ({ "key1" : "value1" , "key2" : "value2" }) 1 _execution . customData . setAll ({ "key1" : "value1" , "key2" : "value2" }) There are limitations: They must be strings key has a maximum length of 50 characters value has a maximum length of 255 characters n8n supports a maximum of 10 items of custom data Access the custom data object during execution # You can retrieve the custom data object, or a specific value in it, during an execution: JavaScript Python 1 2 3 4 5 // Access the current state of the object during the execution const customData = $execution . customData . getAll (); // Access a specific value set during this execution const customData = $execution . customData . get ( "key" ); 1 2 3 4 5 # Access the current state of the object during the execution customData = _execution . customData . getAll (); # Access a specific value set during this execution customData = _execution . customData . get ( "key" ); Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/custom-operations/

Custom API operations # One of the most complex parts of setting up API calls is managing authentication. n8n provides credentials support for operations and services beyond those supported by built-in nodes. Custom operations for existing nodes: n8n supplies hundreds of nodes to create workflows that link multiple products. However, some nodes don't include all the possible operations supported by a product's API. You can work around this by making a custom API call using the HTTP Request node. Credential-only nodes: n8n includes credential-only nodes. These are integrations where n8n supports setting up credentials for use in the HTTP Request node, but doesn't provide a standalone node. You can find a credential-only node in the nodes panel, as you would for any other integration. Predefined credential types # A predefined credential type is a credential that already exists in n8n. You can use predefined credential types instead of generic credentials in the HTTP Request node. For example: you create an Asana credential, for use with the Asana node. Later, you want to perform an operation that isn't supported by the Asana node, using Asana's API. You can use your existing Asana credential in the HTTP Request node to perform the operation, without additional authentication setup. Using predefined credential types # To use a predefined credential type: Open your HTTP Request node, or add a new one to your workflow. In Authentication , select Predefined Credential Type . In Credential Type , select the API you want to use. In Credential for <API name> , you can: Select an existing credential for that platform, if available. Select Create New to create a new credential. Credential scopes # Some existing credential types have specific scopes: endpoints that they work with. n8n warns you about this when you select the credential type. For example, follow the steps in Using predefined credential types , and select Google Calendar OAuth2 API as your Credential Type . n8n displays a box listing the two endpoints you can use this credential type with: Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/data/data-editing/

Data editing # n8n allows you to edit pinned data . This means you can check different scenarios without setting up each scenario and sending the relevant data from your external system. It makes it easier to test edge cases. For development only Data editing isn't available for production workflow executions. It's a feature to help test workflows during development. Edit output data # To edit output data: Run the node to load data. In the OUTPUT view, select JSON to switch to JSON view. Select Edit . Edit your data. Select Save . n8n saves your data changes and pins your data. Use data from previous executions # You can copy data from nodes in previous workflow executions: Open the left menu. Select Executions . Browse the workflow executions list to find the one with the data you want to copy. Select Open Past Execution . Double click the node whose data you want to copy. If it's table layout, select JSON to switch to JSON view. There are two ways to copy the JSON: Select the JSON you want by highlighting it, like selecting text. Then use ctrl + c to copy it. Select the JSON you want to copy by clicking on a parameter. Then: Hover over the JSON. n8n displays the Copy button. Select Copy . You can choose what to copy: Copy Item Path and Copy Parameter Path gives you expressions that access parts of the JSON. Copy Value : copies the entire selected JSON. Return to the workflow you're working on: Open the left menu. Select Workflows . Select Open . Select the workflow you want to open. Open the node where you want to use the copied data. If there is no data, run the node to load data. In the OUTPUT view, select JSON to switch to JSON view. Select Edit . Paste in the data from the previous execution. Select Save . n8n saves your data changes and pins your data. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/data/data-filtering/

Data filtering # Feature availability Available on Cloud Pro and Enterprise plans. Search and filter data in the node INPUT and OUTPUT panels. Use this to check your node's data. To search: In a node, select Search in the INPUT or OUTPUT panel. Enter your search term. n8n filters as you type your search, displaying the objects or rows containing the term. Filtering is purely visual: n8n doesn't change or delete data. The filter resets when you close and reopen the node. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/data/data-flow-nodes/

Data flow within nodes # Nodes can process multiple items. For example, if you set the Trello node to Create-Card , and create an expression that sets Name using a property called name-input-value from the incoming data, the node creates a card for each item, always choosing the name-input-value of the current item. For example, this input will create two cards. One named test1 the other one named test2 : 1 2 3 4 5 6 7 8 [ { na me - i n pu t - value : "test1" }, { na me - i n pu t - value : "test2" } ] Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/advanced-ai/examples/data-google-sheets/

Chat with a Google Sheet using AI # Use n8n to bring your own data to AI. This workflow uses the Chat Trigger to provide the chat interface, and the Custom n8n Workflow Tool to call a second workflow that queries Google Sheets. View workflow file Key features # This workflow uses: Chat Trigger : start your workflow and respond to user chat interactions. The node provides a customizable chat interface. Agent : the key piece of the AI workflow. The Agent interacts with other components of the workflow and makes decisions about what tools to use. Custom n8n Workflow Tool : plug in n8n workflows as custom tools. In AI, a tool is an interface the AI can use to interact with the world (in this case, the data provided by your workflow). The AI model uses the tool to access information beyond its built-in dataset. Using the example # To load the template into your n8n instance: Download the workflow JSON file. Open a new workflow in your n8n instance. Copy in the JSON, or select Workflow menu > Import from file... . The example workflows use Sticky Notes to guide you: Yellow: notes and information. Green: instructions to run the workflow. Orange: you need to change something to make the workflow work. Blue: draws attention to a key feature of the example. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/data/data-mapping/data-item-linking/

Data item linking # An item is a single piece of data. Nodes receive one or more items, operate on them, and output new items. Each item links back to previous items. You need to understand this behavior if you're: Building a programmatic-style node that implements complex behaviors with its input and output data. Using the Code node or expressions editor to access data from earlier items in the workflow. Using the Code node for complex behaviors with input and output data. This section provides: A conceptual overview of Item linking concepts . Information on Item linking for node creators . Support for end users who need to Work with the data path to retrieve item data from previous nodes, and link items when using the Code node. Guidance on troubleshooting Errors . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/data/data-mapping/data-mapping-expressions/

Mapping in the expressions editor # These examples show how to access linked items in the expressions editor. Refer to expressions for more information on expressions, including built in variables and methods. For information on errors with mapping and linking items, refer to Item linking errors . Access the linked item in a previous node's output # When you use this, n8n works back up the item linking chain, to find the parent item in the given node. 1 2 // Returns the linked item {{ $ ( "<node-name>" ). item }} As a longer example, consider a scenario where a node earlier in the workflow has the following output data: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 [ { "id" : "23423532" , "name" : "Jay Gatsby" , }, { "id" : "23423533" , "name" : "José Arcadio Buendía" , }, { "id" : "23423534" , "name" : "Max Sendak" , }, { "id" : "23423535" , "name" : "Zaphod Beeblebrox" , }, { "id" : "23423536" , "name" : "Edmund Pevensie" , } ] To extract the name, use the following expression: 1 {{ $ ( "<node-name>" ). item . json . name }} Access the linked item in the current node's input # In this case, the item linking is within the node: find the input item that the node links to an output item. 1 2 // Returns the linked item {{ $input . item }} As a longer example, consider a scenario where the current node has the following input data: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 [ { "id" : "23423532" , "name" : "Jay Gatsby" , }, { "id" : "23423533" , "name" : "José Arcadio Buendía" , }, { "id" : "23423534" , "name" : "Max Sendak" , }, { "id" : "23423535" , "name" : "Zaphod Beeblebrox" , }, { "id" : "23423536" , "name" : "Edmund Pevensie" , } ] To extract the name, you'd normally use drag-and-drop Data mapping , but you could also write the following expression: 1 {{ $input . item . json . name }} Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/data/data-mapping/data-mapping-ui/

Mapping in the UI # Data mapping means referencing data from previous nodes. It doesn't include changing (transforming) data, just referencing it. You can map data in the following ways: Using the expressions editor. By dragging and dropping data from the INPUT into parameters. This generates the expression for you. For information on errors with mapping and linking items, refer to Item linking errors . How to drag and drop data # Run your workflow to load data. Open the node where you need to map data. You can map in table, JSON, and schema view: In table view: click and hold a table heading to map top level data, or a field in the table to map nested data. In JSON view: click and hold a key. In schema view: click and hold a key. Drag the item into the field where you want to use the data. Understand what you're mapping with drag and drop # Data mapping maps the key path, and loads the key's value into the field. For example, given the following data: 1 2 3 4 5 6 [ { "fruit" : "apples" , "color" : "green" } ] You can map fruit by dragging and dropping fruit from the INPUT into the field where you want to use its value. This creates an expression, {{ $json.fruit }} . When the node iterates over input items, the value of the field becomes the value of fruit for each item. Understand nested data # Given the following data: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 [ { "name" : "First item" , "nested" : { "example-number-field" : 1 , "example-string-field" : "apples" } }, { "name" : "Second item" , "nested" : { "example-number-field" : 2 , "example-string-field" : "oranges" } } ] n8n displays it in table form like this: Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/data/data-mapping/

Data mapping # Data mapping means referencing data from previous nodes. This section contains guidance on: Mapping data in most scenarios: Data mapping in the UI and Data mapping in expression How to handle item linking when using the Code node or building your own nodes. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/data/data-pinning/

Data pinning # You can 'pin' data during workflow development. Data pinning means saving the output data of a node, and using the saved data instead of fetching fresh data in future workflow executions. You can use this when working with data from external sources to avoid having to repeat requests to the external system. This can save time and resources: If your workflow relies on an external system to trigger it, such as a webhook call, being able to pin data means you don't need to use the external system every time you test the workflow. If the external resource has data or usage limits, pinning data during tests avoids consuming your resource limits. You can fetch and pin the data you want to test, then have confidence that the data is consistent in all your workflow tests. You can only pin data for nodes that have a single main output ("error" outputs don't count for this purpose). For development only Data pinning isn't available for production workflow executions. It's a feature to help test workflows during development. Pin data # To pin data in a node: Run the node to load data. In the OUTPUT view, select Pin data . When data pinning is active, the button is disabled and a "This data is pinned" banner is displayed in the OUTPUT view. Nodes that output binary data You can't pin data if the output data includes binary data. Unpin data # When data pinning is active, a banner appears at the top of the node's output panel indicating that n8n has pinned the data. To unpin data and fetch fresh data on the next execution, select the Unpin link in the banner. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/data/data-structure/

Data structure # In n8n, all data passed between nodes is an array of objects. It has the following structure: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 [ { // For most data: // Wrap each item in another object, with the key 'json' "json" : { // Example data "apple" : "beets" , "carrot" : { "dill" : 1 } }, // For binary data: // Wrap each item in another object, with the key 'binary' "binary" : { // Example data "apple-picture" : { "data" : "...." , // Base64 encoded binary data (required) "mimeType" : "image/png" , // Best practice to set if possible (optional) "fileExtension" : "png" , // Best practice to set if possible (optional) "fileName" : "example.png" , // Best practice to set if possible (optional) } } }, ] Skipping the json key and array syntax From 0.166.0 on, when using the Function node or Code node, n8n automatically adds the json key if it's missing. It also automatically wraps your items in an array ( [] ) if needed. This is only the case when using the Function or Code nodes. When building your own nodes, you must still make sure the node returns data with the json key. Data item processing # Nodes can process multiple items. For example, if you set the Trello node to Create-Card , and create an expression that sets Name using a property called name-input-value from the incoming data, the node creates a card for each item, always choosing the name-input-value of the current item. For example, this input will create two cards. One named test1 the other one named test2 : 1 2 3 4 5 6 7 8 [ { na me - i n pu t - value : "test1" }, { na me - i n pu t - value : "test2" } ] Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/builtin/data-transformation-functions/

Data transformation functions # Data transformation functions are helper functions to make data transformation easier in expressions . JavaScript in expressions You can use any JavaScript in expressions. Refer to Expressions for more information. For a list of available functions, refer to the page for your data type: Arrays Dates Numbers Objects Strings Usage # Data transformation functions are available in the expressions editor. The syntax is: 1 {{ dataItem . function () }} For example, to check if a string is an email: 1 2 3 {{ "example@example.com" . isEmail () }} // Returns true Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows/ai-code/data-transformation.json

{ "name": "Data transformation", "nodes": [ { "parameters": {}, "id": "3ada6076-1cfb-4c2d-a421-4fce5466fc2d", "name": "When clicking \"Execute Workflow\"", "type": "n8n-nodes-base.manualTrigger", "typeVersion": 1, "position": [ 1340, 840 ] }, { "parameters": { "jsCode": "return [\n{\n\"user_id\":\n\"0001\",\n\"username\":\n\"nathan\",\n\"date\":\n\"2023-08-10\",\n\"variant\":\n\"control\",\n\"data_exec_success\":\n\"TRUE\"\n},\n{\n\"user_id\":\n\"0002\",\n\"username\":\n\"natalie\",\n\"date\":\n\"2023-08-10\",\n\"variant\":\n\"control\",\n\"data_exec_success\":\n\"TRUE\"\n},\n{\n\"user_id\":\n\"0003\",\n\"username\":\n\"nadia\",\n\"date\":\n\"2023-08-10\",\n\"variant\":\n\"control\",\n\"data_exec_success\":\n\"FALSE\"\n},\n{\n\"user_id\":\n\"naomi\",\n\"username\":\n\"hkhjk\",\n\"date\":\n\"2023-08-10\",\n\"variant\":\n\"control\",\n\"data_exec_success\":\n\"FALSE\"\n},\n{\n\"user_id\":\n\"0005\",\n\"username\":\n\"nolan\",\n\"date\":\n\"2023-08-10\",\n\"variant\":\n\"control\",\n\"data_exec_success\":\n\"FALSE\"\n}\n]" }, "id": "08e4d878-01ab-4f01-ab27-84ef5afbf581", "name": "Code", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ 1560, 840 ] }, { "parameters": {}, "id": "57a9330b-9e46-42a6-b432-681e906de93a", "name": "Join items", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ 1780, 840 ] } ], "pinData": {}, "connections": { "When clicking \"Execute Workflow\"": { "main": [ [ { "node": "Code", "type": "main", "index": 0 } ] ] }, "Code": { "main": [ [ { "node": "Join items", "type": "main", "index": 0 } ] ] } }, "active": false, "settings": { "executionOrder": "v1" }, "versionId": "d7409102-d3af-4ddf-bead-2df008554458", "id": "B4K5I5pN4nqu85ac", "meta": { "instanceId": "c5aabef739d71e3d0ceb8b6078a241aaf1b145fa71cbbe36ecfb2c8c3fd64f5f" }, "tags": [] }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/database/

Database environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. By default, n8n uses SQLite. n8n also supports PostgreSQL. n8n removed support for MySQL and MariaDB in v1.0. This page outlines environment variables to configure your chosen database for your self-hosted n8n instance. Variable Type Default Description DB_TYPE / _FILE Enum string: sqlite , postgresdb sqlite The database to use. DB_TABLE_PREFIX * - Prefix to use for table names. PostgreSQL # Variable Type Default Description DB_POSTGRESDB_DATABASE / _FILE String n8n The name of the PostgreSQL database. DB_POSTGRESDB_HOST / _FILE String localhost The PostgreSQL host. DB_POSTGRESDB_PORT / _FILE Number 5432 The PostgreSQL port. DB_POSTGRESDB_USER / _FILE String postgres The PostgreSQL user. DB_POSTGRESDB_PASSWORD / _FILE String - The PostgreSQL password. DB_POSTGRESDB_POOL_SIZE / _FILE Number 2 Control how many parallel open Postgres connections n8n should have. Increasing it may help with resource utilization, but too many connections may degrade performance. DB_POSTGRESDB_CONNECTION_TIMEOUT / _FILE Number 20000 Postgres connection timeout (ms). DB_POSTGRESDB_SCHEMA / _FILE String public The PostgreSQL schema. DB_POSTGRESDB_SSL_ENABLED / _FILE Boolean false Whether to enable SSL. Automatically enabled if DB_POSTGRESDB_SSL_CA , DB_POSTGRESDB_SSL_CERT or DB_POSTGRESDB_SSL_KEY is defined. DB_POSTGRESDB_SSL_CA / _FILE String - The PostgreSQL SSL certificate authority. DB_POSTGRESDB_SSL_CERT / _FILE String - The PostgreSQL SSL certificate. DB_POSTGRESDB_SSL_KEY / _FILE String - The PostgreSQL SSL key. DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED / _FILE Boolean true If n8n should reject unauthorized SSL connections (true) or not (false). SQLite # Variable Type Default Description DB_SQLITE_POOL_SIZE Number 0 Controls whether to open the SQLite file in WAL mode or rollback journal mode . Uses rollback journal mode when set to zero. When greater than zero, uses WAL mode with the value determining the number of parallel SQL read connections to configure. WAL mode is much more performant and reliable than the rollback journal mode. DB_SQLITE_VACUUM_ON_STARTUP Boolean false Runs VACUUM operation on startup to rebuild the database. Reduces file size and optimizes indexes. This is a long running blocking operation and increases start-up time. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/data/

Data # Data is the information that n8n nodes receive and process. For basic usage of n8n you don't need to understand data structures and manipulation. However, it becomes important if you want to: Create your own node Write custom expressions Use the Function or Function Item node This section covers: Data structure Data flow within nodes Transforming data Process data using code Pinning and editing data during workflow development. Data mapping and Item linking : how data items link to each other. Related resources # Data transformation nodes # n8n provides a collection of nodes to transform data: Aggregate : take separate items, or portions of them, and group them together into individual items. Limit : remove items beyond a defined maximum number. Remove Duplicates : identify and delete items that are identical across all fields or a subset of fields. Sort : organize lists of in a desired ordering, or generate a random selection. Split Out : separate a single data item containing a list into multiple items. Summarize : aggregate items together, in a manner similar to Excel pivot tables. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/builtin/date-time/

Built-in date and time methods # Methods for working with date and time. Python support You can use Python in the Code node. It isn't available in expressions. JavaScript Python Method Description Available in Code node? $now A Luxon object containing the current timestamp. Equivalent to DateTime.now() . $today A Luxon object containing the current timestamp, rounded down to the day. Equivalent to DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }) . Method Description _now A Luxon object containing the current timestamp. Equivalent to DateTime.now() . _today A Luxon object containing the current timestamp, rounded down to the day. Equivalent to DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }) . n8n passes dates between nodes as strings, so you need to parse them. Luxon helps you do this. Refer to Date and time with Luxon for more information. n8n provides built-in convenience functions to support data transformation in expressions for dates. Refer to Data transformation functions | Dates for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/builtin/data-transformation-functions/dates/

Dates # A reference document listing built-in convenience functions to support data transformation in expressions for dates. JavaScript in expressions You can use any JavaScript in expressions. Refer to Expressions for more information. beginningOf(unit?: DurationUnit): Date # Transforms a Date to the start of the given time period. Returns either a JavaScript Date or Luxon Date, depending on input. Function parameters # unit Optional String enum A valid string specifying the time unit. Default: week One of: second , minute , hour , day , week , month , year endOfMonth(): Date # Transforms a Date to the end of the month. extract(datePart?: DurationUnit): Number # Extracts the part defined in datePart from a Date. Returns either a JavaScript Date or Luxon Date, depending on input. Function parameters # datePart Optional String enum A valid string specifying the time unit. Default: week One of: second , minute , hour , day , week , month , year format(fmt: TimeFormat): String # Formats a Date in the given structure Function parameters # fmt Required String enum A valid string specifying the time format. Refer to Luxon | Table of tokens for formats. isBetween(date1: Date | DateTime, date2: Date | DateTime): Boolean # Checks if a Date is between two given dates. Function parameters # date1 Required Date or DateTime The first date in the range. date2 Required Date or DateTime The last date in the range. isDst(): Boolean # Checks if a Date is within Daylight Savings Time. isInLast(n?: Number, unit?: DurationUnit): Boolean # Checks if a Date is within a given time period. Function parameters # n Optional Number The number of units. For example, to check if the date is in the last nine weeks, enter 9. Default: 0 unit Optional String enum A valid string specifying the time unit. Default: minutes One of: second , minute , hour , day , week , month , year isWeekend(): Boolean # Checks if the Date falls on a Saturday or Sunday. minus(n: Number, unit?: DurationUnit): Date # Subtracts a given time period from a Date. Returns either a JavaScript Date or Luxon Date, depending on input. Function parameters # n Required Number The number of units. For example, to subtract nine seconds, enter 9 here. unit Optional String enum A valid string specifying the time unit. Default: milliseconds One of: second , minute , hour , day , week , month , year plus(n: Number, unit?: DurationUnit): Date # Adds a given time period to a Date. Returns either a JavaScript Date or Luxon Date, depending on input. Function parameters # n Required Number The number of units. For example, to add nine seconds, enter 9 here. unit Optional String enum A valid string specifying the time unit. Default: milliseconds One of: second , minute , hour , day , week , month , year toDateTime(): Date # Converts a JavaScript date to a Luxon date object . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/executions/debug/

Debug and re-run past executions # Feature availability Available on n8n Cloud and registered Community plans. You can load data from a previous execution into your current workflow. This is useful for debugging data from failed production executions: you can see a failed execution, make changes to your workflow to fix it, then re-run it with the previous execution data. Load data # To load data from a previous execution: In your workflow, select the Executions tab to view the Executions list. Select the execution you want to debug. n8n displays options depending on whether the workflow was successful or failed: For failed executions: select Debug in editor . For successful executions: select Copy to editor . n8n copies the execution data into your current workflow, and pins the data in the first node in the workflow. Check which executions you save The executions available on the Executions list depends on your Workflow settings . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/build/declarative-style-node/

Build a declarative-style node # This tutorial walks through building a declarative-style node. Before you begin, make sure this is the node style you need. Refer to Choose your node building approach for more information. Prerequisites # You need the following installed on your development machine: git Node.js and npm. Minimum version Node 18.17.0. You can find instructions on how to install both using nvm (Node Version Manager) for Linux, Mac, and WSL here . For Windows users, refer to Microsoft's guide to Install NodeJS on Windows . You need some understanding of: JavaScript/TypeScript REST APIs git Build your node # In this section, you'll clone n8n's node starter repository, and build a node that integrates the NASA API . You'll create a node that uses two of NASA's services: APOD (Astronomy Picture of the Day) and Mars Rover Photos. To keep the code examples short, the node won't implement every available option for the Mars Rover Photos endpoint. Existing node n8n has a built-in NASA node. To avoid clashing with the existing node, you'll give your version a different name. Step 1: Set up the project # n8n provides a starter repository for node development. Using the starter ensures you have all necessary dependencies. It also provides a linter. Clone the repository and navigate into the directory: Generate a new repository from the template repository. Clone your new repository: 1 2 git clone https://github.com/<your-organization>/<your-repo-name>.git n8n-nodes-nasa-pics cd n8n-nodes-nasa-pics The starter contains example nodes and credentials. Delete the following directories and files: nodes/ExampleNode nodes/HTTPBin credentials/ExampleCredentials.credentials.ts credentials/HttpBinApi.credentials.ts Now create the following directories and files: nodes/NasaPics nodes/NasaPics/NasaPics.node.json nodes/NasaPics/NasaPics.node.ts credentials/NasaPicsApi.credentials.ts These are the key files required for any node. Refer to Node file structure for more information on required files and recommended organization. Now install the project dependencies: 1 npm i Step 2: Add an icon # Save the NASA SVG logo from here as nasapics.svg in nodes/NasaPics/ . n8n recommends using an SVG for your node icon, but you can also use PNG. If using PNG, the icon resolution should be 60x60px. Node icons should have a square or near-square aspect ratio. Don't reference Font Awesome If you want to use a Font Awesome icon in your node, download and embed the image. Step 3: Create the node # Every node must have a base file. Refer to Node base file for detailed information about base file parameters. In this example, the file is NasaPics.node.ts . To keep this tutorial short, you'll place all the node functionality in this one file. When building more complex nodes, you should consider splitting out your functionality into modules. Refer to Node file structure for more information. Step 3.1: Imports # Start by adding the import statements: 1 import { INodeType , INodeTypeDescription } from 'n8n-workflow' ; Step 3.2: Create the main class # The node must export an interface that implements INodeType. This interface must include a description interface, which in turn contains the properties array. Class names and file names Make sure the class name and the file name match. For example, given a class NasaPics , the filename must be NasaPics.node.ts . 1 2 3 4 5 6 7 8 export class NasaPics implements INodeType { description : INodeTypeDescription = { // Basic node details will go here properties : [ // Resources and operations will go here ] }; } Step 3.3: Add node details # All nodes need some basic parameters, such as their display name, icon, and the basic information for making a request using the node. Add the following to the description : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 displayName : 'NASA Pics' , name : 'NasaPics' , icon : 'file:nasapics.svg' , group : [ 'transform' ], version : 1 , subtitle : '={{$parameter["operation"] + ": " + $parameter["resource"]}}' , description : 'Get data from NASAs API' , defaults : { name : 'NASA Pics' , }, inputs : [ 'main' ], outputs : [ 'main' ], credentials : [ { name : 'NasaPicsApi' , required : true , }, ], requestDefaults : { baseURL : 'https://api.nasa.gov' , headers : { Accept : 'application/json' , 'Content-Type' : 'application/json' , }, }, n8n uses some of the properties set in description to render the node in the Editor UI. These properties are displayName , icon , description , and subtitle . Step 3.4: Add resources # The resource object defines the API resource that the node uses. In this tutorial, you're creating a node to access two of NASA's API endpoints: planetary/apod and mars-photos . This means you need to define two resource options in NasaPics.node.ts . Update the properties array with the resource object: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 properties : [ { displayName : 'Resource' , name : 'resource' , type : 'options' , noDataExpression : true , options : [ { name : 'Astronomy Picture of the Day' , value : 'astronomyPictureOfTheDay' , }, { name : 'Mars Rover Photos' , value : 'marsRoverPhotos' , }, ], default : 'astronomyPictureOfTheDay' , }, // Operations will go here ] type controls which UI element n8n displays for the resource, and tells n8n what type of data to expect from the user. options results in n8n adding a dropdown that allows users to choose one option. Refer to Node UI elements for more information. Step 3.5: Add operations # The operations object defines the available operations on a resource. In a declarative-style node, the operations object includes routing (within the options array). This sets up the details of the API call. Add the following to the properties array, after the resource object: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 { displayName : 'Operation' , name : 'operation' , type : 'options' , noDataExpression : true , displayOptions : { show : { resource : [ 'astronomyPictureOfTheDay' , ], }, }, options : [ { name : 'Get' , value : 'get' , action : 'Get the APOD' , description : 'Get the Astronomy Picture of the day' , routing : { request : { method : 'GET' , url : '/planetary/apod' , }, }, }, ], default : 'get' , }, { displayName : 'Operation' , name : 'operation' , type : 'options' , noDataExpression : true , displayOptions : { show : { resource : [ 'marsRoverPhotos' , ], }, }, options : [ { name : 'Get' , value : 'get' , action : 'Get Mars Rover photos' , description : 'Get photos from the Mars Rover' , routing : { request : { method : 'GET' , }, }, }, ], default : 'get' , }, { displayName : 'Rover name' , description : 'Choose which Mars Rover to get a photo from' , required : true , name : 'roverName' , type : 'options' , options : [ { name : 'Curiosity' , value : 'curiosity' }, { name : 'Opportunity' , value : 'opportunity' }, { name : 'Perseverance' , value : 'perseverance' }, { name : 'Spirit' , value : 'spirit' }, ], routing : { request : { url : '=/mars-photos/api/v1/rovers/{{$value}}/photos' , }, }, default : 'curiosity' , displayOptions : { show : { resource : [ 'marsRoverPhotos' , ], }, }, }, { displayName : 'Date' , description : 'Earth date' , required : true , name : 'marsRoverDate' , type : 'dateTime' , default : '' , displayOptions : { show : { resource : [ 'marsRoverPhotos' , ], }, }, routing : { request : { // You've already set up the URL. qs appends the value of the field as a query string qs : { earth_date : '={{ new Date($value).toISOString().substr(0,10) }}' , }, }, }, }, // Optional/additional fields will go here This code creates two operations: one to get today's APOD image, and another to send a get request for photos from one of the Mars Rovers. The object named roverName requires the user to choose which Rover they want photos from. The routing object in the Mars Rover operation references this to create the URL for the API call. Step 3.6: Optional fields # Most APIs, including the NASA API that you're using in this example, have optional fields you can use to refine your query. To avoid overwhelming users, n8n displays these under Additional Fields in the UI. For this tutorial, you'll add one additional field, to allow users to pick a date to use with the APOD endpoint. Add the following to the properties array: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 { displayName : 'Additional Fields' , name : 'additionalFields' , type : 'collection' , default : {}, placeholder : 'Add Field' , displayOptions : { show : { resource : [ 'astronomyPictureOfTheDay' , ], operation : [ 'get' , ], }, }, options : [ { displayName : 'Date' , name : 'apodDate' , type : 'dateTime' , default : '' , routing : { request : { // You've already set up the URL. qs appends the value of the field as a query string qs : { date : '={{ new Date($value).toISOString().substr(0,10) }}' , }, }, }, }, ], } Step 4: Set up authentication # The NASA API requires users to authenticate with an API key. Add the following to nasaPicsApi.credentials.ts : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import { IAuthenticateGeneric , ICredentialType , INodeProperties , } from 'n8n-workflow' ; export class NasaPicsApi implements ICredentialType { name = 'NasaPicsApi' ; displayName = 'NASA Pics API' ; // Uses the link to this tutorial as an example // Replace with your own docs links when building your own nodes documentationUrl = 'https://docs.n8n.io/integrations/creating-nodes/build/declarative-style-node/' ; properties : INodeProperties [] = [ { displayName : 'API Key' , name : 'apiKey' , type : 'string' , default : '' , }, ]; authenticate = { type : 'generic' , properties : { qs : { 'api_key' : '={{$credentials.apiKey}}' } }, } as IAuthenticateGeneric ; } For more information about credentials files and options, refer to Credentials file . Step 5: Add node metadata # Metadata about your node goes in the JSON file at the root of your node. n8n refers to this as the codex file. In this example, the file is NasaPics.node.json . Add the following code to the JSON file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { "node" : "n8n-nodes-base.NasaPics" , "nodeVersion" : "1.0" , "codexVersion" : "1.0" , "categories" : [ "Miscellaneous" ], "resources" : { "credentialDocumentation" : [ { "url" : "" } ], "primaryDocumentation" : [ { "url" : "" } ] } } For more information on these parameters, refer to Node codex files . Step 6: Update the npm package details # Your npm package details are in the package.json at the root of the project. It's essential to include the n8n object with links to the credentials and base node file. Update this file to include the following information: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 { // All node names must start with "n8n-nodes-" "name" : "n8n-nodes-nasapics" , "version" : "0.1.0" , "description" : "n8n node to call NASA's APOD and Mars Rover Photo services." , "keywords" : [ // This keyword is required for community nodes "n8n-community-node-package" ], "license" : "MIT" , "homepage" : "https://n8n.io" , "author" : { "name" : "Test" , "email" : "test@example.com" }, "repository" : { "type" : "git" , // Change the git remote to your own repository // Add the new URL here "url" : "git+<your-repo-url>" }, "main" : "index.js" , "scripts" : { // don't change }, "files" : [ "dist" ], // Link the credentials and node "n8n" : { "n8nNodesApiVersion" : 1 , "credentials" : [ "dist/credentials/NasaPicsApi.credentials.js" ], "nodes" : [ "dist/nodes/NasaPics/NasaPics.node.js" ] }, "devDependencies" : { // don't change }, "peerDependencies" : { // don't change } } You need to update the package.json to include your own information, such as your name and repository URL. For more information on npm package.json files, refer to npm's package.json documentation . Test your node # You can test your node as you build it by running it in a local n8n instance. Install n8n using npm: 1 npm install n8n -g When you are ready to test your node, publish it locally: 1 2 3 # In your node directory npm run build npm link Install the node into your local n8n instance: 1 2 3 # In the nodes directory within your n8n installation # node-package-name is the name from the package.json npm link <node-package-name> Check your directory Make sure you run npm link <node-name> in the nodes directory within your n8n installation. This can be: ~/.n8n/custom/ ~/.n8n/<your-custom-name> : if your n8n installation set a different name using N8N_CUSTOM_EXTENSIONS . Start n8n: 1 n8n start Open n8n in your browser. You should see your nodes when you search for them in the nodes panel. Node names Make sure you search using the node name, not the package name. For example, if your npm package name is n8n-nodes-weather-nodes , and the package contains nodes named rain , sun , snow , you should search for rain , not weather-nodes . Troubleshooting # There's no custom directory in ~/.n8n local installation. You have to create custom directory manually and run npm init 1 2 3 4 # In ~/.n8n directory run mkdir custom cd custom npm init Next steps # Deploy your node . View an example of a declarative node: n8n's Brevo node . Note that the main node is declarative, while the trigger node is in programmatic style. Learn about node versioning . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/build/reference/node-base-files/declarative-style-parameters/

Declarative-style parameters # These are the parameters available for node base file of declarative-style nodes. This document gives short code snippets to help understand the code structure and concepts. For a full walk-through of building a node, including real-world code examples, refer to Build a declarative-style node . Refer to Standard parameters for parameters available to all nodes. methods and loadOptions # Object | Optional methods contains the loadOptions object. You can use loadOptions to query the service to get user-specific settings, then return them and render them in the GUI so the user can include them in subsequent queries. The object must include routing information for how to query the service, and output settings that define how to handle the returned options. For example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 methods : { loadOptions : { routing : { request : { url : '/webhook/example-option-parameters' , method : 'GET' , }, output : { postReceive : [ { // When the returned data is nested under another property // Specify that property key type : 'rootProperty' , properties : { property : 'responseData' , }, }, { type : 'setKeyValue' , properties : { name : '={{$responseItem.key}} ({{$responseItem.value}})' , value : '={{$responseItem.value}}' , }, }, { // If incoming data is an array of objects, sort alphabetically by key type : 'sort' , properties : { key : 'name' , }, }, ], }, }, } }, routing # Object | Required routing is an object used within an options array in operations and input field objects. It contains the details of an API call. The code example below comes from the Declarative-style tutorial . It sets up an integration with a NASA API. It shows how to use requestDefaults to set up the basic API call details, and routing to add information for each operation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 description : INodeTypeDescription = { // Other node info here requestDefaults : { baseURL : 'https://api.nasa.gov' , url : '' , headers : { Accept : 'application/json' , 'Content-Type' : 'application/json' , }, }, properties : [ // Resources here { displayName : 'Operation' // Other operation details options : [ { name : 'Get' value : 'get' , description : '' , routing : { request : { method : 'GET' , url : '/planetary/apod' } } } ] } ] } version # Number or Array | Optional If you have one version of your node, this can be a number. If you want to support more than one version, turn this into an array, containing numbers for each node version. n8n supports two methods of node versioning, but declarative-style nodes must use the light versioning approach. Refer to Node versioning for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/deployment/

Deployment environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. This page lists the deployment configuration options for your self-hosted n8n instance, including setting up access URLs, enabling templates, customizing encryption, and configuring server details. Variable Type Default Description N8N_EDITOR_BASE_URL String - Public URL where users can access the editor. Also used for emails sent from n8n and the redirect URL for SAML based authentication. N8N_CONFIG_FILES String - Use to provide the path to any JSON configuration file . N8N_DISABLE_UI Boolean false Set to true to disable the UI. N8N_PREVIEW_MODE Boolean false Set to true to run in preview mode. N8N_TEMPLATES_ENABLED Boolean false Enables workflow templates (true) or disable (false). N8N_TEMPLATES_HOST String https://api.n8n.io Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information. N8N_ENCRYPTION_KEY String Random key generated by n8n Provide a custom key used to encrypt credentials in the n8n database. By default n8n generates a random key on first launch. N8N_USER_FOLDER String user-folder Provide the path where n8n will create the .n8n folder. This directory stores user-specific data, such as database file and encryption key. N8N_PATH String / The path n8n deploys to. N8N_HOST String localhost Host name n8n runs on. N8N_PORT Number 5678 The HTTP port n8n runs on. N8N_LISTEN_ADDRESS String 0.0.0.0 The IP address n8n should listen on. N8N_PROTOCOL Enum string: http , https http The protocol used to reach n8n. N8N_SSL_KEY String - The SSL key for HTTPS protocol. N8N_SSL_CERT String - The SSL certificate for HTTPS protocol. N8N_PERSONALIZATION_ENABLED Boolean true Whether to ask users personalisation questions and then customise n8n accordingly. N8N_VERSION_NOTIFICATIONS_ENABLED Boolean true When enabled, n8n sends notifications of new versions and security updates. N8N_VERSION_NOTIFICATIONS_ENDPOINT String https://api.n8n.io/versions/ The endpoint to retrieve where version information. N8N_VERSION_NOTIFICATIONS_INFO_URL String https://docs.n8n.io/getting-started/installation/updating.html The URL displayed in the New Versions panel for more information. N8N_DIAGNOSTICS_ENABLED Boolean true Whether to share selected, anonymous telemetry with n8n. Note that if you set this to false , you can't enable Ask AI in the Code node. N8N_DIAGNOSTICS_CONFIG_FRONTEND String 1zPn9bgWPzlQc0p8Gj1uiK6DOTn;https://telemetry.n8n.io Telemetry configuration for the frontend. N8N_DIAGNOSTICS_CONFIG_BACKEND String 1zPn7YoGC3ZXE9zLeTKLuQCB4F6;https://telemetry.n8n.io/v1/batch Telemetry configuration for the backend. N8N_PUSH_BACKEND String websocket Choose whether the n8n backend uses server-sent events ( sse ) or WebSockets ( websocket ) to send changes to the UI. VUE_APP_URL_BASE_API String http://localhost:5678/ Used when building the n8n-editor-ui package manually to set how the frontend can reach the backend API. Refer to Configure the Base URL . N8N_HIRING_BANNER_ENABLED Boolean true Whether to show the n8n hiring banner in the console (true) or not (false). N8N_PUBLIC_API_SWAGGERUI_DISABLED Boolean false Whether the Swagger UI (API playground) is disabled (true) or not (false). N8N_PUBLIC_API_DISABLED Boolean false Whether to disable the public API (true) or not (false). N8N_PUBLIC_API_ENDPOINT String api Path for the public API endpoints. N8N_GRACEFUL_SHUTDOWN_TIMEOUT Number 30 How long should the n8n process wait (in seconds) for components to shut down before exiting the process. N8N_DEV_RELOAD Boolean false When working on the n8n source code, set this to true to automatically reload or restart the application when changes occur in the source code files. N8N_REINSTALL_MISSING_PACKAGES Boolean false If set to true , n8n will automatically attempt to reinstall any missing packages. N8N_TUNNEL_SUBDOMAIN String - Specifies the subdomain for the n8n tunnel. If not set, n8n generates a random subdomain. N8N_PROXY_HOPS Number 0 Number of reverse-proxies n8n is running behind. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/deploy/

Deploy a node # This section contains details on how to deploy and share your node. You can choose to: Submit your node to the community node repository . This makes it available for everyone to use, and allows you to install and use it like any other community node. This is the only way to use custom nodes on cloud. Install the node into your n8n instance as a private node . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/installation/server-setups/digital-ocean/

Hosting n8n on DigitalOcean # This hosting guide shows you how to self-host n8n on a DigitalOcean droplet. It uses: Caddy (a reverse proxy) to allow access to the Droplet from the internet. Caddy will also automatically create and manage SSL / TLS certificates for your n8n instance. Docker Compose to create and define the application components and how they work together. Self-hosting knowledge prerequisites Self-hosting n8n requires technical knowledge, including: Setting up and configuring servers and containers Managing application resources and scaling Securing servers and applications Configuring n8n n8n recommends self-hosting for expert users. Mistakes can lead to data loss, security issues, and downtime. If you aren't experienced at managing servers, n8n recommends n8n Cloud . Latest and Next versions n8n releases a new minor version most weeks. The latest version is for production use. next is the most recent release. You should treat next as a beta: it may be unstable. To report issues, use the forum . Current latest : 1.81.4 Current next : 1.82.0 Create a Droplet # Log in to DigitalOcean. Select the project to host the Droplet, or create a new project . In your project, select Droplets from the Manage menu. Create a new Droplet using the Docker image available on the Marketplace tab. Droplet resources When creating the Droplet, DigitalOcean asks you to choose a plan. For most usage levels, a basic shared CPU plan is enough. SSH key or Password DigitalOcean lets you choose between SSH key and password-based authentication. SSH keys are considered more secure. Log in to your Droplet and create new user # The rest of this guide requires you to log in to the Droplet using a terminal with SSH. Refer to How to Connect to Droplets with SSH for more information. You should create a new user, to avoid working as the root user: Log in as root. Create a new user: 1 adduser <username> Follow the prompts in the CLI to finish creating the user. Grant the new user administrative privileges: 1 usermod -aG sudo <username> You can now run commands with superuser privileges by using sudo before the command. Follow the steps to set up SSH for the new user: Add Public Key Authentication . Log out of the droplet. Log in using SSH as the new user. Clone configuration repository # Docker Compose, n8n, and Caddy require a series of folders and configuration files. You can clone these from this repository into the home folder of the logged-in user on your Droplet. The following steps will tell you which file to change and what changes to make. Clone the repository with the following command: 1 git clone https://github.com/n8n-io/n8n-docker-caddy.git And change directory to the root of the repository you cloned: 1 cd n8n-docker-caddy Default folders and files # The host operating system (the DigitalOcean Droplet) copies the two folders you created to Docker containers to make them available to Docker. The two folders are: caddy_config : Holds the Caddy configuration files. local_files : A folder for files you upload or add using n8n. Create Docker volumes # To persist the Caddy cache between restarts and speed up start times, create a Docker volume that Docker reuses between restarts: 1 sudo docker volume create caddy_data Create a Docker volume for the n8n data: 1 sudo docker volume create n8n_data Set up DNS # n8n typically operates on a subdomain. Create a DNS record with your provider for the subdomain and point it to the IP address of the Droplet. The exact steps for this depend on your DNS provider, but typically you need to create a new "A" record for the n8n subdomain. DigitalOcean provide An Introduction to DNS Terminology, Components, and Concepts . Open ports # n8n runs as a web application, so the Droplet needs to allow incoming access to traffic on port 80 for non-secure traffic, and port 443 for secure traffic. Open the following ports in the Droplet's firewall by running the following two commands: 1 2 sudo ufw allow 80 sudo ufw allow 443 Configure n8n # n8n needs some environment variables set to pass to the application running in the Docker container. The example .env file contains placeholders you need to replace with values of your own. Open the file with the following command: 1 nano .env The file contains inline comments to help you know what to change. Refer to Environment variables for n8n environment variables details. The Docker Compose file # The Docker Compose file ( docker-compose.yml ) defines the services the application needs, in this case Caddy and n8n. The Caddy service definition defines the ports it uses and the local volumes to copy to the containers. The n8n service definition defines the ports it uses, the environment variables n8n needs to run (some defined in the .env file), and the volumes it needs to copy to the containers. The Docker Compose file uses the environment variables set in the .env file, so you shouldn't need to change it's content, but to take a look, run the following command: 1 nano docker-compose.yml Configure Caddy # Caddy needs to know which domains it should serve, and which port to expose to the outside world. Edit the Caddyfile file in the caddy_config folder. 1 nano caddy_config/Caddyfile Change the placeholder domain to yours. If you followed the steps to name the subdomain n8n, your full domain is similar to n8n.example.com . The n8n in the reverse_proxy setting tells Caddy to use the service definition defined in the docker-compose.yml file: 1 2 3 4 5 n8n.<domain>.<suffix> { reverse_proxy n8n:5678 { flush_interval -1 } } If you were to use automate.example.com , your Caddyfile may look something like: 1 2 3 4 5 automate.example.com { reverse_proxy n8n:5678 { flush_interval -1 } } Start Docker Compose # Start n8n and Caddy with the following command: 1 sudo docker compose up -d This may take a few minutes. Test your setup # In your browser, open the URL formed of the subdomain and domain name defined earlier. Enter the user name and password defined earlier, and you should be able to access n8n. Stop n8n and Caddy # You can stop n8n and Caddy with the following command: 1 sudo docker compose stop Updating # If you run n8n using a Docker Compose file, follow these steps to update n8n: 1 2 3 4 5 6 7 8 # Pull latest version docker compose pull # Stop and remove older version docker compose down # Start the container docker compose up -d Next steps # Learn more about configuring and scaling n8n. Or explore using n8n: try the Quickstarts . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/securing/disable-public-api/

Disable the public REST API # The n8n public REST API allows you to programmatically perform many of the same tasks as you can in the n8n GUI. If you don't plan on using this API, n8n recommends disabling it to improve the security of your n8n installation. To disable the public REST API , set the N8N_PUBLIC_API_DISABLED environment variable to true , for example: 1 export N8N_PUBLIC_API_DISABLED = true Disable the API playground # To disable the API playground , set the N8N_PUBLIC_API_SWAGGERUI_DISABLED environment variable to true , for example: 1 export N8N_PUBLIC_API_SWAGGERUI_DISABLED = true Related resources # Refer to Deployment environment variables for more information on these environment variables. Refer to Configuration for more information on setting environment variables. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/installation/server-setups/docker-compose/

Docker-Compose # If you have already installed Docker and Docker-Compose, then you can start with step 4. You can find Docker Compose configurations for various architectures in the n8n-hosting repository . Self-hosting knowledge prerequisites Self-hosting n8n requires technical knowledge, including: Setting up and configuring servers and containers Managing application resources and scaling Securing servers and applications Configuring n8n n8n recommends self-hosting for expert users. Mistakes can lead to data loss, security issues, and downtime. If you aren't experienced at managing servers, n8n recommends n8n Cloud . Latest and Next versions n8n releases a new minor version most weeks. The latest version is for production use. next is the most recent release. You should treat next as a beta: it may be unstable. To report issues, use the forum . Current latest : 1.80.5 Current next : 1.81.2 1. Install Docker # This can vary depending on the Linux distribution used. You can find detailed instructions in the Docker documentation . The following example is for Ubuntu: 1 2 3 4 5 6 7 8 9 sudo apt-get remove docker docker-engine docker.io containerd runc sudo apt-get update sudo apt-get install ca-certificates curl gnupg lsb-release sudo mkdir -p /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg echo "deb [arch= $( dpkg --print-architecture ) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $( lsb_release -cs ) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io 2. Optional: Non-root user access # Run when logged in as the user that should also be allowed to run docker: 1 2 sudo usermod -aG docker ${ USER } su - ${ USER } 3. Install Docker-Compose # This can vary depending on the Linux distribution used. You can find detailed instructions in the Docker documentation . The example below is for Ubuntu: 1 sudo apt-get install docker-compose-plugin 4. DNS setup # Add A record to route the subdomain accordingly: 1 2 3 Type: A Name: n8n (or the desired subdomain) IP address: <IP_OF_YOUR_SERVER> 5. Create Docker Compose file # Create a docker-compose.yml file. Paste the following in the file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 version : "3.7" services : traefik : image : "traefik" restart : always command : - "--api=true" - "--api.insecure=true" - "--providers.docker=true" - "--providers.docker.exposedbydefault=false" - "--entrypoints.web.address=:80" - "--entrypoints.web.http.redirections.entryPoint.to=websecure" - "--entrypoints.web.http.redirections.entrypoint.scheme=https" - "--entrypoints.websecure.address=:443" - "--certificatesresolvers.mytlschallenge.acme.tlschallenge=true" - "--certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL}" - "--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json" ports : - "80:80" - "443:443" volumes : - traefik_data:/letsencrypt - /var/run/docker.sock:/var/run/docker.sock:ro n8n : image : docker.n8n.io/n8nio/n8n restart : always ports : - "127.0.0.1:5678:5678" labels : - traefik.enable=true - traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`) - traefik.http.routers.n8n.tls=true - traefik.http.routers.n8n.entrypoints=web,websecure - traefik.http.routers.n8n.tls.certresolver=mytlschallenge - traefik.http.middlewares.n8n.headers.SSLRedirect=true - traefik.http.middlewares.n8n.headers.STSSeconds=315360000 - traefik.http.middlewares.n8n.headers.browserXSSFilter=true - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true - traefik.http.middlewares.n8n.headers.forceSTSHeader=true - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME} - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true - traefik.http.middlewares.n8n.headers.STSPreload=true - traefik.http.routers.n8n.middlewares=n8n@docker environment : - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME} - N8N_PORT=5678 - N8N_PROTOCOL=https - NODE_ENV=production - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/ - GENERIC_TIMEZONE=${GENERIC_TIMEZONE} volumes : - n8n_data:/home/node/.n8n volumes : traefik_data : external : true n8n_data : external : true If you are planning on reading/writing local files with n8n (for example, by using the Read/Write Files from Disk node , you will need to configure a data directory for those files here. If you are running n8n as a root user, add this under volumes for the n8n service: 1 - /local-files:/files If you are running n8n as a non-root user, add this under volumes for the n8n service: 1 - /home/<YOUR USERNAME>/n8n-local-files:/files You will now be able to write files to the /files directory in n8n and they will appear on your server in either /local-files or /home/<YOUR USERNAME>/n8n-local-files , respectively. 6. Create .env file # Create an .env file and change it accordingly. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # The top level domain to serve from DOMAIN_NAME = example.com # The subdomain to serve from SUBDOMAIN = n8n # DOMAIN_NAME and SUBDOMAIN combined decide where n8n will be reachable from # above example would result in: https://n8n.example.com # Optional timezone to set which gets used by Cron-Node by default # If not set New York time will be used GENERIC_TIMEZONE = Europe/Berlin # The email address to use for the SSL certificate creation SSL_EMAIL = user@example.com 7. Create data folder # Create the Docker volume that's defined as n8n_data . n8n will save the database file from SQLite and the encryption key in this volume. 1 sudo docker volume create n8n_data Create a volume for the Traefik data, This is defined as traefik_data . 1 sudo docker volume create traefik_data 8. Start Docker Compose # n8n can now be started via: 1 sudo docker compose up -d To stop the container: 1 sudo docker compose stop 9. Done # n8n will now be reachable using the above defined subdomain + domain combination. The above example would result in: https://n8n.example.com n8n will only be reachable using https and not using http . Secure your n8n instance Make sure that you set up authentication for your n8n instance. Next steps # Learn more about configuring and scaling n8n. Or explore using n8n: try the Quickstarts . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/installation/docker/

Docker Installation # Docker offers the following advantages: Installs n8n in a clean environment. Easier setup for your preferred database. Can avoid issues due to different operating systems, as Docker provides a consistent system. Can avoid compatibility issues due to differences in operating systems and tools. Makes migrating to new hosts or environments more straightforward. You can also use n8n in Docker with Docker Compose . You can find Docker Compose configurations for various architectures in the n8n-hosting repository . Self-hosting knowledge prerequisites Self-hosting n8n requires technical knowledge, including: Setting up and configuring servers and containers Managing application resources and scaling Securing servers and applications Configuring n8n n8n recommends self-hosting for expert users. Mistakes can lead to data loss, security issues, and downtime. If you aren't experienced at managing servers, n8n recommends n8n Cloud . Prerequisites # Before proceeding, install Docker Desktop . Linux Users Docker Desktop is available for Mac and Windows. Linux users must install Docker Engine and Docker Compose individually for your distribution. Latest and Next versions n8n releases a new minor version most weeks. The latest version is for production use. next is the most recent release. You should treat next as a beta: it may be unstable. To report issues, use the forum . Current latest : 1.80.5 Current next : 1.81.2 Starting n8n # From your terminal, run: 1 2 3 docker volume create n8n_data docker run -it --rm --name n8n -p 5678 :5678 -v n8n_data:/home/node/.n8n docker.n8n.io/n8nio/n8n This command creates a volume to store persistent data, downloads the required n8n image, and starts your container, exposed on port 5678 . To save your work between container restarts, it also mounts a docker volume, n8n_data , to persist your data locally. Once running, you can access n8n by opening: http://localhost:5678 Using with PostgreSQL # By default, n8n uses SQLite to save credentials , past executions, and workflows. n8n also supports PostgreSQL, configurable using environment variables as detailed below. When using PostgreSQL, it's still important to persist the data stored in the /home/node/.n8n folder. This includes n8n user data and, even more importantly, the encryption key for credentials. It's also the name of the webhook when using the n8n tunnel . If n8n can't find the /home/node/.n8n directory on startup, it automatically creates one. In this case, all existing credentials that n8n saved with a different encryption key will no longer work. Keep in mind While persisting the /home/node/.n8n directory with PostgreSQL is the recommended best practice, it's not explicitly required. You can provide the encryption key by passing the N8N_ENCRYPTION_KEY environment variable when starting your Docker container. To use n8n with PostgreSQL, execute the following commands, replacing the placeholders (depicted within angled brackets, for example <POSTGRES_USER> ) with your actual values: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 docker volume create n8n_data docker run -it --rm \ --name n8n \ -p 5678 :5678 \ -e DB_TYPE = postgresdb \ -e DB_POSTGRESDB_DATABASE = <POSTGRES_DATABASE> \ -e DB_POSTGRESDB_HOST = <POSTGRES_HOST> \ -e DB_POSTGRESDB_PORT = <POSTGRES_PORT> \ -e DB_POSTGRESDB_USER = <POSTGRES_USER> \ -e DB_POSTGRESDB_SCHEMA = <POSTGRES_SCHEMA> \ -e DB_POSTGRESDB_PASSWORD = <POSTGRES_PASSWORD> \ -v n8n_data:/home/node/.n8n \ docker.n8n.io/n8nio/n8n You can find a complete docker-compose file for PostgreSQL in the n8n hosting repository . Setting timezone # To define the timezone n8n should use, you can set the GENERIC_TIMEZONE environment variable . Schedule-oriented nodes, like the Schedule Trigger node use this to determine the correct timezone. You can set the system timezone, which controls what some scripts and commands like date return, using the TZ environment variable. This example sets the same timezone for both variables: 1 2 3 4 5 6 7 8 9 docker volume create n8n_data docker run -it --rm \ --name n8n \ -p 5678 :5678 \ -e GENERIC_TIMEZONE = "Europe/Berlin" \ -e TZ = "Europe/Berlin" \ -v n8n_data:/home/node/.n8n \ docker.n8n.io/n8nio/n8n Updating # To update n8n, in Docker Desktop, navigate to the Images tab and select Pull from the context menu to download the latest n8n image: You can also use the command line to pull the latest, or a specific version: 1 2 3 4 5 6 7 8 # Pull latest (stable) version docker pull docker.n8n.io/n8nio/n8n # Pull specific version docker pull docker.n8n.io/n8nio/n8n:1.81.0 # Pull next (unstable) version docker pull docker.n8n.io/n8nio/n8n:next After pulling the updated image, stop your n8n container and start it again. You can also use the command line. Replace <container_id> in the commands below with the container ID you find in the first command: 1 2 3 4 5 6 7 8 9 10 11 # Find your container ID docker ps -a # Stop the container with the `<container_id>` docker stop <container_id> # Remove the container with the `<container_id>` docker rm <container_id> # Start the container docker run --name = <container_name> [ options ] -d docker.n8n.io/n8nio/n8n Updating Docker Compose # If you run n8n using a Docker Compose file, follow these steps to update n8n: 1 2 3 4 5 6 7 8 # Pull latest version docker compose pull # Stop and remove older version docker compose down # Start the container docker compose up -d Further reading # You can find more information about Docker setup in the README file for the Docker image . n8n with tunnel # Danger Use this for local development and testing. It isn't safe to use it in production. To use webhooks for trigger nodes of external services like GitHub, n8n has to be reachable from the web. n8n runs a tunnel service that can redirect requests from n8n's servers to your local n8n instance. Start n8n with --tunnel by running: 1 2 3 4 5 6 7 8 docker volume create n8n_data docker run -it --rm \ --name n8n \ -p 5678 :5678 \ -v n8n_data:/home/node/.n8n \ docker.n8n.io/n8nio/n8n \ start --tunnel Next steps # Learn more about configuring and scaling n8n. Or explore using n8n: try the Quickstarts . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows/credentials/dynamic_credentials_using_expressions.json

{ "name": "Dynamic credentials using expressions", "nodes": [ { "parameters": { "path": "da4071f2-7550-4dae-aa48-8bced4291643", "formTitle": "Test dynamic credentials", "formDescription": "This form is for testing an n8n workflow that demonstrates setting credentials with expressions.", "formFields": { "values": [ { "fieldLabel": "Enter your NASA API key", "requiredField": true } ] }, "responseMode": "responseNode" }, "id": "cc6f2b1e-0ed0-4d22-8a44-d7223ba283b4", "name": "n8n Form Trigger", "type": "n8n-nodes-base.formTrigger", "typeVersion": 2, "position": [ 560, 520 ], "webhookId": "da4071f2-7550-4dae-aa48-8bced4291643" }, { "parameters": { "additionalFields": {} }, "id": "ef336bae-3d4f-419c-ab5c-b9f0de89f170", "name": "NASA", "type": "n8n-nodes-base.nasa", "typeVersion": 1, "position": [ 900, 520 ], "credentials": { "nasaApi": { "id": "QDDBOZOD6k3ijL5t", "name": "NASA account" } } }, { "parameters": { "respondWith": "redirect", "redirectURL": "={{ $json.url }}", "options": {} }, "id": "143bcdb6-aca0-4dd8-9204-9777271cd230", "name": "Respond to Webhook", "type": "n8n-nodes-base.respondToWebhook", "typeVersion": 1, "position": [ 1220, 520 ] }, { "parameters": { "content": "This workflow shows how to set credentials dynamically using expressions.\n\n\nFirst, set up your NASA credential: \n\n1. Create a new NASA credential.\n1. Hover over **API Key**.\n1. Toggle **Expression** on.\n1. In the **API Key** field, enter `{{ $json[\"Enter your NASA API key\"] }}`.\n\n\nThen, test the workflow:\n\n1. Get an [API key from NASA](https://api.nasa.gov/)\n2. Select **Test workflow**\n3. Enter your key using the form.\n4. The workflow runs and sends you to the NASA picture of the day.\n\n\nFor more information on expressions, refer to [n8n documentation | Expressions](https://docs.n8n.io/code/expressions/).", "height": 564, "width": 322, "color": 4 }, "id": "0a0dee23-fa16-4f09-b5e0-856f47fb53d0", "name": "Sticky Note", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 120, 140 ] }, { "parameters": { "content": "User submits an API key using the form", "height": 319 }, "id": "dd766e32-334d-4e46-9daa-7800b134a3a5", "name": "Sticky Note1", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 500, 380 ] }, { "parameters": { "content": "The workflow passes the key to the NASA node. You can reference the value using the expression `$json[\"Enter your NASA API key\"]`. This is also available to the node credential. ", "height": 319, "color": 5 }, "id": "3d8f02e6-e029-41dc-89ad-0f5cffe09348", "name": "Sticky Note2", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 820, 380 ] }, { "parameters": { "content": "The Respond to Webhook node controls the form response (in this example, redirecting the user to an image)", "height": 319 }, "id": "096eb6ab-c276-4687-9dc0-50e16a8f709a", "name": "Sticky Note3", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 1140, 380 ] } ], "pinData": {}, "connections": { "n8n Form Trigger": { "main": [ [ { "node": "NASA", "type": "main", "index": 0 } ] ] }, "NASA": { "main": [ [ { "node": "Respond to Webhook", "type": "main", "index": 0 } ] ] } } }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/embed/

n8n Embed # n8n Embed is part of n8n's paid offering. Using Embed, you can white label n8n, or incorporate it in your software as part of your commercial product. For more information about when to use Embed, as well as costs and licensing processes, refer to Embed on the n8n website. Support # The community forum can help with various issues. If you are a current Embed customer, you can also contact n8n support, using the email provided when you bought the license. Russia and Belarus # n8n Embed isn't available in Russia and Belarus. Refer to n8n's blog post Update on n8n cloud accounts in Russia and Belarus for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/endpoints/

Endpoints environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. This page lists environment variables for customizing endpoints in n8n. Variable Type Default Description N8N_PAYLOAD_SIZE_MAX Number 16 The maximum payload size in MiB. N8N_FORMDATA_FILE_SIZE_MAX Number 200 Max payload size for files in form-data webhook payloads in MiB. N8N_METRICS Boolean false Whether to enable the /metrics endpoint. N8N_METRICS_PREFIX String n8n_ Optional prefix for n8n specific metrics names. N8N_METRICS_INCLUDE_DEFAULT_METRICS Boolean true Whether to expose default system and node.js metrics. N8N_METRICS_INCLUDE_CACHE_METRICS Boolean false Whether to include metrics (true) for cache hits and misses, or not include them (false). N8N_METRICS_INCLUDE_MESSAGE_EVENT_BUS_METRICS Boolean false Whether to include metrics (true) for events, or not include them (false). N8N_METRICS_INCLUDE_WORKFLOW_ID_LABEL Boolean false Whether to include a label for the workflow ID on workflow metrics. N8N_METRICS_INCLUDE_NODE_TYPE_LABEL Boolean false Whether to include a label for the node type on node metrics. N8N_METRICS_INCLUDE_CREDENTIAL_TYPE_LABEL Boolean false Whether to include a label for the credential type on credential metrics. N8N_METRICS_INCLUDE_API_ENDPOINTS Boolean false Whether to expose metrics for API endpoints. N8N_METRICS_INCLUDE_API_PATH_LABEL Boolean false Whether to include a label for the path of API invocations. N8N_METRICS_INCLUDE_API_METHOD_LABEL Boolean false Whether to include a label for the HTTP method (GET, POST, ...) of API invocations. N8N_METRICS_INCLUDE_API_STATUS_CODE_LABEL Boolean false Whether to include a label for the HTTP status code (200, 404, ...) of API invocations. N8N_METRICS_INCLUDE_QUEUE_METRICS Boolean false Whether to include metrics for jobs in scaling mode. Not supported in multi-main setup. N8N_METRICS_QUEUE_METRICS_INTERVAL Integer 20 How often (in seconds) to update queue metrics. N8N_ENDPOINT_REST String rest The path used for REST endpoint. N8N_ENDPOINT_WEBHOOK String webhook The path used for webhook endpoint. N8N_ENDPOINT_WEBHOOK_TEST String webhook-test The path used for test-webhook endpoint. N8N_ENDPOINT_WEBHOOK_WAIT String webhook-waiting The path used for waiting-webhook endpoint. WEBHOOK_URL String - Used to manually provide the Webhook URL when running n8n behind a reverse proxy. See here for more details. N8N_DISABLE_PRODUCTION_MAIN_PROCESS Boolean false Disable production webhooks from main process. This helps ensure no HTTP traffic load to main process when using webhook-specific processes. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/enterprise-key/

Enterprise license key # You need to add your enterprise license key to enable enterprise features. You can do this through the UI, or using environment variables. Add an enterprise license key in the UI # In your n8n instance: Select Settings > Usage and plan . Select Enter activation key . Paste in your license key. Select Activate . Add an enterprise license key using environment variables # In your n8n configuration, set N8N_LICENSE_ACTIVATION_KEY to your license key. Refer to Environment variables to learn more about configuring n8n. Allowlist the license server IP addresses # n8n uses Cloudflare to host the license server. As the specific IP addresses can change, you need to allowlist the full range of Cloudflare IPs to ensure n8n can always reach the license server. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/

Environment variables overview # This section lists of environment variables that you can use to change n8n's configuration settings when self-hosting n8n. File-based configuration You can provide a configuration file for n8n. You can also append _FILE to certain variables to provide their configuration in a separate file. Binary data Credentials Database Deployment Endpoints Executions External data storage External hooks External secrets Logs License Nodes Queue mode Security Source control Task runners Timezone and localization User management and 2FA Workflows Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/source-control-environments/understand/environments/

Environments in n8n # n8n has built its environments feature on top of Git, a version control software. This document helps you understand: The purpose of environments. How environments work in n8n. Environments: What and why # In software development, the environment is all the infrastructure and tooling around the code, including the tools that run the software, and the specific configuration of those tools. For a more detailed introduction to environments in software development, refer to Codecademy | Environments . Low-code development in n8n is similar. n8n is where you build and run your workflows. Your instance may have particular configurations: on Cloud, n8n determines the configuration. On self-hosted instances, there are extensive configuration options . You may also have made changes to the settings of your instance. This combination of n8n and your instance's specific configuration and settings is the environment your workflows run in. There are advantages to having more than one environment. A common pattern is to have different environments for development and production: Development: do work and make changes. Production: the live environment. A setup like this helps you make changes to workflows without breaking workflows that are in use. Environments in n8n # In n8n, an environment comprises two parts, an n8n instance and a Git branch: The n8n instance is where you build and run workflows. The Git branch stores copies of the workflows, as well as tags, and variable and credential stubs. n8n doesn't sync credentials and variable values with Git. You must set up the credentials and variable values manually when setting up a new instance. For more information, refer to Push and pull | What gets committed and Manage variables . How you copy work between environments depends on your branch and n8n instance configuration: Multiple instances, one branch: you can push from one instance to the Git branch, then pull the work to another instance. Multiple instances, multiple branches: you need to create a pull request and merge in your Git provider. For example, if you have development, test, and production branches, each linked to their own instance, you need to merge the development branch into test to make the work from the development instance available on the test instance. Refer to Copy work between environments for more information, including steps to partially automate the process. For detailed guidance on pushing and pulling work, refer to Push and pull . Refer to Set up source control to learn more about linking your n8n instance to Git, or follow the Tutorial: Create environments with source control to set up your environments using one of n8n's recommended configurations. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/flow-logic/error-handling/

Error handling # When designing your flow logic, it's a good practice to consider potential errors, and set up methods to handle them gracefully. With an error workflow, you can control how n8n responds to a workflow execution failure. Investigating errors To investigate failed executions, you can: Review your Executions , for a single workflow or all workflows you have access to . You can load data from previous execution into your current workflow. Enable Log streaming . Create and set an error workflow # For each workflow, you can set an error workflow in Workflow Settings . It runs if an execution fails. This means you can, for example, send email or Slack alerts when a workflow execution errors. The error workflow must start with the Error Trigger . You can use the same error workflow for multiple workflows. Create a new workflow, with the Error Trigger as the first node. Give the workflow a name, for example Error Handler . Select Save . In the workflow where you want to use this error workflow: Select Options > Settings . In Error workflow , select the workflow you just created. For example, if you used the name Error Handler, select Error handler . Select Save . Now, when this workflow errors, the related error workflow runs. Error data # The default error data received by the Error Trigger is: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [ { "execution" : { "id" : "231" , "url" : "https://n8n.example.com/execution/231" , "retryOf" : "34" , "error" : { "message" : "Example Error Message" , "stack" : "Stacktrace" }, "lastNodeExecuted" : "Node With Error" , "mode" : "manual" }, "workflow" : { "id" : "1" , "name" : "Example Workflow" } } ] All information is always present, except: execution.id : requires the execution to be saved in the database. Not present if the error is in the trigger node of the main workflow, as the workflow doesn't execute. execution.url : requires the execution to be saved in the database. Not present if the error is in the trigger node of the main workflow, as the workflow doesn't execute. execution.retryOf : only present when the execution is a retry of a failed execution. If the error is caused by the trigger node of the main workflow, rather than a later stage, the data sent to the error workflow is different. There's less information in execution{} and more in trigger{} : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { "trigger" : { "error" : { "context" : {}, "name" : "WorkflowActivationError" , "cause" : { "message" : "" , "stack" : "" }, "timestamp" : 1654609328787 , "message" : "" , "node" : { . . . } }, "mode" : "trigger" }, "workflow" : { "id" : "" , "name" : "" } } Cause a workflow execution failure using Stop And Error # When you create and set an error workflow, n8n runs it when an execution fails. Usually, this is due to things like errors in node settings, or the workflow running out of memory. You can add the Stop And Error node to your workflow to force executions to fail under your chosen circumstances, and trigger the error workflow. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/scaling/execution-data/

Execution data # Depending on your executions settings and volume, your n8n database can grow in size and run out of storage. To avoid this, n8n recommends that you don't save unnecessary data, and enable pruning of old executions data. To do this, configure the corresponding environment variables . Reduce saved data # Configuration at workflow level You can also configure these settings on an individual workflow basis using the workflow settings . You can select which executions data n8n saves. For example, you can save only executions that result in an Error . 1 2 3 4 5 6 7 8 9 10 11 12 # npm # Save executions ending in errors export EXECUTIONS_DATA_SAVE_ON_ERROR = all # Save successful executions export EXECUTIONS_DATA_SAVE_ON_SUCCESS = all # Don't save node progress for each execution export EXECUTIONS_DATA_SAVE_ON_PROGRESS = false # Don't save manually launched executions export EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS = false 1 2 3 4 5 6 7 8 9 # Docker docker run -it --rm \ --name n8n \ -p 5678 :5678 \ -e EXECUTIONS_DATA_SAVE_ON_ERROR = all \ -e EXECUTIONS_DATA_SAVE_ON_SUCCESS = none \ -e EXECUTIONS_DATA_SAVE_ON_PROGRESS = true \ -e EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS = false \ docker.n8n.io/n8nio/n8n 1 2 3 4 5 6 7 # Docker Compose n8n : environment : - EXECUTIONS_DATA_SAVE_ON_ERROR=all - EXECUTIONS_DATA_SAVE_ON_SUCCESS=none - EXECUTIONS_DATA_SAVE_ON_PROGRESS=true - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=false Enable data pruning # You can enable data pruning to automatically delete finished executions after a given time. If you don't set EXECUTIONS_DATA_MAX_AGE , 336 hours (14 days) is the default. You can choose to prune finished executions data before the time set in EXECUTIONS_DATA_MAX_AGE , using EXECUTIONS_DATA_PRUNE_MAX_COUNT . This sets a maximum number of executions to store in the database. Once you reach the limit, n8n starts to delete the oldest execution records. This can help with database performance issues, especially if you use SQLite. The database size can still exceed the limit you set: old executions that haven't finished running don't get deleted, even if they would otherwise be subject to deletion. 1 2 3 4 5 6 7 8 9 # npm # Activate automatic data pruning export EXECUTIONS_DATA_PRUNE = true # Number of hours after execution that n8n deletes data export EXECUTIONS_DATA_MAX_AGE = 168 # Number of executions to store export EXECUTIONS_DATA_PRUNE_MAX_COUNT = 50000 1 2 3 4 5 6 7 # Docker docker run -it --rm \ --name n8n \ -p 5678 :5678 \ -e EXECUTIONS_DATA_PRUNE = true \ -e EXECUTIONS_DATA_MAX_AGE = 168 \ docker.n8n.io/n8nio/n8n 1 2 3 4 5 6 # Docker Compose n8n : environment : - EXECUTIONS_DATA_PRUNE=true - EXECUTIONS_DATA_MAX_AGE=168 - EXECUTIONS_DATA_PRUNE_MAX_COUNT=50000 SQLite If you run n8n using the default SQLite database, the disk space of any pruned data isn't automatically freed up but rather reused for future executions data. To free up this space configure the DB_SQLITE_VACUUM_ON_STARTUP environment variable or manually run the VACUUM operation. Binary data pruning Binary data pruning operates on the active binary data mode. For example, if your instance stored data in S3, and you later switched to filesystem mode, n8n only prunes binary data in the filesystem. This may change in future. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/flow-logic/execution-order/

Execution order in multi-branch workflows # n8n's node execution order depends on the version of n8n you're using: For workflows created before version 1.0: n8n executes the first node of each branch, then the second node of each branch, and so on. For workflows created in version 1.0 and above: executes each branch in turn, completing one branch before starting another. n8n orders the branches based on their position on the canvas , from topmost to bottommost. If two branches are at the same height, the leftmost branch executes first. You can change the execution order in your workflow settings . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/executions/

Executions environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. This page lists environment variables to configure workflow execution settings. Variable Type Default Description EXECUTIONS_MODE Enum string: regular , queue regular Whether executions should run directly or using queue. Refer to Queue mode for more details. EXECUTIONS_TIMEOUT Number -1 Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX . Set EXECUTIONS_TIMEOUT to -1 to disable. EXECUTIONS_TIMEOUT_MAX Number 3600 The maximum execution time (in seconds) that users can set for an individual workflow. EXECUTIONS_DATA_SAVE_ON_ERROR Enum string: all , none all Whether n8n saves execution data on error. EXECUTIONS_DATA_SAVE_ON_SUCCESS Enum string: all , none all Whether n8n saves execution data on success. EXECUTIONS_DATA_SAVE_ON_PROGRESS Boolean false Whether to save progress for each node executed (true) or not (false). EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS Boolean true Whether to save data of executions when started manually. EXECUTIONS_DATA_PRUNE Boolean true Whether to delete data of past executions on a rolling basis. EXECUTIONS_DATA_MAX_AGE Number 336 The execution age (in hours) before it's deleted. EXECUTIONS_DATA_PRUNE_MAX_COUNT Number 10000 Maximum number of executions to keep in the database. 0 = no limit EXECUTIONS_DATA_HARD_DELETE_BUFFER Number 1 How old (hours) the finished execution data has to be to get hard-deleted. By default, this buffer excludes recent executions as the user may need them while building a workflow. EXECUTIONS_DATA_PRUNE_HARD_DELETE_INTERVAL Number 15 How often (minutes) execution data should be hard-deleted. EXECUTIONS_DATA_PRUNE_SOFT_DELETE_INTERVAL Number 60 How often (minutes) execution data should be soft-deleted. N8N_CONCURRENCY_PRODUCTION_LIMIT Number -1 Max production executions allowed to run concurrently, in both regular and scaling modes. -1 to disable in regular mode. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/executions/

Executions # An execution is a single run of a workflow. Execution modes # There are two execution modes: Manual: run workflows manually when testing. Select Test Workflow to start a manual execution. You can do manual executions of active workflows, but n8n recommends keeping your workflow set to Inactive while developing and testing. Production: a production workflow is one that runs automatically. To enable this, set the workflow to Active . Execution lists # n8n provides two execution lists: Workflow-level executions : this execution list shows the executions for a single workflow. All executions : this list shows all executions for all your workflows. n8n supports adding custom data to executions . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/export-import/

Export and import workflows # n8n saves workflows in JSON format. You can export your workflows as JSON files or import JSON files into your n8n library. You can export and import workflows in several ways. Sharing credentials Exported workflow JSON files include credential names and IDs. While IDs aren't sensitive, the names could be, depending on how you name your credentials. HTTP Request nodes may contain authentication headers when imported from cURL. Remove or anonymize this information from the JSON file before sharing to protect your credentials. Copy-Paste # You can copy and paste a workflow or parts of it by selecting the nodes you want to copy to the clipboard ( Ctrl + c or cmd +c ) and pasting it ( Ctrl + v or cmd + v ) into the Editor UI. To select all nodes or a group of nodes, click and drag: From the Editor UI menu # From the top navigation bar, select the three dots in the upper right to see the following options: Import & Export workflows menu Download : Downloads your current workflow as a JSON file to your computer. Import from URL : Imports workflow JSON from a URL, for example, this workflow JSON file on GitHub . Import from File : Imports a workflow as a JSON file from your computer. From the command line # Export: See the full list of commands for exporting workflows or credentials. Import: See the full list of commands for importing workflows or credentials. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/expressions/

Expressions # Expressions are a powerful feature implemented in all n8n nodes. They allow node parameters to be set dynamically based on data from: Previous node executions The workflow Your n8n environment You can also execute JavaScript within an expression, making this a convenient and easy way to manipulate data into useful parameter values without writing extensive extra code. n8n created and uses a templating language called Tournament , and extends it with custom methods and variables and data transformation functions . These features make it easier to perform common tasks like getting data from other nodes or accessing workflow metadata. n8n additionally supports two libraries: Luxon , for working with dates and time. JMESPath , for querying JSON. Data in n8n When writing expressions, it's helpful to understand data structure and behavior in n8n. Refer to Data for more information on working with data in your workflows. Writing expressions # To use an expression to set a parameter value: Hover over the parameter where you want to use an expression. Select Expressions in the Fixed/Expression toggle. Write your expression in the parameter, or select Open expression editor to open the expressions editor. If you use the expressions editor, you can browse the available data in the Variable selector . All expressions have the format {{ your expression here }} . Example: Get data from webhook body # Consider the following scenario: you have a webhook trigger that receives data through the webhook body. You want to extract some of that data for use in the workflow. Your webhook data looks similar to this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [ { "headers" : { "host" : "n8n.instance.address" , ... }, "params" : {}, "query" : {}, "body" : { "name" : "Jim" , "age" : 30 , "city" : "New York" } } ] In the next node in the workflow, you want to get just the value of city . You can use the following expression: 1 {{ $json . body . city }} This expression: Accesses the incoming JSON-formatted data using n8n's custom $json variable. Finds the value of city (in this example, "New York"). Note that this example uses JMESPath syntax to query the JSON data. You can also write this expression as {{$json['body']['city']}} . Example: Writing longer JavaScript # An expression contains one line of JavaScript. This means you cannot do things like variable assignments or multiple standalone operations. To understand the limitations of JavaScript in expressions, and start thinking about workarounds, look at the following two pieces of code. Both code examples use the Luxon date and time library to find the time between two dates in months, and encloses the code in handlebar brackets, like an expression. However, the first example isn't a valid n8n expression: 1 2 3 4 5 6 7 8 9 10 11 // This example is split over multiple lines for readability // It's still invalid when formatted as a single line {{ function example () { let end = DateTime . fromISO ( '2017-03-13' ); let start = DateTime . fromISO ( '2017-02-13' ); let diffInMonths = end . diff ( start , 'months' ); return diffInMonths . toObject (); } example (); }} While the second example is valid: 1 {{ DateTime . fromISO ( '2017-03-13' ). diff ( DateTime . fromISO ( '2017-02-13' ), 'months' ). toObject ()}} Common issues # For common errors or issues with expressions and suggested resolution steps, refer to Common Issues . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/external-data-storage/

External data storage environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. Refer to External storage for more information on using external storage for binary data. Variable Type Default Description N8N_EXTERNAL_STORAGE_S3_HOST String - Host of the n8n bucket in S3-compatible external storage. For example, s3.us-east-1.amazonaws.com N8N_EXTERNAL_STORAGE_S3_BUCKET_NAME String - Name of the n8n bucket in S3-compatible external storage. N8N_EXTERNAL_STORAGE_S3_BUCKET_REGION String - Region of the n8n bucket in S3-compatible external storage. For example, us-east-1 N8N_EXTERNAL_STORAGE_S3_ACCESS_KEY String - Access key in S3-compatible external storage N8N_EXTERNAL_STORAGE_S3_ACCESS_SECRET String - Access secret in S3-compatible external storage. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/external-hooks/

External hooks environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. You can define external hooks that n8n executes whenever a specific operation runs. Refer to Backend hooks for examples of available hooks and Hook files for information on file formatting. Variable Type Description EXTERNAL_HOOK_FILES String Files containing backend external hooks. Provide multiple files as a colon-separated list (" : "). EXTERNAL_FRONTEND_HOOKS_URLS String URLs to files containing frontend external hooks. Provide multiple URLs as a colon-separated list (" : "). Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/external-secrets/

External secrets environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. You can use an external secrets store to manage credentials for n8n. Refer to External secrets for details. Variable Type Default Description N8N_EXTERNAL_SECRETS_UPDATE_INTERVAL Number 300 (5 minutes) How often (in seconds) to check for secret updates. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/external-secrets/

External secrets # Feature availability External secrets are available on Enterprise Self-hosted and Enterprise Cloud plans. n8n supports AWS Secrets Manager, Azure Key Vault, GCP Secrets Manager, Infisical and HashiCorp Vault. n8n doesn't support HashiCorp Vault Secrets . You can use an external secrets store to manage credentials for n8n. n8n stores all credentials encrypted in its database, and restricts access to them by default. With the external secrets feature, you can store sensitive credential information in an external vault, and have n8n load it in when required. This provides an extra layer of security and allows you to manage credentials used across multiple n8n environments in one central place. Connect n8n to your secrets store # Secret names Your secret names can't contain spaces, hyphens, or other special characters. n8n supports secret names containing alphanumeric characters ( a-z , A-Z , and 0-9 ), and underscores. In n8n, go to Settings > External Secrets . Select Set Up for your store provider. Enter the credentials for your provider: Azure Key Vault: Provide your vault name , tenant ID , client ID , and client secret . Refer to the Azure documentation to register a Microsoft Entra ID app and create a service principal . n8n supports only single-line values for secrets. AWS Secrets Manager: provide your access key ID , secret access key , and region . The IAM user must have the secretsmanager:ListSecrets , secretsmanager:BatchGetSecretValue , and secretsmanager:GetSecretValue permissions. To give n8n access to all secrets in your AWS Secrets Manager, you can attach the following policy to the IAM user: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { "Version" : "2012-10-17" , "Statement" : [ { "Sid" : "AccessAllSecrets" , "Effect" : "Allow" , "Action" : [ "secretsmanager:ListSecrets" , "secretsmanager:BatchGetSecretValue" , "secretsmanager:GetResourcePolicy" , "secretsmanager:GetSecretValue" , "secretsmanager:DescribeSecret" , "secretsmanager:ListSecretVersionIds" , ], "Resource" : "*" } ] } You can also be more restrictive and give n8n access to select specific AWS Secret Manager secrets. You still need to allow the secretsmanager:ListSecrets and secretsmanager:BatchGetSecretValue permissions to access all resources. These permissions allow n8n to retrieve ARN-scoped secrets, but don't provide access to the secret values. Next, you need set the scope for the secretsmanager:GetSecretValue permission to the specific Amazon Resource Names (ARNs) for the secrets you wish to share with n8n. Ensure you use the correct region and account ID in each resource ARNs. You can find the ARN details in the AWS dashboard for your secrets. For example, the following IAM policy only allows access to secrets with a name starting with n8n in your specified AWS account and region: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { "Version" : "2012-10-17" , "Statement" : [ { "Sid" : "ListingSecrets" , "Effect" : "Allow" , "Action" : [ "secretsmanager:ListSecrets" , "secretsmanager:BatchGetSecretValue" ], "Resource" : "*" }, { "Sid" : "RetrievingSecrets" , "Effect" : "Allow" , "Action" : [ "secretsmanager:GetSecretValue" , "secretsmanager:DescribeSecret" ], "Resource" : [ "arn:aws:secretsmanager:us-west-2:123456789000:secret:n8n*" ] } ] } For more IAM permission policy examples, consult the AWS documentation . HashiCorp Vault: provide the Vault URL for your vault instance, and select your Authentication Method . Enter your authentication details. Optionally provide a namespace. Refer to the HashiCorp documentation for your authentication method: Token auth method AppRole auth method Userpass auth method If you use vault namespaces, you can enter the namespace n8n should connect to. Refer to Vault Enterprise namespaces for more information on HashiCorp Vault namespaces. Infisical: provide a Service Token . Refer to Infisical's Service token documentation for information on getting your token. If you self-host Infisical, enter the Site URL . Infisical environment Make sure you select the correct Infisical environment when creating your token. n8n will load secrets from this environment, and won't have access to secrets in other Infisical environments. n8n only support service tokens that have access to a single environment. Infisical folders n8n doesn't support Infisical folders . Google Cloud Platform: provide a Service Account Key (JSON) for a service account that has at least these roles: Secret Manager Secret Accessor and Secret Manager Secret Viewer . Refer to Google's service account documentation for more information. Save your configuration. Enable the provider using the Disabled / Enabled toggle. Use secrets in n8n credentials # To use a secret from your store in an n8n credential: Create a new credential, or open an existing one. On the field where you want to use a secret: Hover over the field. Select Expression . In the field where you want to use a secret, enter an expression referencing the secret name: 1 {{ $secrets . < vault - name > . < secret - name > }} <vault-name> is either vault (for HashiCorp) or infisical or awsSecretsManager . Replace <secret-name> with the name as it appears in your vault. Using external secrets with n8n environments # n8n's Source control and environments feature allows you to create different n8n environments, backed by Git. The feature doesn't support using different credentials in different instances. You can use an external secrets vault to provide different credentials for different environments by connecting each n8n instance to a different vault or project environment. For example, you have two n8n instances, one for development and one for production. You use Infisical for your vault. In Infisical, create a project with two environments, development and production. Generate a token for each Infisical environment. Use the token for the development environment to connect your development n8n instance, and the token for your production environment to connect your production n8n instance. Using external secrets in projects # To use external secrets in an RBAC project , you must have an instance owner or instance admin as a member of the project. Troubleshooting # Infisical version changes # Infisical version upgrades can introduce problems connecting to n8n. If your Infisical connection stops working, check if there was a recent version change. If so, report the issue to help@n8n.io. Only set external secrets on credentials owned by an instance owner or admin # Due to the permissions that instance owners and admins have, it's possible for owners and admins to update credentials owned by another user with a secrets expression. This will appear to work in preview for an instance owner or admin, but the secret won't resolve when the workflow runs in production. Only use external secrets for credentials that are owned by an instance admin or owner. This ensures they resolve correctly in production. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/scaling/external-storage/

External storage # Feature availability Available on Self-hosted Enterprise plans If you want access to this feature on Cloud Enterprise, contact n8n . n8n can store binary data produced by workflow executions externally. This feature is useful to avoid relying on the filesystem for storing large amounts of binary data. n8n will introduce external storage for other data types in the future. Storing n8n's binary data in S3 # n8n supports AWS S3 as an external store for binary data produced by workflow executions. You can use other S3-compatible services like Cloudflare R2 and Backblaze B2, but n8n doesn't officially support these. Enterprise-tier feature You will need an Enterprise license key for external storage. If your license key expires and you remain on S3 mode, the instance will be able to read from, but not write to, the S3 bucket. Setup # Create and configure a bucket following the AWS documentation . You can use the following policy, replacing <bucket-name> with the name of the bucket you created: 1 2 3 4 5 6 7 8 9 10 11 { "Version" : "2012-10-17" , "Statement" : [ { "Sid" : "VisualEditor0" , "Effect" : "Allow" , "Action" : [ "s3:*" ], "Resource" : [ "arn:aws:s3:::<bucket-name>" , "arn:aws:s3:::<bucket-name>/*" ] } ] } Set a bucket-level lifecycle configuration so that S3 automatically deletes old binary data. n8n delegates pruning of binary data to S3, so setting a lifecycle configuration is required unless you want to preserve binary data indefinitely. Once you finish creating the bucket, you will have a host, bucket name and region, and an access key ID and secret access key. You need to set them in n8n's environment: 1 2 3 4 5 export N8N_EXTERNAL_STORAGE_S3_HOST = ... # example: s3.us-east-1.amazonaws.com export N8N_EXTERNAL_STORAGE_S3_BUCKET_NAME = ... export N8N_EXTERNAL_STORAGE_S3_BUCKET_REGION = ... export N8N_EXTERNAL_STORAGE_S3_ACCESS_KEY = ... export N8N_EXTERNAL_STORAGE_S3_ACCESS_SECRET = ... No region If your provider doesn't require a region, you can set N8N_EXTERNAL_STORAGE_S3_BUCKET_REGION to 'auto' . Tell n8n to store binary data in S3: 1 2 export N8N_AVAILABLE_BINARY_DATA_MODES = filesystem,s3 export N8N_DEFAULT_BINARY_DATA_MODE = s3 Restart the server to load the new configuration. Usage # After you enable S3, n8n writes and reads any new binary data to and from the S3 bucket. n8n writes binary data to your S3 bucket in this format: 1 workflows/{workflowId}/executions/{executionId}/binary_data/{binaryFileId} n8n continues to read older binary data stored in the filesystem from the filesystem, if filesystem remains listed as an option in N8N_AVAILABLE_BINARY_DATA_MODES . If you store binary data in S3 and later switch to filesystem mode, the instance continues to read any data stored in S3, as long as s3 remains listed in N8N_AVAILABLE_BINARY_DATA_MODES and your S3 credentials remain valid. Binary data pruning Binary data pruning operates on the active binary data mode. For example, if your instance stored data in S3, and you later switched to filesystem mode, n8n only prunes binary data in the filesystem. This may change in future. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows/ai-code/find-a-piece-of-data.json

{ "name": "Find a piece of data", "nodes": [ { "parameters": {}, "id": "5319a081-f4f9-44ac-a91e-a57270e6eaa8", "name": "When clicking \"Execute Workflow\"", "type": "n8n-nodes-base.manualTrigger", "typeVersion": 1, "position": [ 460, 460 ] }, { "parameters": { "jsCode": "return [\n{\n\"title\":\n\"\",\n\"phone\":\n\"\",\n\"skype\":\n\"\",\n\"real_name\":\n\"Nathan Berlin\",\n\"email\": \"nathan@example.io\",\n\"real_name_normalized\":\n\"Nathan Berlin\",\n\"display_name\":\n\"Nathan Berlin\",\n\"display_name_normalized\":\n\"Nathan Berlin\",\n\"fields\":\n{\n},\n\"status_text\":\n\"\",\n\"status_emoji\":\n\"\",\n\"status_emoji_display_info\":\n[\n],\n\"status_expiration\":\n0,\n\"avatar_hash\":\n\"0856f5fbbd43\",\n\"image_original\":\n\"https://example.png\",\n\"is_custom_image\":\ntrue,\n\"huddle_state\":\n\"default_unset\",\n\"huddle_state_expiration_ts\":\n0,\n\"first_name\":\n\"Nathan\",\n\"last_name\":\n\"Berlin\",\n\"image_24\":\n\"https://example.png\",\n\"image_32\":\n\"https://example.png\",\n\"image_48\":\n\"https://example.png\",\n\"image_72\":\n\"https://example.png\",\n\"image_192\":\n\"https://example.png\",\n\"image_512\":\n\"https://example.png\",\n\"image_1024\":\n\"https://example.png\",\n\"status_text_canonical\":\n\"\"\n}\n]" }, "id": "3ec439bc-7e3f-4ec2-b724-092466efaa18", "name": "Mock Slack", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ 680, 460 ] }, { "parameters": { "jsCode": "return [\n{\n\"object\":\n\"user\",\n\"id\":\n\"1234\",\n\"name\":\n\"Nathan Berlin\",\n\"avatar_url\":\n\"https://example.jpeg\",\n\"type\":\n\"person\",\n\"person\":\n{\n\"email\":\n\"nathan@example.io\"\n}\n},\n{\n\"object\":\n\"user\",\n\"id\":\n\"5678\",\n\"name\":\n\"Natalie Berlin\",\n\"avatar_url\":\n\"https://example.jpeg\",\n\"type\":\n\"person\",\n\"person\":\n{\n\"email\":\n\"natalie@example.io\"\n}\n}\n]" }, "id": "4bb97ec6-c73a-4f01-b935-a94ffbf15d23", "name": "Mock Notion", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ 900, 460 ] }, { "parameters": {}, "id": "330ecf72-cff0-4ada-9b04-b1c99bb0f4de", "name": "Code", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ 1120, 460 ] } ], "pinData": {}, "connections": { "When clicking \"Execute Workflow\"": { "main": [ [ { "node": "Mock Slack", "type": "main", "index": 0 } ] ] }, "Mock Slack": { "main": [ [ { "node": "Mock Notion", "type": "main", "index": 0 } ] ] }, "Mock Notion": { "main": [ [ { "node": "Code", "type": "main", "index": 0 } ] ] } }, "active": false, "settings": { "executionOrder": "v1" }, "versionId": "81cabd2b-2854-4afb-b656-90a0cb77fa96", "id": "3Brrdjs5aRHo57EX", "meta": { "instanceId": "c5aabef739d71e3d0ceb8b6078a241aaf1b145fa71cbbe36ecfb2c8c3fd64f5f" }, "tags": [] }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/flow-logic/

Flow logic # n8n allows you to represent complex logic in your workflows. This section covers: Splitting with conditionals Merging data Looping Waiting Sub-workflows Error handling Execution order in multi-branch workflows Related sections # You need some understanding of Data in n8n, including Data structure and Data flow within nodes . When building your logic, you'll use n8n's Core nodes , including: Splitting: IF and Switch . Merging: Merge , Compare Datasets , and Code . Looping: IF and Loop Over Items . Waiting: Wait . Creating sub-workflows: Execute Workflow and Execute Workflow Trigger . Error handling: Stop And Error and Error Trigger . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/cookbook/code-node/get-binary-data-buffer/

Get the binary data buffer # The binary data buffer contains all the binary file data processed by a workflow. You need to access it if you want to perform operations on the binary data, such as: Manipulating the data: for example, adding column headers to a CSV file. Using the data in calculations: for example, calculating a hash value based on it. Complex HTTP requests: for example, combining file upload with sending other data formats. Not available in Python getBinaryDataBuffer() isn't supported when using Python. You can access the buffer using n8n's getBinaryDataBuffer() function: 1 2 3 4 5 6 /* * itemIndex: number. The index of the item in the input data. * binaryPropertyName: string. The name of the binary property. * The default in the Read/Write File From Disk node is 'data'. */ let binaryDataBufferItem = await this . helpers . getBinaryDataBuffer ( itemIndex , binaryPropertyName ); For example: 1 2 let binaryDataBufferItem = await this . helpers . getBinaryDataBuffer ( 0 , 'data' ); // Returns the data in the binary buffer for the first input item You should always use the getBinaryDataBuffer() function, and avoid using older methods of directly accessing the buffer, such as targeting it with expressions like items[0].binary.data.data . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows/integrations/builtin/app-nodes/n8n-nodes-base.googledrive/get-most-recent-file.json

{ "meta": { "instanceId": "cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7" }, "nodes": [ { "parameters": { "operation": "download", "fileId": { "__rl": true, "value": "={{ $json.id }}", "mode": "id" }, "options": {} }, "id": "45b53bcd-7dcf-4266-8b6e-bfc12008f9e2", "name": "Google Drive1", "type": "n8n-nodes-base.googleDrive", "typeVersion": 3, "position": [ 1500, 300 ] }, { "parameters": {}, "id": "ba223e7c-4fed-41dd-8c80-2e8fd742629f", "name": "When clicking ‘Test workflow’", "type": "n8n-nodes-base.manualTrigger", "typeVersion": 1, "position": [ 620, 300 ] }, { "parameters": { "resource": "fileFolder", "searchMethod": "query", "returnAll": true, "filter": { "whatToSearch": "files" }, "options": { "fields": [ "*" ] } }, "id": "42799909-16f3-4f0a-9ad9-4dd0375814a0", "name": "Google Drive", "type": "n8n-nodes-base.googleDrive", "typeVersion": 3, "position": [ 840, 300 ] }, { "parameters": { "sortFieldsUi": { "sortField": [ { "fieldName": "modifiedTime", "order": "descending" } ] }, "options": {} }, "id": "bfb8baa6-1b8c-4540-9ad6-b5d7c3f7521b", "name": "Sort", "type": "n8n-nodes-base.sort", "typeVersion": 1, "position": [ 1060, 300 ] }, { "parameters": {}, "id": "2883d39a-f7d9-4244-bf7d-b06878678ccc", "name": "Limit", "type": "n8n-nodes-base.limit", "typeVersion": 1, "position": [ 1280, 300 ] } ], "connections": { "When clicking ‘Test workflow’": { "main": [ [ { "node": "Google Drive", "type": "main", "index": 0 } ] ] }, "Google Drive": { "main": [ [ { "node": "Sort", "type": "main", "index": 0 } ] ] }, "Sort": { "main": [ [ { "node": "Limit", "type": "main", "index": 0 } ] ] }, "Limit": { "main": [ [ { "node": "Google Drive1", "type": "main", "index": 0 } ] ] } }, "pinData": {} }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/cookbook/builtin/get-workflow-static-data/

getWorkflowStaticData(type) # This gives access to the static workflow data. Experimental feature Static data isn't available when testing workflows. The workflow must be active and called by a trigger or webhook to save static data. This feature may behave unreliably under high-frequency workflow executions. You can save data directly in the workflow. This data should be small. As an example: you can save a timestamp of the last item processed from an RSS feed or database. It will always return an object. Properties can then read, delete or set on that object. When the workflow execution succeeds, n8n checks automatically if the data has changed and saves it, if necessary. There are two types of static data, global and node. Global static data is the same in the whole workflow. Every node in the workflow can access it. The node static data is unique to the node. Only the node that set it can retrieve it again. Example with global data: JavaScript Python 1 2 3 4 5 6 7 8 9 10 11 // Get the global workflow static data const workflowStaticData = $getWorkflowStaticData ( 'global' ); // Access its data const lastExecution = workflowStaticData . lastExecution ; // Update its data workflowStaticData . lastExecution = new Date (). getTime (); // Delete data delete workflowStaticData . lastExecution ; 1 2 3 4 5 6 7 8 9 10 11 # Get the global workflow static data workflowStaticData = _getWorkflowStaticData ( 'global' ) # Access its data lastExecution = workflowStaticData . lastExecution # Update its data workflowStaticData . lastExecution = new Date () . getTime () # Delete data delete workflowStaticData . lastExecution Example with node data: JavaScript Python 1 2 3 4 5 6 7 8 9 10 11 // Get the static data of the node const nodeStaticData = $getWorkflowStaticData ( 'node' ); // Access its data const lastExecution = nodeStaticData . lastExecution ; // Update its data nodeStaticData . lastExecution = new Date (). getTime (); // Delete data delete nodeStaticData . lastExecution ; 1 2 3 4 5 6 7 8 9 10 11 # Get the static data of the node nodeStaticData = _getWorkflowStaticData ( 'node' ) # Access its data lastExecution = nodeStaticData . lastExecution # Update its data nodeStaticData . lastExecution = new Date () . getTime () # Delete data delete nodeStaticData . lastExecution Templates and examples # View template details Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/source-control-environments/understand/git/

Git and n8n # n8n uses Git to provide source control. To use this feature, it helps to have some knowledge of basic Git concepts. n8n doesn't implement all Git functionality: you shouldn't view n8n's source control as full version control. New to Git and source control? If you're new to Git, don't panic. You don't need to learn Git to use n8n. This document explains the concepts you need. You do need some Git knowledge to set up the source control, as this involves work in your Git provider. Familiar with Git and source control? If you're familiar with Git, don't rely on behaviors matching exactly. In particular, be aware that source control in n8n doesn't support a pull request-style review and merge process, unless you do this outside n8n in your Git provider. This page introduces the Git concepts and terminology used in n8n. It doesn't cover everything you need to set up and manage a repository. The person doing the Setup should have some familiarity with Git and with their Git hosting provider. This is a brief introduction Git is a complex topic. This section provides a brief introduction to the key terms you need when using environments in n8n. If you want to learn about Git in depth, refer to GitHub | Git and GitHub learning resources . Git overview # Git is a tool for managing, tracking, and collaborating on multiple versions of documents. It's the basis for widely used platforms such as GitHub and GitLab . Branches: Multiple copies of a project # Git uses branches to maintain multiple copies of a document alongside each other. Every branch has its own version. A common pattern is to have a main branch, and then everyone who wants to contribute to the project works on their own branch (copy). When they finish their work, their branch is merged back into the main branch. Local and remote: Moving work between your machine and a Git provider # A common pattern when using Git is to install Git on your own computer, and use a Git provider such as GitHub to work with Git in the cloud. In effect, you have a Git repository (project) on GitHub, and work with copies of it on your local machine. n8n uses this pattern for source control: you'll work with your workflows on your n8n instance, but send them to your Git provider to store them. Push, pull, and commit # n8n uses three key Git processes: Push : send work from your instance to Git. This saves a copy of your workflows and tags, as well as credential and variable stubs, to Git. You can choose which workflows you want to save. Pull : get the workflows, tags, and variables from Git and load it into n8n. You will need to populate any credentials or variable stubs included in the refreshed items. Pulling overwrites your work If you have made changes to a workflow in n8n, you must push the changes to Git before pulling. When you pull, it overwrites any changes you've made if they aren't stored in Git. Commit : a commit in n8n is a single occurrence of pushing work to Git. In n8n, commit and push happen at the same time. Refer to Push and pull for detailed information about how n8n interacts with Git. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/glossary/

Glossary AI agent # AI agents are artificial intelligence systems capable of responding to requests, making decisions, and performing real-world tasks for users. They use large language models (LLMs) to interpret user input and make decisions about how to best process requests using the information and resources they have available. AI chain # AI chains allow you to interact with large language models (LLMs) and other resources in sequences of calls to components. AI chains in n8n don't use persistent memory, so you can't use them to reference previous context (use AI agents for this). AI embedding # Embeddings are numerical representations of data using vectors. They're used by AI to interpret complex data and relationships by mapping values across many dimensions. Vector databases, or vector stores, are databases designed to store and access embeddings. AI memory # In an AI context, memory allows AI tools to persist message context across interactions. This allows you to have a continuing conversations with AI agents, for example, without submitting ongoing context with each message. In n8n, AI agent nodes can use memory, but AI chains can't. AI tool # In an AI context, a tool is an add-on resource that the AI can refer to for specific information or functionality when responding to a request. The AI model can use a tool to interact with external systems or complete specific, focused tasks. AI vector store # Vector stores, or vector databases, are databases designed to store numerical representations of information called embeddings. API # APIs, or application programming interfaces, offer programmatic access to a service's data and functionality. APIs make it easier for software to interact with external systems. They're often offered as an alternative to traditional user-focused interfaces accessed through web browsers or UI. canvas (n8n) # The canvas is the main interface for building workflows in n8n's editor UI. You use the canvas to add and connect nodes to compose workflows. cluster node (n8n) # In n8n, cluster nodes are groups of nodes that work together to provide functionality in a workflow. They consist of a root node and one or more sub nodes that extend the node's functionality. credential (n8n) # In n8n, credentials store authentication information to connect with specific apps and services. After creating credentials with your authentication information (username and password, API key, OAuth secrets, etc.), you can use the associated app node to interact with the service. data pinning (n8n) # Data pinning allows you to temporarily freeze the output data of a node during workflow development. This allows you to develop workflows with predictable data without making repeated requests to external services. Production workflows ignore pinned data and request new data on each execution. editor (n8n) # The n8n editor UI allows you to create and manage workflows. The main area is the canvas, where you can compose workflows by adding, configuring, and connecting nodes. The side and top panels allow you to access other areas of the UI like credentials, templates, variables, executions, and more. evaluation (n8n) # In n8n, evaluation allows you to tag and organize execution history and compare it against new executions. You can use this to understand how your workflow performs over time as you make changes. In particular, this is useful while developing AI-centered workflows. expression (n8n) # In n8n, expressions allow you to populate node parameters dynamically by executing JavaScript code. Instead of providing a static value, you can use the n8n expression syntax to define the value using data from previous nodes, other workflows, or your n8n environment. LangChain # LangChain is an AI-development framework used to work with large language models (LLMs). LangChain provides a standardized system for working with a wide variety of models and other resources and linking different components together to build complex applications. Large language model (LLM) # Large language models, or LLMs, are AI machine learning models designed to excel in natural language processing (NLP) tasks. They're built by training on large amounts of data to develop probabilistic models of language and other data. node (n8n) # In n8n, nodes are individual components that you compose to create workflows. Nodes define when the workflow should run, allow you to fetch, send, and process data, can define flow control logic, and connect with external services. project (n8n) # n8n projects allow you to separate workflows, variables, and credentials into separate groups for easier management. Projects make it easier for teams to collaborate by sharing and compartmentalizing related resources. root node (n8n) # Each n8n cluster node contains a single root nodes that defines the main functionality of the cluster. One or more sub nodes attach to the root node to extend its functionality. sub node (n8n) # n8n cluster nodes consist of one or more sub nodes connected to a root node. Sub nodes extend the functionality of the root node, providing access to specific services or resources or offering specific types of dedicated processing, like calculator functionality, for example. template (n8n) # n8n templates are pre-built workflows designed by n8n and community members that you can import into your n8n instance. When using templates, you may need to fill in credentials and adjust the configuration to suit your needs. trigger node (n8n) # A trigger node is a special node responsible for executing the workflow in response to certain conditions. All production workflows need at least one trigger to determine when the workflow should run. workflow (n8n) # An n8n workflow is a collection of nodes that automate a process. Workflows begin execution when a trigger condition occurs and execute sequentially to achieve complex tasks. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/glossary/#expression-n8n

Glossary AI agent # AI agents are artificial intelligence systems capable of responding to requests, making decisions, and performing real-world tasks for users. They use large language models (LLMs) to interpret user input and make decisions about how to best process requests using the information and resources they have available. AI chain # AI chains allow you to interact with large language models (LLMs) and other resources in sequences of calls to components. AI chains in n8n don't use persistent memory, so you can't use them to reference previous context (use AI agents for this). AI embedding # Embeddings are numerical representations of data using vectors. They're used by AI to interpret complex data and relationships by mapping values across many dimensions. Vector databases, or vector stores, are databases designed to store and access embeddings. AI memory # In an AI context, memory allows AI tools to persist message context across interactions. This allows you to have a continuing conversations with AI agents, for example, without submitting ongoing context with each message. In n8n, AI agent nodes can use memory, but AI chains can't. AI tool # In an AI context, a tool is an add-on resource that the AI can refer to for specific information or functionality when responding to a request. The AI model can use a tool to interact with external systems or complete specific, focused tasks. AI vector store # Vector stores, or vector databases, are databases designed to store numerical representations of information called embeddings. API # APIs, or application programming interfaces, offer programmatic access to a service's data and functionality. APIs make it easier for software to interact with external systems. They're often offered as an alternative to traditional user-focused interfaces accessed through web browsers or UI. canvas (n8n) # The canvas is the main interface for building workflows in n8n's editor UI. You use the canvas to add and connect nodes to compose workflows. cluster node (n8n) # In n8n, cluster nodes are groups of nodes that work together to provide functionality in a workflow. They consist of a root node and one or more sub nodes that extend the node's functionality. credential (n8n) # In n8n, credentials store authentication information to connect with specific apps and services. After creating credentials with your authentication information (username and password, API key, OAuth secrets, etc.), you can use the associated app node to interact with the service. data pinning (n8n) # Data pinning allows you to temporarily freeze the output data of a node during workflow development. This allows you to develop workflows with predictable data without making repeated requests to external services. Production workflows ignore pinned data and request new data on each execution. editor (n8n) # The n8n editor UI allows you to create and manage workflows. The main area is the canvas, where you can compose workflows by adding, configuring, and connecting nodes. The side and top panels allow you to access other areas of the UI like credentials, templates, variables, executions, and more. evaluation (n8n) # In n8n, evaluation allows you to tag and organize execution history and compare it against new executions. You can use this to understand how your workflow performs over time as you make changes. In particular, this is useful while developing AI-centered workflows. expression (n8n) # In n8n, expressions allow you to populate node parameters dynamically by executing JavaScript code. Instead of providing a static value, you can use the n8n expression syntax to define the value using data from previous nodes, other workflows, or your n8n environment. LangChain # LangChain is an AI-development framework used to work with large language models (LLMs). LangChain provides a standardized system for working with a wide variety of models and other resources and linking different components together to build complex applications. Large language model (LLM) # Large language models, or LLMs, are AI machine learning models designed to excel in natural language processing (NLP) tasks. They're built by training on large amounts of data to develop probabilistic models of language and other data. node (n8n) # In n8n, nodes are individual components that you compose to create workflows. Nodes define when the workflow should run, allow you to fetch, send, and process data, can define flow control logic, and connect with external services. project (n8n) # n8n projects allow you to separate workflows, variables, and credentials into separate groups for easier management. Projects make it easier for teams to collaborate by sharing and compartmentalizing related resources. root node (n8n) # Each n8n cluster node contains a single root nodes that defines the main functionality of the cluster. One or more sub nodes attach to the root node to extend its functionality. sub node (n8n) # n8n cluster nodes consist of one or more sub nodes connected to a root node. Sub nodes extend the functionality of the root node, providing access to specific services or resources or offering specific types of dedicated processing, like calculator functionality, for example. template (n8n) # n8n templates are pre-built workflows designed by n8n and community members that you can import into your n8n instance. When using templates, you may need to fill in credentials and adjust the configuration to suit your needs. trigger node (n8n) # A trigger node is a special node responsible for executing the workflow in response to certain conditions. All production workflows need at least one trigger to determine when the workflow should run. workflow (n8n) # An n8n workflow is a collection of nodes that automate a process. Workflows begin execution when a trigger condition occurs and execute sequentially to achieve complex tasks. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/installation/server-setups/google-cloud/

Hosting n8n on Google Cloud # This hosting guide shows you how to self-host n8n on Google Cloud (GCP). It uses n8n with Postgres as a database backend using Kubernetes to manage the necessary resources and reverse proxy. Prerequisites # The gcloud command line tool The gke-gcloud-auth-plugin (install the gcloud CLI first) Self-hosting knowledge prerequisites Self-hosting n8n requires technical knowledge, including: Setting up and configuring servers and containers Managing application resources and scaling Securing servers and applications Configuring n8n n8n recommends self-hosting for expert users. Mistakes can lead to data loss, security issues, and downtime. If you aren't experienced at managing servers, n8n recommends n8n Cloud . Latest and Next versions n8n releases a new minor version most weeks. The latest version is for production use. next is the most recent release. You should treat next as a beta: it may be unstable. To report issues, use the forum . Current latest : 1.81.4 Current next : 1.82.0 Hosting options # Google Cloud offers several options suitable for hosting n8n, including Cloud Run (optimized for running containers), Compute Engine (VMs), and Kubernetes Engine (containers running with Kubernetes). This guide uses the Google Kubernetes Engine (GKE) as the hosting option. Using Kubernetes requires some additional complexity and configuration, but is the best method for scaling n8n as demand changes. Most of the steps in this guide use the Google Cloud UI, but you can also use the gcloud command line tool instead to undertake all the steps. Create project # GCP encourages you to create projects to logically organize resources and configuration. Create a new project for your n8n deployment from your Google Cloud Console: select the project dropdown menu and then the NEW PROJECT button. Then select the newly created project. As you follow the other steps in this guide, make sure you have the correct project selected. Enable the Kubernetes Engine API # GKE isn't enabled by default. Search for "Kubernetes" in the top search bar and select "Kubernetes Engine" from the results. Select ENABLE to enable the Kubernetes Engine API for this project. Create a cluster # From the GKE service page , select Clusters > CREATE . Make sure you select the "Standard" cluster option, n8n doesn't work with an "Autopilot" cluster. You can leave the cluster configuration on defaults unless there's anything specifically you need to change, such as location. Set Kubectl context # The rest of the steps in this guide require you to set the GCP instance as the Kubectl context. You can find the connection details for a cluster instance by opening its details page and selecting CONNECT . The displayed code snippet shows a connection string for the gcloud CLI tool. Paste and run the code snippet in the gcloud CLI to change your local Kubernetes settings to use the new gcloud cluster. Clone configuration repository # Kubernetes and n8n require a series of configuration files. You can clone these from this repository locally. The following steps explain the file configuration and how to add your information. Clone the repository with the following command: 1 git clone https://github.com/n8n-io/n8n-kubernetes-hosting.git -b gcp And change directory to the root of the repository you cloned: 1 cd n8n-kubernetes-hosting Configure Postgres # For larger scale n8n deployments, Postgres provides a more robust database backend than SQLite. Create a volume for persistent storage # To maintain data between pod restarts, the Postgres deployment needs a persistent volume. Running Postgres on GCP requires a specific Kubernetes Storage Class. You can read this guide for specifics, but the storage.yaml manifest creates it for you. You may want to change the regions to create the storage in under the allowedTopologies > matchedLabelExpressions > values key. By default, they're set to us-central . 1 2 3 4 5 6 7 … allowedTopologies : - matchLabelExpressions : - key : failure-domain.beta.kubernetes.io/zone values : - us-central1-b - us-central1-c Postgres environment variables # Postgres needs some environment variables set to pass to the application running in the containers. The example postgres-secret.yaml file contains placeholders you need to replace with your own values. Postgres will use these details when creating the database.. The postgres-deployment.yaml manifest then uses the values from this manifest file to send to the application pods. Configure n8n # Create a volume for file storage # While not essential for running n8n, using persistent volumes is required for: Using nodes that interact with files, such as the binary data node. If you want to persist manual n8n encryption keys between restarts. This saves a file containing the key into file storage during startup. The n8n-claim0-persistentvolumeclaim.yaml manifest creates this, and the n8n Deployment mounts that claim in the volumes section of the n8n-deployment.yaml manifest. 1 2 3 4 5 6 … volumes : - name : n8n-claim0 persistentVolumeClaim : claimName : n8n-claim0 … Pod resources # Kubernetes lets you optionally specify the minimum resources application containers need and the limits they can run to. The example YAML files cloned above contain the following in the resources section of the n8n-deployment.yaml and postgres-deployment.yaml files: 1 2 3 4 5 6 7 … resources : requests : memory : "250Mi" limits : memory : "500Mi" … This defines a minimum of 250mb per container, a maximum of 500mb, and lets Kubernetes handle CPU. You can change these values to match your own needs. As a guide, here are the resources values for the n8n cloud offerings: Start : 320mb RAM, 10 millicore CPU burstable Pro (10k executions) : 640mb RAM, 20 millicore CPU burstable Pro (50k executions) : 1280mb RAM, 80 millicore CPU burstable Optional: Environment variables # You can configure n8n settings and behaviors using environment variables. Create an n8n-secret.yaml file. Refer to Environment variables for n8n environment variables details. Deployments # The two deployment manifests ( n8n-deployment.yaml and postgres-deployment.yaml ) define the n8n and Postgres applications to Kubernetes. The manifests define the following: Send the environment variables defined to each application pod Define the container image to use Set resource consumption limits with the resources object The volumes defined earlier and volumeMounts to define the path in the container to mount volumes. Scaling and restart policies. The example manifests define one instance of each pod. You should change this to meet your needs. Services # The two service manifests ( postgres-service.yaml and n8n-service.yaml ) expose the services to the outside world using the Kubernetes load balancer using ports 5432 and 5678 respectively. Send to Kubernetes cluster # Send all the manifests to the cluster with the following command: 1 kubectl apply -f . Namespace error You may see an error message about not finding an "n8n" namespace as that resources isn't ready yet. You can run the same command again, or apply the namespace manifest first with the following command: 1 kubectl apply -f namespace.yaml Set up DNS # n8n typically operates on a subdomain. Create a DNS record with your provider for the subdomain and point it to the IP address of the n8n service. Find the IP address of the n8n service from the Services & Ingress menu item of the cluster you want to use under the Endpoints column. GKE and IP addresses Read this GKE tutorial for more details on how reserved IP addresses work with GKE and Kubernetes resources. Delete resources # Remove the resources created by the manifests with the following command: 1 kubectl delete -f . Next steps # Learn more about configuring and scaling n8n. Or explore using n8n: try the Quickstarts . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/community-nodes/installation/gui-install/

Install community nodes in the n8n app # Limited to n8n instance owners Only the n8n instance owner can install and manage community nodes. The instance owner is the person who sets up and manages user management. Install a community node # To install a community node: Go to Settings > Community Nodes . Select Install . Find the node you want to install: Select Browse . n8n takes you to an npm search results page, showing all npm packages tagged with the keyword n8n-community-node-package . Browse the list of results. You can filter the results or add more keywords. Once you find the package you want, make a note of the package name. If you want to install a specific version, make a note of the version number as well. Return to n8n. Enter the npm package name, and version number if required. For example, consider a community node designed to access a weather API called "Storms." The package name is n8n-node-storms, and it has three major versions. To install the latest version of a package called n8n-node-weather: enter n8n-nodes-storms in Enter npm package name . To install version 2.3: enter n8n-node-storms@2.3 in Enter npm package name . Agree to the risks of using community nodes: select I understand the risks of installing unverified code from a public source. Select Install . n8n installs the node, and returns to the Community Nodes list in Settings . Nodes on the blocklist n8n maintains a blocklist of community nodes that it prevents you from installing. Refer to n8n community node blocklist for more information. Uninstall a community node # To uninstall a community node: Go to Settings > Community nodes . On the node you want to install, select Options . Select Uninstall package . Select Uninstall Package in the confirmation modal. Upgrade a community node # Breaking changes in versions Node developers may introduce breaking changes in new versions of their nodes. A breaking change is an update that breaks previous functionality. Depending on the node versioning approach that a node developer chooses, upgrading to a version with a breaking change could cause all workflows using the node to break. Be careful when upgrading your nodes. If you find that an upgrade causes issues, you can downgrade . Upgrade to the latest version # You can upgrade community nodes to the latest version from the node list in Settings > community nodes . When a new version of a community node is available, n8n displays an Update button on the node. Click the button to upgrade to the latest version. Upgrade to a specific version # To upgrade to a specific version (a version other than the latest), uninstall the node, then reinstall it, making sure to specify the target version. Follow the Installation instructions for more guidance. Downgrade a community node # If there is a problem with a particular version of a community node, you may want to roll back to a previous version. To do this, uninstall the community node, then reinstall it, targeting a specific node version. Follow the Installation instructions for more guidance. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/installation/server-setups/heroku/

Hosting n8n on Heroku # This hosting guide shows you how to self-host n8n on Heroku. It uses: Docker Compose to create and define the application components and how they work together. Heroku's PostgreSQL service to host n8n's data storage. A Deploy to Heroku button offering a one click, with minor configuration, deployment. Self-hosting knowledge prerequisites Self-hosting n8n requires technical knowledge, including: Setting up and configuring servers and containers Managing application resources and scaling Securing servers and applications Configuring n8n n8n recommends self-hosting for expert users. Mistakes can lead to data loss, security issues, and downtime. If you aren't experienced at managing servers, n8n recommends n8n Cloud . Latest and Next versions n8n releases a new minor version most weeks. The latest version is for production use. next is the most recent release. You should treat next as a beta: it may be unstable. To report issues, use the forum . Current latest : 1.81.4 Current next : 1.82.0 Use the deployment template to create a Heroku project # The quickest way to get started with deploying n8n to Heroku is using the Deploy to Heroku button: This opens the Create New App page on Heroku. Set a name for the project, and choose the region to deploy the project to. Configure environment variables # Heroku pre-fills the configuration options defined in the env section of the app.json file, which also sets default values for the environment variables n8n uses. You can change any of these values to suit your needs. You must change the following values: N8N_ENCRYPTION_KEY , which n8n uses to encrypt user account details before saving to the database. WEBHOOK_URL should match the application name you create to ensure that webhooks have the correct URL. Deploy n8n # Select Deploy app . After Heroku builds and deploys the app it provides links to Manage App or View the application. Heroku and DNS Refer to the Heroku documentation to find out how to connect your domain to a Heroku application. Changing the deployment template # You can make changes to the deployment template by forking the repository and deploying from you fork. The Dockerfile # By default the Dockerfile pulls the latest n8n image, if you want to use a different or fixed version, then update the image tag on the top line of the Dockerfile . Heroku and exposing ports # Heroku doesn't allow Docker-based applications to define an exposed port with the EXPOSE command. Instead, Heroku provides a PORT environment variable that it dynamically populates at application runtime. The entrypoint.sh file overrides the default Docker image command to instead set the port variable that Heroku provides. You can then access n8n on port 80 in a web browser. Docker limitations with Heroku Read this guide for more details on the limitations of using Docker with Heroku. Configuring Heroku # The heroku.yml file defines the application you want to create on Heroku. It consists of two sections: setup > addons defines the Heroku addons to use. In this case, the PostgreSQL database addon. The build section defines how Heroku builds the application. In this case it uses the Docker buildpack to build a web service based on the supplied Dockerfile . Next steps # Learn more about configuring and scaling n8n. Or explore using n8n: try the Quickstarts . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/installation/server-setups/hetzner/

Hosting n8n on Hetzner cloud # This hosting guide shows you how to self-host n8n on a Hetzner cloud server. It uses: Caddy (a reverse proxy) to allow access to the Server from the internet. Docker Compose to create and define the application components and how they work together. Self-hosting knowledge prerequisites Self-hosting n8n requires technical knowledge, including: Setting up and configuring servers and containers Managing application resources and scaling Securing servers and applications Configuring n8n n8n recommends self-hosting for expert users. Mistakes can lead to data loss, security issues, and downtime. If you aren't experienced at managing servers, n8n recommends n8n Cloud . Latest and Next versions n8n releases a new minor version most weeks. The latest version is for production use. next is the most recent release. You should treat next as a beta: it may be unstable. To report issues, use the forum . Current latest : 1.81.4 Current next : 1.82.0 Create a server # Log in to the Hetzner Cloud Console. Select the project to host the server, or create a new project by selecting + NEW PROJECT . Select + CREATE SERVER on the project tile you want to add it to. You can change most of the settings to suit your needs, but as this guide uses Docker to run the application, under the Image section, select "Docker CE" from the APPS tab. Type When creating the server, Hetzner asks you to choose a plan. For most usage levels, the CPX11 type is enough. SSH keys Hetzner lets you choose between SSH and password-based authentication. SSH is more secure. The rest of this guide assumes you are using SSH. Log in to your server # The rest of this guide requires you to log in to the server using a terminal with SSH. Refer to Access with SSH/rsync/BorgBackup for more information. You can find the public IP in the listing of the servers in your project. Install Docker Compose # The Hetzner Docker app image doesn't have Docker compose installed. Install it with the following commands: 1 2 apt update && apt -y upgrade apt install docker-compose-plugin Clone configuration repository # Docker Compose, n8n, and Caddy require a series of folders and configuration files. You can clone these from this repository into the root user folder of the server. The following steps will tell you which file to change and what changes to make. Clone the repository with the following command: 1 git clone https://github.com/n8n-io/n8n-docker-caddy.git And change directory to the root of the repository you cloned: 1 cd n8n-docker-caddy Default folders and files # The host operating system (the server) copies the two folders you created to Docker containers to make them available to Docker. The two folders are: caddy_config : Holds the Caddy configuration files. local_files : A folder for files you upload or add using n8n. Create Docker volume # To persist the Caddy cache between restarts and speed up start times, create a Docker volume that Docker reuses between restarts: 1 docker volume create caddy_data Create a Docker volume for the n8n data: 1 sudo docker volume create n8n_data Set up DNS # n8n typically operates on a subdomain. Create a DNS record with your provider for the subdomain and point it to the IP address of the server. The exact steps for this depend on your DNS provider, but typically you need to create a new "A" record for the n8n subdomain. DigitalOcean provide An Introduction to DNS Terminology, Components, and Concepts . Open ports # n8n runs as a web application, so the server needs to allow incoming access to traffic on port 80 for non-secure traffic, and port 443 for secure traffic. Open the following ports in the server's firewall by running the following two commands: 1 2 sudo ufw allow 80 sudo ufw allow 443 Configure n8n # n8n needs some environment variables set to pass to the application running in the Docker container. The example .env file contains placeholders you need to replace with values of your own. Open the file with the following command: 1 nano .env The file contains inline comments to help you know what to change. Refer to Environment variables for n8n environment variables details. The Docker Compose file # The Docker Compose file ( docker-compose.yml ) defines the services the application needs, in this case Caddy and n8n. The Caddy service definition defines the ports it uses and the local volumes to copy to the containers. The n8n service definition defines the ports it uses, the environment variables n8n needs to run (some defined in the .env file), and the volumes it needs to copy to the containers. The Docker Compose file uses the environment variables set in the .env file, so you shouldn't need to change it's content, but to take a look, run the following command: 1 nano docker-compose.yml Configure Caddy # Caddy needs to know which domains it should serve, and which port to expose to the outside world. Edit the Caddyfile file in the caddy_config folder. 1 nano caddy_config/Caddyfile Change the placeholder subdomain to yours. If you followed the steps to name the subdomain n8n, your full domain is similar to n8n.example.com . The n8n in the reverse_proxy setting tells Caddy to use the service definition defined in the docker-compose.yml file: 1 2 3 4 5 n8n.<domain>.<suffix> { reverse_proxy n8n:5678 { flush_interval -1 } } Start Docker Compose # Start n8n and Caddy with the following command: 1 docker compose up -d This may take a few minutes. Test your setup # In your browser, open the URL formed of the subdomain and domain name defined earlier. Enter the user name and password defined earlier, and you should be able to access n8n. Stop n8n and Caddy # You can stop n8n and Caddy with the following command: 1 sudo docker compose stop Updating # If you run n8n using a Docker Compose file, follow these steps to update n8n: 1 2 3 4 5 6 7 8 # Pull latest version docker compose pull # Stop and remove older version docker compose down # Start the container docker compose up -d Next steps # Learn more about configuring and scaling n8n. Or explore using n8n: try the Quickstarts . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/history/

Workflow history # Feature availability Full workflow history is available on Enterprise Cloud and Enterprise Self-hosted. Versions from the last five days are available for Cloud Pro users. Versions from the last 24 hours are available for registered Community users. Use workflow history to view and restore previous versions of your workflows. Understand workflow history # n8n creates a new version when you: Save your workflow. Restore an old version. n8n saves the latest version before restoring. Pull from a Git repository using Source control . Note that n8n saves versions to the instance database, not to Git. Workflow history and execution history Don't confuse workflow history with the Workflow-level executions list . Executions are workflow runs. With the executions list, you can see previous runs of the current version of the workflow. You can copy previous executions into the editor to Debug and re-run past executions in your current workflow. Workflow history is previous versions of the workflow: for example, a version with a different node, or different parameters set. View workflow history # To view a workflow's history: Open the workflow. Select Workflow history . n8n opens a menu showing the saved workflow versions, and a canvas with a preview of the selected version. Restore or copy previous versions # You can restore a previous workflow version, or make a copy of it: On the version you want to restore or copy, select Options . Choose what you want to do: Restore this version : replace your current workflow with the selected version. Clone to new workflow : create a new workflow based on the selected version. Open version in new tab : open a second tab displaying the selected version. Use this to compare versions. Download : download the version as JSON. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/

Self-hosting n8n # This section provides guidance on setting up n8n for both the Enterprise and Community self-hosted editions. The Community edition is free, the Enterprise edition isn't. See Community edition features for a list of available features. Installation and server setups Install n8n on any platform using npm or Docker. Or follow our guides to popular hosting platforms. Docker installation guide Configuration Learn how to configure n8n with environment variables. Environment Variables Users and authentication Choose and set up user authentication for your n8n instance. Authentication Scaling Manage data, modes, and processes to keep n8n running smoothly at scale. Scaling Securing n8n Secure your n8n instance by setting up SSL, SSO, or 2FA or blocking or opting out of some data collection or features. Securing n8n guide Starter kits New to n8n or AI? Try our Self-hosted AI Starter Kit. Curated by n8n, it combines the self-hosted n8n platform with compatible AI products and components to get you started building self-hosted AI workflows. Starter kits Self-hosting knowledge prerequisites Self-hosting n8n requires technical knowledge, including: Setting up and configuring servers and containers Managing application resources and scaling Securing servers and applications Configuring n8n n8n recommends self-hosting for expert users. Mistakes can lead to data loss, security issues, and downtime. If you aren't experienced at managing servers, n8n recommends n8n Cloud . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/build/reference/http-helpers/

HTTP request helper for node builders # n8n provides a flexible helper for making HTTP requests, which abstracts away most of the complexity. Programmatic style only The information in this document is for node building using the programmatic style. It doesn't apply to declarative style nodes. Usage # Call the helper inside the execute function. 1 2 3 4 5 6 7 8 9 // If no auth needed const response = await this . helpers . httpRequest ( options ); // If auth needed const response = await this . helpers . httpRequestWithAuthentication . call ( this , 'credentialTypeName' , // For example: pipedriveApi options , ); options is an object: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { url : string ; headers? : object ; method ?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' ; body? : FormData | Array | string | number | object | Buffer | URLSearchParams ; qs? : object ; arrayFormat ?: 'indices' | 'brackets' | 'repeat' | 'comma' ; auth ?: { username : string , password : string , }; disableFollowRedirect? : boolean ; encoding ?: 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream' ; skipSslCertificateValidation? : boolean ; returnFullResponse? : boolean ; proxy ?: { host : string ; port : string | number ; auth ?: { username : string ; password : string ; }, protocol? : string ; }; timeout? : number ; json? : boolean ; } url is required. The other fields are optional. The default method is GET . Some notes about the possible fields: body : you can use a regular JavaScript object for JSON payload, a buffer for file uploads, an instance of FormData for multipart/form-data , and URLSearchParams for application/x-www-form-urlencoded . headers : a key-value pair. If body is an instance of FormData then n8n adds content-type: multipart/form-data automatically. If body is an instance of URLSearchParams , then n8n adds content-type: application/x-www-form-urlencoded . To override this behavior, set a content-type header. arrayFormat : if your query string contains an array of data, such as const qs = {IDs: [15,17]} , the value of arrayFormat defines how n8n formats it. indices (default): { a: ['b', 'c'] } as a[0]=b&a[1]=c brackets : { a: ['b', 'c'] } as a[]=b&a[]=c repeat : { a: ['b', 'c'] } as a=b&a=c comma : { a: ['b', 'c'] } as a=b,c auth : Used for Basic auth. Provide username and password . n8n recommends omitting this, and using helpers.httpRequestWithAuthentication(...) instead. disableFollowRedirect : By default, n8n follows redirects. You can set this to true to prevent this from happening. skipSslCertificateValidation : Used for calling HTTPS services without proper certificate returnFullResponse : Instead of returning just the body, returns an object with more data in the following format: {body: body, headers: object, statusCode: 200, statusMessage: 'OK'} encoding : n8n can detect the content type, but you can specify arrayBuffer to receive a Buffer you can read from and interact with. Example # For an example, refer to the Mattermost node . Deprecation of the previous helper # The previous helper implementation using this.helpers.request(options) used and exposed the request-promise library. This was removed in version 1. To minimize incompatibility, n8n made a transparent conversion to another library called Axios . If you are having issues, please report them in the Community Forums or on GitHub . Migration guide to the new helper # The new helper is much more robust, library agnostic, and easier to use. New nodes should all use the new helper. You should strongly consider migrating existing custom nodes to the new helper. These are the main considerations when migrating: Accepts url . Doesn't accept uri . encoding: null now must be encoding: arrayBuffer . rejectUnauthorized: false is now skipSslCertificateValidation: true Use body according to content-type headers to clarify the payload. resolveWithFullResponse is now returnFullResponse and has similar behavior Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/builtin/http-node-variables/

HTTP node variables # Variables for working with HTTP node requests and responses when using pagination. Refer to HTTP Request for guidance on using the HTTP node, including configuring pagination. Refer to HTTP Request node cookbook | Pagination for example pagination configurations. HTTP node only These variables are for use in expressions in the HTTP node. You can't use them in other nodes. Variable Description $pageCount The pagination count. Tracks how many pages the node has fetched. $request The request object sent by the HTTP node. $response The response object from the HTTP call. Includes $response.body , $response.headers , and $response.statusCode . The contents of body and headers depend on the data sent by the API. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/advanced-ai/examples/human-fallback/

Have a human fallback for AI workflows # This is a workflow that tries to answer user queries using the standard GPT-4 model. If it can't answer, it sends a message to Slack to ask for human help. It prompts the user to supply an email address. This workflow uses the Chat Trigger to provide the chat interface, and the Custom n8n Workflow Tool to call a second workflow that handles checking for email addresses and sending the Slack message. View workflow file Key features # This workflow uses: Chat Trigger : start your workflow and respond to user chat interactions. The node provides a customizable chat interface. Agent : the key piece of the AI workflow. The Agent interacts with other components of the workflow and makes decisions about what tools to use. Custom n8n Workflow Tool : plug in n8n workflows as custom tools. In AI, a tool is an interface the AI can use to interact with the world (in this case, the data provided by your workflow). It allows the AI model to access information beyond its built-in dataset. Using the example # To load the template into your n8n instance: Download the workflow JSON file. Open a new workflow in your n8n instance. Copy in the JSON, or select Workflow menu > Import from file... . The example workflows use Sticky Notes to guide you: Yellow: notes and information. Green: instructions to run the workflow. Orange: you need to change something to make the workflow work. Blue: draws attention to a key feature of the example. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/deploy/install-private-nodes/

Install private nodes # You can build your own nodes and install them in your n8n instance without publishing them on npm. This is useful for nodes that you create for internal use only at your company. Install your node in a Docker n8n instance # If you're running n8n using Docker, you need to create a Docker image with the node installed in n8n. Create a Dockerfile and paste the code from this Dockerfile . Your Dockerfile should look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 FROM node:16-alpine ARG N8N_VERSION RUN if [ -z " $N8N_VERSION " ] ; then echo "The N8N_VERSION argument is missing!" ; exit 1 ; fi # Update everything and install needed dependencies RUN apk add --update graphicsmagick tzdata git tini su-exec # Set a custom user to not have n8n run as root USER root # Install n8n and the packages it needs to build it correctly. RUN apk --update add --virtual build-dependencies python3 build-base ca-certificates && \ npm config set python " $( which python3 ) " && \ npm_config_user = root npm install -g full-icu n8n@ ${ N8N_VERSION } && \ apk del build-dependencies \ && rm -rf /root /tmp/* /var/cache/apk/* && mkdir /root ; # Install fonts RUN apk --no-cache add --virtual fonts msttcorefonts-installer fontconfig && \ update-ms-fonts && \ fc-cache -f && \ apk del fonts && \ find /usr/share/fonts/truetype/msttcorefonts/ -type l -exec unlink {} \; \ && rm -rf /root /tmp/* /var/cache/apk/* && mkdir /root ENV NODE_ICU_DATA /usr/local/lib/node_modules/full-icu WORKDIR /data COPY docker-entrypoint.sh /docker-entrypoint.sh ENTRYPOINT [ "tini" , "--" , "/docker-entrypoint.sh" ] EXPOSE 5678/tcp Compile your custom node code ( npm run build if you are using nodes starter). Copy the node and credential folders from within the dist folder into your container's ~/.n8n/custom/ directory. This makes them available to Docker. Download the docker-entrypoint.sh file, and place it in the same directory as your Dockerfile. Build your Docker image: 1 2 3 # Replace <n8n-version-number> with the n8n release version number. # For example, N8N_VERSION=0.177.0 docker build --build-arg N8N_VERSION = <n8n-version-number> --tag = customizedn8n . You can now use your node in Docker. Install your node in a global n8n instance # If you've installed n8n globally, make sure that you install your node inside n8n. n8n will find the module and load it automatically. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/community-nodes/installation/

Install and manage community nodes # There are two ways to install community nodes: Within n8n using the GUI . Manually from the command line : use this method if your n8n instance doesn't support installation through the in-app GUI. Only available on self-hosted instances Community nodes aren't available on n8n cloud and require self-hosting n8n. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/

Integrations # n8n calls integrations nodes. Nodes are the building blocks of workflows in n8n. They're an entry point for retrieving data, a function to process data, or an exit for sending data. The data process includes filtering, recomposing, and changing data. There can be one or several nodes for your API, service or app. You can connect multiple nodes, which allows you to create complex workflows. Built-in nodes # n8n includes a collection of built-in integrations. Refer to Built-in nodes for documentation on all n8n's built-in nodes. Community nodes # As well as using the built-in nodes, you can also install community-built nodes. Refer to Community nodes for more information. Credential-only nodes and custom operations # One of the most complex parts of setting up API calls is managing authentication. n8n provides credentials support for operations and services beyond those supported by built-in nodes. Custom operations for existing nodes: n8n supplies hundreds of nodes to create workflows that link multiple products. However, some nodes don't include all the possible operations supported by a product's API. You can work around this by making a custom API call using the HTTP Request node. Credential-only nodes: n8n includes credential-only nodes. These are integrations where n8n supports setting up credentials for use in the HTTP Request node, but doesn't provide a standalone node. You can find a credential-only node in the nodes panel, as you would for any other integration. Refer to Custom operations for more information. Generic integrations # If you need to connect to a service where n8n doesn't have a node, or a credential-only node, you can still use the HTTP Request node. Refer to the node page for details on how to set up authentication and create your API call. Where to go next # If you want to create your own node, head over to the Creating Nodes section. Check out Community nodes to learn about installing and managing community-built nodes. If you'd like to learn more about the different nodes in n8n, their functionalities and example usage, check out n8n's node libraries: Core nodes , Actions , and Triggers . If you'd like to learn how to add the credentials for the different nodes, head over to the Credentials section. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/advanced-ai/intro-tutorial/

Build an AI chat agent with n8n # Welcome to the introductory tutorial for building AI workflows with n8n. Whether you have used n8n before, or this is your first time, we will show you how the building blocks of AI workflows fit together and construct a working AI-powered chat agent which you can easily customize for your own purposes. Many people find it easier to take in new information in video format. This tutorial is based on one of n8n's popular videos, linked below. Watch the video or read the steps here, or both! What you will need # n8n : For this tutorial we recommend using the n8n cloud service - there is a free trial for new users! For a self hosted service, refer to the installation pages . Credentials for a chat model : This tutorial uses OpenAI, but you can easily use DeepSeek, Google Gemini, Groq, Azure, and others (see the sub-nodes documentation for more). What you will learn # AI concepts in n8n How to use the AI Agent node Working with Chat input Connecting with AI models Customising input Observing the conversation Adding persistence AI concepts in n8n # If you're already familiar with AI, feel free to skip this section. This is a basic introduction to AI concepts and how they can be used in n8n workflows. An AI agent builds on Large Language Models (LLMs) , which generate text based on input by predicting the next word. While LLMs only process input to produce output, AI agents add goal-oriented functionality. They can use tools , process their outputs, and make decisions to complete tasks and solve problems. In n8n, the AI agent is represented as a node with some extra connections. Feature LLM AI Agent Core Capability Text generation Goal-oriented task completion Decision-Making None Yes Uses Tools/APIs No Yes Workflow Complexity Single-step Multi-step Scope Generates language Performs complex, real-world tasks Example LLM generating a paragraph An agent scheduling an appointment By incorporating the AI agent as a node, n8n can combine AI-driven steps with traditional programming for efficient, real-world workflows. For instance, simpler tasks, like validating an email address, do not require AI, whereas a complex tasks, like processing the content of an email or dealing with multimodal inputs (e.g., images, audio), are excellent uses of an AI agent. 1. Create a new workflow # When you open n8n, you'll see either: An empty workflow: if you have no workflows and you're logging in for the first time. Use this workflow. The Workflows list on the Overview page. Select the button to create a new workflow. 2. Add a trigger node # Every workflow needs somewhere to start. In n8n these are called 'trigger nodes' . For this workflow, we want to start with a chat node. Select Add first step or press Tab to open the node menu. Search for Chat Trigger . n8n shows a list of nodes that match the search. Select Chat Trigger to add the node to the canvas. n8n opens the node. Close the node details view (Select Back to canvas ) to return to the canvas. More about the Chat Trigger node... The trigger node generates output when there is an event causing it to trigger. In this case we want to be able to type in text to cause the workflow to run. In production, this trigger can be hooked up to a public chat interface as provided by n8n or embedded into another website. To start this simple workflow we will just use the built-in local chat interface to communicate, so no further setup is required. View workflow file 3. Add an AI Agent Node # The AI Agent node is the core of adding AI to your workflows. Select the Add node connector on the trigger node to bring up the node search. Start typing "AI" and choose the AI agent node to add it. The editing view of the AI agent will now be displayed. There are some fields which can be changed. For this tutorial, the default Agent should be left at the default ( Tools Agent ). As we are using the Chat Trigger node, the other default setting for the source and specification of the prompt don't need to be changed. View workflow file 4. Configure the node # AI agents require a chat model to be attached to process the incoming prompts. Add a chat model by clicking the plus button underneath the Chat Model connection on the AI Agent node (it's the first connection along the bottom of the node). The search dialog will appear, filtered on 'Language Models'. These are the models with built-in support in n8n. For this tutorial we will use OpenAI Chat Model . Selecting the OpenAI Chat model from the list will attach it to the AI Agent node and open the node editor. One of the parameters which can be changed is the 'Model'. Note that for the basic OpenAI accounts, only the 'gpt-4o-mini' model is allowed. Which chat model? As mentioned earlier, the LLM is the component which generates the text according to a prompt it is given. LLMs have to be created and trained, usually an intensive process. Different LLMS may have different capabilities or specialties, depending on the data they were trained with. 5. Add credentials (if needed) # In order for n8n to communicate with the chat model, it will need some credentials (login data giving it access to an account on a different online service). If you already have credentials set up for OpenAI, these should appear by default in the credentials selector. Otherwise you can use the Credentials selector to help you add a new credential. To add a new credential, click on the text which says 'Select credential'. An option to add a new credential will appear This credential just needs an API key. When adding credentials of any type, check the text to the right-hand side. In this case it has a handy link to take you straight to your OpenAI account to retrieve the API key. The API key is just one long string. That's all you need for this particular credential. Copy it from the OpenAI website and paste it into the API key section. Keeping your credentials safe Credentials are private pieces of information issued by apps and services to authenticate you as a user and allow you to connect and share information between the app or service and the n8n node. The type of information required varies depending on the app/service concerned. You should be careful about sharing or revealing the credentials outside of n8n. 6. Test the node # Now that the node is connected to the Chat Trigger and a chat model, we can test this part of the workflow. Click on the 'Chat' button near the bottom of the canvas. This opens up a local chat window on the left and the AI agent logs on the right. Type in a message and press Enter . You will now see the response from the chat model appear below your message. The log window displays the inputs to and outputs from the AI Agent. Accessing the logs... You can access the logs for the AI node even when you aren't using the chat interface. Open up the AI Agent node and click on the Logs tab in the right hand panel. 7. Changing the prompt # The logs in the previous step reveal some extra data - the system prompt. This is the default message that the AI Agent primes the chat model with. From the log you can see this is set to "You are a helpful assistant". We can however change this prompt to alter the behavior of the chat model. Open the AI Agent node. In the bottom of the panel is a section labeled 'Options' and a selector labeled 'Add Option'. Use this to select 'System message' The system message is now displayed. This is the same priming prompt we noticed before in the logs. Change the prompt to something else to prime the chat model in a different way. You could try something like "You are a brilliant poet who always replies in rhyming couplets" for example. Close the node and return to the chat window. Repeat your message and notice how the output has changed. 8. Adding persistence # The chat model is now giving us useful output, but there is something wrong with it which will become apparent when you try to have a conversation. Use the chat and tell the chat model your name, for example "Hi there, my name is Nick". Wait for the response, then type the message "What's my name?". The AI will not be able to tell you, however apologetic it may seem. The reason for this is we are not saving the context. The AI Agent has no memory . In order to remember what has happened in the conversation, the AI Agent needs to preserve context. We can do this by adding memory to the AI Agent node. On the canvas click on the on the bottom of the AI Agent node labeled "Memory". From the panel which appears, select "Window Buffer Memory". This will use the memory from the instance running n8n, and is usually sufficient for simple usage. The default value of 5 interactions should be sufficient here, but remember where this option is if you may want to change it later. Repeat the exercise of having a conversation above, and see that the AI Agent now remembers your name. 9. Saving the workflow # Before we leave the workflow editor, remember to save the workflow or all your changes will be lost. Click on the "Save" button in the top right of the editor window. Your workflow will now be saved and you can return to it later to chat again or add new features. Congratulations! # You have taken your first steps in building useful and effective workflows with AI. In this tutorial we have investigated the basic building blocks of an AI workflow, added an AI Agent and a chat model, and adjusted the prompt to get the kind of output we wanted. We also added memory so the chat could retain context between messages. View workflow file Next steps # Now you have seen how to create a basic AI workflow, there are plenty of resources to build on that knowledge and plenty of examples to give you ideas of where to go next: Learn more about AI concepts and view examples in Examples and concepts . Browse AI Workflow templates . Find out how to enhance the AI agent with tools . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/advanced-ai/examples/introduction/

Advanced AI examples and concepts # This section provides explanations of important AI concepts, and workflow templates that highlight those concepts, with explanations and configuration guides. The examples cover common use cases and highlight different features of advanced AI in n8n. Agents and chains Learn about agents and chains in AI, including exploring key differences using the example workflow. What's a chain in AI? What's an agent in AI? Demonstration of key differences between agents and chains Custom n8n Workflow Tool Learn about tools in AI, then explore examples that use n8n workflows as custom tools to give your AI workflow access to more data. What's a tool in AI? Chat with Google Sheets Call an API to fetch data Set up a human fallback Let AI specify tool parameters with $fromAI() Vector databases Learn about vector databases in AI, along with related concepts including embeddings and retrievers. What's a vector database? Populate a Pinecone vector database from a website Memory Learn about memory in AI. What's memory in AI? AI workflow templates You can browse AI templates, included community contributions, on the n8n website. Browse all AI templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/configuration-examples/isolation/

Isolate n8n # By default, a self-hosted n8n instance sends data to n8n's servers. It notifies users about available updates, workflow templates, and diagnostics. To prevent your n8n instance from connecting to n8n's servers, set these environment variables to false: 1 2 3 N8N_DIAGNOSTICS_ENABLED=false N8N_VERSION_NOTIFICATIONS_ENABLED=false N8N_TEMPLATES_ENABLED=false Unset n8n's diagnostics configuration: 1 2 3 EXTERNAL_FRONTEND_HOOKS_URLS= N8N_DIAGNOSTICS_CONFIG_FRONTEND= N8N_DIAGNOSTICS_CONFIG_BACKEND= Refer to Environment variables reference for more information on these variables. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/data/data-mapping/data-item-linking/item-linking-code-node/

Item linking in the Code node # Use n8n's item linking to access data from items that precede the current item. It also has implications when using the Code node. Most nodes link every output item to an input item. This creates a chain of items that you can work back along to access previous items. For a deeper conceptual overview of this topic, refer to Item linking concepts . This document focuses on practical usage examples. When using the Code node, there are some scenarios where you need to manually supply item linking information if you want to be able to use $("<node-name>").item later in the workflow. All these scenarios only apply if you have more than one incoming item. n8n automatically handles item linking for single items. These scenarios are when you: Add new items: the new items aren't linked to any input. Return new items. Want to manually control the item linking. n8n's automatic item linking handles the other scenarios. To control item linking, set pairedItem when returning data. For example, to link to the item at index 0: 1 2 3 4 5 6 7 8 9 [ { "json" : { . . . }, // The index of the input item that generated this output item "pairedItem" : 0 } ] pairedItem usage example # Take this input data: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 [ { "id" : "23423532" , "name" : "Jay Gatsby" }, { "id" : "23423533" , "name" : "José Arcadio Buendía" }, { "id" : "23423534" , "name" : "Max Sendak" }, { "id" : "23423535" , "name" : "Zaphod Beeblebrox" }, { "id" : "23423536" , "name" : "Edmund Pevensie" } ] And use it to generate new items, containing just the name, along with a new piece of data: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 newItems = []; for ( let i = 0 ; i < items . length ; i ++ ){ newItems . push ( { "json" : { "name" : items [ i ]. json . name , "aBrandNewField" : "New data for item " + i } } ) } return newItems ; newItems is an array of items with no pairedItem . This means there's no way to trace back from these items to the items used to generate them. Add the pairedItem object: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 newItems = []; for ( let i = 0 ; i < items . length ; i ++ ){ newItems . push ( { "json" : { "name" : items [ i ]. json . name , "aBrandNewField" : "New data for item " + i }, "pairedItem" : i } ) } return newItems ; Each new item now links to the item used to create it. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/data/data-mapping/data-item-linking/item-linking-concepts/

Item linking concepts # Each output item created by a node includes metadata that links them to the input item (or items) that the node used to generate them. This creates a chain of items that you can work back along to access previous items. This can be complicated to understand, especially if the node splits or merges data. You need to understand item linking when building your own programmatic nodes, or in some scenarios using the Code node. This document provides a conceptual overview of this feature. For usage details, refer to: Item linking for node creators , for details on how to handle item linking when building a node. Item linking in the Code node , to learn how to handle item linking in the Code node. Item linking errors , to understand the errors you may encounter in the editor UI. n8n's automatic item linking # If a node doesn't control how to link input items to output items, n8n tries to guess how to link the items automatically: Single input, single output: the output links to the input. Single input, multiple outputs: all outputs link to that input. Multiple inputs and outputs: If you keep the input items, but change the order (or remove some but keep others), n8n can automatically add the correct linked item information. If the number of inputs and outputs is equal, n8n links the items in order. This means that output-1 links to input-1, output-2 to input-2, and so on. If the number isn't equal, or you create completely new items, n8n can't automatically link items. If n8n can't link items automatically, and the node doesn't handle the item linking, n8n displays an error. Refer to Item linking errors for more information. Item linking example # In this example, it's possible for n8n to link an item in one node back several steps, despite the item order changing. This means the node that sorts movies alphabetically can access information about the linked item in the node that gets famous movie actors. The methods for accessing linked items are different depending on whether you're using the UI, expressions, or the code node. Explore the following resources: Mapping in the UI Mapping in the expressions editor Item linking in the Code node Item linking errors Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/data/data-mapping/data-item-linking/item-linking-errors/

Item linking errors # In n8n you can reference data from any previous node. This doesn't have to be the node just before: it can be any previous node in the chain. When referencing nodes further back, you use the expression syntax $(node_name).item . Diagram of threads for different items. Due to the item linking, you can get the actor for each movie using $('Get famous movie actors').item . Since the previous node can have multiple items in it, n8n needs to know which one to use. When using .item , n8n figures this out for you behind the scenes. Refer to Item linking concepts for detailed information on how this works. .item fails if information is missing. To figure out which item to use, n8n maintains a thread back through the workflow's nodes for each item. For a given item, this thread tells n8n which items in previous nodes generated it. To find the matching item in a given previous node, n8n follows this thread back until it reaches the node in question. When using .item , n8n displays an error when: The thread is broken The thread points to more than one item in the previous node (as it's unclear which one to use) To solve these errors, you can either avoid using .item , or fix the root cause. You can avoid .item by using .first() , .last() or .all()[index] instead. They require you to know the position of the item that you’re targeting within the target node's output items. Refer to Built in methods and variables | Output of other nodes for more detail on these methods. The fix for the root cause depends on the exact error. Fix for 'Info for expressions missing from previous node' # If you see this error message: ERROR: Info for expression missing from previous node There's a node in the chain that doesn't return pairing information. The solution here depends on the type of the previous node: Code nodes: make sure you return which input items the node used to produce each output item. Refer to Item linking in the code node for more information. Custom or community nodes: the node creator needs to update the node to return which input items it uses to produce each output item. Refer to Item linking for node creators for more information. Fix for 'Multiple matching items for expression' # This is the error message: ERROR: Multiple matching items for expression Sometimes n8n uses multiple items to create a single item. Examples include the Summarize, Aggregate, and Merge nodes. These nodes can combine information from multiple items. When you use .item and there are multiple possible matches, n8n doesn't know which one to use. To solve this you can either: Use .first() , .last() or .all()[index] instead. Refer to Built in methods and variables | Output of other nodes for more detail on these methods. Reference a different node that contains the same information, but doesn't have multiple matching items. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/data/data-mapping/data-item-linking/item-linking-node-building/

Item linking for node creators # Programmatic-style nodes only This guidance applies to programmatic-style nodes. If you're using declarative style, n8n handles paired items for you automatically. Use n8n's item linking to access data from items that precede the current item. n8n needs to know which input item a given output item comes from. If this information is missing, expressions in other nodes may break. As a node developer, you must ensure any items returned by your node support this. This applies to programmatic nodes (including trigger nodes). You don't need to consider item linking when building a declarative-style node. Refer to Choose your node building approach for more information on node styles. Start by reading Item linking concepts , which provides a conceptual overview of item linking, and details of the scenarios where n8n can handle the linking automatically. If you need to handle item linking manually, do this by setting pairedItem on each item your node returns: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // Use the pairedItem information of the incoming item newItem = { "json" : { . . . }, "pairedItem" : { "item" : item . pairedItem , // Optional: choose the input to use // Set this if your node combines multiple inputs "input" : 0 }; // Or set the index manually newItem = { "json" : { . . . } "pairedItem" : { "item" : i , // Optional: choose the input to use // Set this if your node combines multiple inputs "input" : 0 }, }; Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/cookbook/builtin/itemmatching/

Retrieve linked items from earlier in the workflow # Every item in a node's input data links back to the items used in previous nodes to generate it. This is useful if you need to retrieve linked items from further back than the immediate previous node. To access the linked items from earlier in the workflow, use ("<node-name>").itemMatching(currentNodeinputIndex) . For example, consider a workflow that does the following: The Customer Datastore node generates example data: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [ { "id" : "23423532" , "name" : "Jay Gatsby" , "email" : "gatsby@west-egg.com" , "notes" : "Keeps asking about a green light??" , "country" : "US" , "created" : "1925-04-10" }, { "id" : "23423533" , "name" : "José Arcadio Buendía" , "email" : "jab@macondo.co" , "notes" : "Lots of people named after him. Very confusing" , "country" : "CO" , "created" : "1967-05-05" }, ... ] The Edit Fields node simplifies this data: 1 2 3 4 5 6 7 8 9 [ { "name" : "Jay Gatsby" }, { "name" : "José Arcadio Buendía" }, ... ] The Code node restore the email address to the correct person: 1 2 3 4 5 6 7 8 9 10 11 [ { "name" : "Jay Gatsby" , "restoreEmail" : "gatsby@west-egg.com" }, { "name" : "José Arcadio Buendía" , "restoreEmail" : "jab@macondo.co" }, ... ] The Code node does this using the following code: JavaScript Python 1 2 3 4 for ( let i = 0 ; i < $input . all (). length ; i ++ ) { $input . all ()[ i ]. json . restoreEmail = $ ( 'Customer Datastore (n8n training)' ). itemMatching ( i ). json . email ; } return $input . all (); 1 2 3 4 for i , item in enumerate ( _input . all ()): _input . all ()[ i ] . json . restoreEmail = _ ( 'Customer Datastore (n8n training)' ) . itemMatching ( i ) . json . email return _input . all (); You can view and download the example workflow from n8n website | itemMatchin usage example . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/cookbook/jmespath/

Query JSON with JMESPath # JMESPath is a query language for JSON that you can use to extract and transform elements from a JSON document. For full details of how to use JMESPath, refer to the JMESPath documentation . The jmespath() method # n8n provides a custom method, jmespath() . Use this method to perform a search on a JSON object using the JMESPath query language. The basic syntax is: JavaScript Python 1 $jmespath ( object , searchString ) 1 _jmespath ( object , searchString ) To help understand what the method does, here is the equivalent longer JavaScript: 1 2 var jmespath = require ( 'jmespath' ); jmespath . search ( object , searchString ); Expressions must be single-line The longer code example doesn't work in Expressions, as they must be single-line. object is a JSON object, such as the output of a previous node. searchString is an expression written in the JMESPath query language. The JMESPath Specification provides a list of supported expressions, while their Tutorial and Examples provide interactive examples. Search parameter order The examples in the JMESPath Specification follow the pattern search(searchString, object) . The JMESPath JavaScript library , which n8n uses, supports search(object, searchString) instead. This means that when using examples from the JMESPath documentation, you may need to change the order of the search function parameters. Common tasks # This section provides examples for some common operations. More examples, and detailed guidance, are available in JMESPath's own documentation . When trying out these examples, you need to set the Code node Mode to Run Once for Each Item . Apply a JMESPath expression to a collection of elements with projections # From the JMESPath projections documentation : Projections are one of the key features of JMESPath. Use it to apply an expression to a collection of elements. JMESPath supports five kinds of projections: List Projections Slice Projections Object Projections Flatten Projections Filter Projections The following example shows basic usage of list, slice, and object projections. Refer to the JMESPath projections documentation for detailed explanations of each projection type, and more examples. Given this JSON from a webhook node: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 [ { "headers" : { "host" : "n8n.instance.address" , ... }, "params" : {}, "query" : {}, "body" : { "people" : [ { "first" : "James" , "last" : "Green" }, { "first" : "Jacob" , "last" : "Jones" }, { "first" : "Jayden" , "last" : "Smith" } ], "dogs" : { "Fido" : { "color" : "brown" , "age" : 7 }, "Spot" : { "color" : "black and white" , "age" : 5 } } } } ] Retrieve a list of all the people's first names: Expressions (JavaScript) Code node (JavaScript) Code node (Python) 1 2 {{ $jmespath ( $json . body . people , "[*].first" )}} // Returns ["James", "Jacob", "Jayden"] 1 2 3 4 5 6 7 8 9 10 11 12 13 let firstNames = $jmespath ( $json . body . people , "[*].first" ) return { firstNames }; /* Returns: [ { "firstNames": [ "James", "Jacob", "Jayden" ] } ] */ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 firstNames = _jmespath ( _json . body . people , "[*].first" ) return { "firstNames" : firstNames } """ Returns: [ { "firstNames": [ "James", "Jacob", "Jayden" ] } ] """ Get a slice of the first names: Expressions (JavaScript) Code node (JavaScript) Code node (Python) 1 2 {{ $jmespath ( $json . body . people , "[:2].first" )}} // Returns ["James", "Jacob"] 1 2 3 4 5 6 7 8 9 10 11 12 13 let firstTwoNames = $jmespath ( $json . body . people , "[:2].first" ); return { firstTwoNames }; /* Returns: [ { "firstNames": [ "James", "Jacob", "Jayden" ] } ] */ 1 2 3 4 5 6 7 8 9 10 11 12 13 firstTwoNames = _jmespath ( _json . body . people , "[:2].first" ) return { "firstTwoNames" : firstTwoNames } """ Returns: [ { "firstTwoNames": [ "James", "Jacob" ] } ] """ Get a list of the dogs' ages using object projections : Expressions (JavaScript) Code node (JavaScript) Code node (Python) 1 2 {{ $jmespath ( $json . body . dogs , "*.age" )}} // Returns [7,5] 1 2 3 4 5 6 7 8 9 10 11 12 let dogsAges = $jmespath ( $json . body . dogs , "*.age" ); return { dogsAges }; /* Returns: [ { "dogsAges": [ 7, 5 ] } ] */ 1 2 3 4 5 6 7 8 9 10 11 12 13 dogsAges = _jmespath ( _json . body . dogs , "*.age" ) return { "dogsAges" : dogsAges } """ Returns: [ { "dogsAges": [ 7, 5 ] } ] """ Select multiple elements and create a new list or object # Use Multiselect to select elements from a JSON object and combine them into a new list or object. Given this JSON from a webhook node: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 [ { "headers" : { "host" : "n8n.instance.address" , ... }, "params" : {}, "query" : {}, "body" : { "people" : [ { "first" : "James" , "last" : "Green" }, { "first" : "Jacob" , "last" : "Jones" }, { "first" : "Jayden" , "last" : "Smith" } ], "dogs" : { "Fido" : { "color" : "brown" , "age" : 7 }, "Spot" : { "color" : "black and white" , "age" : 5 } } } } ] Use multiselect list to get the first and last names and create new lists containing both names: Expressions (JavaScript) Code node (JavaScript) Code node (Python) 1 2 {{ $jmespath ( $json . body . people , "[].[first, last]" )}} // Returns [["James","Green"],["Jacob","Jones"],["Jayden","Smith"]] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 let newList = $jmespath ( $json . body . people , "[].[first, last]" ); return { newList }; /* Returns: [ { "newList": [ [ "James", "Green" ], [ "Jacob", "Jones" ], [ "Jayden", "Smith" ] ] } ] */ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 newList = _jmespath ( _json . body . people , "[].[first, last]" ) return { "newList" : newList } """ Returns: [ { "newList": [ [ "James", "Green" ], [ "Jacob", "Jones" ], [ "Jayden", "Smith" ] ] } ] """ An alternative to arrow functions in expressions # For example, generate some input data by returning the below code from the Code node: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 return [ { "json" : { "num_categories" : "0" , "num_products" : "45" , "category_id" : 5529735 , "parent_id" : 1407340 , "pos_enabled" : 1 , "pos_favorite" : 0 , "name" : "HP" , "description" : "" , "image" : "" } }, { "json" : { "num_categories" : "0" , "num_products" : "86" , "category_id" : 5529740 , "parent_id" : 1407340 , "pos_enabled" : 1 , "pos_favorite" : 0 , "name" : "Lenovo" , "description" : "" , "image" : "" } } ] You could do a search like "find the item with the name Lenovo and tell me their category ID." 1 {{ $jmespath ( $ ( "Code" ). all (), "[?json.name=='Lenovo'].json.category_id" ) }} Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/builtin/jmespath/

JMESPath method # This is an n8n-provided method for working with the JMESPath library. Python support You can use Python in the Code node. It isn't available in expressions. JavaScript Python Method Description Available in Code node? $jmespath() Perform a search on a JSON object using JMESPath. Method Description _jmespath() Perform a search on a JSON object using JMESPath. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/keyboard-shortcuts/

Keyboard shortcuts and controls # n8n provides keyboard shortcuts for some actions. Workflow controls # Ctrl + Alt + n : create new workflow Ctrl + o : open workflow Ctrl + s : save the current workflow Ctrl + z : undo Ctrl + shift + z : redo Ctrl + Enter : execute workflow Canvas # Move the canvas # Ctrl + Left Mouse Button + drag: move node view Ctrl + Middle mouse button + drag: move node view Space + drag: move node view Middle mouse button + drag: move node view Two fingers on a touch screen: move node view Canvas zoom # + or = : zoom in - or _ : zoom out 0 : reset zoom level 1 : zoom to fit workflow Ctrl + Mouse wheel : zoom in/out Nodes on the canvas # Ctrl + a : select all nodes Ctrl + v : paste nodes Shift + s : add sticky note With one or more nodes selected in canvas # ArrowDown : select sibling node below the current one ArrowLeft : select node left of the current one ArrowRight : select node right of the current one ArrowUp : select sibling node above the current one Ctrl + c : copy Ctrl + x : cut D : deactivate Delete : delete Enter : open F2 : rename P : pin data in node. Refer to Data pinning for more information. Shift + ArrowLeft : select all nodes left of the current one Shift + ArrowRight : select all nodes right of the current one Node panel # Tab : open the Node Panel Enter : insert selected node into workflow Escape : close Node panel Node panel categories # Enter : insert node into workflow, collapse/expand category, open subcategory ArrowRight : expand category, open subcategory ArrowLeft : collapse category, close subcategory view Within nodes # = : in an empty parameter input, this switches to expressions mode. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/advanced-ai/langchain/langchain-learning-resources/

LangChain learning resources # You don't need to know details about LangChain to use n8n, but it can be helpful to learn a few concepts. This pages lists some learning resources that people at n8n have found helpful. The LangChain documentation includes introductions to key concepts and possible use cases. Choose the LangChain | Python or LangChain | JavaScript documentation for quickstarts, code examples, and API documentation. LangChain also provide code templates (Python only), offering ideas for potential use cases and common patterns. What Product People Need To Know About LangChain provides a list of terminology and concepts, explained with helpful metaphors. Aimed at a wide audience. If you prefer video, this YouTube series by Greg Kamradt works through the LangChain documentation, providing code examples as it goes. n8n offers space to discuss LangChain on the Discord . Join to share your projects and discuss ideas with the community. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/builtin/langchain-methods/

LangChain Code node methods # n8n provides these methods to make it easier to perform common tasks in the LangChain Code node . LangChain Code node only These variables are for use in expressions in the LangChain Code node. You can't use them in other nodes. Method Description this.addInputData(inputName, data) Populate the data of a specified non-main input. Useful for mocking data. inputName is the input connection type, and must be one of: ai_agent , ai_chain , ai_document , ai_embedding , ai_languageModel , ai_memory , ai_outputParser , ai_retriever , ai_textSplitter , ai_tool , ai_vectorRetriever , ai_vectorStore data contains the data you want to add. Refer to Data structure for information on the data structure expected by n8n. this.addOutputData(outputName, data) Populate the data of a specified non-main output. Useful for mocking data. outputName is the input connection type, and must be one of: ai_agent , ai_chain , ai_document , ai_embedding , ai_languageModel , ai_memory , ai_outputParser , ai_retriever , ai_textSplitter , ai_tool , ai_vectorRetriever , ai_vectorStore data contains the data you want to add. Refer to Data structure for information on the data structure expected by n8n. this.getInputConnectionData(inputName, itemIndex, inputIndex?) Get data from a specified non-main input. inputName is the input connection type, and must be one of: ai_agent , ai_chain , ai_document , ai_embedding , ai_languageModel , ai_memory , ai_outputParser , ai_retriever , ai_textSplitter , ai_tool , ai_vectorRetriever , ai_vectorStore itemIndex should always be 0 (this parameter will be used in upcoming functionality) Use inputIndex if there is more than one node connected to the specified input. this.getInputData(inputIndex?, inputName?) Get data from the main input. this.getNode() Get the current node. this.getNodeOutputs() Get the outputs of the current node. this.getExecutionCancelSignal() Use this to stop the execution of a function when the workflow stops. In most cases n8n handles this, but you may need to use it if building your own chains or agents. It replaces the Cancelling a running LLMChain code that you'd use if building a LangChain application normally. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/advanced-ai/langchain/langchain-n8n/

LangChain concepts in n8n # This page explains how LangChain concepts and features map to n8n nodes. This page includes lists of the LangChain-focused nodes in n8n. You can use any n8n node in a workflow where you interact with LangChain, to link LangChain to other services. The LangChain features uses n8n's Cluster nodes . n8n implements LangChain JS This feature is n8n's implementation of LangChain's JavaScript framework . Trigger nodes # Chat Trigger Cluster nodes # Cluster nodes are node groups that work together to provide functionality in an n8n workflow. Instead of using a single node, you use a root node and one or more sub-nodes that extend the functionality of the node. Root nodes # Each cluster starts with one root node . Chains # A chain is a series of LLMs, and related tools, linked together to support functionality that can't be provided by a single LLM alone. Available nodes: Basic LLM Chain Retrieval Q&A Chain Summarization Chain Sentiment Analysis Text Classifier Learn more about chaining in LangChain . Agents # An agent has access to a suite of tools, and determines which ones to use depending on the user input. Agents can use multiple tools, and use the output of one tool as the input to the next. Source Available nodes: Agent Learn more about Agents in LangChain . Vector stores # Vector stores store embedded data, and perform vector searches on it. In Memory Vector Store PGVector Vector Store Pinecone Vector Store Qdrant Vector Store Supabase Vector Store Zep Vector Store Learn more about Vector stores in LangChain . Miscellaneous # Utility nodes. LangChain Code : import LangChain. This means if there is functionality you need that n8n hasn't created a node for, you can still use it. Sub-nodes # Each root node can have one or more sub-nodes attached to it. Document loaders # Document loaders add data to your chain as documents. The data source can be a file or web service. Available nodes: Default Document Loader GitHub Document Loader Learn more about Document loaders in LangChain . Language models # LLMs (large language models) are programs that analyze datasets. They're the key element of working with AI. Available nodes: Anthropic Chat Model AWS Bedrock Chat Model Cohere Model Hugging Face Inference Model Mistral Cloud Chat Model Ollama Chat Model Ollama Model OpenAI Chat Model Learn more about Language models in LangChain . Memory # Memory retains information about previous queries in a series of queries. For example, when a user interacts with a chat model, it's useful if your application can remember and call on the full conversation, not just the most recent query entered by the user. Available nodes: Motorhead Redis Chat Memory Postgres Chat Memory Window Buffer Memory Xata Zep Learn more about Memory in LangChain . Output parsers # Output parsers take the text generated by an LLM and format it to match the structure you require. Available nodes: Auto-fixing Output Parser Item List Output Parser Structured Output Parser Learn more about Output parsers in LangChain . Retrievers # Contextual Compression Retriever MultiQuery Retriever Vector Store Retriever Workflow Retriever Text splitters # Text splitters break down data (documents), making it easier for the LLM to process the information and return accurate results. Available nodes: Character Text Splitter Recursive Character Text Splitter Token Splitter n8n's text splitter nodes implements parts of LangChain's text_splitter API . Tools # Utility tools . Calculator Code Tool SerpAPI Vector Store Tool Wikipedia Wolfram|Alpha Workflow Tool Embeddings # Embeddings capture the "relatedness" of text, images, video, or other types of information. ( source ) Available nodes: Embeddings AWS Bedrock Embeddings Cohere Embeddings Google PaLM Embeddings Hugging Face Inference Embeddings Mistral Cloud Embeddings Ollama Embeddings OpenAI Learn more about Text embeddings in LangChain . Miscellaneous # Chat Memory Manager Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/user-management/ldap/

Lightweight Directory Access Protocol (LDAP) # Feature availability Available on Self-hosted Enterprise and Cloud Enterprise plans. You need access to the n8n instance owner account. This page tells you how to enable LDAP in n8n. It assumes you're familiar with LDAP, and have an existing LDAP server set up. LDAP allows users to sign in to n8n with their organization credentials, instead of an n8n login. Enable LDAP # Log in to n8n as the instance owner. Select Settings > LDAP . Toggle on Enable LDAP Login . Complete the fields with details from your LDAP server. Select Test connection to check your connection setup, or Save connection to create the connection. After enabling LDAP, anyone on your LDAP server can sign in to the n8n instance, unless you exclude them using the User Filter setting. You can still create non-LDAP users (email users) on the Settings > Users page. Merging n8n and LDAP accounts # If n8n finds matching accounts (matching emails) for email users and LDAP users, the user must sign in with their LDAP account. n8n instance owner accounts are excluded from this: n8n never converts owner accounts to LDAP users. LDAP user accounts in n8n # On first sign in, n8n creates a user account in n8n for the LDAP user. You must manage user details on the LDAP server, not in n8n. If you update or delete a user on your LDAP server, the n8n account updates at the next scheduled sync, or when the user next tries to log in, whichever happens first. User deletion If you remove a user from your LDAP server, they lose n8n access on the next sync. Turn LDAP off # To turn LDAP off: Log in to n8n as the instance owner. Select Settings > LDAP . Toggle off Enable LDAP Login . If you turn LDAP off, n8n converts existing LDAP users to email users on their next login. The users must reset their password. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows/advanced-ai/examples/let_your_ai_call_an_api.json

{ "name": "Let your AI call an API", "nodes": [ { "parameters": {}, "id": "35ce49a9-eda1-4da5-a6cb-39a39680111b", "name": "Execute Workflow Trigger", "type": "n8n-nodes-base.executeWorkflowTrigger", "position": [ 520, 1140 ], "typeVersion": 1 }, { "parameters": { "content": "### Sub-workflow: Custom tool\nThe agent above can call this workflow. It calls an example API called \"Bored API\" and returns a string with an activity idea.", "height": 775.3931210698682, "width": 1180.0825159534493, "color": 7 }, "id": "ec6e261b-922f-401c-9392-12ff73488a5f", "name": "Sticky Note1", "type": "n8n-nodes-base.stickyNote", "position": [ 460, 960 ], "typeVersion": 1 }, { "parameters": { "content": "### Main workflow: AI agent using custom tool", "height": 486.5625, "width": 927.5, "color": 7 }, "id": "25780e87-0ae0-4bee-9582-75f98bf66635", "name": "Sticky Note2", "type": "n8n-nodes-base.stickyNote", "position": [ 460, 460 ], "typeVersion": 1 }, { "parameters": {}, "id": "f262f04b-964c-47c0-b7dc-a86b82b0184b", "name": "Chat Trigger", "type": "@n8n/n8n-nodes-langchain.chatTrigger", "position": [ 600, 560 ], "webhookId": "e3f23177-c7c1-417b-a513-1c1090dda0a2", "typeVersion": 1 }, { "parameters": {}, "id": "29678c05-9a48-41ec-9c5c-af36ee0d7fc6", "name": "Window Buffer Memory", "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow", "position": [ 860, 780 ], "typeVersion": 1.1 }, { "parameters": { "content": "**This tool calls the sub-workflow below**", "height": 179.21380662202682, "width": 197.45572294791873, "color": 5 }, "id": "e078f88b-489c-42ea-9544-6bdaeae213a0", "name": "Sticky Note", "type": "n8n-nodes-base.stickyNote", "position": [ 1020, 720 ], "typeVersion": 1 }, { "parameters": { "content": "**Set your credentials**", "height": 171, "width": 150, "color": 2 }, "id": "1d1d1a4e-0d1d-4094-81c7-e01f2674df0d", "name": "Sticky Note5", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 620, 720 ] }, { "parameters": { "content": "**Set your credentials**", "height": 170.10898979087855, "width": 152.85917676941358, "color": 2 }, "id": "8c83d554-bf1f-4b3c-abb9-a6bb76846698", "name": "Sticky Note7", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 880, 1540.2624287261167 ] }, { "parameters": { "name": "activity_tool", "description": "=Suggest an activity for a person to do. Use this tool if someone is bored, or asking for ideas of things to do.", "workflowId": "={{ $workflow.id }}", "fields": { "values": [ { "name": "chatInput", "stringValue": "={{ $('Chat Trigger').item.json.chatInput }}" } ] } }, "id": "82a3c606-0d7a-4b45-aae7-df35525615f7", "name": "Activity tool", "type": "@n8n/n8n-nodes-langchain.toolWorkflow", "position": [ 1080, 780 ], "typeVersion": 1 }, { "parameters": { "text": "={{ $json.chatInput }}", "options": { "maxIterations": 10 } }, "id": "716dea0d-a987-4cf7-ae4a-bf0f7c7d7da9", "name": "AI Agent", "type": "@n8n/n8n-nodes-langchain.agent", "position": [ 820, 560 ], "typeVersion": 1.1 }, { "parameters": {}, "id": "f469fba8-07ae-4c79-a79c-2c49946d94e2", "name": "Auto-fixing Output Parser", "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing", "typeVersion": 1, "position": [ 920, 1380 ] }, { "parameters": { "content": "**Set your credentials**", "height": 189.79768930311286, "width": 150, "color": 2 }, "id": "e6d252d3-d78e-4827-b911-0528c3b80794", "name": "Sticky Note4", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 648.9502850955331, 1340 ] }, { "parameters": { "model": "gpt-4", "options": {} }, "id": "f65054a9-771c-47f8-94cc-4ed766f89d19", "name": "GPT4 Model 1", "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi", "position": [ 660, 780 ], "typeVersion": 1 }, { "parameters": { "model": "gpt-4", "options": {} }, "id": "94c2a6d8-cab9-48c2-8801-4306f0957f50", "name": "GPT4 Model 2", "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi", "typeVersion": 1, "position": [ 700, 1420 ] }, { "parameters": { "model": "gpt-4", "options": {} }, "id": "5f423800-2eaf-43f5-bd59-dc1212cb55ad", "name": "GPT4 Model 3", "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi", "typeVersion": 1, "position": [ 920, 1600 ] }, { "parameters": { "content": "## Try it out\n\nSelect **Chat** at the bottom and enter:\n\n_Hi! Please suggest something to do. I feel like learning something new._", "height": 214.8397420554627, "width": 185.9375, "color": 4 }, "id": "8ba60ef6-c375-41d9-bf79-1f19f1495adb", "name": "Sticky Note3", "type": "n8n-nodes-base.stickyNote", "position": [ 300, 540 ], "typeVersion": 1 }, { "parameters": { "content": "## Next steps\n\nLearn more about [Advanced AI in n8n](https://docs.n8n.io/advanced-ai/)", "height": 144.50520156238127 }, "id": "4bbd5942-4f2a-4a9a-a26c-61f95ad57549", "name": "Sticky Note6", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 1500, 1540 ] }, { "parameters": { "jsonSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"type\": {\n \"type\": \"object\",\n \"properties\": {\n \"data\": {\n \"enum\": [\"education\", \"recreational\",\"social\",\"diy\",\"charity\",\"cooking\",\"relaxation\",\"music\",\"busywork\"]\n }\n }\n },\n \"participants\": {\n \"type\": \"number\"\n }\n }\n}" }, "id": "a50c7858-b0fd-44d6-898d-452ffc5cbd72", "name": "Structure as JSON", "type": "@n8n/n8n-nodes-langchain.outputParserStructured", "typeVersion": 1, "position": [ 1120, 1520 ] }, { "parameters": { "url": "http://www.boredapi.com/api/activity/", "sendQuery": true, "queryParameters": { "parameters": [ { "name": "type", "value": "={{ $json.output.type.data }}" }, { "name": "participants", "value": "={{ $json.output.participants }}" } ] }, "options": {} }, "id": "340c2536-6e79-4af6-9cd0-5cbf6eae1983", "name": "Call the API", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4.1, "position": [ 1120, 1140 ] }, { "parameters": { "prompt": "={{ $('Execute Workflow Trigger').item.json.chatInput }}" }, "id": "d7d5455c-2e46-4896-853c-6b527e9403e4", "name": "Work out activity type and number of people", "type": "@n8n/n8n-nodes-langchain.chainLlm", "typeVersion": 1.3, "position": [ 740, 1140 ] }, { "parameters": { "assignments": { "assignments": [ { "id": "e37e64f6-64e7-4fbd-9ea1-e9d3ef99b39c", "name": "response", "value": "={{ $json.activity }}", "type": "string" } ] }, "options": {} }, "id": "83f9ac05-4583-4cc4-bcc8-29ae450c95cb", "name": "Set 'response' value", "type": "n8n-nodes-base.set", "typeVersion": 3.3, "position": [ 1340, 1140 ] } ], "pinData": {}, "connections": { "Chat Trigger": { "main": [ [ { "node": "AI Agent", "type": "main", "index": 0 } ] ] }, "Window Buffer Memory": { "ai_memory": [ [ { "node": "AI Agent", "type": "ai_memory", "index": 0 } ] ] }, "Execute Workflow Trigger": { "main": [ [ { "node": "Work out activity type and number of people", "type": "main", "index": 0 } ] ] }, "Activity tool": { "ai_tool": [ [ { "node": "AI Agent", "type": "ai_tool", "index": 0 } ] ] }, "Auto-fixing Output Parser": { "ai_outputParser": [ [ { "node": "Work out activity type and number of people", "type": "ai_outputParser", "index": 0 } ] ] }, "GPT4 Model 1": { "ai_languageModel": [ [ { "node": "AI Agent", "type": "ai_languageModel", "index": 0 } ] ] }, "GPT4 Model 2": { "ai_languageModel": [ [ { "node": "Work out activity type and number of people", "type": "ai_languageModel", "index": 0 } ] ] }, "GPT4 Model 3": { "ai_languageModel": [ [ { "node": "Auto-fixing Output Parser", "type": "ai_languageModel", "index": 0 } ] ] }, "Structure as JSON": { "ai_outputParser": [ [ { "node": "Auto-fixing Output Parser", "type": "ai_outputParser", "index": 0 } ] ] }, "Call the API": { "main": [ [ { "node": "Set 'response' value", "type": "main", "index": 0 } ] ] }, "Work out activity type and number of people": { "main": [ [ { "node": "Call the API", "type": "main", "index": 0 } ] ] } } }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/courses/level-one/

Level one: Introduction # Welcome to the n8n Course Level 1 ! Is this course right for me? # This course introduces you to the fundamental concepts within n8n and develops your low-code automation expertise. This course is for you if you: Are starting to use n8n for the first time. Are looking for some extra help creating your first workflow. Want to automate processes in your personal or working life. What will I learn in this course? # We believe in learning by doing. You can expect some theoretical information about the basic concepts and components of n8n, followed by practice of building workflows step by step. By the end of this course you will know: How to set up n8n and navigate the Editor UI. How n8n structures data. How to configure different node parameters and add credentials. When and how to use conditional logic in workflows. How to schedule and control workflows. How to import, download, and share workflows with others. You will build two workflows: A two-node workflow to get articles from Hacker News A seven-node workflow to help your client get records from a data warehouse, filter them, make calculations, and notify team members about the results What do I need to get started? # n8n set up : You can use the self-hosted version , or n8n Cloud . A user ID : Sign up here to get your unique ID and other credentials you will need in the course. Basic knowledge of JavaScript and APIs would be helpful, but isn't necessary. An account on the n8n community forum if you wish to receive a profile badge and avatar upon successful completion How long does the course take? # Completing the course should take around two hours . You don't have to complete it in one go; feel free to take breaks and resume whenever you are ready. How do I complete the course? # There are two milestones in this course that test your knowledge of what you have learned in the lessons: Building the main workflow Passing the quiz at the end of the course Check your progress You can always check your progress throughout the course by entering your unique ID here . If you complete the milestones above, you will get a badge and an avatar in your forum profile. You can then share your profile and course verification ID to showcase your n8n skills to others. Let's get started! Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/courses/level-two/

Level two: Introduction # Welcome to the n8n Course Level 2 ! Is this course right for me? # This course is for you if you: Want to automate somewhat complex business processes. Want to dive deeper into n8n after taking the Level 1 course . What will I learn in this course? # The focus in this course is on working with data. You will learn how to: Use the data structure of n8n correctly. Process different data types (for example, XML, HTML, date, time, and binary data). Merge data from different sources (for example, a database, spreadsheet, or CRM). Use functions and JavaScript code in the Code node . Deal with error workflows and workflow errors. You will learn all this by completing short practical exercises after the theoretical explanations and building a business workflow following instructions. What do I need to get started? # To follow along this course (at a comfortable pace) you will need the following: n8n set up : You can use the self-hosted version or n8n Cloud . A user ID : Sign up here to get your unique ID and other credentials you will need in the course. Basic n8n skills : We strongly recommend taking the Level 1 course before this one. Basic JavaScript understanding How long does the course take? # Completing the course should take around two hours . You don't have to complete it in one go; feel free to take breaks and resume whenever you are ready. How do I complete the course? # There are two milestones in this course that test your knowledge of what you have learned in the lessons: Building the main workflow Passing the quiz at the end of the course You can always check your progress throughout the course by entering your unique ID here . If you successfully complete the milestones above, you will get a badge and an avatar in your forum profile. You can then share your profile and course verification ID to showcase your n8n skills to others. Let's get started! Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/licenses/

License environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. To enable enterprise features, you need to add your enterprise license key. You can do this through the UI, or using environment variables. Refer to Enterprise license key for details. Variable Type Default Description N8N_HIDE_USAGE_PAGE boolean false Hide the usage and plans page in the app. N8N_LICENSE_ACTIVATION_KEY String '' Activation key to initialize license. Not applicable if the n8n instance was already activated. N8N_LICENSE_AUTO_RENEW_ENABLED Boolean true Enables (true) or disables (false) autorenewal for licenses. If disabled, you need to manually renew the license every 10 days by navigating to Settings > Usage and plan , and pressing F5 . Failure to renew the license will disable Enterprise features. N8N_LICENSE_AUTO_RENEW_OFFSET Number 60 * 60 * 72 (72 hours) Time in seconds before expiry a license should automatically renew. N8N_LICENSE_SERVER_URL String http://license.n8n.io/v1 Server URL to retrieve license. N8N_LICENSE_TENANT_ID Number 1 Tenant ID associated with the license. Only set this variable if explicitly instructed by n8n. http_proxy_license_server String http://user:pass@proxy:port Proxy server URL for HTTP requests to retrieve license. This variable name needs to be lowercase. https_proxy_license_server String https://user:pass@proxy:port Proxy server URL for HTTPS requests to retrieve license. This variable name needs to be lowercase. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/log-streaming/

Log streaming # Feature availability Log streaming is available on Enterprise Self-hosted and Cloud plans. Log streaming allows you to send events from n8n to your own logging tools. This allows you to manage your n8n monitoring in your own alerting and logging processes. Set up log streaming # To use log streaming, you have to add a streaming destination. Navigate to Settings > Log Streaming . Select Add new destination . Choose your destination type. n8n opens the New Event Destination modal. In the New Event Destination modal, enter the configuration information for your event destination. These depend on the type of destination you're using. Select Events to choose which events to stream. Select Save . Self-hosted users If you self-host n8n, you can configure additional log streaming behavior using Environment variables . Events # The following events are available. You can choose which events to stream in Settings > Log Streaming > Events . Workflow Started Success Failed Node executions Started Finished Audit User signed up User updated User deleted User invited User invitation accepted User re-invited User email failed User reset requested User reset User credentials created User credentials shared User credentials updated User credentials deleted User API created User API deleted Package installed Package updated Package deleted Workflow created Workflow deleted Workflow updated AI node logs Memory get messages Memory added message Output parser get instructions Output parser parsed Retriever get relevant documents Embeddings embedded document Embeddings embedded query Document processed Text splitter split Tool called Vector store searched LLM generated Vector store populated Destinations # n8n supports three destination types: A syslog server A generic webhook A Sentry client Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/logging-monitoring/logging/

Logging in n8n # Logging is an important feature for debugging. n8n uses the winston logging library. Log streaming n8n Self-hosted Enterprise tier includes Log streaming , in addition to the logging options described in this document. Setup # To set up logging in n8n, you need to set the following environment variables (you can also set the values in the configuration file ) Setting in the configuration file Using environment variables Description n8n.log.level N8N_LOG_LEVEL The log output level. The available options are (from lowest to highest level) are error, warn, info, and debug. The default value is info . You can learn more about these options here . n8n.log.output N8N_LOG_OUTPUT Where to output logs. The available options are console and file . Multiple values can be used separated by a comma ( , ). console is used by default. n8n.log.file.location N8N_LOG_FILE_LOCATION The log file location, used only if log output is set to file. By default, <n8nFolderPath>/logs/n8n.log is used. n8n.log.file.maxsize N8N_LOG_FILE_SIZE_MAX The maximum size (in MB) for each log file. By default, n8n uses 16 MB. n8n.log.file.maxcount N8N_LOG_FILE_COUNT_MAX The maximum number of log files to keep. The default value is 100. This value should be set when using workers. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Set the logging level to 'debug' export N8N_LOG_LEVEL = debug # Set log output to both console and a log file export N8N_LOG_OUTPUT = console,file # Set a save location for the log file export N8N_LOG_FILE_LOCATION = /home/jim/n8n/logs/n8n.log # Set a 50 MB maximum size for each log file export N8N_LOG_FILE_MAXSIZE = 50 # Set 60 as the maximum number of log files to be kept export N8N_LOG_FILE_MAXCOUNT = 60 Log levels # n8n uses standard log levels to report: silent : outputs nothing at all error : outputs only errors and nothing else warn : outputs errors and warning messages info : contains useful information about progress debug : the most verbose output. n8n outputs a lot of information to help you debug issues. Development # During development, adding log messages is a good practice. It assists in debugging errors. To configure logging for development, follow the guide below. Implementation details # n8n uses the LoggerProxy class, located in the workflow package. Calling the LoggerProxy.init() by passing in an instance of Logger , initializes the class before the usage. The initialization process happens only once. The start.ts file already does this process for you. If you are creating a new command from scratch, you need to initialize the LoggerProxy class. Once the Logger implementation gets created in the cli package, it can be obtained by calling the getInstance convenience method from the exported module. Check the start.ts file to learn more about how this process works. Adding logs # Once the LoggerProxy class gets initialized in the project, you can import it to any other file and add logs. Convenience methods are provided for all logging levels, so new logs can be added whenever needed using the format Logger.<logLevel>('<message>', ...meta) , where meta represents any additional properties desired beyond message . In the example above, we use the standard log levels described above . The message argument is a string, and meta is a data object. 1 2 3 4 5 6 7 8 9 // You have to import the LoggerProxy. We rename it to Logger to make it easier import { LoggerProxy as Logger } from 'n8n-workflow' ; // Info-level logging of a trigger function, with workflow name and workflow ID as additional metadata properties Logger . info ( `Polling trigger initiated for workflow " ${ workflow . name } "` , { workflowName : workflow . name , workflowId : workflow . id }); When creating new loggers, some useful standards to keep in mind are: Craft log messages to be as human-readable as possible. For example, always wrap names in quotes. Duplicating information in the log message and metadata, like workflow name in the above example, can be useful as messages are easier to search and metadata enables easier filtering. Include multiple IDs (for example, executionId , workflowId , and sessionId ) throughout all logs. Use node types instead of node names (or both) as this is more consistent, and so easier to search. Front-end logs # As of now, front-end logs aren't available. Using Logger or LoggerProxy would yield errors in the editor-ui package. This functionality will get implemented in the future versions. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/logs/#log-streaming

Logs environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. This page lists environment variables to set up logging for debugging. Refer to Logging in n8n for details. n8n logs # Variable Type Default Description N8N_LOG_LEVEL Enum string: info , warn , error , debug info Log output level. Refer to Log levels for details. N8N_LOG_OUTPUT Enum string: console , file console Where to output logs. Provide multiple values as a comma-separated list. N8N_LOG_FILE_COUNT_MAX Number 100 Max number of log files to keep. N8N_LOG_FILE_SIZE_MAX Number 16 Max size of each log file in MB. N8N_LOG_FILE_LOCATION String <n8n-directory-path>/logs/n8n.log Log file location. Requires N8N_LOG_OUTPUT set to file . DB_LOGGING_ENABLED Boolean false Whether to enable database-specific logging. DB_LOGGING_OPTIONS Enum string: query , error , schema , warn , info , log error Database log output level. To enable all logging, specify all . Refer to TypeORM logging options DB_LOGGING_MAX_EXECUTION_TIME Number 1000 Maximum execution time (in milliseconds) before n8n logs a warning. Set to 0 to disable long running query warning. CODE_ENABLE_STDOUT Boolean false Set to true to send Code node logs to process's stdout for debugging, monitoring, or logging purposes. NO_COLOR any undefined Set to any value to output logs without ANSI colors. For more information, see the no-color.org website . Log streaming # Refer to Log streaming for more information on this feature. Variable Type Default Description N8N_EVENTBUS_CHECKUNSENTINTERVAL Number 0 How often (in milliseconds) to check for unsent event messages. Can in rare cases send message twice. Set to 0 to disable it. N8N_EVENTBUS_LOGWRITER_SYNCFILEACCESS Boolean false Whether all file access happens synchronously within the thread (true) or not (false). N8N_EVENTBUS_LOGWRITER_KEEPLOGCOUNT Number 3 Number of event log files to keep. N8N_EVENTBUS_LOGWRITER_MAXFILESIZEINKB Number 10240 Maximum size (in kilo-bytes) of an event log file before a new one starts. N8N_EVENTBUS_LOGWRITER_LOGBASENAME String n8nEventLog Basename of the event log file. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/logs/

Logs environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. This page lists environment variables to set up logging for debugging. Refer to Logging in n8n for details. n8n logs # Variable Type Default Description N8N_LOG_LEVEL Enum string: info , warn , error , debug info Log output level. Refer to Log levels for details. N8N_LOG_OUTPUT Enum string: console , file console Where to output logs. Provide multiple values as a comma-separated list. N8N_LOG_FILE_COUNT_MAX Number 100 Max number of log files to keep. N8N_LOG_FILE_SIZE_MAX Number 16 Max size of each log file in MB. N8N_LOG_FILE_LOCATION String <n8n-directory-path>/logs/n8n.log Log file location. Requires N8N_LOG_OUTPUT set to file . DB_LOGGING_ENABLED Boolean false Whether to enable database-specific logging. DB_LOGGING_OPTIONS Enum string: query , error , schema , warn , info , log error Database log output level. To enable all logging, specify all . Refer to TypeORM logging options DB_LOGGING_MAX_EXECUTION_TIME Number 1000 Maximum execution time (in milliseconds) before n8n logs a warning. Set to 0 to disable long running query warning. CODE_ENABLE_STDOUT Boolean false Set to true to send Code node logs to process's stdout for debugging, monitoring, or logging purposes. NO_COLOR any undefined Set to any value to output logs without ANSI colors. For more information, see the no-color.org website . Log streaming # Refer to Log streaming for more information on this feature. Variable Type Default Description N8N_EVENTBUS_CHECKUNSENTINTERVAL Number 0 How often (in milliseconds) to check for unsent event messages. Can in rare cases send message twice. Set to 0 to disable it. N8N_EVENTBUS_LOGWRITER_SYNCFILEACCESS Boolean false Whether all file access happens synchronously within the thread (true) or not (false). N8N_EVENTBUS_LOGWRITER_KEEPLOGCOUNT Number 3 Number of event log files to keep. N8N_EVENTBUS_LOGWRITER_MAXFILESIZEINKB Number 10240 Maximum size (in kilo-bytes) of an event log file before a new one starts. N8N_EVENTBUS_LOGWRITER_LOGBASENAME String n8nEventLog Basename of the event log file. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/try-it-out/longer-introduction/

A slightly longer introduction # This guide shows you how to automate a task using a workflow in n8n, explaining key concepts along the way. You will: Create a workflow from scratch. You'll build a workflow that runs every week to get data from NASA, filters the data, and generates two reports. Understand key concepts and skills, including: Starting workflows with trigger nodes Configuring credentials Manipulating data Representing logic in an n8n workflow Using expressions Step one: Sign up for n8n # This quickstart uses n8n Cloud . A free trial is available for new users. If you haven't already done so, sign up for an account now. Step two: New workflow # When you open n8n, you'll see either: An empty workflow: if you have no workflows and you're logging in for the first time. Use this workflow. The Workflows list on the Overview page. Select the button to create a new workflow. Step three: Add a trigger node # n8n provides two ways to start a workflow: Manually, by selecting Test Workflow , or from the CLI if you installed n8n with npm or Docker. Automatically, using a trigger node as the first node. The trigger node runs the workflow in response to an external event, or based on your settings. For this tutorial, use the Schedule trigger . This allows you to run the workflow on a schedule: Select Add first step . Search for Schedule . n8n shows a list of nodes that match the search. Select Schedule Trigger to add the node to the canvas. n8n opens the node. For Trigger Interval , select Weeks . For Weeks Between Triggers , enter 1 . Enter a time and day. For this example, select Monday in Trigger on Weekdays , select 9am in Trigger at Hour , and enter 0 in Trigger at Minute . Close the node details view to return to the canvas. Step four: Add the NASA node and set up credentials # The NASA node allows you to interact with NASA's public APIs . The API gives you data to work with in this tutorial. Select the Add node connector on the Schedule Trigger node. Search for NASA . n8n shows a list of nodes that match the search. Select NASA to view a list of operations. Search for and select Get a DONKI solar flare . This operation returns a report about recent solar flares. When you select the operation, n8n adds the node to the canvas and opens it. To access the NASA APIs, you need to set up credentials: Select the Credential for NASA API dropdown. Select - Create New - . n8n opens the credentials view. Go to NASA APIs and fill out the form in Generate API Key . NASA generates the key and displays it. Copy the key, and paste it into API Key in n8n. Select Save . Close the credentials screen. n8n returns to the node. The new credentials should be automatically selected in Credential for NASA API . By default, DONKI Solar Flare provides data for the past 30 days. To limit it to just the last week, use Additional Fields : Select Add field . Select Start date . To get a report starting from a week ago, you can use an expression: next to Start date , select the Expression tab, then select the expand button to open the full expressions editor. In the Expression field, enter the following expression: 1 {{ $today . minus ({ days : 7 }). toFormat ( 'yyyy-MM-dd' )}} This generates a date in the correct format, seven days before the current date. Date and time in n8n n8n uses Luxon to work with date and time, and also provides two variables for convenience: $now and $today . For more information, refer to Expressions > Luxon . Close the Edit Expression modal to return to the NASA node. You can now check that the node is working and returning the expected date: select Test step to run the node manually. n8n calls the NASA API and displays details of solar flares in the past seven days in the OUTPUT section. Close the NASA node to return to the workflow canvas. Step five: Add logic with the If node # n8n supports complex logic in workflows. In this tutorial, use the If node to create two branches that each generate a report from the NASA data. Solar flares have five possible classifications. You'll create logic that sends a report with the lower classifications to one output, and the higher classifications to another. Add the If node: Select the Add node connector on the NASA node. Search for If . n8n shows a list of nodes that match the search. Select If to add the node to the canvas. n8n opens the node. You need to check the value of the classType property in the NASA data. To do this: Drag classType into Value 1 . Make sure you ran the NASA node in the previous section If you didn't follow the step in the previous section to run the NASA node, you won't see any data to work with in this step. Change the comparison operation to String > Contains . In Value 2 , enter X . This is the highest classification of solar flare. In the next step, you will create two reports: one for X class solar flares, and one for all the smaller solar flares. You can now check that the node is working and returning the expected date: select Test step to run the node manually. n8n tests the data against the condition, and shows which results match true or false in the OUTPUT panel. Weeks without large solar flares In this tutorial, you are working with live date. If you find there aren't any X class solar flares when you run the workflow, try replacing X in Value 2 with either A , B , C , or M . Once you are happy the node will return some events, you can close the node to return to the canvas. Step six: Output data from your workflow # The last step of the workflow is to send the two reports about solar flares. For this example, you'll send data to Postbin . Postbin is a service that receives data and displays it on a temporary web page. On the If node, select the Add node connector labeled true . Search for PostBin . n8n shows a list of nodes that match the search. Select PostBin . Select Send a request . n8n adds the node to the canvas and opens it. Go to Postbin and select Create Bin . Leave the tab open so you can come back to it when testing the workflow. Copy the bin ID. It looks similar to 1651063625300-2016451240051 . In n8n, paste your Postbin ID into Bin ID . Now, configure the data to send to Postbin. Next to Bin Content , select the Expression tab (you will need to mouse-over the Bin Content for the tab to appear), then select the expand button to open the full expressions editor. Select Current Node > Input Data > JSON > classType . n8n adds the expression to the Expression editor, and displays a sample output. The expression is: {{$json["classType"]}} . Add a message to it, so that the full expression is: 1 There was a solar flare of class {{ $json [ "classType" ]}} Close the expressions editor to return to the node. Close the Postbin node to return to the canvas. Add another Postbin node, to handle the false output path from the If node: Hover over the Postbin node, then select Node context menu > Duplicate node to duplicate the first Postbin node. Drag the false connector from the If node to the left side of the new Postbin node. Step seven: Test the workflow # You can now test the entire workflow. Select Test Workflow . n8n runs the workflow, showing each stage in progress. Go back to your Postbin bin. Refresh the page to see the output. If you want to use this workflow (in other words, if you want it to run once a week automatically), you need to activate it by selecting the Active toggle. Time limit Postbin's bins exist for 30 minutes after creation. You may need to create a new bin and update the ID in the Postbin nodes, if you exceed this time limit. Next steps # Take n8n's text courses or video courses . Explore more examples in workflow templates . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/flow-logic/looping/

Looping in n8n # Looping is useful when you want to process multiple items or perform an action repeatedly, such as sending a message to every contact in your address book. n8n handles this repetitive processing automatically, meaning you don't need to specifically build loops into your workflows. There are some nodes where this isn't true. Using loops in n8n # n8n nodes take any number of items as input, process these items, and output the results. You can think of each item as a single data point, or a single row in the output table of a node. Nodes usually run once for each item. For example, if you wanted to send the name and notes of the customers in the Customer Datastore node as a message on Slack, you would: Connect the Slack node to the Customer Datastore node. Configure the parameters. Execute the node. You would receive five messages: one for each item. This is how you can process multiple items without having to explicitly connect nodes in a loop. Executing nodes once # For situations where you don't want a node to process all received items, for example sending a Slack message only to the first customer, you can do so by toggling the Execute Once parameter in the Settings tab of that node This setting is helpful when the incoming data contains multiple items and you want to only process the first one. Creating loops # n8n typically handles the iteration for all incoming items. However, there are certain scenarios where you will have to create a loop to iterate through all items. Refer to Node exceptions for a list of nodes that don't automatically iterate over all incoming items. Loop until a condition is met # To create a loop in an n8n workflow, connect the output of one node to the input of a previous node. Add an IF node to check when to stop the loop. Here is an example workflow that implements a loop with an IF node: Loop until all items are processed # Use the Loop Over Items node when you want to loop until all items are processed. To process each item individually, set Batch Size to 1 . You can batch the data in groups and process these batches. This approach is useful for avoiding API rate limits when processing large incoming data or when you want to process a specific group of returned items. The Loop Over Items node stops executing after all the incoming items get divided into batches and passed on to the next node in the workflow so it's not necessary to add an IF node to stop the loop. Node exceptions # Nodes and operations where you need to design a loop into your workflow: CrateDB executes once for insert and update . Code node in Run Once for All Items mode: processes all the items based on the entered code snippet. Execute Workflow node in Run Once for All Items mode. HTTP Request : you must handle pagination yourself. If your API call returns paginated results you must create a loop to fetch one page at a time. Microsoft SQL executes once for insert , update , and delete . MongoDB executes once for insert and update . QuestDB executes once for insert . Redis : Info: this operation executes only once, regardless of the number of items in the incoming data. RSS Read executes once for the requested URL. TimescaleDB executes once for insert and update . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/cookbook/luxon/

Date and time with Luxon # Luxon is a JavaScript library that makes it easier to work with date and time. For full details of how to use Luxon, refer to Luxon's documentation . n8n passes dates between nodes as strings, so you need to parse them. Luxon makes this easier. Python support Luxon is a JavaScript library. The two convenience variables created by n8n are available when using Python in the Code node, but their functionality is limited: You can't perform Luxon operations on these variables. For example, there is no Python equivalent for $today.minus(...) . The generic Luxon functionality, such as Convert date string to Luxon , isn't available for Python users. Variables # n8n uses Luxon to provide two custom variables: now : a Luxon object containing the current timestamp. Equivalent to DateTime.now() . today : a Luxon object containing the current timestamp, rounded down to the day. Equivalent to DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }) . Note that these variables can return different time formats when cast as a string. This is the same behavior as Luxon's DateTime.now() . Expressions (JavaScript) Code node (JavaScript) Code node (Python) 1 2 3 4 5 6 {{ $now }} // n8n displays the ISO formatted timestamp // For example 2022-03-09T14:02:37.065+00:00 {{ "Today's date is " + $now }} // n8n displays "Today's date is <unix timestamp>" // For example "Today's date is 1646834498755" 1 2 3 4 5 6 $now // n8n displays <ISO formatted timestamp> // For example 2022-03-09T14:00:25.058+00:00 let rightNow = "Today's date is " + $now // n8n displays "Today's date is <unix timestamp>" // For example "Today's date is 1646834498755" 1 2 3 4 5 6 _now # n8n displays <ISO formatted timestamp> # For example 2022-03-09T14:00:25.058+00:00 rightNow = "Today's date is " + str ( _now ) # n8n displays "Today's date is <unix timestamp>" # For example "Today's date is 1646834498755" n8n provides built-in convenience functions to support data transformation in expressions for dates. Refer to Data transformation functions | Dates for more information. Date and time behavior in n8n # Be aware of the following: In a workflow, n8n converts dates and times to strings between nodes. Keep this in mind when doing arithmetic on dates and times from other nodes. With vanilla JavaScript, you can convert a string to a date with new Date('2019-06-23') . In Luxon, you must use a function explicitly stating the format, such as DateTime.fromISO('2019-06-23') or DateTime.fromFormat("23-06-2019", "dd-MM-yyyy") . Setting the timezone in n8n # Luxon uses the n8n timezone. This value is either: Default: America/New York A custom timezone for your n8n instance, set using the GENERIC_TIMEZONE environment variable. A custom timezone for an individual workflow, configured in workflow settings. Common tasks # This section provides examples for some common operations. More examples, and detailed guidance, are available in Luxon's own documentation . Convert date string to Luxon # You can convert date strings and other date formats to a Luxon DateTime object. You can convert from standard formats and from arbitrary strings. A difference between Luxon DateTime and JavaScript Date With vanilla JavaScript, you can convert a string to a date with new Date('2019-06-23') . In Luxon, you must use a function explicitly stating the format, such as DateTime.fromISO('2019-06-23') or DateTime.fromFormat("23-06-2019", "dd-MM-yyyy") . If you have a date in a supported standard technical format: # Most dates use fromISO() . This creates a Luxon DateTime from an ISO 8601 string. For example: Expressions (JavaScript) Code node (JavaScript) 1 {{ DateTime . fromISO ( '2019-06-23T00:00:00.00' )}} 1 let luxonDateTime = DateTime . fromISO ( '2019-06-23T00:00:00.00' ) Luxon's API documentation has more information on fromISO . Luxon provides functions to handle conversions for a range of formats. Refer to Luxon's guide to Parsing technical formats for details. If you have a date as a string that doesn't use a standard format: # Use Luxon's Ad-hoc parsing . To do this, use the fromFormat() function, providing the string and a set of tokens that describe the format. For example, you have n8n's founding date, 23rd June 2019, formatted as 23-06-2019 . You want to turn this into a Luxon object: Expressions (JavaScript) Code node (JavaScript) 1 {{ DateTime . fromFormat ( "23-06-2019" , "dd-MM-yyyy" )}} 1 let newFormat = DateTime . fromFormat ( "23-06-2019" , "dd-MM-yyyy" ) When using ad-hoc parsing, note Luxon's warning about Limitations . If you see unexpected results, try their Debugging guide. Get n days from today # Get a number of days before or after today. Expressions (JavaScript) Code node (JavaScript) For example, you want to set a field to always show the date seven days before the current date. In the expressions editor, enter: 1 {{ $today . minus ({ days : 7 })}} On the 23rd June 2019, this returns [Object: "2019-06-16T00:00:00.000+00:00"] . This example uses n8n's custom variable $today for convenience. It's the equivalent of DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).minus({days: 7}) . For example, you want a variable containing the date seven days before the current date. In the code editor, enter: 1 let sevenDaysAgo = $today . minus ({ days : 7 }) On the 23rd June 2019, this returns [Object: "2019-06-16T00:00:00.000+00:00"] . This example uses n8n's custom variable $today for convenience. It's the equivalent of DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).minus({days: 7}) . For more detailed information and examples, refer to: Luxon's guide to math Their API documentation on DateTime plus and DateTime minus Create human-readable dates # In Get n days from today , the example gets the date seven days before the current date, and returns it as [Object: "yyyy-mm-dd-T00:00:00.000+00:00"] (for expressions) or yyyy-mm-dd-T00:00:00.000+00:00 (in the Code node). To make this more readable, you can use Luxon's formatting functions. For example, you want the field containing the date to be formatted as DD/MM/YYYY, so that on the 23rd June 2019, it returns 23/06/2019 . This expression gets the date seven days before today, and converts it to the DD/MM/YYYY format. Expressions (JavaScript) Code node (JavaScript) 1 {{ $today . minus ({ days : 7 }). toLocaleString ()}} 1 let readableSevenDaysAgo = $today . minus ({ days : 7 }). toLocaleString () You can alter the format. For example: Expressions (JavaScript) Code node (JavaScript) 1 {{ $today . minus ({ days : 7 }). toLocaleString ({ month : 'long' , day : 'numeric' , year : 'numeric' })}} On 23rd June 2019, this returns "16 June 2019". 1 let readableSevenDaysAgo = $today . minus ({ days : 7 }). toLocaleString ({ month : 'long' , day : 'numeric' , year : 'numeric' }) On 23rd June 2019, this returns "16 June 2019". Refer to Luxon's guide on toLocaleString (strings for humans) for more information. Get the time between two dates # To get the time between two dates, use Luxon's diffs feature. This subtracts one date from another and returns a duration. For example, get the number of months between two dates: Expressions (JavaScript) Code node (JavaScript) 1 {{ DateTime . fromISO ( '2019-06-23' ). diff ( DateTime . fromISO ( '2019-05-23' ), 'months' ). toObject ()}} This returns [Object: {"months":1}] . 1 let monthsBetweenDates = DateTime . fromISO ( '2019-06-23' ). diff ( DateTime . fromISO ( '2019-05-23' ), 'months' ). toObject () This returns {"months":1} . Refer to Luxon's Diffs for more information. A longer example: How many days to Christmas? # This example brings together several Luxon features, uses JMESPath, and does some basic string manipulation. The scenario: you want a countdown to 25th December. Every day, it should tell you the number of days remaining to Christmas. You don't want to update it for next year - it needs to seamlessly work for every year. Expressions (JavaScript) Code node (JavaScript) 1 {{ "There are " + $today . diff ( DateTime . fromISO ( $today . year + '-12-25' ), 'days' ). toObject (). days . toString (). substring ( 1 ) + " days to Christmas!" }} This outputs "There are <number of days> days to Christmas!" . For example, on 9th March, it outputs "There are 291 days to Christmas!". A detailed explanation of what the expression does: {{ : indicates the start of the expression. "There are " : a string. + : used to join two strings. $today.diff() : This is similar to the example in Get the time between two dates , but it uses n8n's custom $today variable. DateTime.fromISO($today.year + '-12-25'), 'days' : this part gets the current year using $today.year , turns it into an ISO string along with the month and date, and then takes the whole ISO string and converts it to a Luxon DateTime data structure. It also tells Luxon that you want the duration in days. toObject() turns the result of diff() into a more usable object. At this point, the expression returns [Object: {"days":-<number-of-days>}] . For example, on 9th March, [Object: {"days":-291}] . .days uses JMESPath syntax to retrieve just the number of days from the object. For more information on using JMESPath with n8n, refer to our JMESpath documentation. This gives you the number of days to Christmas, as a negative number. .toString().substring(1) turns the number into a string and removes the - . + " days to Christmas!" : another string, with a + to join it to the previous string. }} : indicates the end of the expression. 1 let daysToChristmas = "There are " + $today . diff ( DateTime . fromISO ( $today . year + '-12-25' ), 'days' ). toObject (). days . toString (). substring ( 1 ) + " days to Christmas!" ; This outputs "There are <number of days> days to Christmas!" . For example, on 9th March, it outputs "There are 291 days to Christmas!". A detailed explanation of what the code does: "There are " : a string. + : used to join two strings. $today.diff() : This is similar to the example in Get the time between two dates , but it uses n8n's custom $today variable. DateTime.fromISO($today.year + '-12-25'), 'days' : this part gets the current year using $today.year , turns it into an ISO string along with the month and date, and then takes the whole ISO string and converts it to a Luxon DateTime data structure. It also tells Luxon that you want the duration in days. toObject() turns the result of diff() into a more usable object. At this point, the expression returns [Object: {"days":-<number-of-days>}] . For example, on 9th March, [Object: {"days":-291}] . .days uses JMESPath syntax to retrieve just the number of days from the object. For more information on using JMESPath with n8n, refer to our JMESpath documentation. This gives you the number of days to Christmas, as a negative number. .toString().substring(1) turns the number into a string and removes the - . + " days to Christmas!" : another string, with a + to join it to the previous string. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/user-management/manage-users/

Manage users # The Settings > Users page shows all users, including ones with pending invitations. Delete a user # Select the menu icon by the user you want to delete. Confirm you want to delete them. If they're an active user, choose whether to copy their workflow data and credentials to a new user, or permanently delete their workflows and credentials. Resend an invitation to a pending user # Click the menu icon by the user, then click Resend invite . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/source-control-environments/using/manage-variables/

Manage variables # n8n doesn't sync variable values with Git. You must set up the credentials manually when setting up a new instance. You can choose to set up variables manually, or using the API . Manage variables using the API # n8n syncs variable names, but doesn't push variable values to your Git provider. You can either: Manually set variable values in n8n. Set variable values using the n8n API, using the /pull endpoint. Managing variables using the API has several advantages: You can automatically update variable values using a CI (continuous integration) tool. You may also be able to protect the values. For example, you can store values in GitHub secrets , then populate the variables in n8n using an API call from a GitHub Action . To manage variables using an API call, make a POST request to /source-control/pull : 1 2 3 4 5 6 7 8 9 10 11 curl --location '<YOUR-INSTANCE-URL>/api/v1/source-control/pull' \ --header 'Content-Type: application/json' \ --header 'X-N8N-API-KEY: <YOUR-API-KEY>' \ --data '{ "force": true, "variables": { "key1": "value1", "key2": "value2" } } ' If the key already exists in n8n, the API call updates the value. If there is no variable with the key, it creates a new variable. After setting values using the API, you can safely edit variables in n8n, and push and pull changes. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/user-management/saml/managing/

Manage users with SAML # There are some user management tasks that are affected by SAML. Exempt users from SAML # You can allow users to log in without using SAML. To do this: Go to Settings > Users . Select the menu icon by the user you want to exempt from SAML. Select Allow Manual Login . Deleting users # If you remove a user from your IdP, they remain logged in to n8n. You need to manually remove them from n8n as well. Refer to Manage users for guidance on deleting users. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/community-nodes/installation/manual-install/

Manually install community nodes # You can manually install community nodes on self-hosted n8n. You need to manually install community nodes in the following circumstances: Your n8n instance runs in queue mode. You want to install private packages . Install a community node # Access your Docker shell: 1 docker exec -it n8n sh Create ~/.n8n/nodes if it doesn't already exist, and navigate into it: 1 2 mkdir ~/.n8n/nodes cd ~/.n8n/nodes Install the node: 1 npm i n8n-nodes-nodeName Then restart n8n. Uninstall a community node # Access your Docker shell: 1 docker exec -it n8n sh Run npm uninstall: 1 npm uninstall n8n-nodes-nodeName Upgrade a community node # Breaking changes in versions Node developers may introduce breaking changes in new versions of their nodes. A breaking change is an update that breaks previous functionality. Depending on the node versioning approach that a node developer chooses, upgrading to a version with a breaking change could cause all workflows using the node to break. Be careful when upgrading your nodes. If you find that an upgrade causes issues, you can downgrade . Upgrade to the latest version # Access your Docker shell: 1 docker exec -it n8n sh Run npm update: 1 npm update n8n-nodes-nodeName Upgrade or downgrade to a specific version # Access your Docker shell: 1 docker exec -it n8n sh Run npm uninstall to remove the current version: 1 npm uninstall n8n-nodes-nodeName Run npm install with the version specified: 1 2 # Replace 2.1.0 with your version number npm install n8n-nodes-nodeName@2.1.0 Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/scaling/memory-errors/

Memory-related errors # n8n doesn't restrict the amount of data each node can fetch and process. While this gives you freedom, it can lead to errors when workflow executions require more memory than available. This page explains how to identify and avoid these errors. Only for self-hosted n8n This page describes memory-related errors when self-hosting n8n . Visit Cloud data management to learn about memory limits for n8n Cloud . Identifying out of memory situations # n8n provides error messages that warn you in some out of memory situations. For example, messages such as Execution stopped at this node (n8n may have run out of memory while executing it) . Error messages including Problem running workflow , Connection Lost , or 503 Service Temporarily Unavailable suggest that an n8n instance has become unavailable. When self-hosting n8n, you may also see error messages such as Allocation failed - JavaScript heap out of memory in your server logs. On n8n Cloud, or when using n8n's Docker image, n8n restarts automatically when encountering such an issue. However, when running n8n with npm you might need to restart it manually. Typical causes # Such problems occur when a workflow execution requires more memory than available to an n8n instance. Factors increasing the memory usage for a workflow execution include: Amount of JSON data . Size of binary data. Number of nodes in a workflow. Some nodes are memory-heavy: the Code node and the older Function node can increase memory consumption significantly. Manual or automatic workflow executions: manual executions increase memory consumption as n8n makes a copy of the data for the frontend. Additional workflows running at the same time. Avoiding out of memory situations # When encountering an out of memory situation, there are two options: either increase the amount of memory available to n8n or reduce the memory consumption. Increase available memory # When self-hosting n8n, increasing the amount of memory available to n8n means provisioning your n8n instance with more memory. This may incur additional costs with your hosting provider. On n8n cloud you need to upgrade to a larger plan. Reduce memory consumption # This approach is more complex and means re-building the workflows causing the issue. This section provides some guidelines on how to reduce memory consumption. Not all suggestions are applicable to all workflows. Split the data processed into smaller chunks. For example, instead of fetching 10,000 rows with each execution, process 200 rows with each execution. Avoid using the Code node where possible. Avoid manual executions when processing larger amounts of data. Split the workflow up into sub-workflows and ensure each sub-workflow returns a limited amount of data to its parent workflow. Splitting the workflow might seem counter-intuitive at first as it usually requires adding at least two more nodes: the Loop Over Items node to split up the items into smaller batches and the Execute Workflow node to start the sub-workflow. However, as long as your sub-workflow does the heavy lifting for each batch and then returns only a small result set to the main workflow, this reduces memory consumption. This is because the sub-workflow only holds the data for the current batch in memory, after which the memory is free again. Increase old memory # This applies to self-hosting n8n. When encountering JavaScript heap out of memory errors, it's often useful to allocate additional memory to the old memory section of the V8 JavaScript engine. To do this, set the appropriate V8 option --max-old-space-size=SIZE either through the CLI or through the NODE_OPTIONS environment variable . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/flow-logic/merging/

Merging data # Merging brings multiple data streams together. You can achieve this using different nodes depending on your workflow requirements. Merge data from different data streams or nodes: Use the Merge node to combine data from various sources into one. Merge data from multiple node executions: Use the Code node for complex scenarios where you need to merge data from multiple executions of a node or multiple nodes. Compare and merge data: Use the Compare Datasets node to compare, merge, and output data streams based on the comparison. Explore each method in more detail in the sections below. Merge data from different data streams # If your workflow splits , you combine the separate streams back into one stream. Here's an example workflow showing different types of merging: appending data sets, keeping only new items, and keeping only existing items. The Merge node documentation contains details on each of the merge operations. View template details Merge data from different nodes # You can use the Merge node to combine data from two previous nodes, even if the workflow hasn't split into separate data streams. This can be useful if you want to generate a single dataset from the data generated by multiple nodes. Merging data from two previous nodes Merge data from multiple node executions # Use the Code node to merge data from multiple node executions. This is useful in some Looping scenarios. Node executions and workflow executions This section describes merging data from multiple node executions. This is when a node executes multiple times during a single workflow execution. Refer to this example workflow using Loop Over Items and Wait to artificially create multiple executions. View template details Compare, merge, and split again # The Compare Datasets node compares data streams before merging them. It outputs up to four different data streams. Refer to this example workflow for an example. View template details Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/configuration-examples/modules-in-code-node/

Enable modules in Code node # For security reasons, the Code node restricts importing modules. It's possible to lift that restriction for built-in and external modules by setting the following environment variables: NODE_FUNCTION_ALLOW_BUILTIN : For built-in modules NODE_FUNCTION_ALLOW_EXTERNAL : For external modules sourced from n8n/node_modules directory. External module support is disabled when an environment variable isn't set. 1 2 3 4 5 6 7 8 9 10 11 # Allows usage of all builtin modules export NODE_FUNCTION_ALLOW_BUILTIN = * # Allows usage of only crypto export NODE_FUNCTION_ALLOW_BUILTIN = crypto # Allows usage of only crypto and fs export NODE_FUNCTION_ALLOW_BUILTIN = crypto,fs # Allow usage of external npm modules. export NODE_FUNCTION_ALLOW_EXTERNAL = moment,lodash Refer to Environment variables reference for more information on these variables. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/logging-monitoring/monitoring/

Monitoring # There are three API endpoints you can call to check the status of your instance: /healthz , healthz/readiness , and /metrics . healthz and healthz/readiness # The /healthz endpoint returns a standard HTTP status code. 200 indicates the instance is reachable. It doesn't indicate DB status. It's available for both self-hosted and Cloud users. Access the endpoint: 1 <your-instance-url>/healthz The /healthz/readiness endpoint is similar to the /healthz endpoint, but it returns a HTTP status code of 200 if the DB is connected and migrated and therefore the instance is ready to accept traffic. Access the endpoint: 1 <your-instance-url>/healthz/readiness metrics # The /metrics endpoint provides more detailed information about the current status of the instance. Access the endpoint: 1 <your-instance-url>/metrics Feature availability The /metrics endpoint isn't available on n8n Cloud. Enable metrics and healthz for self-hosted n8n # The /metrics and /healthz endpoints are disabled by default. To enable them, configure your n8n instance: 1 2 3 4 # metrics N8N_METRICS = true # healthz QUEUE_HEALTH_CHECK_ACTIVE = true Refer to Configuration methods for more information on how to configure your instance using environment variables. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows/integrations/builtin/core-nodes/n8n-nodes-base.form/multiple-branch-execution.json

{ "name": "Form that can execute multiple branches", "nodes": [ { "parameters": { "formTitle": "Form that may execute multiple branches", "formDescription": "This form contains multiple branches. Depending on the user's responses, more than one branch may execute sequentially.", "formFields": { "values": [ { "fieldLabel": "What are your favorite film genres", "fieldType": "dropdown", "fieldOptions": { "values": [ { "option": "Documentary" }, { "option": "Action" }, { "option": "Romance" }, { "option": "Comedy" }, { "option": "Drama" } ] }, "multiselect": true, "requiredField": true } ] }, "options": {} }, "type": "n8n-nodes-base.formTrigger", "typeVersion": 2.2, "position": [ -300, 60 ], "id": "ad3f0e0a-a1e9-4504-8711-508bd29bd745", "name": "On form submission", "webhookId": "b3e1c86f-ae45-421e-9045-f19873b7a73e" }, { "parameters": { "rules": { "values": [ { "conditions": { "options": { "caseSensitive": true, "leftValue": "", "typeValidation": "strict", "version": 2 }, "conditions": [ { "id": "e3d995dd-d555-4e7a-b744-a3434ed602ad", "leftValue": "={{ $json['What are your favorite film genres'] }}", "rightValue": "Documentary", "operator": { "type": "array", "operation": "contains", "rightType": "any" } } ], "combinator": "and" }, "renameOutput": true, "outputKey": "Documentary" }, { "conditions": { "options": { "caseSensitive": true, "leftValue": "", "typeValidation": "strict", "version": 2 }, "conditions": [ { "id": "ae94981b-1273-4830-ac2a-991bb25f41d8", "leftValue": "={{ $json['What are your favorite film genres'] }}", "rightValue": "Action", "operator": { "type": "array", "operation": "contains", "rightType": "any" } } ], "combinator": "and" }, "renameOutput": true, "outputKey": "Action" }, { "conditions": { "options": { "caseSensitive": true, "leftValue": "", "typeValidation": "strict", "version": 2 }, "conditions": [ { "id": "b9545089-4054-484d-9e6c-98f4872e7e9e", "leftValue": "={{ $json['What are your favorite film genres'] }}", "rightValue": "Romance", "operator": { "type": "array", "operation": "contains", "rightType": "any" } } ], "combinator": "and" }, "renameOutput": true, "outputKey": "Romance" }, { "conditions": { "options": { "caseSensitive": true, "leftValue": "", "typeValidation": "strict", "version": 2 }, "conditions": [ { "id": "71ae5a41-0927-40e3-a583-e569bcebfd1f", "leftValue": "={{ $json['What are your favorite film genres'] }}", "rightValue": "Comedy", "operator": { "type": "array", "operation": "contains", "rightType": "any" } } ], "combinator": "and" }, "renameOutput": true, "outputKey": "Comedy" }, { "conditions": { "options": { "caseSensitive": true, "leftValue": "", "typeValidation": "strict", "version": 2 }, "conditions": [ { "id": "5bfe5981-203a-457a-bfaa-36846d7b79a8", "leftValue": "={{ $json['What are your favorite film genres'] }}", "rightValue": "Drama", "operator": { "type": "array", "operation": "contains", "rightType": "any" } } ], "combinator": "and" }, "renameOutput": true, "outputKey": "Drama" }, { "conditions": { "options": { "caseSensitive": true, "leftValue": "", "typeValidation": "strict", "version": 2 }, "conditions": [ { "id": "adb1bfc5-08fd-4653-abe0-6f12aedda16a", "leftValue": "={{ $json['What are your favorite film genres'] }}", "rightValue": 1, "operator": { "type": "array", "operation": "lengthGt", "rightType": "number" } } ], "combinator": "and" }, "renameOutput": true, "outputKey": "Final page" } ] }, "options": { "allMatchingOutputs": true } }, "type": "n8n-nodes-base.switch", "typeVersion": 3.2, "position": [ 100, 0 ], "id": "df96da7b-c7dc-43c6-8941-973842603e0c", "name": "Switch" }, { "parameters": { "content": "## Form that may execute multiple branches\nThis form contains branching where more than one path may execute, depending on the user's selections.", "width": 380 }, "type": "n8n-nodes-base.stickyNote", "position": [ -160, -260 ], "typeVersion": 1, "id": "c51af5ad-8f6c-4f2a-8974-65c4abc4fcbf", "name": "Sticky Note" }, { "parameters": { "content": "This Switch node determines which branches will execute.\n\nMultiple conditions may be true, resulting in more than one branch being executed. When this happens, n8n executes the first branch completely before returning to execute the next branch.", "height": 220, "width": 260, "color": 5 }, "type": "n8n-nodes-base.stickyNote", "position": [ 20, 320 ], "typeVersion": 1, "id": "eab3ff17-5030-4556-a0c7-2571345e8cdf", "name": "Sticky Note1" }, { "parameters": { "formFields": { "values": [ { "fieldLabel": "What is your favorite documentary?" } ] }, "options": {} }, "type": "n8n-nodes-base.form", "typeVersion": 1, "position": [ 700, -500 ], "id": "dc55c82f-7d4f-4368-8ab5-69a673e92027", "name": "Documentary questions", "webhookId": "0c72f06e-4cc0-41eb-931c-7bf82bb1927e" }, { "parameters": { "formFields": { "values": [ { "fieldLabel": "What is your favorite action film?" } ] }, "options": {} }, "type": "n8n-nodes-base.form", "typeVersion": 1, "position": [ 700, -280 ], "id": "3f76b5df-561b-4159-9e14-33a43d8c45a8", "name": "Action questions", "webhookId": "bea04786-25cc-477e-aaf1-ab68159cbe28" }, { "parameters": { "operation": "completion", "completionTitle": "Thank you for answering our documentary questions!", "options": {} }, "type": "n8n-nodes-base.form", "typeVersion": 1, "position": [ 920, -500 ], "id": "16660e2e-a047-45d2-ba54-12d573633ece", "name": "Documentary thanks", "webhookId": "0238f2c2-8984-4adc-aade-308bb458c16e" }, { "parameters": { "operation": "completion", "completionTitle": "Thank you for answering our action film questions!", "options": {} }, "type": "n8n-nodes-base.form", "typeVersion": 1, "position": [ 920, -280 ], "id": "1853276a-3ba6-4315-b772-fbeb0c68a477", "name": "Action thanks", "webhookId": "2e47b563-bd17-466c-86b7-9237be55d226" }, { "parameters": { "formFields": { "values": [ { "fieldLabel": "What is your favorite romance film?" } ] }, "options": {} }, "type": "n8n-nodes-base.form", "typeVersion": 1, "position": [ 700, -20 ], "id": "cd7bc8d0-a143-4733-be84-320c88ef241b", "name": "Romance questions", "webhookId": "3f77a665-fc03-46ba-a58f-6d9bd7099028" }, { "parameters": { "operation": "completion", "completionTitle": "Thank you for answering our romance film questions!", "options": {} }, "type": "n8n-nodes-base.form", "typeVersion": 1, "position": [ 920, -20 ], "id": "42d7c8b5-f66f-4b34-821c-0df91bbaa9ea", "name": "Romance thanks", "webhookId": "eee896c5-d116-4586-972d-3fe02073ed11" }, { "parameters": { "formFields": { "values": [ { "fieldLabel": "What is your favorite comedy film?" } ] }, "options": {} }, "type": "n8n-nodes-base.form", "typeVersion": 1, "position": [ 700, 220 ], "id": "b9422abf-1ad5-44e4-941d-692f72bc2fef", "name": "Comedy questions", "webhookId": "97b56894-28fb-47d1-b729-754e43f1ac09" }, { "parameters": { "operation": "completion", "completionTitle": "Thank you for answering our comedy film questions!", "options": {} }, "type": "n8n-nodes-base.form", "typeVersion": 1, "position": [ 920, 220 ], "id": "1db70bda-0752-41b7-a930-b90f6e64b3e7", "name": "Comedy thanks", "webhookId": "b021494a-5a35-4ade-b7c0-ca43a309268d" }, { "parameters": { "formFields": { "values": [ { "fieldLabel": "What is your favorite drama film?" } ] }, "options": {} }, "type": "n8n-nodes-base.form", "typeVersion": 1, "position": [ 700, 480 ], "id": "2bef931a-12d2-4873-ad19-9bdb0b5fe78f", "name": "Drama questions", "webhookId": "8d801d97-1103-42ee-a0c1-c1f1153727d9" }, { "parameters": { "operation": "completion", "completionTitle": "Thank you for answering our drama film questions!", "options": {} }, "type": "n8n-nodes-base.form", "typeVersion": 1, "position": [ 920, 480 ], "id": "1fd7fa2f-d1be-430a-bb98-ded89ad8fca0", "name": "Drama thanks", "webhookId": "46a782bc-21b2-4fcd-9c52-82a7bb20ec2c" }, { "parameters": { "operation": "completion", "completionTitle": "Thank you for answering our film questions!", "options": {} }, "type": "n8n-nodes-base.form", "typeVersion": 1, "position": [ 700, 720 ], "id": "7b0aeed0-0e13-4fcb-a3e9-c5ff4d6a77ca", "name": "Multi-selection thank you", "webhookId": "67fcd1f3-e5a6-4bf6-b17e-37b2a87f4c3d" }, { "parameters": { "content": "n8n Form nodes using the **Form Ending** page type are only executed if they are the last node in the execution path.\n\nThese endings specific to a genre are only executed if this is the only valid branch.", "height": 1400, "width": 280, "color": 5 }, "type": "n8n-nodes-base.stickyNote", "position": [ 840, -740 ], "typeVersion": 1, "id": "7bda913a-d75c-4b20-8be6-a767c008a8f6", "name": "Sticky Note2" }, { "parameters": { "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe switch includes this **Form Ending** node whenever more than one branch is executed.\n\nBecause this is the [final branch](https://docs.n8n.io/flow-logic/execution-order/) that will be executed, this is the final display whenever multiple branches are executed.", "height": 400, "width": 300, "color": 5 }, "type": "n8n-nodes-base.stickyNote", "position": [ 740, 800 ], "typeVersion": 1, "id": "9c3f93a5-5248-4ba1-99b5-9df6d21416c2", "name": "Sticky Note3" } ], "pinData": {}, "connections": { "On form submission": { "main": [ [ { "node": "Switch", "type": "main", "index": 0 } ] ] }, "Switch": { "main": [ [ { "node": "Documentary questions", "type": "main", "index": 0 } ], [ { "node": "Action questions", "type": "main", "index": 0 } ], [ { "node": "Romance questions", "type": "main", "index": 0 } ], [ { "node": "Comedy questions", "type": "main", "index": 0 } ], [ { "node": "Drama questions", "type": "main", "index": 0 } ], [ { "node": "Multi-selection thank you", "type": "main", "index": 0 } ] ] }, "Documentary questions": { "main": [ [ { "node": "Documentary thanks", "type": "main", "index": 0 } ] ] }, "Action questions": { "main": [ [ { "node": "Action thanks", "type": "main", "index": 0 } ] ] }, "Romance questions": { "main": [ [ { "node": "Romance thanks", "type": "main", "index": 0 } ] ] }, "Comedy questions": { "main": [ [ { "node": "Comedy thanks", "type": "main", "index": 0 } ] ] }, "Drama questions": { "main": [ [ { "node": "Drama thanks", "type": "main", "index": 0 } ] ] } }, "active": false, "settings": { "executionOrder": "v1" }, "versionId": "b1d38757-38ea-4ee8-a352-990185b17e31", "meta": { "instanceId": "1f94e052868811125a74dc63385a38f60e7a14ab6e00497af83e8b68412ec251" }, "id": "kl3goXzWrfrWHpYv", "tags": [] }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows/integrations/builtin/core-nodes/n8n-nodes-base.form/mutually-exclusive-branching.json

{ "name": "Form with mutually exclusive branching", "nodes": [ { "parameters": { "formTitle": "Form with mutually exclusive branching", "formDescription": "This form contains branches, but only one branch will ever be executed.", "formFields": { "values": [ { "fieldLabel": "Would you recommend this site?", "fieldType": "dropdown", "fieldOptions": { "values": [ { "option": "Yes" }, { "option": "No" } ] }, "requiredField": true } ] }, "options": {} }, "type": "n8n-nodes-base.formTrigger", "typeVersion": 2.2, "position": [ 0, 0 ], "id": "1adce353-28c9-48b8-8326-c1f41d9311fd", "name": "On form submission", "webhookId": "d869b846-111d-4f53-96e4-2c4a533d9ed6" }, { "parameters": { "rules": { "values": [ { "conditions": { "options": { "caseSensitive": true, "leftValue": "", "typeValidation": "strict", "version": 2 }, "conditions": [ { "leftValue": "={{ $json['Would you recommend this site?'] }}", "rightValue": "Yes", "operator": { "type": "string", "operation": "equals" } } ], "combinator": "and" }, "renameOutput": true, "outputKey": "Yes" }, { "conditions": { "options": { "caseSensitive": true, "leftValue": "", "typeValidation": "strict", "version": 2 }, "conditions": [ { "id": "1dd9b1f5-6f48-4182-ae04-f47c37e3fa98", "leftValue": "={{ $json['Would you recommend this site?'] }}", "rightValue": "No", "operator": { "type": "string", "operation": "equals", "name": "filter.operator.equals" } } ], "combinator": "and" }, "renameOutput": true, "outputKey": "No" } ] }, "options": {} }, "type": "n8n-nodes-base.switch", "typeVersion": 3.2, "position": [ 220, 0 ], "id": "c0d3e3f1-76c5-4bac-8382-c3d70a57ee8a", "name": "Switch" }, { "parameters": { "formFields": { "values": [ { "fieldLabel": "What can we do to improve?", "fieldType": "textarea" } ] }, "options": {} }, "type": "n8n-nodes-base.form", "typeVersion": 1, "position": [ 440, 200 ], "id": "615cf27a-658c-43be-aff9-c5fda8a04c51", "name": "If not recommended", "webhookId": "3579ba77-7ba2-4a97-8a29-a228aac297d5" }, { "parameters": { "operation": "completion", "completionTitle": "Thank you for your review!", "options": {} }, "type": "n8n-nodes-base.form", "typeVersion": 1, "position": [ 660, -200 ], "id": "13423b3f-0380-429d-92bf-460cc8b409a3", "name": "Thanks for the review", "webhookId": "bce3f77b-3005-4989-bd61-b9c5ff19e59e" }, { "parameters": { "operation": "completion", "completionTitle": "Thank you for your feedback", "options": {} }, "type": "n8n-nodes-base.form", "typeVersion": 1, "position": [ 660, 200 ], "id": "0848a392-41f2-47e8-be17-124fef3d9a63", "name": "Thanks for the feedback", "webhookId": "8b1a34e2-aa24-4c12-841c-79f6491cb779" }, { "parameters": { "content": "## Form with mutually exclusive branching\nThis form contains a branch where only one of the two paths will execute, depending on your selections.", "width": 380 }, "type": "n8n-nodes-base.stickyNote", "position": [ -160, -260 ], "typeVersion": 1, "id": "57c5e1cd-7dda-4bfb-8bfa-8c9f91110249", "name": "Sticky Note" }, { "parameters": { "content": "This Switch node determines which branch will execute.\n\nThe switch uses data from a dropdown field with single selection enforced, so only one path will execute.", "color": 5 }, "type": "n8n-nodes-base.stickyNote", "position": [ 440, 0 ], "typeVersion": 1, "id": "9bde0398-7021-4ec6-b950-d836979c973b", "name": "Sticky Note1" }, { "parameters": { "formFields": { "values": [ { "fieldLabel": "Leave your review below", "fieldType": "textarea" } ] }, "options": {} }, "type": "n8n-nodes-base.form", "typeVersion": 1, "position": [ 440, -200 ], "id": "9956a49e-964d-4269-910f-28ad8393548e", "name": "If recommended", "webhookId": "f8298b40-1f61-465b-b228-30a659075f30" } ], "pinData": {}, "connections": { "On form submission": { "main": [ [ { "node": "Switch", "type": "main", "index": 0 } ] ] }, "Switch": { "main": [ [ { "node": "If recommended", "type": "main", "index": 0 } ], [ { "node": "If not recommended", "type": "main", "index": 0 } ] ] }, "If not recommended": { "main": [ [ { "node": "Thanks for the feedback", "type": "main", "index": 0 } ] ] }, "If recommended": { "main": [ [ { "node": "Thanks for the review", "type": "main", "index": 0 } ] ] } }, "active": false, "settings": { "executionOrder": "v1" }, "versionId": "6797e22c-1b2b-421a-b16d-869f636d0790", "meta": { "instanceId": "1f94e052868811125a74dc63385a38f60e7a14ab6e00497af83e8b68412ec251" }, "id": "DCotkGqkv0VfT6QT", "tags": [] }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/builtin/n8n-metadata/

n8n metadata # Methods for working with n8n metadata. This includes: Access to n8n environment variables for self-hosted n8n. Metadata about workflows, executions, and nodes. Information about instance Variables and External secrets . Python support You can use Python in the Code node. It isn't available in expressions. JavaScript Python Method Description Available in Code node? $env Contains n8n instance configuration environment variables . $execution.customData Set and get custom execution data. Refer to Custom executions data for more information. $execution.id The unique ID of the current workflow execution. $execution.mode Whether the execution was triggered automatically, or by manually running the workflow. Possible values are test and production . $execution.resumeUrl The webhook URL to call to resume a workflow waiting at a Wait node . $getWorkflowStaticData(type) View an example . Static data doesn't persist when testing workflows. The workflow must be active and called by a trigger or webhook to save static data. This gives access to the static workflow data. $("<node-name>").isExecuted Check whether a node has already executed. $itemIndex The index of an item in a list of items. $nodeVersion Get the version of the current node. $prevNode.name The name of the node that the current input came from. When using the Merge node, note that $prevNode always uses the first input connector. $prevNode.outputIndex The index of the output connector that the current input came from. Use this when the previous node had multiple outputs (such as an If or Switch node). When using the Merge node, note that $prevNode always uses the first input connector. $prevNode.runIndex The run of the previous node that generated the current input. When using the Merge node, note that $prevNode always uses the first input connector. $runIndex How many times n8n has executed the current node. Zero-based (the first run is 0, the second is 1, and so on). $secrets Contains information about your External secrets setup. $vars Contains the Variables available in the active environment. $version The node version. $workflow.active Whether the workflow is active (true) or not (false). $workflow.id The workflow ID. $workflow.name The workflow name. Method Description _env Contains n8n instance configuration environment variables . _execution.customData Set and get custom execution data. Refer to Custom executions data for more information. _execution.id The unique ID of the current workflow execution. _execution.mode Whether the execution was triggered automatically, or by manually running the workflow. Possible values are test and production . _execution.resumeUrl The webhook URL to call to resume a workflow waiting at a Wait node . _getWorkflowStaticData(type) View an example . Static data doesn't persist when testing workflows. The workflow must be active and called by a trigger or webhook to save static data. This gives access to the static workflow data. _("<node-name>").isExecuted Check whether a node has already executed. _nodeVersion Get the version of the current node. _prevNode.name The name of the node that the current input came from. When using the Merge node, note that _prevNode always uses the first input connector. _prevNode.outputIndex The index of the output connector that the current input came from. Use this when the previous node had multiple outputs (such as an If or Switch node). When using the Merge node, note that _prevNode always uses the first input connector. _prevNode.runIndex The run of the previous node that generated the current input. When using the Merge node, note that _prevNode always uses the first input connector. _runIndex How many times n8n has executed the current node. Zero-based (the first run is 0, the second is 1, and so on). _secrets Contains information about your External secrets setup. _vars Contains the Variables available in the active environment. _workflow.active Whether the workflow is active (true) or not (false). _workflow.id The workflow ID. _workflow.name The workflow name. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/build/reference/node-base-files/

Node base file # The node base file contains the core code of your node. All nodes must have a base file. The contents of this file are different depending on whether you're building a declarative-style or programmatic-style node. For guidance on which style to use, refer to Choose your node building approach . These documents give short code snippets to help understand the code structure and concepts. For full walk-throughs of building a node, including real-world code examples, refer to Build a declarative-style node or Build a programmatic-style node . You can also explore the n8n-nodes-starter and n8n's own nodes for a wider range of examples. The starter contains basic examples that you can build on. The n8n Mattermost node is a good example of a more complex programmatic-style node, including versioning. For all nodes, refer to the: Structure of the node base file Standard parameters For declarative-style nodes, refer to the: Declarative-style parameters For programmatic-style nodes, refer to the: Programmatic-style parameters Programmatic-style execute() method Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/build/reference/node-codex-files/

Node codex files # The codex file contains metadata about your node. This file is the JSON file at the root of your node. For example, the HttpBin.node.json file in the n8n starter. The codex filename must match the node base filename. For example, given a node base file named MyNode.node.ts , the codex would be named MyNode.node.json . Parameter Description node Includes the node name. Must start with n8n-nodes-base. . For example, n8n-nodes-base.openweatherapi . nodeVersion The node version. This should have the same value as the version parameter in your main node file. For example, "1.0" . codexVersion The codex file version. The current version is "1.0" . categories The settings in the categories array determine which category n8n adds your node to in the GUI. See Node categories for more information. resources The resources object contains links to your node documentation. n8n automatically adds help links to credentials and nodes in the GUI. Node categories # You can define one or more categories in your node configuration JSON. This helps n8n put the node in the correct category in the nodes panel. Choose from these categories: Data & Storage Finance & Accounting Marketing & Content Productivity Miscellaneous Sales Development Analytics Communication Utility You must match the syntax. For example, Data & Storage not data and storage . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/build/reference/node-file-structure/

Node file structure # Following best practices and standards in your node structure makes your node easier to maintain. It's helpful if other people need to work with the code. The file and directory structure of your node depends on: Your node's complexity. Whether you use node versioning. How many nodes you include in the npm package. Required files and directories # Your node must include: A package.json file at the root of the project. This is required for any npm module. A nodes directory, containing the code for your node: This directory must contain the base file , in the format <node-name>.node.ts . For example, MyNode.node.ts . n8n recommends including a codex file , containing metadata for your node. The codex filename must match the node base filename. For example, given a node base file named MyNode.node.ts , the codex name is MyNode.node.json . The nodes directory can contain other files and subdirectories, including directories for versions, and node code split across more than one file to create a modular structure. A credentials directory, containing your credentials code. This code lives in a single credentials file . The filename format is <node-name>.credentials.ts . For example, MyNode.credentials.ts . Modular structure # You can choose whether to place all your node's functionality in one file, or split it out into a base file and other modules, which the base file then imports. Unless your node is very simple, it's a best practice to split it out. A basic pattern is to separate out operations. Refer to the HttpBin starter node for an example of this. For more complex nodes, n8n recommends a directory structure. Refer to the Airtable node or Microsoft Outlook node as examples. actions : a directory containing sub-directories that represent resources. Each sub-directory should contain two types of files: An index file with resource description (named either <resourceName>.resource.ts or index.ts ) Files for operations <operationName>.operation.ts . These files should have two exports: description of the operation and an execute function. methods : an optional directory dynamic parameters' functions. transport : a directory containing the communication implementation. Versioning # If your node has more than one version, and you're using full versioning, this makes the file structure more complex. You need a directory for each version, along with a base file that sets the default version. Refer to Node versioning for more information on working with versions, including types of versioning. Decide how many nodes to include in a package # There are two possible setups when building a node: One node in one npm package. More than one node in a single npm package. n8n supports both approaches. If you include more than one node, each node should have its own directory in the nodes directory. A best-practice example for programmatic nodes # n8n's built-in Airtable node implements a modular structure and versioning, following recommended patterns. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/test/node-linter/

n8n node linter # n8n's node linter, eslint-plugin-n8n-nodes-base , statically analyzes ("lints") the source code of n8n nodes and credentials in the official repository and in community packages. The linter detects issues and automatically fixes them to help you follow best practices. eslint-plugin-n8n-nodes-base contains a collection of rules for node files ( *.node.ts ), resource description files ( *Description.ts ), credential files ( *.credentials.ts ), and the package.json of a community package. Setup # If using the n8n node starter : Run npm install in the starter project to install all dependencies. Once the installation finishes, the linter is available to you. If using VS Code, install the ESLint VS Code extension . For other IDEs, refer to their ESLint integrations. Don't edit the configuration file .eslintrc.js contains the configuration for eslint-plugin-n8n-nodes-base . Don't edit this file. Usage # You can use the linter in a community package or in the main n8n repository. Linting # In a community package, the linter runs automatically after installing dependencies and before publishing the package to npm. In the main n8n repository , the linter runs automatically using GitHub Actions whenever you push to your pull request. In both cases, VS Code lints in the background as you work on your project. Hover over a detected issue to see a full description of the linting and a link to further information. You can also run the linter manually: Run npm run lint to lint and view detected issues in your console. Run npm run lintfix to lint and automatically fix issues. The linter fixes violations of rules marked as automatically fixable . Both commands can run in the root directory of your community package, or in /packages/nodes-base/ in the main repository. Exceptions # Instead of fixing a rule violation, you can also make an exception for it, so the linter doesn't flag it. To make a lint exception from VS Code: hover over the issue and click on Quick fix (or cmd+. in macOS) and select Disable {rule} for this line . Only disable rules for a line where you have good reason to. If you think the linter is incorrectly reporting an issue, please report it in the linter repository . To add a lint exception to a single file, add a code comment. In particular, TSLint rules may not show up in VS Code and may need to be turned off using code comments. Refer to the TSLint documentation for more guidance. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/node-types/

Built-in integrations # This section contains the node library: reference documentation for every built-in node in n8n, and their credentials. Node operations: Triggers and Actions # When you add a node to a workflow, n8n displays a list of available operations. An operation is something a node does, such as getting or sending data. There are two types of operation: Triggers start a workflow in response to specific events or conditions in your services. When you select a Trigger, n8n adds a trigger node to your workflow, with the Trigger operation you chose pre-selected. When you search for a node in n8n, Trigger operations have a bolt icon . Actions are operations that represent specific tasks within a workflow, which you can use to manipulate data, perform operations on external systems, and trigger events in other systems as part of your workflows. When you select an Action, n8n adds a node to your workflow, with the Action operation you chose pre-selected. Core nodes # Core nodes can be actions or triggers . Whereas most nodes connect to a specific external service, core nodes provide functionality such as logic, scheduling, or generic API calls. Cluster nodes # Cluster nodes are node groups that work together to provide functionality in an n8n workflow. Instead of using a single node, you use a root node and one or more sub-nodes that extend the functionality of the node. Credentials # External services need a way to identify and authenticate users. This data can range from an API key over an email/password combination to a long multi-line private key. You can save these in n8n as credentials . Nodes in n8n can then request that credential information. As another layer of security, only node types with specific access rights can access the credentials. To make sure that the data is secure, it gets saved to the database encrypted. n8n uses a random personal encryption key, which it automatically generates on the first run of n8n and then saved under ~/.n8n/config . To learn more about creating, managing, and sharing credentials, refer to Manage credentials . Community nodes # n8n supports custom nodes built by the community. Refer to Community nodes for guidance on installing and using these nodes. For help building your own custom nodes, and publish them to npm , refer to Creating nodes for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/plan/node-ui-design/

Design your node's user interface # Most nodes are a GUI (graphical user interface) representation of an API. Designing the interface means finding a user-friendly way to represent API endpoints and parameters. Directly translating an entire API into form fields in a node may not result in a good user experience. This document provides design guidance and standards to follow. These guidelines are the same as those used by n8n. This helps provide a smooth and consistent user experience for users mixing community and built-in nodes. Design guidance # All node's use n8n's node UI elements , so you don't need to consider style details such as colors, borders, and so on. However, it's still useful to go through a basic design process: Review the documentation for the API you're integrating. Ask yourself: What can you leave out? What can you simplify? Which parts of the API are confusing? How can you help users understand them? Use a wireframe tool to try out your field layout. If you find your node has a lot of fields and is getting confusing, consider n8n's guidance on showing and hiding fields . Standards # UI text style # Element Style Drop-down value Title case Hint Sentence case Info box Sentence case. Don't use a period ( . ) for one-sentence information. Always use a period if there's more than one sentence. This field can include links, which should open in a new tab. Node name Title case Parameter name Title case Subtitle Title case Tooltip Sentence case. Don't use a period ( . ) for one-sentence tooltips. Always use a period if there's more than one sentence. This field can include links, which should open in a new tab. UI text terminology # Use the same terminology as the service the node connects to. For example, a Notion node should refer to Notion blocks, not Notion paragraphs, because Notion calls these elements blocks. There are exceptions to this rule, usually to avoid technical terms (for example, refer to the guidance on name and description for upsert operations ). Sometimes a service has different terms for something in its API and in its GUI. Use the GUI language in your node, as this is what most users are familiar with. If you think some users may need to refer to the service's API docs, consider including this information in a hint. Don't use technical jargon when there are simpler alternatives. Be consistent when naming things. For example, choose one of directory or folder then stick to it. Node naming conventions # Convention Correct Incorrect If a node is a trigger node, the displayed name should have 'Trigger' at the end, with a space before. Shopify Trigger ShopifyTrigger, Shopify trigger Don't include 'node' in the name. Asana Asana Node, Asana node Showing and hiding fields # Fields can either be: Displayed when the node opens: use this for resources and operations, and required fields. Hidden in the Optional fields section until a user clicks on that section: use this for optional fields. Progressively disclose complexity: hide a field until any earlier fields it depends on have values. For example, if you have a Filter by date toggle, and a Date to filter by datepicker, don't display Date to filter by until the user enables Filter by date . Conventions by field type # Credentials # n8n automatically displays credential fields as the top fields in the node. Resources and operations # APIs usually involve doing something to data. For example, "get all tasks." In this example, "task" is the resource, and "get all" is the operation. When your node has this resource and operation pattern, your first field should be Resource , and your second field should be Operation . Required fields # Order fields by: Most important to least important. Scope: from broad to narrow. For example, you have fields for Document , Page , and Text to insert , put them in that order. Optional fields # Order fields alphabetically. To group similar things together, you can rename them. For example, rename Email and Secondary Email to Email (primary) and Email (secondary) . If an optional field has a default value that the node uses when the value isn't set, load the field with that value. Explain this in the field description. For example, Defaults to false . Connected fields: if one optional fields is dependent on another, bundle them together. They should both be under a single option that shows both fields when selected. If you have a lot of optional fields, consider grouping them by theme. Help # There are five types of help built in to the GUI: Info boxes: yellow boxes that appear between fields. Refer to UI elements | Notice for more information. Use info boxes for essential information. Don't over-use them. By making them rare, they stand out more and grab the user's attention. Parameter hints: lines of text displayed beneath a user input field. Use this when there's something the user needs to know, but an info box would be excessive. Node hints: provide help in the input panel, output panel, or node details view. Refer to UI elements | Hints for more information. Tooltips: callouts that appear when the user hovers over the tooltip icon . Use tooltips for extra information that the user might need. You don't have to provide a tooltip for every field. Only add one if it contains useful information. When writing tooltips, think about what the user needs. Don't just copy-paste API parameter descriptions. If the description doesn't make sense, or has errors, improve it. Placeholder text: n8n can display placeholder text in a field where the user hasn't entered a value. This can help the user know what's expected in that field. Info boxes, hints, and tooltips can contain links to more information. Errors # Make it clear which fields are required. Add validation rules to fields if possible. For example, check for valid email patterns if the field expects an email. When displaying errors, make sure only the main error message displays in the red error title. More information should go in Details . Toggles # Tooltips for binary states should start with something like Whether to . . . . You may need a list rather than a toggle: Use toggles when it's clear what happens in a false state. For example, Simplify Output? . The alternative (don't simplify output) is clear. Use a dropdown list with named options when you need more clarity. For example, Append? . What happens if you don't append is unclear (it could be that nothing happens, or information is overwritten, or discarded). Lists # Set default values for lists whenever possible. The default should be the most-used option. Sort list options alphabetically. You can include list option descriptions. Only add descriptions if they provide useful information. If there is an option like All , use the word All , not shorthand like * . Trigger node inputs # When a trigger node has a parameter for specifying which events to trigger on: Name the parameter Trigger on . Don't include a tooltip. Subtitles # Set subtitles based on the values of the main parameters. For example: 1 subtitle : '={{$parameter["operation"] + ": " + $parameter["resource"]}}' , IDs # When performing an operation on a specific record, such as "update a task comment" you need a way to specify which record you want to change. Wherever possible, provide two ways to specify a record: By choosing from a pre-populated list. You can generate this list using the loadOptions parameter. Refer to Base files for more information. By entering an ID. Name the field <Record name> name or ID . For example, Workspace Name or ID . Add a tooltip saying "Choose a name from the list, or specify an ID using an expression." Link to n8n's Expressions documentation. Build your node so that it can handle users providing more information than required. For example: If you need a relative path, handle the user pasting in the absolute path. If the user needs to get an ID from a URL, handle the user pasting in the entire URL. Dates and timestamps # n8n uses ISO timestamp strings for dates and times. Make sure that any date or timestamp field you add supports all ISO 8601 formats. JSON # You should support two ways of specifying the content of a text input that expects JSON: Typing JSON directly into the text input: you need to parse the resulting string into a JSON object. Using an expression that returns JSON. Node icons # Common patterns and exceptions # This section provides guidance on handling common design patterns, including some edge cases and exceptions to the main standards. Simplify responses # APIs can return a lot of data that isn't useful. Consider adding a toggle that allows users to choose to simplify the response data: Name: Simplify Response Description: Whether to return a simplified version of the response instead of the raw data Upsert operations # This should always be a separate operation with: Name: Create or Update Description: Create a new record, or update the current one if it already exists (upsert) Boolean operators # n8n doesn't have good support for combining boolean operators, such as AND and OR, in the GUI. Whenever possible, provide options for all ANDs or all ORs. For example, you have a field called Must match to test if values match. Include options to test for Any and All , as separate options. Source keys or binary properties # Binary data is file data, such as spreadsheets or images. In n8n, you need a named key to reference the data. Don't use the terms "binary data" or "binary property" for this field. Instead, use a more descriptive name: Input data field name / Output data field name . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/build/reference/node-versioning/

Node versioning # n8n supports node versioning. You can make changes to existing nodes without breaking the existing behavior by introducing a new version. Be aware of how n8n decides which node version to load: If a user builds and saves a workflow using version 1, n8n continues to use version 1 in that workflow, even if you create and publish a version 2 of the node. When a user creates a new workflow and browses for nodes, n8n always loads the latest version of the node. Versioning type restricted by node style If you build a node using the declarative style, you can't use full versioning. Light versioning # This is available for all node types. One node can contain more than one version, allowing small version increments without code duplication. To use this feature: Change the main version parameter to an array, and add your version numbers, including your existing version. You can then access the version parameter with @version in your displayOptions in any object (to control which versions n8n displays the object with). You can also query the version from a function using const nodeVersion = this.getNode().typeVersion; . As an example, say you want to add versioning to the NasaPics node from the Declarative node tutorial , then configure a resource so that n8n only displays it in version 2 of the node. In your base NasaPics.node.ts file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { displayName : 'NASA Pics' , name : 'NasaPics' , icon : 'file:nasapics.svg' , // List the available versions version : [ 1 , 2 , 3 ], // More basic parameters here properties : [ // Add a resource that's only displayed for version2 { displayName : 'Resource name' , // More resource parameters displayOptions : { show : { '@version' : 2 , }, }, }, ], } Full versioning # This isn't available for declarative-style nodes. As an example, refer to the Mattermost node . Full versioning summary: The base node file should extend NodeVersionedType instead of INodeType . The base node file should contain a description including the defaultVersion (usually the latest), other basic node metadata such as name, and a list of versions. It shouldn't contain any node functionality. n8n recommends using v1 , v2 , and so on, for version folder names. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/nodes

Nodes environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. This page lists the environment variables configuration options for managing nodes in n8n, including specifying which nodes to load or exclude, importing built-in or external modules in the Code node, and enabling community nodes. Variable Type Default Description NODES_INCLUDE Array of strings - Specify which nodes to load. NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODE_FUNCTION_ALLOW_BUILTIN String - Permit users to import specific built-in modules in the Code node. Use * to allow all. n8n disables importing modules by default. NODE_FUNCTION_ALLOW_EXTERNAL String - Permit users to import specific external modules (from n8n/node_modules ) in the Code node. n8n disables importing modules by default. NODES_ERROR_TRIGGER_TYPE String n8n-nodes-base.errorTrigger Specify which node type to use as Error Trigger. N8N_CUSTOM_EXTENSIONS String - Specify the path to directories containing your custom nodes. N8N_COMMUNITY_PACKAGES_ENABLED Boolean true Enables (true) or disables (false) community nodes. N8N_COMMUNITY_PACKAGES_REGISTRY String https://registry.npmjs.org NPM registry URL to pull community packages from (license required). Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/components/nodes/#node-settings

Nodes # Nodes are the key building blocks of a workflow . They perform a range of actions, including: Starting the workflow. Fetching and sending data. Processing and manipulating data. n8n provides a collection of built-in nodes, as well as the ability to create your own nodes. Refer to: Built-in integrations to browse the node library. Community nodes for guidance on finding and installing community-created nodes. Creating nodes to start building your own nodes. Add a node to your workflow # Add a node to an empty workflow # Select Add first step . n8n opens the nodes panel, where you can search or browse trigger nodes . Select the trigger you want to use. Choose the correct app event If you select On App Event , n8n shows a list of all the supported services. Use this list to browse n8n's integrations and trigger a workflow in response to an event in your chosen service. Not all integrations have triggers. To see which ones you can use as a trigger, select the node. If a trigger is available, you'll see it at the top of the available operations list. For example, this is the trigger for Asana: Add a node to an existing workflow # Select the Add node connector. n8n opens the nodes panel, where you can search or browse all nodes. Node operations: Triggers and Actions # When you add a node to a workflow, n8n displays a list of available operations. An operation is something a node does, such as getting or sending data. There are two types of operation: Triggers start a workflow in response to specific events or conditions in your services. When you select a Trigger, n8n adds a trigger node to your workflow, with the Trigger operation you chose pre-selected. When you search for a node in n8n, Trigger operations have a bolt icon . Actions are operations that represent specific tasks within a workflow, which you can use to manipulate data, perform operations on external systems, and trigger events in other systems as part of your workflows. When you select an Action, n8n adds a node to your workflow, with the Action operation you chose pre-selected. Node controls # To view node controls, hover over the node on the canvas: Test step : Run the node. Deactivate : Deactivate the node. Delete : Delete the node. Node context menu : Select node actions. Available actions: Open node Test step Rename node Deactivate node Pin node Copy node Duplicate node Select all Clear selection Delete node Node settings # The node settings under the Settings tab allow you to control node behaviors and add node notes. When active or set, they do the following: Request Options : Select Add Option to view and select these options. Batching : Control how to batch large numbers of input items. Ignore SSL Issues : Download the response even if SSL validation isn't possible. Proxy : Use this if you need to specify an HTTP proxy. Timeout : Set a timeout for the request in ms. Always Output Data : The node returns an empty item even if the node returns no data during execution. Be careful setting this on IF nodes, as it could cause an infinite loop. Execute Once : The node executes once, with data from the first item it receives. It doesn't process any extra items. Retry On Fail : When an execution fails, the node reruns until it succeeds. On Error : Stop Workflow : Halts the entire workflow when an error occurs, preventing further node execution. Continue : Proceeds to the next node despite the error, using the last valid data. Continue (using error output) : Continues workflow execution, passing error information to the next node for potential handling. You can document your workflow using node notes: Notes : Note to save with the node. Display note in flow : If active, n8n displays the note in the workflow as a subtitle. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/components/nodes/#nodes

Nodes # Nodes are the key building blocks of a workflow . They perform a range of actions, including: Starting the workflow. Fetching and sending data. Processing and manipulating data. n8n provides a collection of built-in nodes, as well as the ability to create your own nodes. Refer to: Built-in integrations to browse the node library. Community nodes for guidance on finding and installing community-created nodes. Creating nodes to start building your own nodes. Add a node to your workflow # Add a node to an empty workflow # Select Add first step . n8n opens the nodes panel, where you can search or browse trigger nodes . Select the trigger you want to use. Choose the correct app event If you select On App Event , n8n shows a list of all the supported services. Use this list to browse n8n's integrations and trigger a workflow in response to an event in your chosen service. Not all integrations have triggers. To see which ones you can use as a trigger, select the node. If a trigger is available, you'll see it at the top of the available operations list. For example, this is the trigger for Asana: Add a node to an existing workflow # Select the Add node connector. n8n opens the nodes panel, where you can search or browse all nodes. Node operations: Triggers and Actions # When you add a node to a workflow, n8n displays a list of available operations. An operation is something a node does, such as getting or sending data. There are two types of operation: Triggers start a workflow in response to specific events or conditions in your services. When you select a Trigger, n8n adds a trigger node to your workflow, with the Trigger operation you chose pre-selected. When you search for a node in n8n, Trigger operations have a bolt icon . Actions are operations that represent specific tasks within a workflow, which you can use to manipulate data, perform operations on external systems, and trigger events in other systems as part of your workflows. When you select an Action, n8n adds a node to your workflow, with the Action operation you chose pre-selected. Node controls # To view node controls, hover over the node on the canvas: Test step : Run the node. Deactivate : Deactivate the node. Delete : Delete the node. Node context menu : Select node actions. Available actions: Open node Test step Rename node Deactivate node Pin node Copy node Duplicate node Select all Clear selection Delete node Node settings # The node settings under the Settings tab allow you to control node behaviors and add node notes. When active or set, they do the following: Request Options : Select Add Option to view and select these options. Batching : Control how to batch large numbers of input items. Ignore SSL Issues : Download the response even if SSL validation isn't possible. Proxy : Use this if you need to specify an HTTP proxy. Timeout : Set a timeout for the request in ms. Always Output Data : The node returns an empty item even if the node returns no data during execution. Be careful setting this on IF nodes, as it could cause an infinite loop. Execute Once : The node executes once, with data from the first item it receives. It doesn't process any extra items. Retry On Fail : When an execution fails, the node reruns until it succeeds. On Error : Stop Workflow : Halts the entire workflow when an error occurs, preventing further node execution. Continue : Proceeds to the next node despite the error, using the last valid data. Continue (using error output) : Continues workflow execution, passing error information to the next node for potential handling. You can document your workflow using node notes: Notes : Note to save with the node. Display note in flow : If active, n8n displays the note in the workflow as a subtitle. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/components/nodes/#node-operations-triggers-and-actions

Nodes # Nodes are the key building blocks of a workflow . They perform a range of actions, including: Starting the workflow. Fetching and sending data. Processing and manipulating data. n8n provides a collection of built-in nodes, as well as the ability to create your own nodes. Refer to: Built-in integrations to browse the node library. Community nodes for guidance on finding and installing community-created nodes. Creating nodes to start building your own nodes. Add a node to your workflow # Add a node to an empty workflow # Select Add first step . n8n opens the nodes panel, where you can search or browse trigger nodes . Select the trigger you want to use. Choose the correct app event If you select On App Event , n8n shows a list of all the supported services. Use this list to browse n8n's integrations and trigger a workflow in response to an event in your chosen service. Not all integrations have triggers. To see which ones you can use as a trigger, select the node. If a trigger is available, you'll see it at the top of the available operations list. For example, this is the trigger for Asana: Add a node to an existing workflow # Select the Add node connector. n8n opens the nodes panel, where you can search or browse all nodes. Node operations: Triggers and Actions # When you add a node to a workflow, n8n displays a list of available operations. An operation is something a node does, such as getting or sending data. There are two types of operation: Triggers start a workflow in response to specific events or conditions in your services. When you select a Trigger, n8n adds a trigger node to your workflow, with the Trigger operation you chose pre-selected. When you search for a node in n8n, Trigger operations have a bolt icon . Actions are operations that represent specific tasks within a workflow, which you can use to manipulate data, perform operations on external systems, and trigger events in other systems as part of your workflows. When you select an Action, n8n adds a node to your workflow, with the Action operation you chose pre-selected. Node controls # To view node controls, hover over the node on the canvas: Test step : Run the node. Deactivate : Deactivate the node. Delete : Delete the node. Node context menu : Select node actions. Available actions: Open node Test step Rename node Deactivate node Pin node Copy node Duplicate node Select all Clear selection Delete node Node settings # The node settings under the Settings tab allow you to control node behaviors and add node notes. When active or set, they do the following: Request Options : Select Add Option to view and select these options. Batching : Control how to batch large numbers of input items. Ignore SSL Issues : Download the response even if SSL validation isn't possible. Proxy : Use this if you need to specify an HTTP proxy. Timeout : Set a timeout for the request in ms. Always Output Data : The node returns an empty item even if the node returns no data during execution. Be careful setting this on IF nodes, as it could cause an infinite loop. Execute Once : The node executes once, with data from the first item it receives. It doesn't process any extra items. Retry On Fail : When an execution fails, the node reruns until it succeeds. On Error : Stop Workflow : Halts the entire workflow when an error occurs, preventing further node execution. Continue : Proceeds to the next node despite the error, using the last valid data. Continue (using error output) : Continues workflow execution, passing error information to the next node for potential handling. You can document your workflow using node notes: Notes : Note to save with the node. Display note in flow : If active, n8n displays the note in the workflow as a subtitle. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/components/nodes/#add-a-node-to-your-workflow

Nodes # Nodes are the key building blocks of a workflow . They perform a range of actions, including: Starting the workflow. Fetching and sending data. Processing and manipulating data. n8n provides a collection of built-in nodes, as well as the ability to create your own nodes. Refer to: Built-in integrations to browse the node library. Community nodes for guidance on finding and installing community-created nodes. Creating nodes to start building your own nodes. Add a node to your workflow # Add a node to an empty workflow # Select Add first step . n8n opens the nodes panel, where you can search or browse trigger nodes . Select the trigger you want to use. Choose the correct app event If you select On App Event , n8n shows a list of all the supported services. Use this list to browse n8n's integrations and trigger a workflow in response to an event in your chosen service. Not all integrations have triggers. To see which ones you can use as a trigger, select the node. If a trigger is available, you'll see it at the top of the available operations list. For example, this is the trigger for Asana: Add a node to an existing workflow # Select the Add node connector. n8n opens the nodes panel, where you can search or browse all nodes. Node operations: Triggers and Actions # When you add a node to a workflow, n8n displays a list of available operations. An operation is something a node does, such as getting or sending data. There are two types of operation: Triggers start a workflow in response to specific events or conditions in your services. When you select a Trigger, n8n adds a trigger node to your workflow, with the Trigger operation you chose pre-selected. When you search for a node in n8n, Trigger operations have a bolt icon . Actions are operations that represent specific tasks within a workflow, which you can use to manipulate data, perform operations on external systems, and trigger events in other systems as part of your workflows. When you select an Action, n8n adds a node to your workflow, with the Action operation you chose pre-selected. Node controls # To view node controls, hover over the node on the canvas: Test step : Run the node. Deactivate : Deactivate the node. Delete : Delete the node. Node context menu : Select node actions. Available actions: Open node Test step Rename node Deactivate node Pin node Copy node Duplicate node Select all Clear selection Delete node Node settings # The node settings under the Settings tab allow you to control node behaviors and add node notes. When active or set, they do the following: Request Options : Select Add Option to view and select these options. Batching : Control how to batch large numbers of input items. Ignore SSL Issues : Download the response even if SSL validation isn't possible. Proxy : Use this if you need to specify an HTTP proxy. Timeout : Set a timeout for the request in ms. Always Output Data : The node returns an empty item even if the node returns no data during execution. Be careful setting this on IF nodes, as it could cause an infinite loop. Execute Once : The node executes once, with data from the first item it receives. It doesn't process any extra items. Retry On Fail : When an execution fails, the node reruns until it succeeds. On Error : Stop Workflow : Halts the entire workflow when an error occurs, preventing further node execution. Continue : Proceeds to the next node despite the error, using the last valid data. Continue (using error output) : Continues workflow execution, passing error information to the next node for potential handling. You can document your workflow using node notes: Notes : Note to save with the node. Display note in flow : If active, n8n displays the note in the workflow as a subtitle. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/components/nodes/#node-controls

Nodes # Nodes are the key building blocks of a workflow . They perform a range of actions, including: Starting the workflow. Fetching and sending data. Processing and manipulating data. n8n provides a collection of built-in nodes, as well as the ability to create your own nodes. Refer to: Built-in integrations to browse the node library. Community nodes for guidance on finding and installing community-created nodes. Creating nodes to start building your own nodes. Add a node to your workflow # Add a node to an empty workflow # Select Add first step . n8n opens the nodes panel, where you can search or browse trigger nodes . Select the trigger you want to use. Choose the correct app event If you select On App Event , n8n shows a list of all the supported services. Use this list to browse n8n's integrations and trigger a workflow in response to an event in your chosen service. Not all integrations have triggers. To see which ones you can use as a trigger, select the node. If a trigger is available, you'll see it at the top of the available operations list. For example, this is the trigger for Asana: Add a node to an existing workflow # Select the Add node connector. n8n opens the nodes panel, where you can search or browse all nodes. Node operations: Triggers and Actions # When you add a node to a workflow, n8n displays a list of available operations. An operation is something a node does, such as getting or sending data. There are two types of operation: Triggers start a workflow in response to specific events or conditions in your services. When you select a Trigger, n8n adds a trigger node to your workflow, with the Trigger operation you chose pre-selected. When you search for a node in n8n, Trigger operations have a bolt icon . Actions are operations that represent specific tasks within a workflow, which you can use to manipulate data, perform operations on external systems, and trigger events in other systems as part of your workflows. When you select an Action, n8n adds a node to your workflow, with the Action operation you chose pre-selected. Node controls # To view node controls, hover over the node on the canvas: Test step : Run the node. Deactivate : Deactivate the node. Delete : Delete the node. Node context menu : Select node actions. Available actions: Open node Test step Rename node Deactivate node Pin node Copy node Duplicate node Select all Clear selection Delete node Node settings # The node settings under the Settings tab allow you to control node behaviors and add node notes. When active or set, they do the following: Request Options : Select Add Option to view and select these options. Batching : Control how to batch large numbers of input items. Ignore SSL Issues : Download the response even if SSL validation isn't possible. Proxy : Use this if you need to specify an HTTP proxy. Timeout : Set a timeout for the request in ms. Always Output Data : The node returns an empty item even if the node returns no data during execution. Be careful setting this on IF nodes, as it could cause an infinite loop. Execute Once : The node executes once, with data from the first item it receives. It doesn't process any extra items. Retry On Fail : When an execution fails, the node reruns until it succeeds. On Error : Stop Workflow : Halts the entire workflow when an error occurs, preventing further node execution. Continue : Proceeds to the next node despite the error, using the last valid data. Continue (using error output) : Continues workflow execution, passing error information to the next node for potential handling. You can document your workflow using node notes: Notes : Note to save with the node. Display note in flow : If active, n8n displays the note in the workflow as a subtitle. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/components/nodes/#add-a-node-to-an-empty-workflow

Nodes # Nodes are the key building blocks of a workflow . They perform a range of actions, including: Starting the workflow. Fetching and sending data. Processing and manipulating data. n8n provides a collection of built-in nodes, as well as the ability to create your own nodes. Refer to: Built-in integrations to browse the node library. Community nodes for guidance on finding and installing community-created nodes. Creating nodes to start building your own nodes. Add a node to your workflow # Add a node to an empty workflow # Select Add first step . n8n opens the nodes panel, where you can search or browse trigger nodes . Select the trigger you want to use. Choose the correct app event If you select On App Event , n8n shows a list of all the supported services. Use this list to browse n8n's integrations and trigger a workflow in response to an event in your chosen service. Not all integrations have triggers. To see which ones you can use as a trigger, select the node. If a trigger is available, you'll see it at the top of the available operations list. For example, this is the trigger for Asana: Add a node to an existing workflow # Select the Add node connector. n8n opens the nodes panel, where you can search or browse all nodes. Node operations: Triggers and Actions # When you add a node to a workflow, n8n displays a list of available operations. An operation is something a node does, such as getting or sending data. There are two types of operation: Triggers start a workflow in response to specific events or conditions in your services. When you select a Trigger, n8n adds a trigger node to your workflow, with the Trigger operation you chose pre-selected. When you search for a node in n8n, Trigger operations have a bolt icon . Actions are operations that represent specific tasks within a workflow, which you can use to manipulate data, perform operations on external systems, and trigger events in other systems as part of your workflows. When you select an Action, n8n adds a node to your workflow, with the Action operation you chose pre-selected. Node controls # To view node controls, hover over the node on the canvas: Test step : Run the node. Deactivate : Deactivate the node. Delete : Delete the node. Node context menu : Select node actions. Available actions: Open node Test step Rename node Deactivate node Pin node Copy node Duplicate node Select all Clear selection Delete node Node settings # The node settings under the Settings tab allow you to control node behaviors and add node notes. When active or set, they do the following: Request Options : Select Add Option to view and select these options. Batching : Control how to batch large numbers of input items. Ignore SSL Issues : Download the response even if SSL validation isn't possible. Proxy : Use this if you need to specify an HTTP proxy. Timeout : Set a timeout for the request in ms. Always Output Data : The node returns an empty item even if the node returns no data during execution. Be careful setting this on IF nodes, as it could cause an infinite loop. Execute Once : The node executes once, with data from the first item it receives. It doesn't process any extra items. Retry On Fail : When an execution fails, the node reruns until it succeeds. On Error : Stop Workflow : Halts the entire workflow when an error occurs, preventing further node execution. Continue : Proceeds to the next node despite the error, using the last valid data. Continue (using error output) : Continues workflow execution, passing error information to the next node for potential handling. You can document your workflow using node notes: Notes : Note to save with the node. Display note in flow : If active, n8n displays the note in the workflow as a subtitle. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/components/nodes/

Nodes # Nodes are the key building blocks of a workflow . They perform a range of actions, including: Starting the workflow. Fetching and sending data. Processing and manipulating data. n8n provides a collection of built-in nodes, as well as the ability to create your own nodes. Refer to: Built-in integrations to browse the node library. Community nodes for guidance on finding and installing community-created nodes. Creating nodes to start building your own nodes. Add a node to your workflow # Add a node to an empty workflow # Select Add first step . n8n opens the nodes panel, where you can search or browse trigger nodes . Select the trigger you want to use. Choose the correct app event If you select On App Event , n8n shows a list of all the supported services. Use this list to browse n8n's integrations and trigger a workflow in response to an event in your chosen service. Not all integrations have triggers. To see which ones you can use as a trigger, select the node. If a trigger is available, you'll see it at the top of the available operations list. For example, this is the trigger for Asana: Add a node to an existing workflow # Select the Add node connector. n8n opens the nodes panel, where you can search or browse all nodes. Node operations: Triggers and Actions # When you add a node to a workflow, n8n displays a list of available operations. An operation is something a node does, such as getting or sending data. There are two types of operation: Triggers start a workflow in response to specific events or conditions in your services. When you select a Trigger, n8n adds a trigger node to your workflow, with the Trigger operation you chose pre-selected. When you search for a node in n8n, Trigger operations have a bolt icon . Actions are operations that represent specific tasks within a workflow, which you can use to manipulate data, perform operations on external systems, and trigger events in other systems as part of your workflows. When you select an Action, n8n adds a node to your workflow, with the Action operation you chose pre-selected. Node controls # To view node controls, hover over the node on the canvas: Test step : Run the node. Deactivate : Deactivate the node. Delete : Delete the node. Node context menu : Select node actions. Available actions: Open node Test step Rename node Deactivate node Pin node Copy node Duplicate node Select all Clear selection Delete node Node settings # The node settings under the Settings tab allow you to control node behaviors and add node notes. When active or set, they do the following: Request Options : Select Add Option to view and select these options. Batching : Control how to batch large numbers of input items. Ignore SSL Issues : Download the response even if SSL validation isn't possible. Proxy : Use this if you need to specify an HTTP proxy. Timeout : Set a timeout for the request in ms. Always Output Data : The node returns an empty item even if the node returns no data during execution. Be careful setting this on IF nodes, as it could cause an infinite loop. Execute Once : The node executes once, with data from the first item it receives. It doesn't process any extra items. Retry On Fail : When an execution fails, the node reruns until it succeeds. On Error : Stop Workflow : Halts the entire workflow when an error occurs, preventing further node execution. Continue : Proceeds to the next node despite the error, using the last valid data. Continue (using error output) : Continues workflow execution, passing error information to the next node for potential handling. You can document your workflow using node notes: Notes : Note to save with the node. Display note in flow : If active, n8n displays the note in the workflow as a subtitle. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/components/nodes/#add-a-node-to-an-existing-workflow

Nodes # Nodes are the key building blocks of a workflow . They perform a range of actions, including: Starting the workflow. Fetching and sending data. Processing and manipulating data. n8n provides a collection of built-in nodes, as well as the ability to create your own nodes. Refer to: Built-in integrations to browse the node library. Community nodes for guidance on finding and installing community-created nodes. Creating nodes to start building your own nodes. Add a node to your workflow # Add a node to an empty workflow # Select Add first step . n8n opens the nodes panel, where you can search or browse trigger nodes . Select the trigger you want to use. Choose the correct app event If you select On App Event , n8n shows a list of all the supported services. Use this list to browse n8n's integrations and trigger a workflow in response to an event in your chosen service. Not all integrations have triggers. To see which ones you can use as a trigger, select the node. If a trigger is available, you'll see it at the top of the available operations list. For example, this is the trigger for Asana: Add a node to an existing workflow # Select the Add node connector. n8n opens the nodes panel, where you can search or browse all nodes. Node operations: Triggers and Actions # When you add a node to a workflow, n8n displays a list of available operations. An operation is something a node does, such as getting or sending data. There are two types of operation: Triggers start a workflow in response to specific events or conditions in your services. When you select a Trigger, n8n adds a trigger node to your workflow, with the Trigger operation you chose pre-selected. When you search for a node in n8n, Trigger operations have a bolt icon . Actions are operations that represent specific tasks within a workflow, which you can use to manipulate data, perform operations on external systems, and trigger events in other systems as part of your workflows. When you select an Action, n8n adds a node to your workflow, with the Action operation you chose pre-selected. Node controls # To view node controls, hover over the node on the canvas: Test step : Run the node. Deactivate : Deactivate the node. Delete : Delete the node. Node context menu : Select node actions. Available actions: Open node Test step Rename node Deactivate node Pin node Copy node Duplicate node Select all Clear selection Delete node Node settings # The node settings under the Settings tab allow you to control node behaviors and add node notes. When active or set, they do the following: Request Options : Select Add Option to view and select these options. Batching : Control how to batch large numbers of input items. Ignore SSL Issues : Download the response even if SSL validation isn't possible. Proxy : Use this if you need to specify an HTTP proxy. Timeout : Set a timeout for the request in ms. Always Output Data : The node returns an empty item even if the node returns no data during execution. Be careful setting this on IF nodes, as it could cause an infinite loop. Execute Once : The node executes once, with data from the first item it receives. It doesn't process any extra items. Retry On Fail : When an execution fails, the node reruns until it succeeds. On Error : Stop Workflow : Halts the entire workflow when an error occurs, preventing further node execution. Continue : Proceeds to the next node despite the error, using the last valid data. Continue (using error output) : Continues workflow execution, passing error information to the next node for potential handling. You can document your workflow using node notes: Notes : Note to save with the node. Display note in flow : If active, n8n displays the note in the workflow as a subtitle. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/nodes/

Nodes environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. This page lists the environment variables configuration options for managing nodes in n8n, including specifying which nodes to load or exclude, importing built-in or external modules in the Code node, and enabling community nodes. Variable Type Default Description NODES_INCLUDE Array of strings - Specify which nodes to load. NODES_EXCLUDE Array of strings - Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren't trustworthy: NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]" NODE_FUNCTION_ALLOW_BUILTIN String - Permit users to import specific built-in modules in the Code node. Use * to allow all. n8n disables importing modules by default. NODE_FUNCTION_ALLOW_EXTERNAL String - Permit users to import specific external modules (from n8n/node_modules ) in the Code node. n8n disables importing modules by default. NODES_ERROR_TRIGGER_TYPE String n8n-nodes-base.errorTrigger Specify which node type to use as Error Trigger. N8N_CUSTOM_EXTENSIONS String - Specify the path to directories containing your custom nodes. N8N_COMMUNITY_PACKAGES_ENABLED Boolean true Enables (true) or disables (false) community nodes. N8N_COMMUNITY_PACKAGES_REGISTRY String https://registry.npmjs.org NPM registry URL to pull community packages from (license required). Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/installation/npm/#n8n-with-tunnel

npm # npm is a quick way to get started with n8n on your local machine. You must have Node.js installed. n8n requires Node.js 18 or above. Latest and Next versions n8n releases a new minor version most weeks. The latest version is for production use. next is the most recent release. You should treat next as a beta: it may be unstable. To report issues, use the forum . Current latest : 1.80.5 Current next : 1.81.2 Try n8n with npx # You can try n8n without installing it using npx. From the terminal, run: 1 npx n8n This command will download everything that's needed to start n8n. You can then access n8n and start building workflows by opening http://localhost:5678 . Install globally with npm # To install n8n globally, use npm: 1 npm install n8n -g To install or update to a specific version of n8n use the @ syntax to specify the version. For example: 1 npm install -g n8n@0.126.1 To install next : 1 npm install -g n8n@next After the installation, start n8n by running: 1 2 3 n8n # or n8n start Keep in mind Windows users remember to change into the .n8n directory of your Home folder ( ~/.n8n ) before running n8n start . Next steps # Try out n8n using the Quickstarts . Updating # To update your n8n instance to the latest version, run: 1 npm update -g n8n To install the next version: 1 npm install -g n8n@next n8n with tunnel # Danger Use this for local development and testing. It isn't safe to use it in production. To use webhooks for trigger nodes of external services like GitHub, n8n has to be reachable from the web. n8n runs a tunnel service that can redirect requests from n8n's servers to your local n8n instance. Start n8n with --tunnel by running: 1 n8n start --tunnel Reverting an upgrade # Install the older version that you want to go back to. If the upgrade involved a database migration: Check the feature documentation and release notes to see if there are any manual changes you need to make. Run n8n db:revert on your current version to roll back the database. If you want to revert more than one database migration, you need to repeat this process. Windows troubleshooting # If you are experiencing issues running n8n on Windows, make sure your Node.js environment is correctly set up. Follow Microsoft's guide to Install NodeJS on Windows . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/installation/npm/

npm # npm is a quick way to get started with n8n on your local machine. You must have Node.js installed. n8n requires Node.js 18 or above. Latest and Next versions n8n releases a new minor version most weeks. The latest version is for production use. next is the most recent release. You should treat next as a beta: it may be unstable. To report issues, use the forum . Current latest : 1.80.5 Current next : 1.81.2 Try n8n with npx # You can try n8n without installing it using npx. From the terminal, run: 1 npx n8n This command will download everything that's needed to start n8n. You can then access n8n and start building workflows by opening http://localhost:5678 . Install globally with npm # To install n8n globally, use npm: 1 npm install n8n -g To install or update to a specific version of n8n use the @ syntax to specify the version. For example: 1 npm install -g n8n@0.126.1 To install next : 1 npm install -g n8n@next After the installation, start n8n by running: 1 2 3 n8n # or n8n start Keep in mind Windows users remember to change into the .n8n directory of your Home folder ( ~/.n8n ) before running n8n start . Next steps # Try out n8n using the Quickstarts . Updating # To update your n8n instance to the latest version, run: 1 npm update -g n8n To install the next version: 1 npm install -g n8n@next n8n with tunnel # Danger Use this for local development and testing. It isn't safe to use it in production. To use webhooks for trigger nodes of external services like GitHub, n8n has to be reachable from the web. n8n runs a tunnel service that can redirect requests from n8n's servers to your local n8n instance. Start n8n with --tunnel by running: 1 n8n start --tunnel Reverting an upgrade # Install the older version that you want to go back to. If the upgrade involved a database migration: Check the feature documentation and release notes to see if there are any manual changes you need to make. Run n8n db:revert on your current version to roll back the database. If you want to revert more than one database migration, you need to repeat this process. Windows troubleshooting # If you are experiencing issues running n8n on Windows, make sure your Node.js environment is correctly set up. Follow Microsoft's guide to Install NodeJS on Windows . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/cookbook/code-node/number-items-last-node/

Get number of items returned by the previous node # To get the number of items returned by the previous node: JavaScript Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 if ( Object . keys ( items [ 0 ]. json ). length === 0 ) { return [ { json : { results : 0 , } } ] } return [ { json : { results : items . length , } } ]; The output will be similar to the following. 1 2 3 4 5 [ { "results" : 8 } ] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 if len ( items [ 0 ] . json ) == 0 : return [ { "json" : { "results" : 0 , } } ] else : return [ { "json" : { "results" : items . length , } } ] The output will be similar to the following. 1 2 3 4 5 [ { "results" : 8 } ] Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/builtin/data-transformation-functions/numbers/

Numbers # A reference document listing built-in convenience functions to support data transformation in expressions for numbers. JavaScript in expressions You can use any JavaScript in expressions. Refer to Expressions for more information. ceil(): Number # Rounds up a number to a whole number. floor(): Number # Rounds down a number to a whole number. format(locales?: LanguageCode, options?: FormatOptions): String # This is a wrapper around Intl.NumberFormat() . Returns a formatted string of a number based on the given LanguageCode and FormatOptions. When no arguments are given, transforms the number in a like format 1.234. Function parameters # locales Optional String An IETF BCP 47 language tag. Default: en-US options Optional Object Configure options for number formatting. Refer to MDN | Intl.NumberFormat() for more information. isEven(): Boolean # Returns true if the number is even. Only works on whole numbers. isOdd(): Boolean # Returns true if the number is odd. Only works on whole numbers. round(decimalPlaces?: Number): Number # Returns the value of a number rounded to the nearest whole number, unless a decimal place is specified. Function parameters # decimalPlaces Optional Number How many decimal places to round to. Default: 0 toBoolean(): Boolean # Converts a number to a boolean. 0 converts to false . All other values convert to true . toDateTime(format?: String): Date # Converts a number to a Luxon date object . Function parameters # format Optional String enum Can be ms (milliseconds), s (seconds), or excel (Excel 1900). Defaults to milliseconds. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/builtin/data-transformation-functions/objects/

Objects # A reference document listing built-in convenience functions to support data transformation in expressions for objects. JavaScript in expressions You can use any JavaScript in expressions. Refer to Expressions for more information. isEmpty(): Boolean # Checks if the Object has no key-value pairs. merge(object: Object): Object # Merges two Objects into a single Object using the first as the base Object. If a key exists in both Objects, the key in the base Object takes precedence. Function parameters # object Required Object The Object to merge with the base Object. hasField(fieldName: String): Boolean # Checks if the Object has a given field. Only top-level keys are supported. Function parameters # fieldName Required String The field to search for. removeField(key: String): Object # Removes a given field from the Object Function parameters # key Required String The field key of the field to remove. removeFieldsContaining(value: String): Object # Removes fields with a given value from the Object. Function parameters # value Required String The field value of the field to remove. keepFieldsContaining(value: String): Object # Removes fields that do not match the given value from the Object. Function parameters # value Required String The field value of the field to keep. compact(): Object # Removes empty values from an Object. toJsonString(): String # Convert an object to a JSON string. Equivalent of JSON.stringify . urlEncode(): String # Transforms an Object into a URL parameter list. Only top-level keys are supported. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/user-management/saml/okta/

Okta Workforce Identity SAML setup # Set up SAML SSO in n8n with Okta. Workforce Identity and Customer Identity This guide covers setting up Workforce Identity. This is the original Okta product. Customer Identity is Okta's name for Auth0, which they've acquired. Prerequisites # You need an Okta Workforce Identity account, and the redirect URL and entity ID from n8n's SAML settings. Okta Workforce may enforce two factor authentication for users, depending on your Okta configuration. Read the Set up SAML guide first. Setup # In your Okta admin panel, select Applications > Applications . Select Create App Integration . Okta opens the app creation modal. Select SAML 2.0 , then select Next . On the General Settings tab, enter n8n as the App name . Select Next . On the Configure SAML tab, complete the following General fields: Single sign-on URL : the Redirect URL from n8n. Audience URI (SP Entity ID) : the Entity ID from n8n. Default RelayState : leave this empty. Name ID format : EmailAddress . Application username : Okta username . Update application username on : Create and update . Create Attribute Statements : Name Name format Value http://schemas.xmlsoap.org/ws/2005/05/identity/claims/firstname URI Reference user.firstName http://schemas.xmlsoap.org/ws/2005/05/identity/claims/lastname URI Reference user.lastName http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn URI Reference user.login http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress URI Reference user.email Select Next . Okta may prompt you to complete a marketing form, or may take you directly to your new n8n Okta app. Assign the n8n app to people: On the n8n app dashboard in Okta, select Assignments . Select Assign > Assign to People . Okta displays a modal with a list of available people. Select Assign next to the person you want to add. Okta displays a prompt to confirm the username. Leave the username as email address. Select Save and Go Back . Select Done . Get the metadata XML: on the Sign On tab, copy the Metadata URL. Navigate to it, and copy the XML. Paste this into Identity Provider Settings in n8n. Select Save settings . Select Test settings . n8n opens a new tab. If you're not currently logged in, Okta prompts you to sign in. n8n then displays a success message confirming the attributes returned by Okta. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/builtin/output-other-nodes/

Output of other nodes # Methods for working with the output of other nodes. Some methods and variables aren't available in the Code node. Python support You can use Python in the Code node. It isn't available in expressions. JavaScript Python Method Description Available in Code node? $("<node-name>").all(branchIndex?, runIndex?) Returns all items from a given node. If branchIndex isn't given it will default to the output that connects node-name with the node where you use the expression or code. $("<node-name>").first(branchIndex?, runIndex?) The first item output by the given node. If branchIndex isn't given it will default to the output that connects node-name with the node where you use the expression or code. $("<node-name>").last(branchIndex?, runIndex?) The last item output by the given node. If branchIndex isn't given it will default to the output that connects node-name with the node where you use the expression or code. $("<node-name>").item The linked item. This is the item in the specified node used to produce the current item. Refer to Item linking for more information on item linking. $("<node-name>").params Object containing the query settings of the given node. This includes data such as the operation it ran, result limits, and so on. $("<node-name>").context Boolean. Only available when working with the Loop Over Items node. Provides information about what's happening in the node. Use this to determine whether the node is still processing items. $("<node-name>").itemMatching(currentNodeInputIndex) Use instead of $("<node-name>").item in the Code node if you need to trace back from an input item. Method Description Available in Code node? _("<node-name>").all(branchIndex?, runIndex?) Returns all items from a given node. If branchIndex isn't given it will default to the output that connects node-name with the node where you use the expression or code. _("<node-name>").first(branchIndex?, runIndex?) The first item output by the given node. If branchIndex isn't given it will default to the output that connects node-name with the node where you use the expression or code. _("<node-name>").last(branchIndex?, runIndex?) The last item output by the given node. If branchIndex isn't given it will default to the output that connects node-name with the node where you use the expression or code. _("<node-name>").item The linked item. This is the item in the specified node used to produce the current item. Refer to Item linking for more information on item linking. _("<node-name>").params Object containing the query settings of the given node. This includes data such as the operation it ran, result limits, and so on. _("<node-name>").context Boolean. Only available when working with the Loop Over Items node. Provides information about what's happening in the node. Use this to determine whether the node is still processing items. _("<node-name>").itemMatching(currentNodeInputIndex) Use instead of _("<node-name>").item in the Code node if you need to trace back from an input item. Refer to Retrieve linked items from earlier in the workflow for an example. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/scaling/overview/

Scaling n8n # When running n8n at scale, with a large number of users, workflows, or executions, you need to change your n8n configuration to ensure good performance. n8n can run in different modes depending on your needs. The queue mode provides the best scalability. Refer to Queue mode for configuration details. You can configure data saving and pruning to improve database performance. Refer to Execution data for details. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/overview/

Creating nodes # Learn how to build your own custom nodes . This section includes: Guidance on planning your build, including which style to use . Tutorials for different node building styles. Instructions for testing your node , including how to use the n8n node linter and troubleshooting support. How to share your node with the community, or use it as a private node . Reference material , including UI elements and information on the individual files that make up a node. Prerequisites # This section assumes the following: Some familiarity with JavaScript and TypeScript. Ability to manage your own development environment, including git. Knowledge of npm, including creating and submitting packages. Familiarity with n8n, including a good understanding of data structures and item linking . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/securing/overview/

Securing n8n # Securing your n8n instance can take several forms. At a high level, you can: Conduct a security audit to identify security risks. Set up SSL to enforce secure connections. Set up Single Sign-On for user account management. Use two-factor authentication (2FA) for your users. More granularly, consider blocking or opting out of features or data collection you don't want: Disable the public API if you aren't using it. Opt out of data collection of the anonymous data n8n collects automatically. Block certain nodes from being available to your users. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/manage-cloud/overview/

n8n Cloud # n8n Cloud is n8n's hosted solution. It provides: No technical set up or maintenance for your n8n instance Continual uptime monitoring Managed OAuth for authentication One-click upgrades to the newest n8n versions Sign up for n8n Cloud Russia and Belarus n8n Cloud isn't available in Russia and Belarus. Refer to this blog post: Update on n8n cloud accounts in Russia and Belarus for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/builtin/overview/

Built-in methods and variables # n8n provides built-in methods and variables for working with data and accessing n8n data. This section provides a reference of available methods and variables for use in expressions , with a short description. Availability in the expressions editor and the Code node Some methods and variables aren't available in the Code node. These aren't in the documentation. All data transformation functions are only available in the expressions editor. The Cookbook contains examples for some common tasks, including some Code node only functions. Current node input Output of other nodes Date and time JMESPath HTTP node LangChain Code node n8n metadata Convenience methods Data transformation functions Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/advanced-ai/langchain/overview/

LangChain in n8n # n8n provides a collection of nodes that implement LangChain's functionality. The LangChain nodes are configurable, meaning you can choose your preferred agent, LLM, memory, and so on. Alongside the LangChain nodes, you can connect any n8n node as normal: this means you can integrate your LangChain logic with other data sources and services. Learning resources : n8n's documentation for LangChain assumes you're familiar with AI and LangChain concepts. This page provides links to learning resources. LangChain concepts and features in n8n : how n8n represents LangChain concepts and features. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/api/pagination/

API pagination # The default page size is 100 results. You can change the page size limit. The maximum permitted size is 250. When a response contains more than one page, it includes a cursor, which you can use to request the next pages. For example, say you want to get all active workflows, 150 at a time. Get the first page: 1 2 3 4 5 6 7 8 9 10 11 # For a self-hosted n8n instance curl -X 'GET' \ '<N8N_HOST>:<N8N_PORT>/<N8N_PATH>/api/v<version-number>/workflows?active=true&limit=150' \ -H 'accept: application/json' \ -H 'X-N8N-API-KEY: <your-api-key>' # For n8n Cloud curl -X 'GET' \ '<your-cloud-instance>/api/v<version-number>/workflows?active=true&limit=150' \ -H 'accept: application/json' \ -H 'X-N8N-API-KEY: <your-api-key>' The response is in JSON format, and includes a nextCursor value. This is an example response. 1 2 3 4 5 6 7 8 9 { "data" : [ // The response contains an object for each workflow { // Workflow data } ], "nextCursor" : "MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA" } Then to request the next page: 1 2 3 4 5 6 7 8 9 # For a self-hosted n8n instance curl -X 'GET' \ '<N8N_HOST>:<N8N_PORT>/<N8N_PATH>/api/v<version-number>/workflows?active=true&limit=150&cursor=MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA' \ -H 'accept: application/json' # For n8n Cloud curl -X 'GET' \ '<your-cloud-instance>/api/v<version-number>/workflows?active=true&limit=150&cursor=MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA' \ -H 'accept: application/json' Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/cookbook/http-node/pagination/

Pagination in the HTTP Request node # The HTTP Request node supports pagination. This page provides some example configurations, including using the HTTP node variables . Refer to HTTP Request for more information on the node. API differences Different APIs implement pagination in different ways. Check the API documentation for the API you're using for details. You need to find out things like: Does the API provide the URL for the next page? Are there API-specific limits on page size or page number? The structure of the data that the API returns. Enable pagination # In the HTTP Request node, select Add Option > Pagination . Use a URL from the response to get the next page using $response # If the API returns the URL of the next page in its response: Set Pagination Mode to Response Contains Next URL . n8n displays the parameters for this option. In Next URL , use an expression to set the URL. The exact expression depends on the data returned by your API. For example, if the API includes a parameter called next-page in the response body: 1 {{ $response . body [ "next-page" ] }} Get the next page by number using $pageCount # If the API you're using supports targeting a specific page by number: Set Pagination Mode to Update a Parameter in Each Request . Set Type to Query . Enter the Name of the query parameter. This depends on your API and is usually described in its documentation. For example, some APIs use a query parameter named page to set the page. So Name would be page . Hover over Value and toggle Expression on. Enter {{ $pageCount + 1 }} $pageCount is the number of pages the HTTP Request node has fetched. It starts at zero. Most API pagination counts from one (the first page is page one). This means that adding +1 to $pageCount means the node fetches page one on its first loop, page two on its second, and so on. Navigate pagination through body parameters # If the API you're using allows you to paginate through the body parameters: Set the HTTP Request Method to POST Set Pagination Mode to Update a Parameter in Each Request . Select Body in the Type parameter. Enter the Name of the body parameter. This depends on the API you're using. page is a common key name. Hover over Value and toggle Expression on. Enter {{ $pageCount + 1 }} Set the page size in the query # If the API you're using supports choosing the page size in the query: Select Send Query Parameters in main node parameters (this is the parameters you see when you first open the node, not the settings within options). Enter the Name of the query parameter. This depends on your API. For example, a lot of APIs use a query parameter named limit to set page size. So Name would be limit . In Value , enter your page size. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/build/reference/paired-items/

Item linking # Programmatic-style nodes only This guidance applies to programmatic-style nodes. If you're using declarative style, n8n handles paired items for you automatically. Use n8n's item linking to access data from items that precede the current item. n8n needs to know which input item a given output item comes from. If this information is missing, expressions in other nodes may break. As a node developer, you must ensure any items returned by your node support this. This applies to programmatic nodes (including trigger nodes). You don't need to consider item linking when building a declarative-style node. Refer to Choose your node building approach for more information on node styles. Start by reading Item linking concepts , which provides a conceptual overview of item linking, and details of the scenarios where n8n can handle the linking automatically. If you need to handle item linking manually, do this by setting pairedItem on each item your node returns: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // Use the pairedItem information of the incoming item newItem = { "json" : { . . . }, "pairedItem" : { "item" : item . pairedItem , // Optional: choose the input to use // Set this if your node combines multiple inputs "input" : 0 }; // Or set the index manually newItem = { "json" : { . . . } "pairedItem" : { "item" : i , // Optional: choose the input to use // Set this if your node combines multiple inputs "input" : 0 }, }; Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/source-control-environments/understand/patterns/

Branch patterns # The relationship between n8n instances and Git branches is flexible. You can create different setups depending on your needs. Recommendation: don't push and pull to the same n8n instance You can push work from an instance to a branch, and pull to the same instance. n8n doesn't recommend this. To reduce the risk of merge conflicts and overwriting work, try to create a process where work goes in one direction: either to Git, or from Git, but not both. Multiple instances, multiple branches # This pattern involves having multiple n8n instances, each one linked to its own branch. You can use this pattern for environments. For example, create two n8n instances, development and production. Link them to their own branches. Push work from your development instance to its branch, do a pull request to move work to the production branch, then pull to the production instance. The advantages of this pattern are: An added safety layer to prevent changes getting into your production environment by mistake. You have to do a pull request in GitHub to copy work between environments. It supports more than two instances. The disadvantage is more manual steps to copy work between environments. Multiple instances, one branch # Use this pattern if you want the same workflows, tags, and variables everywhere, but want to use them in different n8n instances. You can use this pattern for environments. For example, create two n8n instances, development and production. Link them both to the same branch. Push work from development, and pull it into production. This pattern is also useful when testing a new version of n8n: you can create a new n8n instance with the new version, connect it to the Git branch and test it, while your production instance remains on the older version until you're confident it's safe to upgrade. The advantage of this pattern is that work is instantly available to other environments when you push from one instance. The disadvantages are: If you push by mistake, there is a risk the work will make it into your production instance. If you use a GitHub Action to automate pulls to production, you must either use the multi-instance, multi-branch pattern, or be careful to never push work that you don't want in production. Pushing and pulling to the same instance can cause data loss as changes are overridden when performing these actions. You should set up processes to ensure content flows in one direction. One instance, multiple branches # The instance owner can change which Git branch connects to the instance. The full setup in this case is likely to be a Multiple instances, multiple branches pattern, but with one instance switching between branches. This is useful to review work. For example, different users could work on their own instance and push to their own branch. The reviewer could work in a review instance, and switch between branches to load work from different users. No cleanup n8n doesn't clean up the existing contents of an instance when changing branches. Switching branches in this pattern results in all the workflows from each branch being in your instance. One instance, one branch # This is the simplest pattern. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows/advanced-ai/examples/populate_a_pinecone_vector_database_from_a_website.json

{ "name": "Populate a Pinecone vector database from a website", "nodes": [ { "parameters": { "model": "text-embedding-3-large", "options": {}, "requestOptions": {} }, "id": "856f2426-b4b5-4180-a422-d26692844afb", "name": "Embeddings OpenAI", "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi", "typeVersion": 1, "position": [ 80, 1040 ], "credentials": { "openAiApi": { "id": "tW3bkXa0SAK0OzvR", "name": "OpenAi account Debs" } } }, { "parameters": { "options": {}, "requestOptions": {} }, "id": "1e702984-6f79-416e-981a-6728d4b3c233", "name": "Default Data Loader", "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader", "typeVersion": 1, "position": [ 260, 960 ] }, { "parameters": { "options": { "splitCode": "markdown" }, "requestOptions": {} }, "id": "2d1f30fd-f251-4389-8f6d-2c950018a91f", "name": "Recursive Character Text Splitter", "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter", "typeVersion": 1, "position": [ 300, 1160 ] }, { "parameters": { "batchSize": 10, "options": {} }, "id": "4e8a9d4c-6009-4d9b-b603-0438c65ba9df", "name": "Loop Over Items", "type": "n8n-nodes-base.splitInBatches", "typeVersion": 3, "position": [ -840, 1040 ] }, { "parameters": { "model": { "__rl": true, "value": "gpt-4o", "mode": "list", "cachedResultName": "gpt-4o" }, "options": {}, "requestOptions": {} }, "id": "e7967355-41b4-4bc5-b192-c8bc0699e925", "name": "OpenAI Model", "type": "@n8n/n8n-nodes-langchain.lmOpenAi", "typeVersion": 1, "position": [ -1320, 1680 ], "credentials": { "openAiApi": { "id": "tW3bkXa0SAK0OzvR", "name": "OpenAi account Debs" } } }, { "parameters": { "url": "https://n8n-io.github.io/n8n-demo-website/sitemap.xml", "options": {} }, "id": "5fb88663-f28b-4da2-acd9-1cbb0c5d28e7", "name": "Get sitemap", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4.2, "position": [ -1480, 740 ] }, { "parameters": { "options": { "explicitRoot": false, "ignoreAttrs": true } }, "id": "0e6287b8-9a65-4af0-8e69-3aae3648fd13", "name": "Turn XML sitemap into JSON", "type": "n8n-nodes-base.xml", "typeVersion": 1, "position": [ -1260, 740 ] }, { "parameters": { "fieldToSplitOut": "url", "options": {} }, "id": "acd3e717-99f5-4238-aa4d-795caef660b1", "name": "Turn the URL array into multiple items", "type": "n8n-nodes-base.splitOut", "typeVersion": 1, "position": [ -1040, 740 ] }, { "parameters": {}, "id": "f3b4ad5e-b261-4b97-9077-3b9259d5b37d", "name": "Wait 5 seconds", "type": "n8n-nodes-base.wait", "typeVersion": 1.1, "position": [ -320, 1060 ], "webhookId": "f4e7dead-77ad-4216-a5a0-ef95914bf3ab" }, { "parameters": { "url": "={{ $json.loc }}", "options": {} }, "id": "361b2a70-d0c5-4498-8a70-0688710e76e6", "name": "Get pages listed in the sitemap", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4.2, "position": [ -580, 1060 ] }, { "parameters": {}, "id": "14ddd282-9bf0-459f-9595-5154e16f9cc0", "name": "Chat Trigger", "type": "@n8n/n8n-nodes-langchain.chatTrigger", "typeVersion": 1, "position": [ -1620, 1420 ], "webhookId": "4b338d3c-b03f-42f2-94c1-9353d0f1fbc2" }, { "parameters": { "promptType": "define", "text": "={{ $('Chat Trigger').item.json.chatInput }}" }, "id": "263585e6-02bb-4940-9bb3-15f32b0f8079", "name": "Question and Answer Chain", "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa", "typeVersion": 1.3, "position": [ -1280, 1420 ] }, { "parameters": { "topK": 10, "requestOptions": {} }, "id": "91ad53ec-a761-43f6-a6f1-835263222e0c", "name": "Vector Store Retriever", "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore", "typeVersion": 1, "position": [ -1080, 1620 ] }, { "parameters": { "model": "text-embedding-3-large", "options": {}, "requestOptions": {} }, "id": "5c55cb38-be26-405d-bd39-d29e0a33b683", "name": "Embeddings OpenAI2", "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi", "typeVersion": 1, "position": [ -780, 2040 ], "credentials": { "openAiApi": { "id": "tW3bkXa0SAK0OzvR", "name": "OpenAi account Debs" } } }, { "parameters": { "fieldsToAggregate": { "fieldToAggregate": [ { "fieldToAggregate": "content" } ] }, "options": {} }, "id": "48dbd7f7-1ca1-41e2-9fd5-e916ea76589b", "name": "Aggregate", "type": "n8n-nodes-base.aggregate", "typeVersion": 1, "position": [ -100, 740 ] }, { "parameters": { "content": "**Aggregate into one item**\n\nThe Pinecone node loops over each input item. This is standard n8n node behavior.\n\nThis means if you want to use the **Clear namespace** setting in the Pinecone node, you need to input a single item.", "height": 381.66422439067196, "color": 5 }, "id": "5b70d4ae-1889-43d3-b92d-bf73e43236bd", "name": "Sticky Note", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ -160, 520 ] }, { "parameters": { "content": "### Workflow to scrape data and send it to Pinecone", "height": 878.8927796727229, "width": 2382.6739342193496, "color": 7 }, "id": "e9b5d557-51af-48d1-af33-8783f9ca3718", "name": "Sticky Note1", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ -1856.703373323493, 480 ] }, { "parameters": { "content": "### Workflow to chat and get answers from the Pinecone vector database", "height": 825.9872504327399, "width": 1181.407211476183, "color": 7 }, "id": "7efa097b-d4f2-49a4-9da5-4fcf6b83be3b", "name": "Sticky Note2", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ -1680, 1380 ] }, { "parameters": { "content": "## Try it out \n\n1. Set credentials and choose your Pinecone vector database. See the notes on individual nodes for details.\n2. Select **Test workflow** to run the main workflow and load data into Pinecone.\n3. Select **Chat** and try asking:\n\n_What is the purpose of the n8n demo website?_", "height": 326.49681260818465, "color": 4 }, "id": "f21bc32b-a405-4d71-b6c9-7bffbb6faed9", "name": "Sticky Note3", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ -2040, 560 ] }, { "parameters": { "content": "**Setup**\n\n1. In Pinecone, create a vector database. Set **Dimensions** to `3072` and **Metric** to `cosine`. You can use the free starter plan.\n2. In the Pinecone node, set your credentials.\n3. Select your Pinecone index.", "height": 381.3701016273242, "width": 304.1011298750183, "color": 2 }, "id": "4be87782-f811-418f-b4b5-9e12c4cf7970", "name": "Sticky Note4", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 140, 520 ] }, { "parameters": { "mode": "insert", "pineconeIndex": { }, "options": { "clearNamespace": true, "pineconeNamespace": "test-web-scraper" } }, "id": "94035a97-5a09-493c-aaae-dcba7bbf8526", "name": "Pinecone Vector Store", "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone", "typeVersion": 1, "position": [ 160, 740 ], "credentials": { "pineconeApi": { "id": "lruA9GaKZSEY8dky", "name": "Debs Pinecone" } } }, { "parameters": { "content": "## Next steps\n\nLearn more about [Advanced AI in n8n](https://docs.n8n.io/advanced-ai/)", "width": 331.8066536811489 }, "id": "2be1433b-0488-4c7e-8c10-e771d4dd4686", "name": "Sticky Note5", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 460, 1280 ] }, { "parameters": { "content": "**Set your credentials**", "height": 206.68134932939768, "width": 182.42633582707612, "color": 2 }, "id": "fffbb04d-6d61-4dfa-bfd3-46b8c92a36d5", "name": "Sticky Note6", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ 20, 1000 ] }, { "parameters": { "content": "**Set your credentials**", "height": 184.89671964234537, "width": 173.09006596119673, "color": 2 }, "id": "810ac5e1-d730-47af-9282-64ab0b4fca16", "name": "Sticky Note7", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ -1369.107685156473, 1620.2285847094058 ] }, { "parameters": { "content": "**Set your credentials**", "height": 192.67694453057842, "width": 221.3274602682409, "color": 2 }, "id": "2cecc8ac-3c65-4294-8a5d-2842bc07d10a", "name": "Sticky Note8", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ -860, 1980 ] }, { "parameters": { "pineconeIndex": { "__rl": true, "value": "debs-test", "mode": "list", "cachedResultName": "debs-test" }, "options": { "pineconeNamespace": "test-web-scraper" } }, "id": "e673c46e-0815-4b58-9a8f-2fb86445b578", "name": "Pinecone Vector Store2", "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone", "typeVersion": 1, "position": [ -980, 1840 ], "credentials": { "pineconeApi": { "id": "lruA9GaKZSEY8dky", "name": "Debs Pinecone" } } }, { "parameters": { "content": "**Set your credentials**\n\n**Select your Pinecone index***", "width": 367.59568816702017, "color": 2 }, "id": "ca4499ae-4e27-4848-9654-f7e744c081e7", "name": "Sticky Note9", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ -1080, 1760 ] }, { "parameters": {}, "id": "b43ddbd1-adfd-4bba-bee5-4b81229e88dd", "name": "Start the workflow by clicking \"Test workflow\"", "type": "n8n-nodes-base.manualTrigger", "typeVersion": 1, "position": [ -1700, 740 ] }, { "parameters": { "operation": "extractHtmlContent", "extractionValues": { "values": [ { "key": "content", "cssSelector": ".md-content", "returnValue": "html" } ] }, "options": { "trimValues": true, "cleanUpText": true } }, "id": "d39624d7-93c0-4452-81b1-ffa04b216ceb", "name": "Extract main content", "type": "n8n-nodes-base.html", "typeVersion": 1.2, "position": [ -380, 740 ] }, { "parameters": { "content": "**Batch the calls to the website**\n\nFor the small demo website in this example, this is not essential. If you want to use this example with a larger website, batching like this helps avoid timeouts. Using the Wait node between batches avoids hitting the website with too many requests too fast.", "height": 298.48800301054644, "width": 316.2462039046831, "color": 5 }, "id": "9825926d-ce6d-429e-9006-6ff5fd1f46ca", "name": "Sticky Note10", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ -1220, 1020 ] }, { "parameters": { "content": "## How to scrape a different website\n\nThis workflow uses a small example website provided by n8n. To use a different site:\n\n1. Change the sitemap URL in **Get sitemap**.\n2. Update **Extract main content** according to the HTML structure of the website you're scraping.", "height": 356.06166718347 }, "id": "7c2e4bde-3900-49b0-9bee-704e34664163", "name": "Sticky Note11", "type": "n8n-nodes-base.stickyNote", "typeVersion": 1, "position": [ -2040, 960 ] } ], "pinData": {}, "connections": { "Embeddings OpenAI": { "ai_embedding": [ [ { "node": "Pinecone Vector Store", "type": "ai_embedding", "index": 0 } ] ] }, "Default Data Loader": { "ai_document": [ [ { "node": "Pinecone Vector Store", "type": "ai_document", "index": 0 } ] ] }, "Recursive Character Text Splitter": { "ai_textSplitter": [ [ { "node": "Default Data Loader", "type": "ai_textSplitter", "index": 0 } ] ] }, "Loop Over Items": { "main": [ [ { "node": "Extract main content", "type": "main", "index": 0 } ], [ { "node": "Get pages listed in the sitemap", "type": "main", "index": 0 } ] ] }, "Get sitemap": { "main": [ [ { "node": "Turn XML sitemap into JSON", "type": "main", "index": 0 } ] ] }, "Turn XML sitemap into JSON": { "main": [ [ { "node": "Turn the URL array into multiple items", "type": "main", "index": 0 } ] ] }, "Turn the URL array into multiple items": { "main": [ [ { "node": "Loop Over Items", "type": "main", "index": 0 } ] ] }, "Wait 5 seconds": { "main": [ [ { "node": "Loop Over Items", "type": "main", "index": 0 } ] ] }, "Get pages listed in the sitemap": { "main": [ [ { "node": "Wait 5 seconds", "type": "main", "index": 0 } ] ] }, "Chat Trigger": { "main": [ [ { "node": "Question and Answer Chain", "type": "main", "index": 0 } ] ] }, "OpenAI Model": { "ai_languageModel": [ [ { "node": "Question and Answer Chain", "type": "ai_languageModel", "index": 0 } ] ] }, "Vector Store Retriever": { "ai_retriever": [ [ { "node": "Question and Answer Chain", "type": "ai_retriever", "index": 0 } ] ] }, "Embeddings OpenAI2": { "ai_embedding": [ [ { "node": "Pinecone Vector Store2", "type": "ai_embedding", "index": 0 } ] ] }, "Aggregate": { "main": [ [ { "node": "Pinecone Vector Store", "type": "main", "index": 0 } ] ] }, "Pinecone Vector Store2": { "ai_vectorStore": [ [ { "node": "Vector Store Retriever", "type": "ai_vectorStore", "index": 0 } ] ] }, "Start the workflow by clicking \"Test workflow\"": { "main": [ [ { "node": "Get sitemap", "type": "main", "index": 0 } ] ] }, "Extract main content": { "main": [ [ { "node": "Aggregate", "type": "main", "index": 0 } ] ] } } }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/privacy-security/privacy/

Privacy # This page describes n8n's data privacy practices. GDPR # Data processing agreement # For Cloud versions of n8n, n8n is considered both a Controller and a Processor as defined by the GDPR. As a Processor, n8n implements policies and practices that secure the personal data you send to the platform, and includes a Data Processing Agreement as part of the company's standard Terms of Service . The n8n Data Processing Agreement includes the Standard Contractual Clauses (SCCs) . These clarify how n8n handles your data, and they update n8n's GDPR policies to cover the latest standards set by the European Commission. You can find a list of n8n sub-processors here . Self-hosted n8n For self-hosted versions, n8n is neither a Controller nor a Processor, as we don't manage your data Submitting a GDPR deletion request # Email privacy@n8n.io to request data deletion. Sub-processors # This is a list of sub-processors authorized to process customer data for n8n's service. n8n audits each sub-processor's security controls and applicable regulations for the protection of personal data. Sub-processor name Contact details Geographic location of processing Microsoft Azure Microsoft Azure 1 Microsoft Way Redmond WA 98052 USA Contact information: https://privacy.microsoft.com/en-GB/privacystatement#mainhowtocontactusmodule Germany (West Central Region) Hetzner Online Hetzner Online GmbH Industriestr. 25 91710 Gunzenhausen Germany data-protection@hetzner.com Germany Subscribe here to receive updates when n8n adds or changes a sub-processor. GDPR for self-hosted users # If you self-host n8n, you are responsible for deleting user data. If you need to delete data on behalf of one of your users, you can delete the respective execution. n8n recommends configuring n8n to prune execution data automatically every few days to avoid effortful GDPR request handling as much as possible. Configure this using the EXECUTIONS_DATA_MAX_AGE environment variable. Refer to Environment variables for more information. Data collection # n8n collects selected usage and performance data to help diagnose problems and improve the platform. Read about how n8n stores and processes this information in the privacy policy . The data gathered is different in self-hosted n8n and n8n Cloud. Data collection in self-hosted n8n # n8n takes care to keep self-hosted data anonymous and avoids collecting sensitive data. What n8n collects # Error codes and messages of failed executions (excluding any payload data, and not for custom nodes) Error reports for app crashes and API issues The graph of a workflow (types of nodes used and how they're connected) From node parameters: The 'resource' and 'operation' that a node is set to (if applicable) For HTTP request nodes, the domain, path, and method (with personal data anonymized) Data around workflow executions: Status The user ID of the user who ran the execution The first time a workflow loads data from an external source The first successful production (non-manual) workflow execution The domain of webhook calls, if specified (excluding subdomain). Details on how the UI is used (for example, navigation, nodes panel searches) Diagnostic information: n8n version Selected settings: DB_TYPE N8N_VERSION_NOTIFICATIONS_ENABLED N8N_DISABLE_PRODUCTION_MAIN_PROCESS Execution variables OS, RAM, and CPUs Anonymous instance ID IP address What n8n doesn't collect # n8n doesn't collect private or sensitive information, such as: Personally identifiable information (except IP address) Credential information Node parameters (except 'resource' and 'operation') Execution data Sensitive settings (for example, endpoints, ports, DB connections, username/password) Error payloads How collection works # Most data is sent to n8n as events that generate it occur. Workflow execution counts and an instance pulse are sent periodically (every 6 hours). Opting out of telemetry # Telemetry collection is enabled by default. To disable it you can configure the following environment variables. To opt out of telemetry events: 1 export N8N_DIAGNOSTICS_ENABLED = false To opt out of checking for new versions of n8n: 1 export N8N_VERSION_NOTIFICATIONS_ENABLED = false See configuration for more info on how to set environment variables. Data collection in n8n Cloud # n8n Cloud collects everything listed in Data collection in self-hosted n8n . Additionally, in n8n Cloud, n8n uses PostHog to track events and visualise usage, including using session recordings. Session recordings comprise the data seen by a user on screen, with the exception of credential values. n8n's product team uses this data to improve the product. All recordings are deleted after 21 days. AI in n8n # To provide enhanced assistance, n8n integrates AI-powered features that leverage Large Language Models (LLMs). How n8n uses AI # To assist and improve user experience, n8n may send specific context data to LLMs. This context data is strictly limited to information about the current workflow. n8n does not send any values from credential fields or actual output data to AI services. The data will not be incorporated, used, or retained to train the models of the AI services. Any data will be deleted after 30 days. When n8n shares data # Data is only sent to AI services if workspaces have opted in to use the assistant. The Assistant is enabled by default for n8n Cloud users. When a workspace opts in to use the assistant, node-specific data is transmitted only during direct interactions and active sessions with the AI assistant, ensuring no unnecessary data sharing occurs. What n8n shares # General Workflow Information : This includes details about which nodes are present in your workflow, the number of items currently in the workflow, and whether the workflow is active. Input & Output Schemas of Nodes : This includes the schema of all nodes with incoming data and the output schema of a node in question. We do not send the actual data value of the schema. Node Configuration : This includes the operations, options, and settings chosen in the referenced node. Code and Expressions : This includes any code or expressions in the node in question to help with debugging potential issues and optimizations. What n8n doesn't share # Credentials : Any values of the credential fields of your nodes. Output Data : The actual data processed by your workflows. Sensitive Information : Any personally identifiable information or other sensitive data that could compromise your privacy or security that you have not explicitly mentioned in node parameters or your code of a Code Node . Documentation telemetry # n8n's documentation (this website) uses cookies to recognize your repeated visits and preferences, as well as to measure the effectiveness of n8n's documentation and whether users find what they're searching for. With your consent, you're helping n8n to make our documentation better. Change cookie settings Retention and deletion of personal identifiable data # PID (personal identifiable data) is data that's personal to you and would identify you as an individual. n8n Cloud # PID retention # n8n only retains data for as long as necessary to provide the core service. For n8n Cloud, n8n stores your workflow code, credentials, and other data indefinitely, until you choose to delete it or close your account. The platform stores execution data according to the retention rules on your account. n8n deletes most internal application logs and logs tied to subprocessors within 90 days. The company retains a subset of logs for longer periods where required for security investigations. PID deletion # If you choose to delete your n8n account, n8n deletes all customer data and event data associated with your account. n8n deletes customer data in backups within 90 days. Self-hosted # Self-hosted users should have their own PID policy and data deletion processes. Refer to What you can do for more information. Payment processor # n8n uses Paddle.com to process payments. When you sign up for a paid plan, Paddle transmits and stores the details of your payment method according to their security policy. n8n stores no information about your payment method. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/privacy-security/privacy/#data-collection-in-self-hosted-n8n

Privacy # This page describes n8n's data privacy practices. GDPR # Data processing agreement # For Cloud versions of n8n, n8n is considered both a Controller and a Processor as defined by the GDPR. As a Processor, n8n implements policies and practices that secure the personal data you send to the platform, and includes a Data Processing Agreement as part of the company's standard Terms of Service . The n8n Data Processing Agreement includes the Standard Contractual Clauses (SCCs) . These clarify how n8n handles your data, and they update n8n's GDPR policies to cover the latest standards set by the European Commission. You can find a list of n8n sub-processors here . Self-hosted n8n For self-hosted versions, n8n is neither a Controller nor a Processor, as we don't manage your data Submitting a GDPR deletion request # Email privacy@n8n.io to request data deletion. Sub-processors # This is a list of sub-processors authorized to process customer data for n8n's service. n8n audits each sub-processor's security controls and applicable regulations for the protection of personal data. Sub-processor name Contact details Geographic location of processing Microsoft Azure Microsoft Azure 1 Microsoft Way Redmond WA 98052 USA Contact information: https://privacy.microsoft.com/en-GB/privacystatement#mainhowtocontactusmodule Germany (West Central Region) Hetzner Online Hetzner Online GmbH Industriestr. 25 91710 Gunzenhausen Germany data-protection@hetzner.com Germany Subscribe here to receive updates when n8n adds or changes a sub-processor. GDPR for self-hosted users # If you self-host n8n, you are responsible for deleting user data. If you need to delete data on behalf of one of your users, you can delete the respective execution. n8n recommends configuring n8n to prune execution data automatically every few days to avoid effortful GDPR request handling as much as possible. Configure this using the EXECUTIONS_DATA_MAX_AGE environment variable. Refer to Environment variables for more information. Data collection # n8n collects selected usage and performance data to help diagnose problems and improve the platform. Read about how n8n stores and processes this information in the privacy policy . The data gathered is different in self-hosted n8n and n8n Cloud. Data collection in self-hosted n8n # n8n takes care to keep self-hosted data anonymous and avoids collecting sensitive data. What n8n collects # Error codes and messages of failed executions (excluding any payload data, and not for custom nodes) Error reports for app crashes and API issues The graph of a workflow (types of nodes used and how they're connected) From node parameters: The 'resource' and 'operation' that a node is set to (if applicable) For HTTP request nodes, the domain, path, and method (with personal data anonymized) Data around workflow executions: Status The user ID of the user who ran the execution The first time a workflow loads data from an external source The first successful production (non-manual) workflow execution The domain of webhook calls, if specified (excluding subdomain). Details on how the UI is used (for example, navigation, nodes panel searches) Diagnostic information: n8n version Selected settings: DB_TYPE N8N_VERSION_NOTIFICATIONS_ENABLED N8N_DISABLE_PRODUCTION_MAIN_PROCESS Execution variables OS, RAM, and CPUs Anonymous instance ID IP address What n8n doesn't collect # n8n doesn't collect private or sensitive information, such as: Personally identifiable information (except IP address) Credential information Node parameters (except 'resource' and 'operation') Execution data Sensitive settings (for example, endpoints, ports, DB connections, username/password) Error payloads How collection works # Most data is sent to n8n as events that generate it occur. Workflow execution counts and an instance pulse are sent periodically (every 6 hours). Opting out of telemetry # Telemetry collection is enabled by default. To disable it you can configure the following environment variables. To opt out of telemetry events: 1 export N8N_DIAGNOSTICS_ENABLED = false To opt out of checking for new versions of n8n: 1 export N8N_VERSION_NOTIFICATIONS_ENABLED = false See configuration for more info on how to set environment variables. Data collection in n8n Cloud # n8n Cloud collects everything listed in Data collection in self-hosted n8n . Additionally, in n8n Cloud, n8n uses PostHog to track events and visualise usage, including using session recordings. Session recordings comprise the data seen by a user on screen, with the exception of credential values. n8n's product team uses this data to improve the product. All recordings are deleted after 21 days. AI in n8n # To provide enhanced assistance, n8n integrates AI-powered features that leverage Large Language Models (LLMs). How n8n uses AI # To assist and improve user experience, n8n may send specific context data to LLMs. This context data is strictly limited to information about the current workflow. n8n does not send any values from credential fields or actual output data to AI services. The data will not be incorporated, used, or retained to train the models of the AI services. Any data will be deleted after 30 days. When n8n shares data # Data is only sent to AI services if workspaces have opted in to use the assistant. The Assistant is enabled by default for n8n Cloud users. When a workspace opts in to use the assistant, node-specific data is transmitted only during direct interactions and active sessions with the AI assistant, ensuring no unnecessary data sharing occurs. What n8n shares # General Workflow Information : This includes details about which nodes are present in your workflow, the number of items currently in the workflow, and whether the workflow is active. Input & Output Schemas of Nodes : This includes the schema of all nodes with incoming data and the output schema of a node in question. We do not send the actual data value of the schema. Node Configuration : This includes the operations, options, and settings chosen in the referenced node. Code and Expressions : This includes any code or expressions in the node in question to help with debugging potential issues and optimizations. What n8n doesn't share # Credentials : Any values of the credential fields of your nodes. Output Data : The actual data processed by your workflows. Sensitive Information : Any personally identifiable information or other sensitive data that could compromise your privacy or security that you have not explicitly mentioned in node parameters or your code of a Code Node . Documentation telemetry # n8n's documentation (this website) uses cookies to recognize your repeated visits and preferences, as well as to measure the effectiveness of n8n's documentation and whether users find what they're searching for. With your consent, you're helping n8n to make our documentation better. Change cookie settings Retention and deletion of personal identifiable data # PID (personal identifiable data) is data that's personal to you and would identify you as an individual. n8n Cloud # PID retention # n8n only retains data for as long as necessary to provide the core service. For n8n Cloud, n8n stores your workflow code, credentials, and other data indefinitely, until you choose to delete it or close your account. The platform stores execution data according to the retention rules on your account. n8n deletes most internal application logs and logs tied to subprocessors within 90 days. The company retains a subset of logs for longer periods where required for security investigations. PID deletion # If you choose to delete your n8n account, n8n deletes all customer data and event data associated with your account. n8n deletes customer data in backups within 90 days. Self-hosted # Self-hosted users should have their own PID policy and data deletion processes. Refer to What you can do for more information. Payment processor # n8n uses Paddle.com to process payments. When you sign up for a paid plan, Paddle transmits and stores the details of your payment method according to their security policy. n8n stores no information about your payment method. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/build/reference/node-base-files/programmatic-style-execute-method/

Programmatic-style execute() method # The main difference between the declarative and programmatic styles is how they handle incoming data and build API requests. The programmatic style requires an execute() method, which reads incoming data and parameters, then builds a request. The declarative style handles requests using the routing key in the operations object. The execute() method creates and returns an instance of INodeExecutionData . Paired items You must include input and output item pairing information in the data you return. For more information, refer to Paired items . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/build/programmatic-style-node/

Build a programmatic-style node # This tutorial walks through building a programmatic-style node. Before you begin, make sure this is the node style you need. Refer to Choose your node building approach for more information. Prerequisites # You need the following installed on your development machine: git Node.js and npm. Minimum version Node 18.17.0. You can find instructions on how to install both using nvm (Node Version Manager) for Linux, Mac, and WSL here . For Windows users, refer to Microsoft's guide to Install NodeJS on Windows . You need some understanding of: JavaScript/TypeScript REST APIs git Expressions in n8n Build your node # In this section, you'll clone n8n's node starter repository, and build a node that integrates the SendGrid . You'll create a node that implements one piece of SendGrid functionality: create a contact. Existing node n8n has a built-in SendGrid node. To avoid clashing with the existing node, you'll give your version a different name. Step 1: Set up the project # n8n provides a starter repository for node development. Using the starter ensures you have all necessary dependencies. It also provides a linter. Clone the repository and navigate into the directory: Generate a new repository from the template repository. Clone your new repository: 1 2 git clone https://github.com/<your-organization>/<your-repo-name>.git n8n-nodes-friendgrid cd n8n-nodes-friendgrid The starter contains example nodes and credentials. Delete the following directories and files: nodes/ExampleNode nodes/HTTPBin credentials/ExampleCredentials.credentials.ts credentials/HttpBinApi.credentials.ts Now create the following directories and files: nodes/FriendGrid nodes/FriendGrid/FriendGrid.node.json nodes/FriendGrid/FriendGrid.node.ts credentials/FriendGridApi.credentials.ts These are the key files required for any node. Refer to Node file structure for more information on required files and recommended organization. Now install the project dependencies: 1 npm i Step 2: Add an icon # Save the SendGrid SVG logo from here as friendGrid.svg in nodes/FriendGrid/ . n8n recommends using an SVG for your node icon, but you can also use PNG. If using PNG, the icon resolution should be 60x60px. Node icons should have a square or near-square aspect ratio. Don't reference Font Awesome If you want to use a Font Awesome icon in your node, download and embed the image. Step 3: Define the node in the base file # Every node must have a base file. Refer to Node base file for detailed information about base file parameters. In this example, the file is FriendGrid.node.ts . To keep this tutorial short, you'll place all the node functionality in this one file. When building more complex nodes, you should consider splitting out your functionality into modules. Refer to Node file structure for more information. Step 3.1: Imports # Start by adding the import statements: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { IExecuteFunctions , } from 'n8n-core' ; import { IDataObject , INodeExecutionData , INodeType , INodeTypeDescription , } from 'n8n-workflow' ; import { OptionsWithUri , } from 'request' ; Step 3.2: Create the main class # The node must export an interface that implements INodeType . This interface must include a description interface, which in turn contains the properties array. Class names and file names Make sure the class name and the file name match. For example, given a class FriendGrid , the filename must be FriendGrid.node.ts . 1 2 3 4 5 6 7 8 9 10 11 export class FriendGrid implements INodeType { description : INodeTypeDescription = { // Basic node details will go here properties : [ // Resources and operations will go here ], }; // The execute method will go here async execute ( this : IExecuteFunctions ) : Promise < INodeExecutionData [][] > { } } Step 3.3: Add node details # All programmatic nodes need some basic parameters, such as their display name and icon. Add the following to the description : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 displayName : 'FriendGrid' , name : 'friendGrid' , icon : 'file:friendGrid.svg' , group : [ 'transform' ], version : 1 , description : 'Consume SendGrid API' , defaults : { name : 'FriendGrid' , }, inputs : [ 'main' ], outputs : [ 'main' ], credentials : [ { name : 'friendGridApi' , required : true , }, ], n8n uses some of the properties set in description to render the node in the Editor UI. These properties are displayName , icon , and description . Step 3.4: Add the resource # The resource object defines the API resource that the node uses. In this tutorial, you're creating a node to access one of SendGrid's API endpoints: /v3/marketing/contacts . This means you need to define a resource for this endpoint. Update the properties array with the resource object: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { displayName : 'Resource' , name : 'resource' , type : 'options' , options : [ { name : 'Contact' , value : 'contact' , }, ], default : 'contact' , noDataExpression : true , required : true , description : 'Create a new contact' , }, type controls which UI element n8n displays for the resource, and tells n8n what type of data to expect from the user. options results in n8n adding a dropdown that allows users to choose one option. Refer to Node UI elements for more information. Step 3.5: Add operations # The operations object defines what you can do with a resource. It usually relates to REST API verbs (GET, POST, and so on). In this tutorial, there's one operation: create a contact. It has one required field, the email address for the contact the user creates. Add the following to the properties array, after the resource object: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 { displayName : 'Operation' , name : 'operation' , type : 'options' , displayOptions : { show : { resource : [ 'contact' , ], }, }, options : [ { name : 'Create' , value : 'create' , description : 'Create a contact' , action : 'Create a contact' , }, ], default : 'create' , noDataExpression : true , }, { displayName : 'Email' , name : 'email' , type : 'string' , required : true , displayOptions : { show : { operation : [ 'create' , ], resource : [ 'contact' , ], }, }, default : '' , placeholder : 'name@email.com' , description : 'Primary email for the contact' , }, Step 3.6: Add optional fields # Most APIs, including the SendGrid API that you're using in this example, have optional fields you can use to refine your query. To avoid overwhelming users, n8n displays these under Additional Fields in the UI. For this tutorial, you'll add two additional fields, to allow users to enter the contact's first name and last name. Add the following to the properties array: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 { displayName : 'Additional Fields' , name : 'additionalFields' , type : 'collection' , placeholder : 'Add Field' , default : {}, displayOptions : { show : { resource : [ 'contact' , ], operation : [ 'create' , ], }, }, options : [ { displayName : 'First Name' , name : 'firstName' , type : 'string' , default : '' , }, { displayName : 'Last Name' , name : 'lastName' , type : 'string' , default : '' , }, ], }, Step 4: Add the execute method # You've set up the node UI and basic information. It's time to map the node UI to API requests, and make the node actually do something. The execute method runs every time the node runs. In this method, you have access to the input items and to the parameters that the user set in the UI, including the credentials. Add the following the execute method in the FriendGrid.node.ts : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 // Handle data coming from previous nodes const items = this . getInputData (); let responseData ; const returnData = []; const resource = this . getNodeParameter ( 'resource' , 0 ) as string ; const operation = this . getNodeParameter ( 'operation' , 0 ) as string ; // For each item, make an API call to create a contact for ( let i = 0 ; i < items . length ; i ++ ) { if ( resource === 'contact' ) { if ( operation === 'create' ) { // Get email input const email = this . getNodeParameter ( 'email' , i ) as string ; // Get additional fields input const additionalFields = this . getNodeParameter ( 'additionalFields' , i ) as IDataObject ; const data : IDataObject = { email , }; Object . assign ( data , additionalFields ); // Make HTTP request according to https://sendgrid.com/docs/api-reference/ const options : OptionsWithUri = { headers : { 'Accept' : 'application/json' , }, method : 'PUT' , body : { contacts : [ data , ], }, uri : `https://api.sendgrid.com/v3/marketing/contacts` , json : true , }; responseData = await this . helpers . requestWithAuthentication . call ( this , 'friendGridApi' , options ); returnData . push ( responseData ); } } } // Map data to n8n data structure return [ this . helpers . returnJsonArray ( returnData )]; Note the following lines of this code: 1 2 3 4 5 6 7 const items = this . getInputData (); ... for ( let i = 0 ; i < items . length ; i ++ ) { ... const email = this . getNodeParameter ( 'email' , i ) as string ; ... } Users can provide data in two ways: Entered directly in the node fields By mapping data from earlier nodes in the workflow getInputData() , and the subsequent loop, allows the node to handle situations where data comes from a previous node. This includes supporting multiple inputs. This means that if, for example, the previous node outputs contact information for five people, your FriendGrid node can create five contacts. Step 5: Set up authentication # The SendGrid API requires users to authenticate with an API key. Add the following to FriendGridApi.credentials.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 import { IAuthenticateGeneric , ICredentialTestRequest , ICredentialType , INodeProperties , } from 'n8n-workflow' ; export class FriendGridApi implements ICredentialType { name = 'friendGridApi' ; displayName = 'FriendGrid API' ; properties : INodeProperties [] = [ { displayName : 'API Key' , name : 'apiKey' , type : 'string' , default : '' , }, ]; authenticate : IAuthenticateGeneric = { type : 'generic' , properties : { headers : { Authorization : '=Bearer {{$credentials.apiKey}}' , }, }, }; test : ICredentialTestRequest = { request : { baseURL : 'https://api.sendgrid.com/v3' , url : '/marketing/contacts' , }, }; } For more information about credentials files and options, refer to Credentials file . Step 6: Add node metadata # Metadata about your node goes in the JSON file at the root of your node. n8n refers to this as the codex file. In this example, the file is FriendGrid.node.json . Add the following code to the JSON file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { "node" : "n8n-nodes-base.FriendGrid" , "nodeVersion" : "1.0" , "codexVersion" : "1.0" , "categories" : [ "Miscellaneous" ], "resources" : { "credentialDocumentation" : [ { "url" : "" } ], "primaryDocumentation" : [ { "url" : "" } ] } } For more information on these parameters, refer to Node codex files . Step 7: Update the npm package details # Your npm package details are in the package.json at the root of the project. It's essential to include the n8n object with links to the credentials and base node file. Update this file to include the following information: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 { // All node names must start with "n8n-nodes-" "name" : "n8n-nodes-friendgrid" , "version" : "0.1.0" , "description" : "n8n node to create contacts in SendGrid" , "keywords" : [ // This keyword is required for community nodes "n8n-community-node-package" ], "license" : "MIT" , "homepage" : "https://n8n.io" , "author" : { "name" : "Test" , "email" : "test@example.com" }, "repository" : { "type" : "git" , // Change the git remote to your own repository // Add the new URL here "url" : "git+<your-repo-url>" }, "main" : "index.js" , "scripts" : { // don't change }, "files" : [ "dist" ], // Link the credentials and node "n8n" : { "n8nNodesApiVersion" : 1 , "credentials" : [ "dist/credentials/FriendGridApi.credentials.js" ], "nodes" : [ "dist/nodes/FriendGrid/FriendGrid.node.js" ] }, "devDependencies" : { // don't change }, "peerDependencies" : { // don't change } } You need to update the package.json to include your own information, such as your name and repository URL. For more information on npm package.json files, refer to npm's package.json documentation . Test your node # You can test your node as you build it by running it in a local n8n instance. Install n8n using npm: 1 npm install n8n -g When you are ready to test your node, publish it locally: 1 2 3 # In your node directory npm run build npm link Install the node into your local n8n instance: 1 2 3 # In the nodes directory within your n8n installation # node-package-name is the name from the package.json npm link <node-package-name> Check your directory Make sure you run npm link <node-name> in the nodes directory within your n8n installation. This can be: ~/.n8n/custom/ ~/.n8n/<your-custom-name> : if your n8n installation set a different name using N8N_CUSTOM_EXTENSIONS . Start n8n: 1 n8n start Open n8n in your browser. You should see your nodes when you search for them in the nodes panel. Node names Make sure you search using the node name, not the package name. For example, if your npm package name is n8n-nodes-weather-nodes , and the package contains nodes named rain , sun , snow , you should search for rain , not weather-nodes . Troubleshooting # There's no custom directory in ~/.n8n local installation. You have to create custom directory manually and run npm init 1 2 3 4 # In ~/.n8n directory run mkdir custom cd custom npm init Next steps # Deploy your node . View an example of a programmatic node: n8n's Mattermost node . This is an example of a more complex programmatic node structure. Learn about node versioning . Make sure you understand key concepts: item linking and data structures . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/build/reference/node-base-files/programmatic-style-parameters/

Programmatic-style parameters # These are the parameters available for node base file of programmatic-style nodes. This document gives short code snippets to help understand the code structure and concepts. For a full walk-through of building a node, including real-world code examples, refer to Build a programmatic-style node . Programmatic-style nodes also use the execute() method. Refer to Programmatic-style execute method for more information. Refer to Standard parameters for parameters available to all nodes. defaultVersion # Number | Optional Use defaultVersion when using the full versioning approach. n8n support two methods of node versioning. Refer to Node versioning for more information. methods and loadOptions # Object | Optional Contains the loadOptions method for programmatic-style nodes. You can use this method to query the service to get user-specific settings (such as getting a user's email labels from Gmail), then return them and render them in the GUI so the user can include them in subsequent queries. For example, n8n's Gmail node uses loadOptions to get all email labels: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 methods = { loadOptions : { // Get all the labels and display them async getLabels ( this : ILoadOptionsFunctions , ) : Promise < INodePropertyOptions [] > { const returnData : INodePropertyOptions [] = []; const labels = await googleApiRequestAllItems . call ( this , 'labels' , 'GET' , '/gmail/v1/users/me/labels' , ); for ( const label of labels ) { const labelName = label . name ; const labelId = label . id ; returnData . push ({ name : labelName , value : labelId , }); } return returnData ; }, }, }; version # Number or Array | Optional Use version when using the light versioning approach. If you have one version of your node, this can be a number. If you want to support multiple versions, turn this into an array, containing numbers for each node version. n8n support two methods of node versioning. Programmatic-style nodes can use either. Refer to Node versioning for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/user-management/rbac/projects/

Projects Feature availability RBAC is available on all plans except the Community edition. Different plans have different numbers of projects and roles. Refer to n8n's pricing page for plan details. n8n uses projects to group workflows and credentials , and assigns roles to users in each project. This means that a single user can have different roles in different projects, giving them different levels of access. Create a project # Instance owners and instance admins can create projects. To create a project: Select Add project . Fill out the project settings. Select Save . Add and remove users in a project # Project admins can add and remove users. To add a user to a project: Select the project. Select Project settings . Under Project members , browse for users or search by username or email address. Select the user you want to add. Check the role type and change it if needed. Select Save . To remove a user from a project: Select the project. Select Project settings . In the role type dropdown for the user you want to remove, select Remove access . Select Save . Delete a project # To delete a project: Select the project. Select Project settings . Select Delete project . Choose what to do with the workflows and credentials. You can select: Transfer its workflows and credentials to another project : n8n prompts you to choose a project to move the data to. Delete its workflows and credentials : n8n prompts you to confirm that you want to delete all the data in the project. Move workflows and credentials between projects or users # Workflow and credential owners can move workflows or credentials (changing ownership) to other users or projects they have access to. Select Workflow menu or Credential menu > Move . Select the project or user you want to move to. Select Next . Confirm you understand the impact of the move: workflows may stop working if the credentials they need aren't available in the target project, and n8n removes any current individual sharing. Select Confirm move to new project . Using external secrets in projects # To use external secrets in a project, you must have an instance owner or instance admin as a member of the project. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/configuration-examples/prometheus/

Enable Prometheus metrics # To collect and expose metrics, n8n uses the prom-client library. The /metrics endpoint is disabled by default, but it's possible to enable it using the N8N_METRICS environment variable. 1 export N8N_METRICS = true Refer to the respective Environment Variables ( N8N_METRICS_INCLUDE_* ) for configuring which metrics and labels should get exposed. Both main and worker instances are able to expose metrics. Queue metrics # To enable queue metrics, set the N8N_METRICS_INCLUDE_QUEUE_METRICS env var to true . You can adjust the refresh rate with N8N_METRICS_QUEUE_METRICS_INTERVAL . Queue metrics are only available for the main instance in single-main mode. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # HELP n8n_scaling_mode_queue_jobs_active Current number of jobs being processed across all workers in scaling mode. # TYPE n8n_scaling_mode_queue_jobs_active gauge n8n_scaling_mode_queue_jobs_active 0 # HELP n8n_scaling_mode_queue_jobs_completed Total number of jobs completed across all workers in scaling mode since instance start. # TYPE n8n_scaling_mode_queue_jobs_completed counter n8n_scaling_mode_queue_jobs_completed 0 # HELP n8n_scaling_mode_queue_jobs_failed Total number of jobs failed across all workers in scaling mode since instance start. # TYPE n8n_scaling_mode_queue_jobs_failed counter n8n_scaling_mode_queue_jobs_failed 0 # HELP n8n_scaling_mode_queue_jobs_waiting Current number of enqueued jobs waiting for pickup in scaling mode. # TYPE n8n_scaling_mode_queue_jobs_waiting gauge n8n_scaling_mode_queue_jobs_waiting 0 Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/source-control-environments/using/push-pull/

Push and pull # If your n8n instance connects to a Git repository, you need to keep your work in sync with Git. This document assumes some familiarity with Git concepts and terminology. Refer to Git and n8n for an introduction to how n8n works with Git. Recommendation: don't push and pull to the same n8n instance You can push work from an instance to a branch, and pull to the same instance. n8n doesn't recommend this. To reduce the risk of merge conflicts and overwriting work, try to create a process where work goes in one direction: either to Git, or from Git, but not both. Fetch other people's work # Restricted feature Ordinary users can't fetch work from Git. You must be an n8n instance owner, admin, or project owner to fetch work from Git. To pull work from Git, select Pull in the main menu. View screenshot Pull and push buttons when menu is closed Pull and push buttons when menu is open n8n may display a warning about overriding local changes. Select Pull and override to override your local work with the content in Git. When the changes include new variable or credential stubs, n8n notifies you that you need to populate the values for the items before using them. How deleted resources are handled When workflows, credentials, variables, and tags are deleted from the repository, your local versions of these resources aren't deleted automatically. Instead, when you pull repository changes, n8n notifies you about any outdated resources and asks if you'd like to delete them. Workflow and credential owner may change on pull # When you pull from Git to an n8n instance, n8n tries to assign workflows and credentials to a matching user or project. If the original owner is a user: If the same owner is available on both instances (matching email), the owner remains the same. If the original owner isn't on the new instance, n8n sets the user performing the pull as the workflow owner. If the original owner is a project : n8n tries to match the original project name to a project name on the new instance. If no matching project exists, n8n creates a new project with the name, assigns the current user as project owner, and imports the workflows and credentials to the project. Pulling may cause brief service interruption # If you pull changes to an active workflow, n8n sets the workflow to inactive while pulling, then reactivates it. This may result in a few seconds of downtime for the workflow. Send your work to Git # Restricted feature Ordinary users can't send work to Git. You must be an n8n instance owner, admin, or project owner to send work to Git. To push work to Git: Select Push in the main menu. View screenshot Pull and push buttons when menu is closed Pull and push buttons when menu is open In the Commit and push changes modal, select which workflows you want to push. You can filter by status (new, modified, deleted) and search for workflows. n8n automatically pushes tags, and variable and credential stubs. Enter a commit message. This should be a one sentence description of the changes you're making. Select Commit and Push . n8n sends the work to Git, and displays a success message on completion. What gets committed # n8n commits the following to Git: Workflows, including their tags and the email address of the workflow owner. You can choose which workflows to push. Credential stubs (ID, name, type) Variable stubs (ID and name) Projects You can programmatically Manage variables using the n8n API. Merge behaviors and conflicts # n8n's implementation of source control is opinionated. It resolves merge conflicts for credentials and variables automatically. n8n can't detect conflicts on workflows. Workflows # You have to explicitly tell n8n what to do about workflows when pushing or pulling. The Git repository acts as the source of truth. When pulling, you might get warned that your local copy of a workflow differs from Git, and if you accept, your local copy would be overridden. Be careful not to lose relevant changes when pulling. When you push, your local workflow will override what's in Git, so make sure that you have the most up to date version or you risk overriding recent changes. To prevent the issue described above, you should immediately push your changes to a workflow once you finish working on it. Then it's safe to pull. To avoid losing data: Design your source control setup so that workflows flow in one direction. For example, make edits on a development instance, push to Git, then pull to production. Don't make edits on the production instance and push them. Don't push all workflows. Select the ones you need. Be cautious about manually editing files in the Git repository. Credentials, variables and workflow tags # Credentials and variables can't have merge issues, as n8n chooses the version to keep. On pull: If the tag, variable or credential doesn't exist, n8n creates it. If the tag, variable or credential already exists, n8n doesn't update it, unless: You set the value of a variable using the API or externally. The new value overwrites any existing value. The credential name has changed. n8n uses the version in Git. The name of a tag has changed. n8n updates the tag name. Be careful when renaming tags as tag names are unique and this could cause database issues when it comes to uniqueness during the pull process. On push: n8n overwrites the entire variables and tags files. If a credential already exists, n8n overwrites it with the changes, but doesn't apply these changes to existing credentials on pull. Manage credentials with an external secrets vault If you need different credentials on different n8n environments, use external secrets . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/source-control-environments/using/push-pull/#what-gets-committed

Push and pull # If your n8n instance connects to a Git repository, you need to keep your work in sync with Git. This document assumes some familiarity with Git concepts and terminology. Refer to Git and n8n for an introduction to how n8n works with Git. Recommendation: don't push and pull to the same n8n instance You can push work from an instance to a branch, and pull to the same instance. n8n doesn't recommend this. To reduce the risk of merge conflicts and overwriting work, try to create a process where work goes in one direction: either to Git, or from Git, but not both. Fetch other people's work # Restricted feature Ordinary users can't fetch work from Git. You must be an n8n instance owner, admin, or project owner to fetch work from Git. To pull work from Git, select Pull in the main menu. View screenshot Pull and push buttons when menu is closed Pull and push buttons when menu is open n8n may display a warning about overriding local changes. Select Pull and override to override your local work with the content in Git. When the changes include new variable or credential stubs, n8n notifies you that you need to populate the values for the items before using them. How deleted resources are handled When workflows, credentials, variables, and tags are deleted from the repository, your local versions of these resources aren't deleted automatically. Instead, when you pull repository changes, n8n notifies you about any outdated resources and asks if you'd like to delete them. Workflow and credential owner may change on pull # When you pull from Git to an n8n instance, n8n tries to assign workflows and credentials to a matching user or project. If the original owner is a user: If the same owner is available on both instances (matching email), the owner remains the same. If the original owner isn't on the new instance, n8n sets the user performing the pull as the workflow owner. If the original owner is a project : n8n tries to match the original project name to a project name on the new instance. If no matching project exists, n8n creates a new project with the name, assigns the current user as project owner, and imports the workflows and credentials to the project. Pulling may cause brief service interruption # If you pull changes to an active workflow, n8n sets the workflow to inactive while pulling, then reactivates it. This may result in a few seconds of downtime for the workflow. Send your work to Git # Restricted feature Ordinary users can't send work to Git. You must be an n8n instance owner, admin, or project owner to send work to Git. To push work to Git: Select Push in the main menu. View screenshot Pull and push buttons when menu is closed Pull and push buttons when menu is open In the Commit and push changes modal, select which workflows you want to push. You can filter by status (new, modified, deleted) and search for workflows. n8n automatically pushes tags, and variable and credential stubs. Enter a commit message. This should be a one sentence description of the changes you're making. Select Commit and Push . n8n sends the work to Git, and displays a success message on completion. What gets committed # n8n commits the following to Git: Workflows, including their tags and the email address of the workflow owner. You can choose which workflows to push. Credential stubs (ID, name, type) Variable stubs (ID and name) Projects You can programmatically Manage variables using the n8n API. Merge behaviors and conflicts # n8n's implementation of source control is opinionated. It resolves merge conflicts for credentials and variables automatically. n8n can't detect conflicts on workflows. Workflows # You have to explicitly tell n8n what to do about workflows when pushing or pulling. The Git repository acts as the source of truth. When pulling, you might get warned that your local copy of a workflow differs from Git, and if you accept, your local copy would be overridden. Be careful not to lose relevant changes when pulling. When you push, your local workflow will override what's in Git, so make sure that you have the most up to date version or you risk overriding recent changes. To prevent the issue described above, you should immediately push your changes to a workflow once you finish working on it. Then it's safe to pull. To avoid losing data: Design your source control setup so that workflows flow in one direction. For example, make edits on a development instance, push to Git, then pull to production. Don't make edits on the production instance and push them. Don't push all workflows. Select the ones you need. Be cautious about manually editing files in the Git repository. Credentials, variables and workflow tags # Credentials and variables can't have merge issues, as n8n chooses the version to keep. On pull: If the tag, variable or credential doesn't exist, n8n creates it. If the tag, variable or credential already exists, n8n doesn't update it, unless: You set the value of a variable using the API or externally. The new value overwrites any existing value. The credential name has changed. n8n uses the version in Git. The name of a tag has changed. n8n updates the tag name. Be careful when renaming tags as tag names are unique and this could cause database issues when it comes to uniqueness during the pull process. On push: n8n overwrites the entire variables and tags files. If a credential already exists, n8n overwrites it with the changes, but doesn't apply these changes to existing credentials on pull. Manage credentials with an external secrets vault If you need different credentials on different n8n environments, use external secrets . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/queue-mode/

Queue mode environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. You can run n8n in different modes depending on your needs. Queue mode provides the best scalability. Refer to Queue mode for more information. Variable Type Default Description QUEUE_BULL_PREFIX String - Prefix to use for all queue keys. QUEUE_BULL_REDIS_DB Number 0 The Redis database used. QUEUE_BULL_REDIS_HOST String localhost The Redis host. QUEUE_BULL_REDIS_PORT Number 6379 The Redis port used. QUEUE_BULL_REDIS_USERNAME String - The Redis username (needs Redis version 6 or above). Don't define it for Redis < 6 compatibility QUEUE_BULL_REDIS_PASSWORD String - The Redis password. QUEUE_BULL_REDIS_TIMEOUT_THRESHOLD Number 10000 The Redis timeout threshold (in ms). QUEUE_BULL_REDIS_CLUSTER_NODES String - Expects a comma-separated list of Redis Cluster nodes in the format host:port , for the Redis client to initially connect to. If running in queue mode ( EXECUTIONS_MODE = queue ), setting this variable will create a Redis Cluster client instead of a Redis client, and n8n will ignore QUEUE_BULL_REDIS_HOST and QUEUE_BULL_REDIS_PORT . QUEUE_BULL_REDIS_TLS Boolean false Enable TLS on Redis connections. QUEUE_BULL_REDIS_DUALSTACK Boolean false Enable dual-stack support (IPv4 and IPv6) on Redis connections. QUEUE_WORKER_TIMEOUT ( deprecated ) Number 30 Deprecated Use N8N_GRACEFUL_SHUTDOWN_TIMEOUT instead. How long should n8n wait (seconds) for running executions before exiting worker process on shutdown. QUEUE_HEALTH_CHECK_ACTIVE Boolean false Whether to enable health checks (true) or disable (false). QUEUE_HEALTH_CHECK_PORT Number - The port to serve health checks on. QUEUE_WORKER_LOCK_DURATION Number 30000 How long (in ms) is the lease period for a worker to work on a message. QUEUE_WORKER_LOCK_RENEW_TIME Number 15000 How frequently (in ms) should a worker renew the lease time. QUEUE_WORKER_STALLED_INTERVAL Number 30000 How often should a worker check for stalled jobs (use 0 for never). QUEUE_WORKER_MAX_STALLED_COUNT Number 1 Maximum amount of times a stalled job will be re-processed. Multi-main setup # Refer to Configuring multi-main setup for details. Variable Type Default Description N8N_MULTI_MAIN_SETUP_ENABLED Boolean false Whether to enable multi-main setup for queue mode (license required). N8N_MULTI_MAIN_SETUP_KEY_TTL Number 10 Time to live (in seconds) for leader key in multi-main setup. N8N_MULTI_MAIN_SETUP_CHECK_INTERVAL Number 3 Interval (in seconds) for leader check in multi-main setup. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/scaling/queue-mode/#multi-main-setup

Queue mode # You can run n8n in different modes depending on your needs. The queue mode provides the best scalability. Binary data storage n8n doesn't support queue mode with binary data storage in filesystem. If your workflows need to persist binary data in queue mode, you can use S3 external storage . How it works # When running in queue mode, you have multiple n8n instances set up, with one main instance receiving workflow information (such as triggers) and the worker instances performing the executions. Each worker is its own Node.js instance, running in main mode, but able to handle multiple simultaneous workflow executions due to their high IOPS (input-output operations per second). By using worker instances and running in queue mode, you can scale n8n up (by adding workers) and down (by removing workers) as needed to handle the workload. This is the process flow: The main n8n instance handles timers and webhook calls, generating (but not running) a workflow execution. It passes the execution ID to a message broker, Redis , which maintains the queue of pending executions and allows the next available worker to pick them up. A worker in the pool picks up message from Redis. The worker uses the execution ID to get workflow information from the database. After completing the workflow execution, the worker: Writes the results to the database. Posts to Redis, saying that the execution has finished. Redis notifies the main instance. Configuring workers # Workers are n8n instances that do the actual work. They receive information from the main n8n process about the workflows that have to get executed, execute the workflows, and update the status after each execution is complete. Set encryption key # n8n automatically generates an encryption key upon first startup. You can also provide your own custom key using environment variable if desired. The encryption key of the main n8n instance must be shared with all worker and webhooks processor nodes to ensure these worker nodes are able to access credentials stored in the database. Set the encryption key for each worker node in a configuration file or by setting the corresponding environment variable: 1 export N8N_ENCRYPTION_KEY = <main_instance_encryption_key> Set executions mode # Database considerations n8n recommends using Postgres 13+. Running n8n with execution mode set to queue with an SQLite database isn't recommended. Set the environment variable EXECUTIONS_MODE to queue using the following command. 1 export EXECUTIONS_MODE = queue Alternatively, you can set executions.mode to queue in the configuration file . Start Redis # Running Redis on a separate machine You can run Redis on a separate machine, just make sure that it's accessible by the n8n instance. To run Redis in a Docker container, follow the instructions below: Run the following command to start a Redis instance: 1 docker run --name some-redis -p 6379:6379 -d redis By default, Redis runs on localhost on port 6379 with no password. Based on your Redis configuration, set the following configurations for the main n8n process. These will allow n8n to interact with Redis. Using configuration file Using environment variables Description queue.bull.redis.host:localhost QUEUE_BULL_REDIS_HOST=localhost By default, Redis runs on localhost . queue.bull.redis.port:6379 QUEUE_BULL_REDIS_PORT=6379 The default port is 6379 . If Redis is running on a different port, configure the value. You can also set the following optional configurations: Using configuration file Using environment variables Description queue.bull.redis.username:USERNAME QUEUE_BULL_REDIS_USERNAME By default, Redis doesn't require a username. If you're using a specific user, configure it variable. queue.bull.redis.password:PASSWORD QUEUE_BULL_REDIS_PASSWORD By default, Redis doesn't require a password. If you're using a password, configure it variable. queue.bull.redis.db:0 QUEUE_BULL_REDIS_DB The default value is 0 . If you change this value, update the configuration. queue.bull.redis.timeoutThreshold:10000ms QUEUE_BULL_REDIS_TIMEOUT_THRESHOLD Tells n8n how long it should wait if Redis is unavailable before exiting. The default value is 10000 (ms). queue.bull.gracefulShutdownTimeout:30 N8N_GRACEFUL_SHUTDOWN_TIMEOUT A graceful shutdown timeout for workers to finish executing jobs before terminating the process. The default value is 30 seconds. Now you can start your n8n instance and it will connect to your Redis instance. Start workers # You will need to start worker processes to allow n8n to execute workflows. If you want to host workers on a separate machine, install n8n on the machine and make sure that it's connected to your Redis instance and the n8n database. Start worker processes by running the following command from the root directory: 1 ./packages/cli/bin/n8n worker If you're using Docker, use the following command: 1 docker run --name n8n-queue -p 5679:5678 docker.n8n.io/n8nio/n8n worker You can set up multiple worker processes. Make sure that all the worker processes have access to Redis and the n8n database. Worker server # Each worker process runs a server that exposes optional endpoints: /healthz : returns whether the worker is up, if you enable the QUEUE_HEALTH_CHECK_ACTIVE environment variable /healthz/readiness : returns whether worker's DB and Redis connections are ready, if you enable the QUEUE_HEALTH_CHECK_ACTIVE environment variable credentials overwrite endpoint /metrics View running workers # Feature availability Available on Self-hosted Enterprise plans. If you want access to this feature on Cloud Enterprise, contact n8n . You can view running workers and their performance metrics in n8n by selecting Settings > Workers . Running n8n with queues # When running n8n with queues, all the production workflow executions get processed by worker processes. This means that even the webhook calls get delegated to the worker processes, which might add some overhead and extra latency. Redis acts as the message broker, and the database persists data, so access to both is required. Running a distributed system with this setup over SQLite isn't supported. Migrate data If you want to migrate data from one database to another, you can use the Export and Import commands. Refer to the CLI commands for n8n documentation to learn how to use these commands. Webhook processors # Keep in mind Webhook processes rely on Redis too. Follow the configure the workers section above to setup webhook processor nodes. Webhook processors are another layer of scaling in n8n. Configuring the webhook processor is optional, and allows you to scale the incoming webhook requests. This method allows n8n to process a huge number of parallel requests. All you have to do is add more webhook processes and workers accordingly. The webhook process will listen to requests on the same port (default: 5678 ). Run these processes in containers or separate machines, and have a load balancing system to route requests accordingly. n8n doesn't recommend adding the main process to the load balancer pool. If you add the main process to the pool, it will receive requests and possibly a heavy load. This will result in degraded performance for editing, viewing, and interacting with the n8n UI. You can start the webhook processor by executing the following command from the root directory: 1 ./packages/cli/bin/n8n webhook If you're using Docker, use the following command: 1 docker run --name n8n-queue -p 5679:5678 docker.n8n.io/n8nio/n8n webhook Configure webhook URL # To configure your webhook URL, execute the following command on the machine running the main n8n instance: 1 export WEBHOOK_URL = https://your-webhook-url.com You can also set this value in the configuration file. Configure load balancer # When using multiple webhook processes you will need a load balancer to route requests. If you are using the same domain name for your n8n instance and the webhooks, you can set up your load balancer to route requests as follows: Redirect any request that matches /webhook/* to the webhook servers pool All other paths (the n8n internal API, the static files for the editor, etc.) should get routed to the main process Note: The default URL for manual workflow executions is /webhook-test/* . Make sure that these URLs route to your main process. You can change this path in the configuration file endpoints.webhook or using the N8N_ENDPOINT_WEBHOOK environment variable. If you change these, update your load balancer accordingly. Disable webhook processing in the main process (optional) # You have webhook processors to execute the workflows. You can disable the webhook processing in the main process. This will make sure to execute all webhook executions in the webhook processors. In the configuration file set endpoints.disableProductionWebhooksOnMainProcess to true so that n8n doesn't process webhook requests on the main process. Alternatively, you can use the following command: 1 export N8N_DISABLE_PRODUCTION_MAIN_PROCESS = true When disabling the webhook process in the main process, run the main process and don't add it to the load balancer's webhook pool. Configure worker concurrency # You can define the number of jobs a worker can run in parallel by using the concurrency flag. It defaults to 10 . To change it: 1 n8n worker --concurrency = 5 Concurrency and scaling recommendations # n8n recommends setting concurrency to 5 or higher for your worker instances. Setting low concurrency values with a large numbers of workers can exhaust your database's connection pool, leading to processing delays and failures. Multi-main setup # Feature availability Available on Self-hosted Enterprise plans. If you want access to this feature on Cloud Enterprise, contact n8n . In queue mode you can run more than one main process for high availability. In a single-mode setup, the main process does two sets of tasks: regular tasks , such as running the API, serving the UI, and listening for webhooks, and at-most-once tasks , such as running non-HTTP triggers (timers, pollers, and persistent connections like RabbitMQ and IMAP), and pruning executions and binary data. In a multi-main setup, there are two kinds of main processes: followers , which run regular tasks , and the leader , which runs both regular and at-most-once tasks . Leader designation # In a multi-main setup, all main instances handle the leadership process transparently to users. In case the current leader becomes unavailable, for example because it crashed or its event loop became too busy, other followers can take over. If the previous leader becomes responsive again, it becomes a follower. Configuring multi-main setup # To deploy n8n in multi-main setup, ensure: All main processes are running in queue mode and are connected to Postgres and Redis. All main and worker processes are running the same version of n8n. All main processes have set the environment variable N8N_MULTI_MAIN_SETUP_ENABLED to true . All main processes are running behind a load balancer with session persistence (sticky sessions) enabled. If needed, you can adjust the leader key options: Using configuration file Using environment variables Description multiMainSetup.ttl:10 N8N_MULTI_MAIN_SETUP_KEY_TTL=10 Time to live (in seconds) for leader key in multi-main setup. multiMainSetup.interval:3 N8N_MULTI_MAIN_SETUP_CHECK_INTERVAL=3 Interval (in seconds) for leader check in multi-main setup. Keep in mind In multi-main setup, all main processes listen for webhooks, so they fulfill the same purpose as webhook processes. Running webhook processes is neither needed nor allowed in multi-main setup. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/scaling/queue-mode/

Queue mode # You can run n8n in different modes depending on your needs. The queue mode provides the best scalability. Binary data storage n8n doesn't support queue mode with binary data storage in filesystem. If your workflows need to persist binary data in queue mode, you can use S3 external storage . How it works # When running in queue mode, you have multiple n8n instances set up, with one main instance receiving workflow information (such as triggers) and the worker instances performing the executions. Each worker is its own Node.js instance, running in main mode, but able to handle multiple simultaneous workflow executions due to their high IOPS (input-output operations per second). By using worker instances and running in queue mode, you can scale n8n up (by adding workers) and down (by removing workers) as needed to handle the workload. This is the process flow: The main n8n instance handles timers and webhook calls, generating (but not running) a workflow execution. It passes the execution ID to a message broker, Redis , which maintains the queue of pending executions and allows the next available worker to pick them up. A worker in the pool picks up message from Redis. The worker uses the execution ID to get workflow information from the database. After completing the workflow execution, the worker: Writes the results to the database. Posts to Redis, saying that the execution has finished. Redis notifies the main instance. Configuring workers # Workers are n8n instances that do the actual work. They receive information from the main n8n process about the workflows that have to get executed, execute the workflows, and update the status after each execution is complete. Set encryption key # n8n automatically generates an encryption key upon first startup. You can also provide your own custom key using environment variable if desired. The encryption key of the main n8n instance must be shared with all worker and webhooks processor nodes to ensure these worker nodes are able to access credentials stored in the database. Set the encryption key for each worker node in a configuration file or by setting the corresponding environment variable: 1 export N8N_ENCRYPTION_KEY = <main_instance_encryption_key> Set executions mode # Database considerations n8n recommends using Postgres 13+. Running n8n with execution mode set to queue with an SQLite database isn't recommended. Set the environment variable EXECUTIONS_MODE to queue using the following command. 1 export EXECUTIONS_MODE = queue Alternatively, you can set executions.mode to queue in the configuration file . Start Redis # Running Redis on a separate machine You can run Redis on a separate machine, just make sure that it's accessible by the n8n instance. To run Redis in a Docker container, follow the instructions below: Run the following command to start a Redis instance: 1 docker run --name some-redis -p 6379:6379 -d redis By default, Redis runs on localhost on port 6379 with no password. Based on your Redis configuration, set the following configurations for the main n8n process. These will allow n8n to interact with Redis. Using configuration file Using environment variables Description queue.bull.redis.host:localhost QUEUE_BULL_REDIS_HOST=localhost By default, Redis runs on localhost . queue.bull.redis.port:6379 QUEUE_BULL_REDIS_PORT=6379 The default port is 6379 . If Redis is running on a different port, configure the value. You can also set the following optional configurations: Using configuration file Using environment variables Description queue.bull.redis.username:USERNAME QUEUE_BULL_REDIS_USERNAME By default, Redis doesn't require a username. If you're using a specific user, configure it variable. queue.bull.redis.password:PASSWORD QUEUE_BULL_REDIS_PASSWORD By default, Redis doesn't require a password. If you're using a password, configure it variable. queue.bull.redis.db:0 QUEUE_BULL_REDIS_DB The default value is 0 . If you change this value, update the configuration. queue.bull.redis.timeoutThreshold:10000ms QUEUE_BULL_REDIS_TIMEOUT_THRESHOLD Tells n8n how long it should wait if Redis is unavailable before exiting. The default value is 10000 (ms). queue.bull.gracefulShutdownTimeout:30 N8N_GRACEFUL_SHUTDOWN_TIMEOUT A graceful shutdown timeout for workers to finish executing jobs before terminating the process. The default value is 30 seconds. Now you can start your n8n instance and it will connect to your Redis instance. Start workers # You will need to start worker processes to allow n8n to execute workflows. If you want to host workers on a separate machine, install n8n on the machine and make sure that it's connected to your Redis instance and the n8n database. Start worker processes by running the following command from the root directory: 1 ./packages/cli/bin/n8n worker If you're using Docker, use the following command: 1 docker run --name n8n-queue -p 5679:5678 docker.n8n.io/n8nio/n8n worker You can set up multiple worker processes. Make sure that all the worker processes have access to Redis and the n8n database. Worker server # Each worker process runs a server that exposes optional endpoints: /healthz : returns whether the worker is up, if you enable the QUEUE_HEALTH_CHECK_ACTIVE environment variable /healthz/readiness : returns whether worker's DB and Redis connections are ready, if you enable the QUEUE_HEALTH_CHECK_ACTIVE environment variable credentials overwrite endpoint /metrics View running workers # Feature availability Available on Self-hosted Enterprise plans. If you want access to this feature on Cloud Enterprise, contact n8n . You can view running workers and their performance metrics in n8n by selecting Settings > Workers . Running n8n with queues # When running n8n with queues, all the production workflow executions get processed by worker processes. This means that even the webhook calls get delegated to the worker processes, which might add some overhead and extra latency. Redis acts as the message broker, and the database persists data, so access to both is required. Running a distributed system with this setup over SQLite isn't supported. Migrate data If you want to migrate data from one database to another, you can use the Export and Import commands. Refer to the CLI commands for n8n documentation to learn how to use these commands. Webhook processors # Keep in mind Webhook processes rely on Redis too. Follow the configure the workers section above to setup webhook processor nodes. Webhook processors are another layer of scaling in n8n. Configuring the webhook processor is optional, and allows you to scale the incoming webhook requests. This method allows n8n to process a huge number of parallel requests. All you have to do is add more webhook processes and workers accordingly. The webhook process will listen to requests on the same port (default: 5678 ). Run these processes in containers or separate machines, and have a load balancing system to route requests accordingly. n8n doesn't recommend adding the main process to the load balancer pool. If you add the main process to the pool, it will receive requests and possibly a heavy load. This will result in degraded performance for editing, viewing, and interacting with the n8n UI. You can start the webhook processor by executing the following command from the root directory: 1 ./packages/cli/bin/n8n webhook If you're using Docker, use the following command: 1 docker run --name n8n-queue -p 5679:5678 docker.n8n.io/n8nio/n8n webhook Configure webhook URL # To configure your webhook URL, execute the following command on the machine running the main n8n instance: 1 export WEBHOOK_URL = https://your-webhook-url.com You can also set this value in the configuration file. Configure load balancer # When using multiple webhook processes you will need a load balancer to route requests. If you are using the same domain name for your n8n instance and the webhooks, you can set up your load balancer to route requests as follows: Redirect any request that matches /webhook/* to the webhook servers pool All other paths (the n8n internal API, the static files for the editor, etc.) should get routed to the main process Note: The default URL for manual workflow executions is /webhook-test/* . Make sure that these URLs route to your main process. You can change this path in the configuration file endpoints.webhook or using the N8N_ENDPOINT_WEBHOOK environment variable. If you change these, update your load balancer accordingly. Disable webhook processing in the main process (optional) # You have webhook processors to execute the workflows. You can disable the webhook processing in the main process. This will make sure to execute all webhook executions in the webhook processors. In the configuration file set endpoints.disableProductionWebhooksOnMainProcess to true so that n8n doesn't process webhook requests on the main process. Alternatively, you can use the following command: 1 export N8N_DISABLE_PRODUCTION_MAIN_PROCESS = true When disabling the webhook process in the main process, run the main process and don't add it to the load balancer's webhook pool. Configure worker concurrency # You can define the number of jobs a worker can run in parallel by using the concurrency flag. It defaults to 10 . To change it: 1 n8n worker --concurrency = 5 Concurrency and scaling recommendations # n8n recommends setting concurrency to 5 or higher for your worker instances. Setting low concurrency values with a large numbers of workers can exhaust your database's connection pool, leading to processing delays and failures. Multi-main setup # Feature availability Available on Self-hosted Enterprise plans. If you want access to this feature on Cloud Enterprise, contact n8n . In queue mode you can run more than one main process for high availability. In a single-mode setup, the main process does two sets of tasks: regular tasks , such as running the API, serving the UI, and listening for webhooks, and at-most-once tasks , such as running non-HTTP triggers (timers, pollers, and persistent connections like RabbitMQ and IMAP), and pruning executions and binary data. In a multi-main setup, there are two kinds of main processes: followers , which run regular tasks , and the leader , which runs both regular and at-most-once tasks . Leader designation # In a multi-main setup, all main instances handle the leadership process transparently to users. In case the current leader becomes unavailable, for example because it crashed or its event loop became too busy, other followers can take over. If the previous leader becomes responsive again, it becomes a follower. Configuring multi-main setup # To deploy n8n in multi-main setup, ensure: All main processes are running in queue mode and are connected to Postgres and Redis. All main and worker processes are running the same version of n8n. All main processes have set the environment variable N8N_MULTI_MAIN_SETUP_ENABLED to true . All main processes are running behind a load balancer with session persistence (sticky sessions) enabled. If needed, you can adjust the leader key options: Using configuration file Using environment variables Description multiMainSetup.ttl:10 N8N_MULTI_MAIN_SETUP_KEY_TTL=10 Time to live (in seconds) for leader key in multi-main setup. multiMainSetup.interval:3 N8N_MULTI_MAIN_SETUP_CHECK_INTERVAL=3 Interval (in seconds) for leader check in multi-main setup. Keep in mind In multi-main setup, all main processes listen for webhooks, so they fulfill the same purpose as webhook processes. Running webhook processes is neither needed nor allowed in multi-main setup. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/try-it-out/quickstart/

The very quick quickstart # This quickstart gets you started using n8n as quickly as possible. Its allows you to try out the UI and introduces two key features: workflow templates and expressions . It doesn't include detailed explanations or explore concepts in-depth. In this tutorial, you will: Load a workflow from the workflow templates library Add a node and configure it using expressions Run your first workflow Step one: Sign up for n8n # This quickstart uses n8n Cloud . A free trial is available for new users. If you haven't already done so, sign up for an account now. Step two: Open a workflow template # n8n provides a quickstart template using training nodes. You can use this to work with fake data and avoid setting up credentials . Go to Templates | Very quick quickstart . Select Use workflow to view the options for using the template. Select Import template to cloud workspace to load the template into your Cloud instance. This workflow: Gets example data from the Customer Datastore node. Uses the Edit Fields node to extract only the desired data and assigns that data to variables. In this example, you map the customer name, ID, and description. The individual pieces in an n8n workflow are called nodes . Double click a node to explore its settings and how it processes data. Step three: Run the workflow # Select Test Workflow . This runs the workflow, loading the data from the Customer Datastore node, then transforming it with Edit Fields. You need this data available in the workflow so that you can work with it in the next step. Step four: Add a node # Add a third node to message each customer and tell them their description. Use the Customer Messenger node to send a message to fake recipients. Select the Add node connector on the Edit Fields node. Search for Customer Messenger . n8n shows a list of nodes that match the search. Select Customer Messenger (n8n training) to add the node to the canvas . n8n opens the node automatically. Use expressions to map in the Customer ID and create the Message : In the INPUT panel select the Schema tab. Drag Edit Fields1 > customer_id into the Customer ID field in the node settings. Hover over Message . Select the Expression tab, then select the expand button to open the full expressions editor. Copy this expression into the editor: 1 Hi {{ $json.customer_name }}. Your description is: {{ $json.customer_description }} Close the expressions editor, then close the Customer Messenger node by clicking outside the node or selecting Back to canvas . Select Test Workflow . n8n runs the workflow. The complete workflow should look like this: View workflow file Next steps # Read n8n's longer try it out tutorial for a more complex workflow, and an introduction to more features and n8n concepts. Take the text courses or video courses . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/rate-limits/

Handling API rate limits # API rate limits are restrictions on request frequency. For example, an API may limit the number of requests you can make per minute, or per day. APIs can also limits how much data you can send in one request, or how much data the API sends in a single response. Identify rate limit issues # When an n8n node hits a rate limit, it errors. n8n displays the error message in the node output panel. This includes the error message from the service. If n8n received error 429 (too many requests) from the service, the error message is The service is receiving too many requests from you . To check the rate limits for the service you're using, refer to the API documentation for the service. Handle rate limits for integrations # There are two ways to handle rate limits in n8n's integrations: using the Retry On Fail setting, or using a combination of the Loop Over Items and Wait nodes: Retry On Fail adds a pause between API request attempts. With Loop Over Items and Wait you can break you request data into smaller chunks, as well as pausing between requests. Enable Retry On Fail # When you enable Retry On Fail, the node automatically tries the request again if it fails the first time. Open the node. Select Settings . Enable the Retry On Fail toggle. Configure the retry settings: if using this to work around rate limits, set Wait Between Tries (ms) to more than the rate limit. For example, if the API you're using allows one request per second, set Wait Between Tries (ms) to 1000 to allow a 1 second wait. Use Loop Over Items and Wait # Use the Loop Over Items node to batch the input items, and the Wait node to introduce a pause between each request. Add the Loop Over Items node before the node that calls the API. Refer to Loop Over Items for information on how to configure the node. Add the Wait node after the node that calls the API, and connect it back to the Loop Over Items node. Refer to Wait for information on how to configure the node. For example, to handle rate limits when using OpenAI: Handle rate limits in the HTTP Request node # The HTTP Request node has built-in settings for handling rate limits and large amounts of data. Batch requests # Use the Batching option to send more than one request, reducing the request size, and introducing a pause between requests. This is the equivalent of using Loop Over Items and Wait. In the HTTP Request node, select Add Option > Batching . Set Items per Batch : this is the number of input items to include in each request. Set Batch Interval (ms) to introduce a delay between requests. For example, if the API you're using allows one request per second, set Wait Between Tries (ms) to 1000 to allow a 1 second wait. Paginate results # APIs paginate their results when they need to send more data than they can handle in a single response. For more information on pagination in the HTTP Request node, refer to HTTP Request node | Pagination . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/user-management/rbac/

Role-based access control (RBAC) # Feature availability RBAC is available on all plans except the Community edition. Different plans have different numbers of projects and roles. Refer to n8n's pricing page for plan details. Role types and account types Role types and account types are different things. Every account has one type. The account can have different role types for different projects . RBAC is a way of managing access to workflows and credentials based on user roles and projects. You group workflows into projects, and user access depends on the user's project role. This section provides guidance on using RBAC in n8n. Role types Projects Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows/ai-code/reference-incoming-data-explicitly.json

{ "name": "Reference incoming data explicitly", "nodes": [ { "parameters": {}, "id": "0abbe7f6-f8a0-4f71-8229-f4fd1a3c2683", "name": "When clicking \"Execute Workflow\"", "type": "n8n-nodes-base.manualTrigger", "typeVersion": 1, "position": [ 620, 520 ] }, { "parameters": { "jsCode": "return [\n {\n \"id\": 0001,\n \"personal_info\": {\n \"first_name\": \"Natalie\",\n \"surname\": \"Berlin\"\n },\n \"work_info\": {\n \"job_title\": \"Automation engineer\"\n }\n },\n {\n \"id\": 0002,\n \"personal_info\": {\n \"first_name\": \"Nathan\",\n \"surname\": \"Berlin\"\n },\n \"work_info\": {\n \"job_title\": \"Automation designer\"\n }\n }\n]" }, "id": "e19f11cd-c868-4aca-b88e-04b4ee6f0187", "name": "Mock data", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ 840, 520 ] }, { "parameters": {}, "id": "ef54d477-0596-441a-98e5-1ab005e9a268", "name": "Code", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ 1060, 520 ] } ], "pinData": {}, "connections": { "When clicking \"Execute Workflow\"": { "main": [ [ { "node": "Mock data", "type": "main", "index": 0 } ] ] }, "Mock data": { "main": [ [ { "node": "Code", "type": "main", "index": 0 } ] ] } }, "active": false, "settings": { "executionOrder": "v1" }, "versionId": "4e3a0a21-c993-4851-848b-01bd5c090b6b", "id": "EipyYyqKKQm7siq4", "meta": { "instanceId": "c5aabef739d71e3d0ceb8b6078a241aaf1b145fa71cbbe36ecfb2c8c3fd64f5f" }, "tags": [] }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/build/reference/

Node building reference # This section contains reference information, including details about: Node UI elements Organizing your node files Key parameters in your node's base file and credentials file . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/community-nodes/risks/

Risks when using community nodes # Using community nodes means you are installing unverified code from a public source into your n8n instance. This has some risks. Risks include: System security: community nodes have full access to the machine that n8n runs on, and can do anything, including malicious actions. Data security: any community node that you use has access to data in your workflows. Breaking changes: node developers may introduce breaking changes in new versions of their nodes. A breaking change is an update that breaks previous functionality. Depending on the node versioning approach that a node developer chooses, upgrading to a version with a breaking change could cause all workflows using the node to break. Be careful when upgrading your nodes. Report bad community nodes # You can report bad community nodes to security@n8n.io Disable community nodes # You can disable community nodes by setting N8N_COMMUNITY_PACKAGES_ENABLED to false . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/user-management/rbac/role-types/

RBAC role types # Feature availability The Project Editor role is available on Pro Cloud and Self-hosted Enterprise plans. The Project Viewer role is only available on Self-hosted Enterprise and Cloud Enterprise plans. Within projects, there are three user roles: Admin, Editor, and Viewer. These roles control what the user can do in a project. A user can have different roles within different projects. Project Admin # A Project Admin role has the highest level of permissions. Project admins can: Manage project settings: Change name, delete project. Manage project members: Invite members and remove members, change members' roles. View, create, update, and delete any workflows, credentials, or executions within a project. Project Editor # A Project Editor can view, create, update, and delete any workflows, credentials, or executions within a project. Project Viewer # A Project Viewer is effectively a read-only role with access to all workflows, credentials, and executions within a project. Viewers aren't able to manually execute any workflows that exist in a project. Role types and account types Role types and account types are different things. Every account has one type. The account can have different role types for different projects . Permission Admin Editor Viewer View workflows in the project View credentials in the project View executions Edit credentials and workflows Add workflows and credentials Execute workflows Manage members Modify the project Variables and tags aren't affected by RBAC: they're global across the n8n instance. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows/integrations/builtin/core-nodes/n8n-nodes-base.splitinbatches/rss-feed-example.json

{ "nodes": [ { "parameters": {}, "type": "n8n-nodes-base.manualTrigger", "typeVersion": 1, "position": [ 0, 0 ], "id": "e6e1cfe6-eff1-48bd-b21c-6ba83d4244d9", "name": "When clicking ‘Test workflow’" }, { "parameters": { "jsCode": "return [\n\t{\n\t\tjson: {\n\t\t\turl: 'https://medium.com/feed/n8n-io',\n\t\t}\n\t},\n\t{\n\t\tjson: {\n\t\t\turl: 'https://dev.to/feed/n8n',\n\t\t}\n\t}\n];" }, "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ 220, 0 ], "id": "137f1128-45b6-4bc4-a9fb-8660baa652a9", "name": "Code" }, { "parameters": { "options": {} }, "type": "n8n-nodes-base.splitInBatches", "typeVersion": 3, "position": [ 440, 0 ], "id": "3449a953-49c2-4a36-ba3d-cbc0573f3f6c", "name": "Loop Over Items" }, { "parameters": { "url": "={{ $json.url }}", "options": {} }, "type": "n8n-nodes-base.rssFeedRead", "typeVersion": 1.1, "position": [ 660, 100 ], "id": "cc2e59d7-0a9b-4640-8052-d8f7f8d8c9fe", "name": "RSS Read" } ], "connections": { "When clicking ‘Test workflow’": { "main": [ [ { "node": "Code", "type": "main", "index": 0 } ] ] }, "Code": { "main": [ [ { "node": "Loop Over Items", "type": "main", "index": 0 } ] ] }, "Loop Over Items": { "main": [ [], [ { "node": "RSS Read", "type": "main", "index": 0 } ] ] }, "RSS Read": { "main": [ [ { "node": "Loop Over Items", "type": "main", "index": 0 } ] ] } }, "pinData": {}, "meta": { "instanceId": "cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7" } }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/test/run-node-locally/

Run your node locally # You can test your node as you build it by running it in a local n8n instance. Install n8n using npm: 1 npm install n8n -g When you are ready to test your node, publish it locally: 1 2 3 # In your node directory npm run build npm link Install the node into your local n8n instance: 1 2 3 # In the nodes directory within your n8n installation # node-package-name is the name from the package.json npm link <node-package-name> Check your directory Make sure you run npm link <node-name> in the nodes directory within your n8n installation. This can be: ~/.n8n/custom/ ~/.n8n/<your-custom-name> : if your n8n installation set a different name using N8N_CUSTOM_EXTENSIONS . Start n8n: 1 n8n start Open n8n in your browser. You should see your nodes when you search for them in the nodes panel. Node names Make sure you search using the node name, not the package name. For example, if your npm package name is n8n-nodes-weather-nodes , and the package contains nodes named rain , sun , snow , you should search for rain , not weather-nodes . Troubleshooting # There's no custom directory in ~/.n8n local installation. You have to create custom directory manually and run npm init 1 2 3 4 # In ~/.n8n directory run mkdir custom cd custom npm init Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/user-management/saml/

Security Assertion Markup Language (SAML) # Feature availability Available on Enterprise plans. You need access to the n8n instance owner account to enable and configure SAML Available from version 0.225.0. This section provides guidance on using SAML SSO (single sign-on) with n8n. It assumes you're familiar with SAML. If you're not, SAML Explained in Plain English can help you understand how SAML works, and its benefits. Set up SAML : a general guide to setting up SAML in n8n, and links to resources for common IdPs. Start here. Okta Workforce Identity SAML setup : step-by-step guidance to configuring Okta. Troubleshooting : a list of things to check if you encounter issues. Managing users with SAML : performing user management tasks with SAML enabled. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/securing/security-audit/

Security audit # You can run a security audit on your n8n instance, to detect common security issues. Run an audit # You can run an audit using the CLI, the public API, or the n8n node. CLI # Run n8n audit . API # Make a POST call to the /audit endpoint. You must authenticate as the instance owner. n8n node # Add the n8n node to your workflow. Select Resource > Audit and Operation > Generate . Report contents # The audit generates five risk reports: Credentials # This report shows: Credentials not used in a workflow. Credentials not used in an active workflow. Credentials not use in a recently active workflow. Database # This report shows: Expressions used in Execute Query fields in SQL nodes. Expressions used in Query Parameters fields in SQL nodes. Unused Query Parameters fields in SQL nodes. File system # This report lists nodes that interact with the file system. Nodes # This report shows: Official risky nodes. These are n8n built in nodes. You can use them to fetch and run any code on the host system, which exposes the instance to exploits. You can view the list in n8n code | Audit constants , under OFFICIAL_RISKY_NODE_TYPES . Community nodes. Custom nodes. Instance # This report shows: Unprotected webhooks in the instance. Missing security settings If your instance is outdated. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/security/

Security environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. Variable Type Default Description N8N_BLOCK_ENV_ACCESS_IN_NODE Boolean false Whether to allow users to access environment variables in expressions and the Code node (false) or not (true). N8N_RESTRICT_FILE_ACCESS_TO String Limits access to files in these directories. Provide multiple files as a colon-separated list (" : "). N8N_BLOCK_FILE_ACCESS_TO_N8N_FILES Boolean true Set to true to block access to all files in the .n8n directory and user defined configuration files. N8N_SECURITY_AUDIT_DAYS_ABANDONED_WORKFLOW Number 90 Number of days to consider a workflow abandoned if it's not executed. N8N_SECURE_COOKIE Boolean true Ensures that cookies are only sent over HTTPS, enhancing security. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/installation/server-setups/

Server setups # Self-host with Docker Compose: Digital Ocean Heroku Hetzner Cloud Starting points for a Kubernetes setup: AWS Azure Google Cloud Platform Configuration guides to help you get started on other platforms: Docker Compose Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/manage-cloud/set-cloud-timezone/

Set the Cloud instance timezone # You can change the timezone for your n8n instance. This affects the Schedule Trigger and Date & Time node . Users can configure the timezone for individual workflows in Workflow settings . On your dashboard, select Manage . Change the Timezone dropdown to the timezone you want. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/securing/set-up-ssl/

Set up SSL # There are two methods to support TLS/SSL in n8n. Use a reverse proxy (recommended) # Use a reverse proxy like Traefik or a Network Load Balancer (NLB) in front of the n8n instance. This should also take care of certificate renewals. Refer to Security | Data encryption for more information. Pass certificates into n8n directly # You can also choose to pass certificates into n8n directly. To do so, set the N8N_SSL_CERT and N8N_SSL_KEY environment variables to point to your generated certificate and key file. You'll need to make sure the certificate stays renewed and up to date. Refer to Deployment environment variables for more information on these variables and Configuration for more information on setting environment variables. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/securing/set-up-sso/

Set up SAML Single Sign-On (SSO) # Feature availability Available on Enterprise plans. You need access to the n8n instance owner account to enable and configure SAML Available from version 0.225.0. This section provides guidance on using SAML SSO (single sign-on) with n8n. It assumes you're familiar with SAML. If you're not, SAML Explained in Plain English can help you understand how SAML works, and its benefits. Set up SAML : a general guide to setting up SAML in n8n, and links to resources for common IdPs. Start here. Okta Workforce Identity SAML setup : step-by-step guidance to configuring Okta. Troubleshooting : a list of things to check if you encounter issues. Managing users with SAML : performing user management tasks with SAML enabled. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/settings/

Workflow settings # You can customize workflow behavior for individual workflows using workflow settings. To open the settings: Open your workflow. Select the Options menu. Select Settings . n8n opens the Workflow settings modal. The following settings are available: Execution order : choose the execution order for multi-branch workflows. v0 (legacy) executes the first node of each branch, then the second node of each branch, and so on. v1 (recommended) executes each branch in turn, completing one branch before starting another. n8n orders the branches based on their position on the canvas , from topmost to bottommost. If two branches are at the same height, the leftmost branch executes first. Error Workflow : select a workflow to trigger if the current workflow fails. See Error workflows for more details. This workflow can be called by : choose whether other workflow can call this workflow. Timezone : sets the timezone for the workflow to use. The default timezone is EDT (New York). The timezone setting is important for the Schedule Trigger node. Save failed production executions : whether n8n should save failed executions for active workflows. Save successful production executions : whether n8n should save successful executions for active workflows. Save manual executions : whether n8n should save executions for workflows started by the user in the editor. Save execution progress : whether n8n should save execution data for each node. If set to Save , the workflow resumes from where it stopped in case of an error. This might increase latency. Timeout Workflow : toggle to enable setting a duration after which n8n should cancel the current workflow execution. Timeout After : Set the time in hours, minutes, and seconds after which the workflow should timeout. For n8n Cloud users n8n enforces a maximum available timeout for each plan. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/user-management/saml/setup/

Set up SAML # Feature availability Available on Enterprise plans. You need access to the n8n instance owner account to enable and configure SAML Available from version 0.225.0. This page tells you how to enable SAML SSO (single sign-on) in n8n. It assumes you're familiar with SAML. If you're not, SAML Explained in Plain English can help you understand how SAML works, and its benefits. Enable SAML # In n8n, go to Settings > SSO . Make a note of the n8n Redirect URL and Entity ID . Optional : if your IdP allows you to set up SAML from imported metadata, navigate to the Entity ID URL and save the XML. Optional : if you are running n8n behind a load balancer make sure you have N8N_EDITOR_BASE_URL configured. Set up SAML with your IdP (identity provider). You need the redirect URL and entity ID. You may also need an email address and name for the IdP user. After completing setup in your IdP, load the metadata XML into n8n. You can use a metadata URL or raw XML: Metadata URL : Copy the metadata URL from your IdP into the Identity Provider Settings field in n8n. Raw XML : Download the metadata XML from your IdP, toggle Identiy Provider Settings to XML , then copy the raw XML into Identity Provider Settings . Select Save settings . Select Test settings to check your SAML setup is working. Set SAML 2.0 to Activated . Generic IdP setup # The steps to configure the IdP vary depending on your chosen IdP. These are some common setup tasks: Create an app for n8n in your IdP. Map n8n attributes to IdP attributes: Name Name format Value (IdP side) http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress URI Reference User email http://schemas.xmlsoap.org/ws/2005/05/identity/claims/firstname URI Reference User First Name http://schemas.xmlsoap.org/ws/2005/05/identity/claims/lastname URI Reference User Last Name http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn URI Reference User Email Setup resources for common IdPs # Documentation links for common IdPs. IdP Documentation Auth0 Configure Auth0 as SAML Identity Provider: Manually configure SSO integrations Authentik Applications and the SAML Provider Azure AD SAML authentication with Azure Active Directory Keycloak Choose a Getting Started guide depending on your hosting. Okta n8n provides a Workforce Identity setup guide PingIdentity PingOne SSO Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/source-control-environments/setup/

Set up source control for environments # Link a Git repository to an n8n instance and configure your source control. n8n uses source control to provide environments. Refer to Environments in n8n for more information. Prerequisites # To use source control with n8n, you need a Git repository that allows SSH access. This document assumes you are familiar with Git and your Git provider. Step 1: Set up your repository and branches # For a new setup: Create a new repository for use with n8n. Create the branches you need. For example, if you plan to have different environments for test and production, set up a branch for each. To help decide what branches you need for your use case, refer to Branch patterns . Step 2: Configure Git in n8n # Go to Settings > Environments . In Git repository URL enter the SSH URL for your repository. n8n supports ED25519 and RSA public key algorithms. ED25519 is the default. Select RSA under SSH Key if your git host requires RSA. Copy the SSH key. Step 3: Set up a deploy key # Set up SSH access by creating a deploy key for the repository using the SSH key from n8n. The key must have write access. The steps depend on your Git provider. Help links for common providers: GitHub | Managing deploy keys GitLab | Deploy keys Step 4: Connect n8n and configure your instance # In Settings > Environments in n8n, select Connect . n8n connects to your Git repository. Under Instance settings , choose which branch you want to use for the current n8n instance. Optional : select Protected instance to prevent users editing workflows in this instance. This is useful for protecting production instances. Optional : choose a custom color for the instance. This will appear in the menu next to the source control push and pull buttons. It helps users know which instance they're in. Select Save settings . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/sharing/

Workflow sharing # Feature availability Available on Pro and Enterprise Cloud plans, and Enterprise self-hosted plans. Workflow sharing allows you to share workflows between users of the same n8n instance. Users can share workflows they created. Instance owners, and users with the admin role, can view and share all workflows in the instance. Refer to Account types for more information about owners and admins. Share a workflow # Open the workflow you want to share. Select Share . In Add users , find and select the users you want to share with. Select Save . View shared workflows # You can browse and search workflows on the Workflows list. The workflows in the list depend on the project: Overview lists all workflows you can access. This includes: Your own workflows. Workflows shared with you. Workflows in projects you're a member of. If you log in as the instance owner or admin: all workflows in the instance. Other projects: all workflows in the project. Workflow roles and permissions # There are two workflow roles: creator and editor. The creator is the user who created the workflow. Editors are other users with access to the workflow. You can't change the workflow owner, except when deleting the user. Credentials Workflow sharing allows editors to use all credentials used in the workflow. This includes credentials that aren't explicitly shared with them using credential sharing . Permissions # Permissions Creator Editor View workflow (read-only) View executions Update (including tags) Run Share Export Delete Node editing restrictions with unshared credentials # Sharing in n8n works on the principle of least privilege. This means that if a user shares a workflow with you, but they don't share their credentials, you can't edit the nodes within the workflow that use those credentials. You can view and run the workflow, and edit nodes that don't use unshared credentials. Refer to Credential sharing for guidance on sharing credentials. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/executions/single-workflow-executions/

Workflow-level executions list # The Executions list in a workflow shows all executions for that workflow. Deleted workflows When you delete a workflow, n8n deletes its execution history as well. This means you can't view executions for deleted workflows. Execution history and workflow history Don't confuse the execution list with Workflow history . Executions are workflow runs. With the executions list, you can see previous runs of the current version of the workflow. You can copy previous executions into the editor to Debug and re-run past executions in your current workflow. Workflow history is previous versions of the workflow: for example, a version with a different node, or different parameters set. View executions for a single workflow # In the workflow, select the Executions tab in the top menu. You can preview all executions of that workflow. Filter executions # You can filter the executions list. In your workflow, select Executions . Select Filters . Enter your filters. You can filter by: Status : choose from Failed , Running , Success , or Waiting . Execution start : see executions that started in the given time. Saved custom data : this is data you create within the workflow using the Code node. Enter the key and value to filter. Refer to Custom executions data for information on adding custom data. Feature availability Custom executions data is available on: Cloud: Pro, Enterprise Self-Hosted: Enterprise, registered Community Available in version 0.222.0 and above. Retry failed workflows # If your workflow execution fails, you can retry the execution. To retry a failed workflow: Open the Executions list. For the workflow execution you want to retry, select Refresh . Select either of the following options to retry the execution: Retry with currently saved workflow : Once you make changes to your workflow, you can select this option to execute the workflow with the previous execution data. Retry with original workflow : If you want to retry the execution without making changes to your workflow, you can select this option to retry the execution with the previous execution data. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/source-control-environments/

Source control and environments # Feature availability Available on Enterprise. You need to be an n8n instance owner, admin, or project owner to set up source control, and to send work to and from Git. n8n uses Git-based source control to support environments. Linking your n8n instances to a Git repository lets you create multiple n8n environments, backed by Git branches. In this section: Understand : Environments in n8n : The purpose of environments, and how they work in n8n. Git and n8n : How n8n uses Git. Branch patterns : The possible relationships between n8n instances and Git branches. Set up source control for environments : How to connect your n8n instance to Git. Using : Push and pull : Send work to Git, and fetch work from Git to your instance. Copy work between environments : How to copy work between different n8n instances. Manage variables : Manage variable values using the n8n API and source control. Tutorial: Create environments with source control : An end-to-end tutorial, setting up environments using n8n's recommended configurations. Related sections: Variables : reusable values. External secrets : manage credentials with an external secrets vault. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/source-control/

Source control environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. n8n uses Git-based source control to support environments. Refer to Source control and environments for more information on how to link a Git repository to an n8n instance and configure your source control. Variable Type Default Description N8N_SOURCECONTROL_DEFAULT_SSH_KEY_TYPE String ed25519 Set to rsa to make RSA the default SSH key type for Source control setup . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/flow-logic/splitting/

Splitting workflows with conditional nodes # Splitting uses the IF or Switch nodes. It turns a single-branch workflow into a multi-branch workflow. This is a key piece of representing complex logic in n8n. Compare these workflows: This is the power of splitting and conditional nodes in n8n. Refer to the IF or Switch documentation for usage details. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/build/reference/node-base-files/standard-parameters/

Standard parameters # These are the standard parameters for the node base file . They're the same for all node types. displayName # String | Required This is the name users see in the n8n GUI. name # String | Required The internal name of the object. Used to reference it from other places in the node. icon # String or Object | Required Specifies an icon for a particular node. n8n recommends uploading your own image file. You can provide the icon file name as a string, or as an object to handle different icons for light and dark modes. If the icon works in both light and dark modes, use a string that starts with file: , indicating the path to the icon file. For example: 1 icon: 'file:exampleNodeIcon.svg' To provide different icons for light and dark modes, use an object with light and dark properties. For example: 1 2 3 4 icon: { light: 'file:exampleNodeIcon.svg', dark: 'file:exampleNodeIcon.dark.svg' } n8n recommends using an SVG for your node icon, but you can also use PNG. If using PNG, the icon resolution should be 60x60px. Node icons should have a square or near-square aspect ratio. Don't reference Font Awesome If you want to use a Font Awesome icon in your node, download and embed the image. group # Array of strings | Required Tells n8n how the node behaves when the workflow runs. Options are: trigger : node waits for a trigger. schedule : node waits for a timer to expire. input , output , transform : these currently have no effect. An empty array, [] . Use this as the default option if you don't need trigger or schedule . description # String | Required A short description of the node. n8n uses this in the GUI. defaults # Object | Required Contains essential brand and name settings. The object can include: name : String. Used as the node name on the canvas if the displayName is too long. color : String. Hex color code. Provide the brand color of the integration for use in n8n. forceInputNodeExecution # Boolean | Optional When building a multi-input node, you can choose to force all preceding nodes on all branches to execute before the node runs. The default is false (requiring only one input branch to run). inputs # Array of strings | Required Names the input connectors. Controls the number of connectors the node has on the input side. If you need only one connector, use input: ['main'] . outputs # Array of strings | Required Names the output connectors. Controls the number of connectors the node has on the output side. If you need only one connector, use output: ['main'] . requiredInputs # Integer or Array | Optional Used for multi-input nodes. Specify inputs by number that must have data (their branches must run) before the node can execute. credentials # Array of objects | Required This parameter tells n8n the credential options. Each object defines an authentication type. The object must include: name : the credential name. Must match the name property in the credential file. For example, name: 'asanaApi' in Asana.node.ts links to name = 'asanaApi' in AsanaApi.credential.ts . required : Boolean. Specify whether authentication is required to use this node. requestDefaults # Object | Required Set up the basic information for the API calls the node makes. This object must include: baseURL : The API base URL. You can also add: headers : an object describing the API call headers, such as content type. url : string. Appended to the baseURL . You can usually leave this out. It's more common to provide this in the operations . properties # Array of objects | Required This contains the resource and operations objects that define node behaviors, as well as objects to set up mandatory and optional fields that can receive user input. Resource objects # A resource object includes the following parameters: displayName : String. This should always be Resource . name : String. This should always be resource . type : String. Tells n8n which UI element to use, and what input type to expect. For example, options results in n8n adding a dropdown that allows users to choose one option. Refer to Node UI elements for more information. noDataExpression : Boolean. Prevents using an expression for the parameter. Must always be true for resource . Operations objects # The operations object defines the available operations on a resource. displayName : String. This should always be Options . name : String. This should always be option . type : String. Tells n8n which UI element to use, and what input type to expect. For example, dateTime results in n8n adding a date picker. Refer to Node UI elements for more information. noDataExpression : Boolean. Prevents using an expression for the parameter. Must always be true for operation . options : Array of objects. Each objects describes an operation's behavior, such as its routing, the REST verb it uses, and so on. An options object includes: name . String. value . String. action : String. This parameter combines the resource and operation. You should always include it, as n8n will use it in future versions. For example, given a resource called "Card" and an operation "Get all" , your action is "Get all cards" . description : String. routing : Object containing request details. Additional fields objects # These objects define optional parameters. n8n displays them under Additional Fields in the GUI. Users can choose which parameters to set. The objects must include: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 displayName : 'Additional Fields' , name : 'additionalFields' , // The UI element type type : '' placeholder : 'Add Field' , default : {}, displayOptions : { // Set which resources and operations this field is available for show : { resource : [ // Resource names ], operation : [ // Operation names ] }, } For more information about UI element types, refer to UI elements . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/components/sticky-notes/

Sticky Notes # Sticky Notes allow you to annotate and comment on your workflows. n8n recommends using Sticky Notes heavily, especially on template workflows , to help other users understand your workflow. Create a Sticky Note # Sticky Notes are a core node. To add a new Sticky Note: Open the nodes panel. Search for note . Click the Sticky Note node. n8n adds a new Sticky Note to the canvas. Edit a Sticky Note # Double click the Sticky Note you want to edit. Write your note. This guide explains how to format your text with Markdown. n8n uses markdown-it , which implements the CommonMark specification. Click away from the note, or press Esc , to stop editing. Change the color # To change the Sticky Note color: Hover over the Sticky Note Select Change color Sticky Note positioning # You can: Drag a Sticky Note anywhere on the canvas. Drag Sticky Notes behind nodes. You can use this to visually group nodes. Resize Sticky Notes by hovering over the edge of the note and dragging to resize. Change the color: select Options to open the color selector. Writing in Markdown # Sticky Notes support Markdown formatting. This section describes some common options. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 The text in double asterisks will be **bold** The text in single asterisks will be *italic* Use # to indicate headings: # This is a top-level heading ## This is a sub-heading ### This is a smaller sub-heading You can add links: [Example](https://example.com/) Create lists with asterisks: * Item one * Item two Or created ordered lists with numbers: 1. Item one 2. Item two For a more detailed guide, refer to CommonMark's help . n8n uses markdown-it , which implements the CommonMark specification. Make images full width # You can force images to be 100% width of the sticky note by appending #full-width to the filename: 1 ![ Source example ]( https://<IMAGE-URL>/<IMAGE-NAME>.png#full-width ) Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/builtin/data-transformation-functions/strings/

Strings # A reference document listing built-in convenience functions to support data transformation in expressions for strings. JavaScript in expressions You can use any JavaScript in expressions. Refer to Expressions for more information. base64Encode(): A base64 encoded string. # Encode a string as base64. base64Decode(): A plain string. # Convert a base64 encoded string to a normal string. extractDomain(): String # Extracts a domain from a string containing a valid URL. Returns undefined if none is found. extractEmail(): String # Extracts an email from a string. Returns undefined if none is found. extractUrl(): String # Extracts a URL from a string. Returns undefined if none is found. extractUrlPath(): String # Extract the path but not the root domain from a URL. For example, "https://example.com/orders/1/details".extractUrlPath() returns "/orders/1/details/" . hash(algo?: Algorithm): String # Returns a string hashed with the given algorithm. Function parameters # algo Optional String enum Which hashing algorithm to use. Default: md5 One of: md5 , base64 , sha1 , sha224 , sha256 , sha384 , sha512 , sha3 , ripemd160 isDomain(): Boolean # Checks if a string is a domain. isEmail(): Boolean # Checks if a string is an email. isEmpty(): Boolean # Checks if a string is empty. isNotEmpty(): Boolean # Checks if a string has content. isNumeric(): Boolean # Checks if a string only contains digits. isUrl(): Boolean # Checks if a string is a valid URL. parseJson(): Object # Equivalent of JSON.parse() . Parses a string as a JSON object. quote(mark?: String): String # Returns a string wrapped in the quotation marks. Default quotation is " . Function parameters # mark Optional String Which quote mark style to use. Default: " removeMarkdown(): String # Removes Markdown formatting from a string. replaceSpecialChars(): String # Replaces non-ASCII characters in a string with an ASCII representation. removeTags(): String # Remove tags, such as HTML or XML, from a string. toBoolean(): Boolean # Convert a string to a boolean. "false" , "0" , "" , and "no" convert to false . toDateTime(): Date # Converts a string to a Luxon date object . toDecimalNumber(): Number # See toFloat toFloat(): Number # Converts a string to a decimal number. toInt(): Number # Converts a string to an integer. toSentenceCase(): String # Formats a string to sentence case. toSnakeCase(): String # Formats a string to snake case. toTitleCase(): String # Formats a string to title case. Will not change already uppercase letters to prevent losing information from acronyms and trademarks such as iPhone or FAANG. toWholeNumber(): Number # Converts a string to a whole number. urlDecode(entireString?: Boolean): String # Decodes a URL-encoded string. It decodes any percent-encoded characters in the input string, and replaces them with their original characters. Function parameters # entireString Optional Boolean Whether to decode characters that are part of the URI syntax (true) or not (false). urlEncode(entireString?: Boolean): String # Encodes a string to be used/included in a URL. Function parameters # entireString Optional Boolean Whether to encode characters that are part of the URI syntax (true) or not (false). Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/build/reference/node-base-files/structure/

Structure of the node base file # The node base file follows this basic structure: Add import statements. Create a class for the node. Within the node class, create a description object, which defines the node. A programmatic-style node also has an execute() method, which reads incoming data and parameters, then builds a request. The declarative style handles this using the routing key in the properties object, within descriptions . Outline structure for a declarative-style node # This code snippet gives an outline of the node structure. 1 2 3 4 5 6 7 8 9 10 import { INodeType , INodeTypeDescription } from 'n8n-workflow' ; export class ExampleNode implements INodeType { description : INodeTypeDescription = { // Basic node details here properties : [ // Resources and operations here ] }; } Refer to Standard parameters for information on parameters available to all node types. Refer to Declarative-style parameters for the parameters available for declarative-style nodes. Outline structure for a programmatic-style node # This code snippet gives an outline of the node structure. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { IExecuteFunctions } from 'n8n-core' ; import { INodeExecutionData , INodeType , INodeTypeDescription } from 'n8n-workflow' ; export class ExampleNode implements INodeType { description : INodeTypeDescription = { // Basic node details here properties : [ // Resources and operations here ] }; async execute ( this : IExecuteFunctions ) : Promise < INodeExecutionData [][] > { // Process data and return } }; Refer to Standard parameters for information on parameters available to all node types. Refer to Programmatic-style parameters and Programmatic-style execute method for more information on working with programmatic-style nodes. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/deploy/submit-community-nodes/

Submit community nodes # Subject to change The standards described in this document are for the first release of the community nodes repository. These may change in future releases. Community nodes are npm packages, hosted in the npm registry. When building a node to submit to the community node repository, use the following resources to make sure your node setup is correct: View the starter node and n8n's own nodes for some examples. Refer to the documentation on building your own nodes . Make sure your node follows the standards for community nodes. Standards # To make your node available to the n8n community node repository, you must: Make sure the package name starts with n8n-nodes- or @<scope>/n8n-nodes- . For example, n8n-nodes-weather or @weatherPlugins/n8n-nodes-weather . Include n8n-community-node-package in your package keywords. Make sure that you add your nodes and credentials to the package.json file inside the n8n attribute. Refer to the package.json in the starter node for an example. Check your node using the linter and test it locally to ensure it works. Submit the package to the npm registry. Refer to npm's documentation on Contributing packages to the registry for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/flow-logic/subworkflows/

Sub-workflows # You can call one workflow from another workflow. This allows you to build modular, microservice-like workflows. It can also help if your workflow grows large enough to encounter memory issues . Creating sub-workflows uses the Execute Workflow and Execute Sub-workflow Trigger nodes. Set up and use a sub-workflow # This section walks through setting up both the parent workflow and sub-workflow. Create the sub-workflow # Create a new workflow. Create sub-workflows from existing workflows You can optionally create a sub-workflow directly from an existing parent workflow using the Execute Sub-workflow node. In the node, select the Database and From list options and select Create a sub-workflow in the list. Optional : configure which workflows can call the sub-workflow: Select the Options menu > Settings . n8n opens the Workflow settings modal. Change the This workflow can be called by setting. Refer to Workflow settings for more information on configuring your workflows. Add the Execute Sub-workflow trigger node (if you are searching under trigger nodes, this is also titled When Executed by Another Workflow ). Set the Input data mode to choose how you will define the sub-workflow's input data: Define using fields below : Choose this mode to define individual input names and data types that the calling workflow needs to provide. Define using JSON example : Choose this mode to provide an example JSON object that demonstrates the expected input items and their types. Accept all data : Choose this mode to accept all data unconditionally. The sub-workflow won't define any required input items. This sub-workflow must handle any input inconsistencies or missing values. Add other nodes as needed to build your sub-workflow functionality. Save the sub-workflow. Sub-workflow mustn't contain errors If there are errors in the sub-workflow, the parent workflow can't trigger it. Load data into sub-workflow before building This requires the ability to load data from previous executions , which is available on n8n Cloud and registered Community plans. If you want to load data into your sub-workflow to use while building it: Create the sub-workflow and add the Execute Sub-workflow Trigger . Set the node's Input data mode to Accept all data or define the input items using fields or JSON if they're already known. In the sub-workflow settings , set Save successful production executions to Save . Skip ahead to setting up the parent workflow, and run it. Follow the steps to load data from previous executions . Adjust the Input data mode to match the input sent by the parent workflow if necessary. You can now pin example data in the trigger node, enabling you to work with real data while configuring the rest of the workflow. Call the sub-workflow # Open the workflow where you want to call the sub-workflow. Add the Execute Sub-workflow node. In the Execute Sub-workflow node, set the sub-workflow you want to call. You can choose to call the workflow by ID, load a workflow from a local file, add workflow JSON as a parameter in the node, or target a workflow by URL. Find your workflow ID Your sub-workflow's ID is the alphanumeric string at the end of its URL. Fill in the required input items defined by the sub-workflow. Save your workflow. When your workflow executes, it will send data to the sub-workflow, and run it. You can follow the execution flow from the parent workflow to the sub-workflow by opening the Execute Sub-workflow node and selecting the View sub-execution link. Likewise, the sub-workflow's execution contains a link back to the parent workflow's execution to navigate in the other direction. How data passes between workflows # As an example, imagine you have an Execute Sub-workflow node in Workflow A . The Execute Sub-workflow node calls another workflow called Workflow B : The Execute Sub-workflow node passes the data to the Execute Sub-workflow Trigger node (titled "When executed by another node" in the canvas) of Workflow B . The last node of Workflow B sends the data back to the Execute Sub-workflow node in Workflow A . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows/ai-code/summarize-data.json

{ "name": "Summarize data and prepare Slack message", "nodes": [ { "parameters": {}, "id": "5d4bd82f-24e9-484e-a17e-c5de889087d9", "name": "When clicking \"Execute Workflow\"", "type": "n8n-nodes-base.manualTrigger", "typeVersion": 1, "position": [ 860, 540 ] }, { "parameters": {}, "id": "0d73c3df-300a-4397-8f53-fb0750dbf97f", "name": "Summarize", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ 1300, 540 ] }, { "parameters": { "jsCode": "return [\n{\n\"id\":\n\"0001\",\n\"name\":\n\"Example feature 1\",\n\"url\": \"example.com\",\n\"property_tags\":\n[\n],\n\"property_type\":\n[\n\"Feature\"\n],\n\"property_votes\":\n2\n},\n{\n\"id\":\n\"0002\",\n\"name\":\n\"Example feature 2\",\n\"url\": \"example.com\",\n\"property_type\":\n[\n\"Feature\"\n],\n\"property_votes\":\n3\n},\n{\n\"id\":\n\"0003\",\n\"name\":\n\"Example feature 3\",\n\"url\": \"example.com\",\n\"property_type\":\n[\n\"Feature\"\n],\n\"property_votes\":\n1\n},\n{\n\"id\":\n\"0004\",\n\"name\":\n\"Example bug 1\",\n\"url\": \"example.com\",\n\"property_type\":\n[\n\"Bug\"\n],\n\"property_votes\":\n0\n},\n{\n\"id\":\n\"0005\",\n\"name\":\n\"Example idea 1\",\n\"url\": \"example.com\",\n\"property_type\":\n[\n\"Idea\"\n],\n\"property_votes\":\n4\n}\n]" }, "id": "fda17968-61a5-4c0b-ab83-adb4e0bbf7c5", "name": "Mock Ideas", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ 1080, 540 ] } ], "pinData": {}, "connections": { "When clicking \"Execute Workflow\"": { "main": [ [ { "node": "Mock Ideas", "type": "main", "index": 0 } ] ] }, "Mock Ideas": { "main": [ [ { "node": "Summarize", "type": "main", "index": 0 } ] ] } }, "active": false, "settings": { "executionOrder": "v1" }, "versionId": "077fe5dc-2214-4149-9f1b-ef6342e45dec", "id": "5IoF8z4YUoSUpBUk", "meta": { "instanceId": "c5aabef739d71e3d0ceb8b6078a241aaf1b145fa71cbbe36ecfb2c8c3fd64f5f" }, "tags": [] }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/sustainable-use-license/

Sustainable Use License # Proprietary licenses for Enterprise Proprietary licenses are available for enterprise customers. Get in touch for more information. n8n's Sustainable Use License and n8n Enterprise License are based on the fair-code model. License FAQs # What license do you use? # n8n uses the Sustainable Use License and n8n Enterprise License . These licenses are based on the fair-code model. What source code is covered by the Sustainable Use License? # The Sustainable Use License applies to all our source code hosted in our main GitHub repository except: Content of branches other than master. Source code files that contain .ee. in their file name. These are licensed under the n8n Enterprise License . What is the Sustainable Use License? # The Sustainable Use License is a fair-code software license created by n8n in 2022. You can read more about why we did this here . The license allows you the free right to use, modify, create derivative works, and redistribute, with three limitations: You may use or modify the software only for your own internal business purposes or for non-commercial or personal use. You may distribute the software or provide it to others only if you do so free of charge for non-commercial purposes. You may not alter, remove, or obscure any licensing, copyright, or other notices of the licensor in the software. Any use of the licensor's trademarks is subject to applicable law. We encourage anyone who wants to use the Sustainable Use License. If you are building something out in the open, it makes sense to think about licensing earlier in order to avoid problems later. Contact us at license@n8n.io if you would like to ask any questions about it. What is and isn't allowed under the license in the context of n8n's product? # Our license restricts use to "internal business purposes". In practice this means all use is allowed unless you are selling a product, service, or module in which the value derives entirely or substantially from n8n functionality. Here are some examples that wouldn't be allowed: White-labeling n8n and offering it to your customers for money. Hosting n8n and charging people money to access it. All of the following examples are allowed under our license: Using n8n to sync the data you control as a company, for example from a CRM to an internal database. Creating an n8n node for your product or any other integration between your product and n8n. Providing consulting services related to n8n, for example building workflows, custom features closely connect to n8n, or code that gets executed by n8n. Supporting n8n, for example by setting it up or maintaining it on an internal company server. Can I use n8n to act as the back-end to power a feature in my app? # Usually yes, as long as the back-end process doesn't use users' own credentials to access their data. Here are two examples to clarify: Example 1: Sync ACME app with HubSpot # Bob sets up n8n to collect a user's HubSpot credentials to sync data in the ACME app with data in HubSpot. NOT ALLOWED under the Sustainable Use License. This use case collects the user's own HubSpot credentials to pull information to feed into the ACME app. Example 2: Embed AI chatbot in ACME app # Bob sets up n8n to embed an AI chatbot within the ACME app. The AI chatbot's credentials in n8n use Bob's company credentials. ACME app end-users only enter their questions or queries to the chatbot. ALLOWED under the Sustainable Use License. No user credentials are being collected. What if I want to use n8n for something that's not permitted by the license? # You must sign a separate commercial agreement with us. We actively encourage software creators to embed n8n within their products; we just ask them to sign an agreement laying out the terms of use, and the fees owed to n8n for using the product in this way. We call this mode of use n8n Embed. You can learn more, and contact us about it here . If you are unsure whether the use case you have in mind constitutes an internal business purpose or not, take a look at the examples , and if you're still unclear, email us at license@n8n.io . Why don't you use an open source license? # n8n's mission is to give everyone who uses a computer technical superpowers. We've decided the best way for us to achieve this mission is to make n8n as widely and freely available as possible for users, while ensuring we can build a sustainable, viable business. By making our product free to use, easy to distribute, and source-available we help everyone access the product. By operating as a business, we can continue to release features, fix bugs, and provide reliable software at scale long-term. Why did you create a license? # Creating a license was our least favorite option. We only went down this path after reviewing the possible existing licenses and deciding nothing fit our specific needs. There are two ways in which we try to mitigate the pain and friction of using a proprietary license: By using plain English, and keeping it as short as possible. By promoting fair-code with the goal of making it a well-known umbrella term to describe software models like ours. Our goals when we created the Sustainable Use License were: To be as permissive as possible. Safeguarding our ability to build a business. Being as clear as possible what use was permitted or not. My company has a policy against using code that restricts commercial use – can I still use n8n? # Provided you are using n8n for internal business purposes, and not making n8n available to your customers for them to connect their accounts and build workflows, you should be able to use n8n. If you are unsure whether the use case you have in mind constitutes an internal business purpose or not, take a look at the examples , and if you're still unclear, email us at license@n8n.io . What happens to the code I contribute to n8n in light of the Sustainable Use License? # Any code you contribute on GitHub is subject to GitHub's terms of use . In simple terms, this means you own, and are responsible for, anything you contribute, but that you grant other GitHub users certain rights to use this code. When you contribute code to a repository containing notice of a license, you license the code under the same terms. n8n asks every contributor to sign our Contributor License Agreement . In addition to the above, this gives n8n the ability to change its license without seeking additional permission. It also means you aren't liable for your contributions (e.g. in case they cause damage to someone else's business). It's easy to get started contributing code to n8n here , and we've listed broader ways of participating in our community here . Why did you switch to the Sustainable Use License from your previous license arrangement (Apache 2.0 with Commons Clause)? # n8n was licensed under Apache 2.0 with Commons Clause until 17 March 2022. Commons Clause was initiated by various software companies wanting to protect their rights against cloud providers. The concept involved adding a commercial restriction on top of an existing open source license. However, the use of the Commons Clause as an additional condition to an open source license, as well as the use of wording that's open to interpretation, created some confusion and uncertainty regarding the terms of use. The Commons Clause also restricted people's ability to offer consulting and support services: we realized these services are critical in enabling people to get value from n8n, so we wanted to remove this restriction. We created the Sustainable Use License to be more permissive and more clear about what use is allowed, while continuing to ensure n8n gets the funding needed to build and improve our product. What are the main differences between the Sustainable Use License and your previous license arrangement (Apache 2.0 with Commons Clause)? # There are two main differences between the Sustainable Use License and our previous license arrangement. The first is that we have tightened the definition of how you can use the software. Previously the Commons Clause restricted users ability to "sell" the software; we have redefined this to restrict use to internal business purposes. The second difference is that our previous license restricted people's ability to charge fees for consulting or support services related to the software: we have lifted that restriction altogether. That means you are now free to offer commercial consulting or support services (e.g. building n8n workflows) without the need for a separate license agreement with us. If you are interested in joining our community of n8n experts providing these services, you can learn more here. Is n8n open source? # Although n8n's source code is available under the Sustainable Use License, according to the Open Source Initiative (OSI), open source licenses can't include limitations on use, so we do not call ourselves open source. In practice, n8n offers most users many of the same benefits as OSI-approved open source. We coined the term 'fair-code' as a way of describing our licensing model, and the model of other companies who are source-available, but restrict commercial use of their source code. What is fair-code, and how does the Sustainable Use License relate to it? # Fair-code isn't a software license. It describes a software model where software: Is generally free to use and can be distributed by anybody. Has its source code openly available. Can be extended by anybody in public and private communities. Is commercially restricted by its authors. The Sustainable Use License is a fair-code license. You can read more about it and see other examples of fair-code licenses here . We're always excited to talk about software licenses, fair-code, and other principles around sharing code with interested parties. To get in touch to chat, email license@n8n.io . Can I use n8n's Sustainable Use License for my own project? # Yes! We're excited to see more software use the Sustainable Use License. We'd love to hear about your project if you're using our license: license@n8n.io . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/tags/

Tags # Workflow tags allow you to label your workflows. You can then filter workflows by tag. Tags are global. This means when you create a tag, it's available to all users on your n8n instance. Add a tag to a workflow # To add a tag to your workflow: In your workflow, select + Add tag . Select an existing tag, or enter a new tag name. Once you select a tag and click away from the tag modal, n8n displays the tag next to the workflow name. You can add more than one tag. Filter by tag # When browsing the workflows on your instance, you can filter by tag. On the Workflows page, select Filters . Select Tags . Select the tag or tags you want to filter by. n8n lists the workflows with that tag. Manage tags # You can edit existing tags. Instance owners can delete tags. Select Manage tags . This is available from Filters > Tags on the Workflows page, or in the + Add tag modal in your workflow. Hover over the tag you want to change. Select Edit to rename it, or Delete to delete it. Global tags Tags are global. If you edit or delete a tag, this affects all users of your n8n instance. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/task-runners/

Task runner environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. Task runners execute code defined by the Code node . n8n instance environment variables # Variable Type Default Description N8N_RUNNERS_ENABLED Boolean false Are task runners enabled. N8N_RUNNERS_MODE Enum string: internal , external internal How to launch and run the task runner. internal means n8n will launch a task runner as child process. external means an external orchestrator will launch the task runner. N8N_RUNNERS_AUTH_TOKEN String Random string Shared secret used by a task runner to authenticate to n8n. Required when using external mode. N8N_RUNNERS_BROKER_PORT Number 5679 Port the task broker listens on for task runner connections. N8N_RUNNERS_BROKER_LISTEN_ADDRESS String 127.0.0.1 Address the task broker listens on. N8N_RUNNERS_MAX_PAYLOAD Number 1 073 741 824 Maximum payload size in bytes for communication between a task broker and a task runner. N8N_RUNNERS_MAX_OLD_SPACE_SIZE String The --max-old-space-size option to use for a task runner (in MB). By default, Node.js will set this based on available memory. N8N_RUNNERS_MAX_CONCURRENCY Number 5 The number of concurrent tasks a task runner can execute at a time. N8N_RUNNERS_TASK_TIMEOUT Number 60 How long (in seconds) a task can take to complete before the task aborts and the runner restarts. Must be greater than 0. N8N_RUNNERS_HEARTBEAT_INTERVAL Number 30 How often (in seconds) the runner must send a heartbeat to the broker, else the task aborts and the runner restarts. Must be greater than 0. Task runner launcher environment variables # Variable Type Default Description N8N_RUNNERS_LAUNCHER_LOG_LEVEL Enum string: debug , info , warn , error info Which log messages to show. N8N_RUNNERS_AUTH_TOKEN String - Shared secret used to authenticate to n8n. N8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT Number 15 The number of seconds to wait before shutting down an idle runner. N8N_RUNNERS_TASK_BROKER_URI String http://127.0.0.1:5679 The URI of the task broker server (n8n instance). N8N_RUNNERS_LAUNCHER_HEALTH_CHECK_PORT Number 5680 Port for the launcher's health check server. N8N_RUNNERS_MAX_PAYLOAD Number 1 073 741 824 Maximum payload size in bytes for communication between a task broker and a task runner. N8N_RUNNERS_MAX_CONCURRENCY Number 5 The number of concurrent tasks a task runner can execute at a time. NODE_OPTIONS String - Options for Node.js. Task runner environment variables # Variable Type Default Description N8N_RUNNERS_GRANT_TOKEN String Random string Token the runner uses to authenticate with the task broker. This is automatically provided by the launcher. N8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT Number 15 The number of seconds to wait before shutting down an idle runner. N8N_RUNNERS_TASK_BROKER_URI String http://127.0.0.1:5679 The URI of the task broker server (n8n instance). N8N_RUNNERS_LAUNCHER_HEALTH_CHECK_PORT Number 5680 Port for the launcher's health check server. N8N_RUNNERS_MAX_PAYLOAD Number 1 073 741 824 Maximum payload size in bytes for communication between a task broker and a task runner. N8N_RUNNERS_MAX_CONCURRENCY Number 5 The number of concurrent tasks a task runner can execute at a time. NODE_FUNCTION_ALLOW_BUILTIN String - Permit users to import specific built-in modules in the Code node. Use * to allow all. n8n disables importing modules by default. NODE_FUNCTION_ALLOW_EXTERNAL String - Permit users to import specific external modules (from n8n/node_modules ) in the Code node. n8n disables importing modules by default. GENERIC_TIMEZONE * America/New_York The same default timezone as configured for the n8n instance . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/task-runners/

Task runners # Task runners are a generic mechanism to execute tasks in a secure and performant way. They're used to execute user-provided JavaScript code in the Code node . This document describes how task runners work and how you can configure them. How it works # The task runner feature consists of three components: a task runner, a task broker, and a task requester. Task runners connect to the task broker using a websocket connection. A task requester submits a task request to the broker where an available task runner can pick it up for execution. The runner executes the task and submits the results to the task requester. The task broker coordinates communication between the runner and the requester. The n8n instance (main and worker) acts as the broker. The Code node in this case is the task requester. Task runner modes # You can use task runners in two different modes: internal and external. Internal mode # In internal mode, the n8n instance launches the task runner as a child process. The n8n process monitors and manages the life cycle of the task runner. The task runner process shares the same uid and gid as n8n. External mode # In external mode, an external orchestrator (for example, Kubernetes) launches the task runner instead of n8n. Typically, this means you would configure the task runner to run as a side-car container next to n8n. In this mode, the orchestrator monitors and manages the life cycle of the task runner container. The task runner is fully isolated from the n8n instance. When using the Queue mode , each n8n container (main and workers) needs to have its own task runner. Setting up external mode # Use the following details to configure task runners in external mode Configuring n8n instance in external mode # You can configure n8n to use external task runners by setting the following environment variables: Environment variables Description N8N_RUNNERS_ENABLED=true Enables task runners. N8N_RUNNERS_MODE=external Use task runners in external mode. N8N_RUNNERS_AUTH_TOKEN=<random secure shared secret> A shared secret task runners use to connect to the broker. N8N_RUNNERS_BROKER_LISTEN_ADDRESS=0.0.0.0 By default, the task broker only listens to localhost. When using multiple containers (for example, with Docker Compose), it needs to be able to accept external connections. For full list of environment variables see task runner environment variables . Configuring task runners in external mode # The task runner comes bundled within the n8n Docker image. The Docker image also includes the task runner launcher. The launcher can start the runner on-demand, which means lower memory usage when there's no work needed, but a short delay (few hundred ms) in cold-start. The launcher also monitors the runner and restarts it in case of infinite loops or other issues. Run a task runner container from the n8n Docker image by setting the following properties: Configuration Description command ["/usr/local/bin/task-runner-launcher", "javascript"] livenessProbe GET /healthz , port 5680 Set the following environment variables for the container, adjusted to fit your needs: Environment variables Description N8N_RUNNERS_AUTH_TOKEN=<random secure shared secret> The shared secret the task runner uses to connect to the broker. N8N_RUNNERS_MAX_CONCURRENCY=5 The number of concurrent tasks the runner can execute. N8N_RUNNERS_TASK_BROKER_URI=localhost:5679 The address of the task broker server within the n8n instance. N8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT=15 Number of seconds of inactivity to wait before shutting down the task runner process. The launcher will automatically start the runner again when there are new tasks to execute. Set to 0 to disable automatic shutdown. NODE_OPTIONS=--max-old-space-size=<limit> The memory limit for the task runner Node.js process. This should be lower than the limit for container so that the runner runs out of memory before the container. That way, the launcher is able to monitor the runner. GENERIC_TIMEZONE The same default timezone as configured for the n8n instance . For full list of environment variables see task runner environment variables . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/securing/telemetry-opt-out/

Data collection # n8n collects some anonymous data from self-hosted n8n installations. Use the instructions below to opt out of data telemetry collection. Collected data # Refer to Privacy | Data collection in self-hosted n8n for details on the data n8n collects. How collection works # Your n8n instance sends most data to n8n as the events that generate it occur. Workflow execution counts and an instance pulse are sent periodically (every 6 hours). These data types mostly fall into n8n telemetry collection. Opting out of data collection # n8n enables telemetry collection by default. To disable it, configure the following environment variables. Opt out of telemetry events # To opt out of telemetry events, set the N8N_DIAGNOSTICS_ENABLED environment variable to false, for example: 1 export N8N_DIAGNOSTICS_ENABLED = false Opt out of checking for new versions of n8n # To opt out of checking for new versions of n8n, set the N8N_VERSION_NOTIFICATIONS_ENABLED environment variable to false, for example: 1 export N8N_VERSION_NOTIFICATIONS_ENABLED = false Disable all connection to n8n servers # If you want to fully prevent all communication with n8n's servers, refer to Isolate n8n . Related resources # Refer to Deployment environment variables for more information on these environment variables. Refer to Configuration for more information on setting environment variables. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/templates/

Workflow templates # When creating a new workflow, you can choose whether to start with an empty workflow, or use an existing template . Templates provide: Help getting started: n8n might already have a template that does what you need. Examples of what you can build Best practices for creating your own workflows Access templates # Select Templates to view the templates library. If you use n8n's template library, this takes you to browse Workflows on the n8n website . If you use a custom library provided by your organization, you'll be able to search and browse the templates within the app. Add your workflow to the n8n library # You can submit your workflows to n8n's template library. n8n is working on a creator program, and developing a marketplace of templates. This is an ongoing project, and details are likely to change. Refer to n8n Creator hub for information on how to submit templates and become a creator. Self-hosted n8n: Disable templates # In your environment variables, set N8N_TEMPLATES_ENABLED to false. Self-hosted n8n: Use your own library # In your environment variables, set N8N_TEMPLATES_HOST to the base URL of your API. Your API must provide the same endpoints and data structure as n8n's. The endpoints are: Method Path GET /templates/workflows/ <id> GET /templates/workflows GET /templates/collections/ <id> GET /templates/collections GET /templates/categories GET /health To learn about the data structure, try out n8n's API endpoints: https://api.n8n.io/templates/categories https://api.n8n.io/templates/collections https://api.n8n.io/templates/workflows https://api.n8n.io/health You can also contact us for more support. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/test/

Test a node # This section contains information about testing your node. There are two ways to test your node: Manually, by running it on your own machine within a local n8n instance. Automatically, using the linter . You should use both methods before publishing your node. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/configuration-examples/time-zone/

Set the self-hosted instance timezone # The default timezone is America/New_York. For instance, the Schedule node uses it to know at what time the workflow should start. To set a different default timezone, set GENERIC_TIMEZONE to the appropriate value. For example, if you want to set the timezone to Berlin (Germany): 1 export GENERIC_TIMEZONE = Europe/Berlin You can find the name of your timezone here . Refer to Environment variables reference for more information on this variable. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/timezone-localization/

Timezone and localization environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. Variable Type Default Description GENERIC_TIMEZONE * America/New_York The n8n instance timezone. Important for schedule nodes (such as Cron). N8N_DEFAULT_LOCALE String en A locale identifier, compatible with the Accept-Language header . n8n doesn't support regional identifiers, such as de-AT . When running in a locale other than the default, n8n displays UI strings in the selected locale, and falls back to en for any untranslated strings. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/data/transforming-data/

Transforming data # n8n uses a predefined data structure that allows all nodes to process incoming data correctly. Your incoming data may have a different data structure, in which case you will need to transform it to allow each item to be processed individually. For example, the image below shows the output of an HTTP Request node that returns data incompatible with n8n's data structure. The node returns the data and displays that only one item was returned. To transform this kind of structure into the n8n data structure you can use the data transformation nodes: Aggregate : take separate items, or portions of them, and group them together into individual items. Limit : remove items beyond a defined maximum number. Remove Duplicates : identify and delete items that are identical across all fields or a subset of fields. Sort : organize lists of in a desired ordering, or generate a random selection. Split Out : separate a single data item containing a list into multiple items. Summarize : aggregate items together, in a manner similar to Excel pivot tables. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/test/troubleshooting-node-development/

Troubleshooting # Credentials # Error message: 'Credentials of type "*" aren't known' # Check that the name in the credentials array matches the name used in the property name of the credentials' class. Editor UI # Error message: 'There was a problem loading init data: API-Server can not be reached. It's probably down' # Check that the names of the node file, node folder, and class match the path added to packages/nodes-base/package.json . Check that the names used in the displayOptions property are names used by UI elements in the node. Node icon doesn't show up in the Add Node menu and the Editor UI # Check that the icon is in the same folder as the node. Check that it's either in PNG or SVG format. When the icon property references the icon file, check that it includes the logo extension ( .png or .svg ) and that it prefixes it with file: . For example, file:friendGrid.png or file:friendGrid.svg . Node icon doesn't fit # If you use an SVG file, make sure the canvas size is square. You can find instructions to change the canvas size of an SVG file using GIMP here . If you use a PNG file, make sure that it's 60x60 pixels. Node doesn't show up in the Add Node menu # Check that you registered the node in the package.json file in your project. Changes to the description properties don't show in the UI on refreshing # Every time you change the description properties, you have to stop the current n8n process ( ctrl + c ) and run it again. You may also need to re-run npm link . Linter incorrectly warning about file name case # The node linter has rules for file names, including what case they should be. Windows users may encounter an issue when renaming files that causes the linter to continue giving warnings, even after you rename the files. This is due to a known Windows issue with changing case when renaming files. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/user-management/saml/troubleshooting/

Troubleshooting SAML SSO # If you get an error when testing your SAML setup, check the following: Does the app you created in your IdP support SAML? Did you enter the n8n redirect URL and entity ID in the correct fields in your IdP? Is the metadata XML correct? Check that the metadata you copied into n8n is formatted correctly. For more support, use the forum , or contact your support representative if you have a paid support plan. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/try-it-out/

Try it out # This section gets you up and running with building workflows in n8n. Want a fast taster of n8n? Try the Very quick quickstart . Looking for a more detailed introduction? Check out the Slightly longer introduction . Prefer to work through extensive examples? Maybe the courses are for you. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/user-management/two-factor-auth/

Two-factor authentication (2FA) # Two-factor authentication (2FA) adds a second authentication method on top of username and password. This increases account security. n8n supports 2FA using an authenticator app. Enable 2FA # You need an authenticator app on your phone. To enable 2FA in n8n: Go to you Settings > Personal . Select Enable 2FA . n8n opens a modal with a QR code. Scan the QR code in your authenticator app. Enter the code from your app in Code from authenticator app . Select Continue . n8n displays recovery codes. Save the recovery codes. You need these to regain access to your account if you lose your authenticator. Disable 2FA for your instance # Self-hosted users can configure their n8n instance to disable 2FA for all users by setting N8N_MFA_ENABLED to false. Note that n8n ignores this if existing users have 2FA enabled. Refer to Configuration methods for more information on configuring your n8n instance with environment variables. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/creating-nodes/build/reference/ui-elements/

Node user interface elements # n8n provides a set of predefined UI components (based on a JSON file) that allows users to input all sorts of data types. The following UI elements are available in n8n. String # Basic configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { displayName : Name , // The value the user sees in the UI name : name , // The name used to reference the element UI within the code type : string , required : true , // Whether the field is required or not default : 'n8n' , description : 'The name of the user' , displayOptions : { // the resources and operations to display this element with show : { resource : [ // comma-separated list of resource names ], operation : [ // comma-separated list of operation names ] } }, } String field for inputting passwords: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { displayName : 'Password' , name : 'password' , type : 'string' , required : true , typeOptions : { password : true , }, default : '' , description : `User's password` , displayOptions : { // the resources and operations to display this element with show : { resource : [ // comma-separated list of resource names ], operation : [ // comma-separated list of operation names ] } }, } String field with more than one row: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { displayName : 'Description' , name : 'description' , type : 'string' , required : true , typeOptions : { rows : 4 , }, default : '' , description : 'Description' , displayOptions : { // the resources and operations to display this element with show : { resource : [ // comma-separated list of resource names ], operation : [ // comma-separated list of operation names ] } }, } Support drag and drop for data keys # Users can drag and drop data values to map them to fields. Dragging and dropping creates an expression to load the data value. n8n supports this automatically. You need to add an extra configuration option to support dragging and dropping data keys: requiresDataPath: 'single' : for fields that require a single string. requiresDataPath: 'multiple' : for fields that can accept a comma-separated list of string. The Compare Datasets node code has examples. Number # Number field with decimal points: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 { displayName : 'Amount' , name : 'amount' , type : 'number' , required : true , typeOptions : { maxValue : 10 , minValue : 0 , numberPrecision : 2 , }, default : 10.00 , description : 'Your current amount' , displayOptions : { // the resources and operations to display this element with show : { resource : [ // comma-separated list of resource names ], operation : [ // comma-separated list of operation names ] } }, } Collection # Use the collection type when you need to display optional fields. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 { displayName : 'Filters' , name : 'filters' , type : 'collection' , placeholder : 'Add Field' , default : {}, options : [ { displayName : 'Type' , name : 'type' , type : 'options' , options : [ { name : 'Automated' , value : 'automated' , }, { name : 'Past' , value : 'past' , }, { name : 'Upcoming' , value : 'upcoming' , }, ], default : '' , }, ], displayOptions : { // the resources and operations to display this element with show : { resource : [ // comma-separated list of resource names ], operation : [ // comma-separated list of operation names ] } }, } DateTime # The dateTime type provides a date picker. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { displayName : 'Modified Since' , name : 'modified_since' , type : 'dateTime' , default : '' , description : 'The date and time when the file was last modified' , displayOptions : { // the resources and operations to display this element with show : { resource : [ // comma-separated list of resource names ], operation : [ // comma-separated list of operation names ] } }, } Boolean # The boolean type adds a toggle for entering true or false. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { displayName : 'Wait for Image' , name : 'waitForImage' , type : 'boolean' , default : true , // Initial state of the toggle description : 'Whether to wait for the image or not' , displayOptions : { // the resources and operations to display this element with show : { resource : [ // comma-separated list of resource names ], operation : [ // comma-separated list of operation names ] } }, } Color # The color type provides a color selector. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { displayName : 'Background Color' , name : 'backgroundColor' , type : 'color' , default : '' , // Initially selected color displayOptions : { // the resources and operations to display this element with show : { resource : [ // comma-separated list of resource names ], operation : [ // comma-separated list of operation names ] } }, } Options # The options type adds an options list. Users can select a single value. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { displayName : 'Resource' , name : 'resource' , type : 'options' , options : [ { name : 'Image' , value : 'image' , }, { name : 'Template' , value : 'template' , }, ], default : 'image' , // The initially selected option description : 'Resource to consume' , displayOptions : { // the resources and operations to display this element with show : { resource : [ // comma-separated list of resource names ], operation : [ // comma-separated list of operation names ] } }, } Multi-options # The multiOptions type adds an options list. Users can select more than one value. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { displayName : 'Events' , name : 'events' , type : 'multiOptions' , options : [ { name : 'Plan Created' , value : 'planCreated' , }, { name : 'Plan Deleted' , value : 'planDeleted' , }, ], default : [], // Initially selected options description : 'The events to be monitored' , displayOptions : { // the resources and operations to display this element with show : { resource : [ // comma-separated list of resource names ], operation : [ // comma-separated list of operation names ] } }, } Filter # Use this component to evaluate, match, or filter incoming data. This is the code from n8n's own If node. It shows a filter component working with a collection component where users can configure the filter's behavior. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 { displayName : 'Conditions' , name : 'conditions' , placeholder : 'Add Condition' , type : 'filter' , default : {}, typeOptions : { filter : { // Use the user options (below) to determine filter behavior caseSensitive : '={{!$parameter.options.ignoreCase}}' , typeValidation : '={{$parameter.options.looseTypeValidation ? "loose" : "strict"}}' , }, }, }, { displayName : 'Options' , name : 'options' , type : 'collection' , placeholder : 'Add option' , default : {}, options : [ { displayName : 'Ignore Case' , description : 'Whether to ignore letter case when evaluating conditions' , name : 'ignoreCase' , type : 'boolean' , default : true , }, { displayName : 'Less Strict Type Validation' , description : 'Whether to try casting value types based on the selected operator' , name : 'looseTypeValidation' , type : 'boolean' , default : true , }, ], }, Assignment collection (drag and drop) # Use the drag and drop component when you want users to pre-fill name and value parameters with a single drag interaction. 1 2 3 4 5 6 { displayName : 'Fields to Set' , name : 'assignments' , type : 'assignmentCollection' , default : {}, }, You can see an example in n8n's Edit Fields (Set) node : Fixed collection # Use the fixedCollection type to group fields that are semantically related. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 { displayName : 'Metadata' , name : 'metadataUi' , placeholder : 'Add Metadata' , type : 'fixedCollection' , default : '' , typeOptions : { multipleValues : true , }, description : '' , options : [ { name : 'metadataValues' , displayName : 'Metadata' , values : [ { displayName : 'Name' , name : 'name' , type : 'string' , default : 'Name of the metadata key to add.' , }, { displayName : 'Value' , name : 'value' , type : 'string' , default : '' , description : 'Value to set for the metadata key.' , }, ], }, ], displayOptions : { // the resources and operations to display this element with show : { resource : [ // comma-separated list of resource names ], operation : [ // comma-separated list of operation names ] } }, } Resource locator # The resource locator element helps users find a specific resource in an external service, such as a card or label in Trello. The following options are available: ID URL List: allows users to select or search from a prepopulated list. This option requires more coding, as you must populate the list, and handle searching if you choose to support it. You can choose which types to include. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 { displayName : 'Card' , name : 'cardID' , type : 'resourceLocator' , default : '' , description : 'Get a card' , modes : [ { displayName : 'ID' , name : 'id' , type : 'string' , hint : 'Enter an ID' , validation : [ { type : 'regex' , properties : { regex : '^[0-9]' , errorMessage : 'The ID must start with a number' , }, }, ], placeholder : '12example' , // How to use the ID in API call url : '=http://api-base-url.com/?id={{$value}}' , }, { displayName : 'URL' , name : 'url' , type : 'string' , hint : 'Enter a URL' , validation : [ { type : 'regex' , properties : { regex : '^http' , errorMessage : 'Invalid URL' , }, }, ], placeholder : 'https://example.com/card/12example/' , // How to get the ID from the URL extractValue : { type : 'regex' , regex : 'example.com/card/([0-9]*.*)/' , }, }, { displayName : 'List' , name : 'list' , type : 'list' , typeOptions : { // You must always provide a search method // Write this method within the methods object in your base file // The method must populate the list, and handle searching if searchable: true searchListMethod : 'searchMethod' , // If you want users to be able to search the list searchable : true , // Set to true if you want to force users to search // When true, users can't browse the list // Or false if users can browse a list searchFilterRequired : true , }, }, ], displayOptions : { // the resources and operations to display this element with show : { resource : [ // comma-separated list of resource names ], operation : [ // comma-separated list of operation names ], }, }, }, Refer to the following for live examples: Refer to CardDescription.ts and Trello.node.ts in n8n's Trello node for an example of a list with search that includes searchFilterRequired: true . Refer to GoogleDrive.node.ts for an example where users can browse the list or search. Resource mapper # If your node performs insert, update, or upsert operations, you need to send data from the node in a format supported by the service you're integrating with. A common pattern is to use a Set node before the node that sends data, to convert the data to match the schema of the service you're connecting to. The resource mapper UI component provides a way to get data into the required format directly within the node, rather than using a Set node. The resource mapper component can also validate input data against the schema provided in the node, and cast input data into the expected type. Mapping and matching Mapping is the process of setting the input data to use as values when updating row(s). Matching is the process of using column names to identify the row(s) to update. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 { displayName : 'Columns' , name : 'columns' , // The name used to reference the element UI within the code type : 'resourceMapper' , // The UI element type default : { // mappingMode can be defined in the component (mappingMode: 'defineBelow') // or you can attempt automatic mapping (mappingMode: 'autoMapInputData') mappingMode : 'defineBelow' , // Important: always set default value to null value : null , }, required : true , // See "Resource mapper type options interface" below for the full typeOptions specification typeOptions : { resourceMapper : { resourceMapperMethod : 'getMappingColumns' , mode : 'update' , fieldWords : { singular : 'column' , plural : 'columns' , }, addAllFields : true , multiKeyMatch : true , supportAutoMap : true , matchingFieldsLabels : { title : 'Custom matching columns title' , description : 'Help text for custom matching columns' , hint : 'Below-field hint for custom matching columns' , }, }, }, }, Refer to the Postgres node (version 2) for a live example using a database schema. Refer to the Google Sheets node (version 2) for a live example using a schema-less service. Resource mapper type options interface # The typeOptions section must implement the following interface: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 export interface ResourceMapperTypeOptions { // The name of the method where you fetch the schema // Refer to the Resource mapper method section for more detail resourceMapperMethod : string ; // Choose the mode for your operation // Supported modes: add, update, upsert mode : 'add' | 'update' | 'upsert' ; // Specify labels for fields in the UI fieldWords ?: { singular : string ; plural : string }; // Whether n8n should display a UI input for every field when node first added to workflow // Default is true addAllFields ?: boolean ; // Specify a message to show if no fields are fetched from the service // (the call is successful but the response is empty) noFieldsError ?: string ; // Whether to support multi-key column matching // multiKeyMatch is for update and upsert only // Default is false // If true, the node displays a multi-select dropdown for the matching column selector multiKeyMatch ?: boolean ; // Whether to support automatic mapping // If false, n8n hides the mapping mode selector field and sets mappingMode to defineBelow supportAutoMap ?: boolean ; // Custom labels for the matching columns selector matchingFieldsLabels ?: { title ?: string ; description ?: string ; hint ?: string ; }; } Resource mapper method # This method contains your node-specific logic for fetching the data schema. Every node must implement its own logic for fetching the schema, and setting up each UI field according to the schema. It must return a value that implements the ResourceMapperFields interface: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 interface ResourceMapperField { // Field ID as in the service id : string ; // Field label displayName : string ; // Whether n8n should pre-select the field as a matching field // A matching field is a column used to identify the rows to modify defaultMatch : boolean ; // Whether the field can be used as a matching field canBeUsedToMatch ?: boolean ; // Whether the field is required by the schema required : boolean ; // Whether to display the field in the UI // If false, can't be used for matching or mapping display : boolean ; // The data type for the field // These correspond to UI element types // Supported types: string, number, dateTime, boolean, time, array, object, options type ?: FieldType ; // Added at runtime if the field is removed from mapping by the user removed ?: boolean ; // Specify options for enumerated types options ?: INodePropertyOptions []; } Refer to the Postgres resource mapping method and Google Sheets resource mapping method for live examples. JSON # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { displayName : 'Content (JSON)' , name : 'content' , type : 'json' , default : '' , description : '' , displayOptions : { // the resources and operations to display this element with show : { resource : [ // comma-separated list of resource names ], operation : [ // comma-separated list of operation names ] } }, } HTML # The HTML editor allows users to create HTML templates in their workflows. The editor supports standard HTML, CSS in <style> tags, and expressions wrapped in {{}} . Users can add <script> tags to pull in additional JavaScript. n8n doesn't run this JavaScript during workflow execution. 1 2 3 4 5 6 7 8 9 10 11 { displayName : 'HTML Template' , // The value the user sees in the UI name : 'html' , // The name used to reference the element UI within the code type : 'string' , typeOptions : { editor : 'htmlEditor' , }, default : placeholder , // Loads n8n's placeholder HTML template noDataExpression : true , // Prevent using an expression for the field description : 'HTML template to render' , }, Refer to Html.node.ts for a live example. Notice # Display a yellow box with a hint or extra info. Refer to Node UI design for guidance on writing good hints and info text. 1 2 3 4 5 6 { displayName : 'Your text here' , name : 'notice' , type : 'notice' , default : '' , }, Hints # There are two types of hints: parameter hints and node hints: Parameter hints are small lines of text below a user input field. Node hints are a more powerful and flexible option than Notice . Use them to display longer hints, in the input panel, output panel, or node details view. Add a parameter hint # Add the hint parameter to a UI element: 1 2 3 4 5 6 7 { displayName : 'URL' , name : 'url' , type : 'string' , hint : 'Enter a URL' , ... } Add a node hint # Define the node's hints in the hints property within the node description : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 description : INodeTypeDescription = { ... hints : [ { // The hint message. You can use HTML. message : "This node has many input items. Consider enabling <b>Execute Once</b> in the node\'s settings." , // Choose from: info, warning, danger. The default is 'info'. // Changes the color. info (grey), warning (yellow), danger (red) type : 'info' , // Choose from: inputPane, outputPane, ndv. By default n8n displays the hint in both the input and output panels. location : 'outputPane' , // Choose from: always, beforeExecution, afterExecution. The default is 'always' whenToDisplay : 'beforeExecution' , // Optional. An expression. If it resolves to true, n8n displays the message. Defaults to true. displayCondition : '={{ $parameter["operation"] === "select" && $input.all().length > 1 }}' } ] ... } Add a dynamic hint to a programmatic-style node # In programmatic-style nodes you can create a dynamic message that includes information from the node execution. As it relies on the node output data, you can't display this type of hint until after execution. 1 2 3 4 5 6 7 8 9 10 11 12 13 if ( operation === 'select' && items . length > 1 && ! node . executeOnce ) { // Expects two parameters: NodeExecutionData and an array of hints return new NodeExecutionOutput ( [ returnData ], [ { message : `This node ran ${ items . length } times, once for each input item. To run for the first item only, enable <b>Execute once</b> in the node settings.` , location : 'outputPane' , }, ], ); } return [ returnData ]; For a live example of a dynamic hint in a programmatic-style node, view the Split Out node code . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/advanced-ai/examples/understand-agents/

What's an agent in AI? # One way to think of an agent is as a chain that knows how to make decisions. Where a chain follows a predetermined sequence of calls to different AI components, an agent uses a language model to determine which actions to take. Agents are the part of AI that act as decision-makers. They can interact with other agents and tools . When you send a query to an agent, it tries to choose the best tools to use to answer. Agents adapt to your specific queries, as well as the prompts that configure their behavior. Agents in n8n # n8n provides one Agent node, which can act as different types of agent depending on the settings you choose. Refer to the Agent node documentation for details on the available agent types. When execute a workflow containing an agent, the agent runs multiple times. For example, it may do an initial setup, followed by a run to call a tool, then another run to evaluate the tool response and respond to the user. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/advanced-ai/examples/understand-chains/

What's a chain in AI? # Chains bring together different components of AI to create a cohesive system. They set up a sequence of calls between the components. These components can include models and memory (though note that in n8n chains can't use memory). Chains in n8n # n8n provides three chain nodes: Basic LLM Chain : use to interact with an LLM, without any additional components. Question and Answer Chain : can connect to a vector store using a retriever, or to an n8n workflow using the Workflow Retriever node. Use this if you want to create a workflow that supports asking questions about specific documents. Summarization Chain : takes an input and returns a summary. There's an important difference between chains in n8n and in other tools such as LangChain: none of the chain nodes support memory. This means they can't remember previous user queries. If you use LangChain to code an AI application, you can give your application memory. In n8n, if you need your workflow to support memory, use an agent. This is essential if you want users to be able to have a natural ongoing conversation with your app. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/advanced-ai/examples/understand-memory/

What's memory in AI? # Memory is a key part of AI chat services. The memory keeps a history of previous messages, allowing for an ongoing conversation with the AI, rather than every interaction starting fresh. AI memory in n8n # To add memory to your AI workflow you can use either: Window Buffer Memory : stores a customizable length of chat history for the current session. This is the easiest to get started with. One of the memory services that n8n provides nodes for. These include: Motorhead Redis Chat Memory Postgres Chat Memory Xata Zep If you need to do advanced AI memory management in your workflows, use the Chat Memory Manager node. This node is useful when you: Can't add a memory node directly. Need to do more complex memory management, beyond what the memory nodes offer. For example, you can add this node to check the memory size of the Agent node's response, and reduce it if needed. Want to inject messages to the AI that look like user messages, to give the AI more context. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/advanced-ai/examples/understand-tools/

What's a tool in AI? # In AI, 'tools' has a specific meaning. Tools act like addons that your AI can use to access extra context or resources. Here are a couple of other ways of expressing it: Tools are interfaces that an agent can use to interact with the world ( source ) We can think of these tools as being almost like functions that your AI model can call ( source ) AI tools in n8n # n8n provides tool sub-nodes that you can connect to your AI agent . As well as providing some popular tools, such as Wikipedia and SerpAPI , n8n provides three especially powerful tools: Custom n8n Workflow Tool : use this to load any n8n workflow as a tool. Custom Code Tool : write code that your agent can run. HTTP Request Tool : make calls to fetch a website or data from an API. The next three examples highlight the Custom n8n Workflow Tool: Chat with Google Sheets Call an API to fetch data Set up a human fallback You can also learn how to let AI dynamically specify parameters for tools with the $fromAI() function . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/advanced-ai/examples/understand-vector-databases/

What are vector databases? # Vector databases store information as numbers: A vector database is a type of database that stores data as high-dimensional vectors, which are mathematical representations of features or attributes. ( source ) This enables fast and accurate similarity searches. With a vector database, instead of using conventional database queries, you can search for relevant data based on semantic and contextual meaning. A simplified example # A vector database could store the sentence "n8n is a source-available automation tool that you can self-host", but instead of storing it as text, the vector database stores an array of dimensions (numbers between 0 and 1) that represent its features. This doesn't mean turning each letter in the sentence into a number. Instead, the vectors in the vector database describe the sentence. Suppose that in a vector store 0.1 represents automation tool , 0.2 represents source available , and 0.3 represents can be self-hosted . You could end up with the following vectors: Sentence Vector (array of dimensions) n8n is a source-available automation tool that you can self-host [0.1, 0.2, 0.3] Zapier is an automation tool [0.1] Make is an automation tool [0.1] Confluence is a wiki tool that you can self-host [0.3] This example is very simplified In practice, vectors are far more complex. A vector can range in size from tens to thousands of dimensions. The dimensions don't have a one-to-one relationship to a single feature, so you can't translate individual dimensions directly into single concepts. This example gives an approximate mental model, not a true technical understanding. Demonstrating the power of similarity search # Qdrant provides vector search demos to help users understand the power of vector databases. The food discovery demo shows how a vector store can help match pictures based on visual similarities. This demo uses data from Delivery Service. Users may like or dislike the photo of a dish, and the app will recommend more similar meals based on how they look. It's also possible to choose to view results from the restaurants within the delivery radius. ( source ) For full technical details, refer to the Qdrant demo-food-discovery GitHub repository . Embeddings, retrievers, text splitters, and document loaders # Vector databases require other tools to function: Document loaders and text splitters: document loaders pull in documents and data, and prepare them for embedding . Document loaders can use text splitters to break documents into chunks. Embeddings: these are the tools that turn the data (text, images, and so on) into vectors, and back into raw data. Note that n8n only supports text embeddings. Retrievers: retrievers fetch documents from vector databases. You need to pair them with an embedding to translate the vectors back into data. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/source-control-environments/understand/

Understand source control and environments # Feature availability Available on Enterprise. You need to be an n8n instance owner, admin, or project owner to set up source control, and to send work to and from Git. Environments in n8n : The purpose of environments, and how they work in n8n. Git in n8n : How n8n uses Git. Branch patterns : The possible relationships between n8n instances and Git branches. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/manage-cloud/update-cloud-version/

Update your Cloud version # n8n recommends regularly updating your Cloud version. Check the Release notes to learn more about changes. Info Only instance owners can upgrade n8n Cloud versions. Contact your instance owner if you don't have permission to update n8n Cloud. Log in to the n8n Cloud dashboard On your dashboard, select Manage . Use the n8n version dropdown to select your preferred release version: Latest Stable: recommended for most users. Latest Beta: get the newest n8n. This may be unstable. Select Save Changes to restart your n8n instance and perform the update. In the confirmation modal, select Confirm . Best practices for updating # Update frequently: this avoids having to jump multiple versions at once, reducing the risk of a disruptive update. Try to update at least once a month. Check the Release notes for breaking changes. Use Environments to create a test version of your instance. Test the update there first. Automatic update # n8n automatically updates outdated Cloud instances. If you don't update you instance for 120 days, n8n emails you to warn you to update. After a further 30 days, n8n automatically updates your instance. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/community-nodes/usage/

Using community nodes # To use community nodes, you first need to install them. Adding community nodes to your workflow # After installing a community node, you can use it like any other node. n8n displays the node in search results in the Nodes panel. n8n marks community nodes with a Package icon in the nodes panel. Community nodes with duplicate names # It's possible for several community nodes to have the same name. If you use two nodes with the same name in your workflow, they'll look the same, unless they have different icons. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/user-management-self-hosted/

Configure self-hosted n8n for user management # User management in n8n allows you to invite people to work in your n8n instance. This document describes how to configure your n8n instance to support user management, and the steps to start inviting users. Refer to the main User management guide for more information about usage, including: Managing users Account types Best practices For LDAP setup information, refer to LDAP . For SAML setup information, refer to SAML . Basic auth and JWT removed n8n removed support for basic auth and JWT in version 1.0. Setup # There are three stages to set up user management in n8n: Configure your n8n instance to use your SMTP server. Start n8n and follow the setup steps in the app. Invite users. Step one: SMTP # n8n recommends setting up an SMTP server, for user invites and password resets. Optional from 0.210.1 From version 0.210.1 onward, this step is optional. You can choose to manually copy and send invite links instead of setting up SMTP. Note that if you skip this step, users can't reset passwords. Get the following information from your SMTP provider: Server name SMTP username SMTP password SMTP sender name To set up SMTP with n8n, configure the SMTP environment variables for your n8n instance. For information on how to set environment variables, refer to Configuration Variable Type Description Required? N8N_EMAIL_MODE string smtp Required N8N_SMTP_HOST string your_SMTP_server_name Required N8N_SMTP_PORT number your_SMTP_server_port Default is 465 . Optional N8N_SMTP_USER string your_SMTP_username Optional N8N_SMTP_PASS string your_SMTP_password Optional N8N_SMTP_OAUTH_SERVICE_CLIENT string your_OAuth_service_client Optional N8N_SMTP_OAUTH_PRIVATE_KEY string your_OAuth_private_key Optional N8N_SMTP_SENDER string Sender email address. You can optionally include the sender name. Example with name: N8N <contact@n8n.com> Required N8N_SMTP_SSL boolean Whether to use SSL for SMTP (true) or not (false). Defaults to true . Optional N8N_UM_EMAIL_TEMPLATES_INVITE string Full path to your HTML email template. This overrides the default template for invite emails. Optional N8N_UM_EMAIL_TEMPLATES_PWRESET string Full path to your HTML email template. This overrides the default template for password reset emails. Optional N8N_UM_EMAIL_TEMPLATES_WORKFLOW_SHARED String Overrides the default HTML template for notifying users that a credential was shared. Provide the full path to the template. Optional N8N_UM_EMAIL_TEMPLATES_CREDENTIALS_SHARED String Overrides the default HTML template for notifying users that a credential was shared. Provide the full path to the template. Optional If your n8n instance is already running, you need to restart it to enable the new SMTP settings. More configuration options There are more configuration options available as environment variables. Refer to Environment variables for a list. These include options to disable tags, workflow templates, and the personalization survey, if you don't want your users to see them. New to SMTP? If you're not familiar with SMTP, this blog post by SendGrid offers a short introduction, while Wikipedia's Simple Mail Transfer Protocol article provides more detailed technical background. Step two: In-app setup # When you set up user management for the first time, you create an owner account. Open n8n. The app displays a signup screen. Enter your details. Your password must be at least eight characters, including at least one number and one capital letter. Click Next . n8n logs you in with your new owner account. Step three: Invite users # You can now invite other people to your n8n instance. Sign into your workspace with your owner account. (If you are in the Admin Panel open your Workspace from the Dashboard) Click the three dots next to your user icon at the bottom left and click Settings . n8n opens your Personal settings page. Click Users to go to the Users page. Click Invite . Enter the new user's email address. Click Invite user . n8n sends an email with a link for the new user to join. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/user-management-smtp-2fa/

User management SMTP, and two-factor authentication environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. Refer to User management for more information on setting up user management and emails. Variable Type Default Description N8N_EMAIL_MODE String smtp Enable emails. N8N_SMTP_HOST String - your_SMTP_server_name N8N_SMTP_PORT Number - your_SMTP_server_port N8N_SMTP_USER String - your_SMTP_username N8N_SMTP_PASS String - your_SMTP_password N8N_SMTP_OAUTH_SERVICE_CLIENT String - If using 2LO with a service account this is your client ID N8N_SMTP_OAUTH_PRIVATE_KEY String - If using 2LO with a service account this is your private key N8N_SMTP_SENDER String - Sender email address. You can optionally include the sender name. Example with name: N8N <contact@n8n.com> N8N_SMTP_SSL Boolean true Whether to use SSL for SMTP (true) or not (false). N8N_SMTP_STARTTLS Boolean true Whether to use STARTTLS for SMTP (true) or not (false). N8N_UM_EMAIL_TEMPLATES_INVITE String - Full path to your HTML email template. This overrides the default template for invite emails. N8N_UM_EMAIL_TEMPLATES_PWRESET String - Full path to your HTML email template. This overrides the default template for password reset emails. N8N_UM_EMAIL_TEMPLATES_WORKFLOW_SHARED String - Overrides the default HTML template for notifying users that a workflow was shared. Provide the full path to the template. N8N_UM_EMAIL_TEMPLATES_CREDENTIALS_SHARED String - Overrides the default HTML template for notifying users that a credential was shared. Provide the full path to the template. N8N_USER_MANAGEMENT_JWT_SECRET String - Set a specific JWT secret. By default, n8n generates one on start. N8N_USER_MANAGEMENT_JWT_DURATION_HOURS Number 168 Set an expiration date for the JWTs in hours. N8N_USER_MANAGEMENT_JWT_REFRESH_TIMEOUT_HOURS Number 0 How many hours before the JWT expires to automatically refresh it. 0 means 25% of N8N_USER_MANAGEMENT_JWT_DURATION_HOURS . -1 means it will never refresh, which forces users to log in again after the period defined in N8N_USER_MANAGEMENT_JWT_DURATION_HOURS . N8N_MFA_ENABLED Boolean true Whether to enable two-factor authentication (true) or disable (false). n8n ignores this if existing users have 2FA enabled. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/user-management/

User management # User management in n8n allows you to invite people to work in your n8n instance. It includes: Login and password management Adding and removing users Three account types : Owner and Member (and Admin for Pro & Enterprise plans) Privacy The user management feature doesn't send personal information, such as email or username, to n8n. Setup guides # This section contains most usage information for user management, and the Cloud setup guide . If you self-host n8n, there are extra steps to configure your n8n instance. Refer to the Self-hosted guide . This section includes guides to configuring LDAP and SAML in n8n. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/api/using-api-playground/

Using the API playground # Feature availability The API playground isn't available on Cloud. It's available for all self-hosted pricing tiers. The n8n API comes with a built-in Swagger UI playground in self-hosted versions. This provides interactive documentation, where you can try out requests. The path to access the playground depends on your hosting. n8n constructs the path from values set in your environment variables: 1 N8N_HOST:N8N_PORT/N8N_PATH/api/v<api-version-number>/docs The API version number is 1 . There may be multiple versions available in the future. Real data If you select Authorize and enter your API key in the API playground, you have access to your live data. This is useful for trying out requests. Be aware you can change or delete real data. The API includes built-in documentation about credential formats. This is available using the credentials endpoint: 1 N8N_HOST:N8N_PORT/N8N_PATH/api/v<api-version-number>/credentials/schema/ { credentialTypeName } How to find credentialTypeName To find the type, download your workflow as JSON and examine it. For example, for a Google Drive node the {credentialTypeName} is googleDriveOAuth2Api : 1 2 3 4 5 6 7 8 9 { ... , "credentials" : { "googleDriveOAuth2Api" : { "id" : "9" , "name" : "Google Drive" } } } Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/advanced-ai/examples/using-the-fromai-function/

Let AI specify the tool parameters # When configuring app node tools connected to the Tools Agent, many parameters can be filled in by the AI model itself. The AI model will use the context from the task and information from other connected tools to fill in the appropriate details. There are two ways to do this, and you can switch between them. Let the model fill in the parameter # Each appropriate parameter field in the tool's editing dialog has an extra button at the end: On activating this button, the AI Agent will fill in the expression for you, with no need for any further user input. The field itself is filled in with a message indicating that the parameter has been defined automatically by the model. If you want to define the parameter yourself, click on the 'X' in this box to revert to user-defined values. Note that the 'expression' field will now contain the expression generated by this feature, though you can now edit it further to add extra details as described in the following section. Warning Activating this feature will overwrite any manual definition you may have already added. Use the $fromAI() function # The $fromAI() function uses AI to dynamically fill in parameters for tools connected to the Tools AI agent . You can use the $fromAI() function in expressions within app nodes (like Gmail , Notion , or Slack ) which are connected to the AI Agent as tools. Only for the Node Tools The $fromAI() function is only available for app node tools connected to the Tools Agent. It isn't possible to use the $fromAI() function with the Call n8n Workflow , Code , HTTP Request , or other cluster sub-nodes . To use the $fromAI() function, call it with the required key parameter: 1 {{ $fromAI ( 'email' ) }} The key parameter and other arguments to the $fromAI() function aren't references to existing values. Instead, think of these arguments as hints that the AI model will use to populate the right data. For instance, if you choose a key called email , the AI Model will look for an email address in its context, other tools, and input data. In chat workflows, it may ask the user for an email address if it can't find one elsewhere. You can optionally pass other parameters like description to give extra context to the AI model. Parameters # The $fromAI() function accepts the following parameters: Parameter Type Required? Description key string A string representing the key or name of the argument. This must be between 1 and 64 characters in length and can only contain lowercase letters, uppercase letters, numbers, underscores, and hyphens. description string A string describing the argument. type string A string specifying the data type. Can be string, number, boolean, or json (defaults to string). defaultValue any The default value to use for the argument. Examples # As an example, you could use the following $fromAI() expression to dynamically populate a field with a name: 1 $fromAI ( "name" , "The commenter's name" , "string" , "Jane Doe" ) If you don't need the optional parameters, you could simplify this as: 1 $fromAI ( "name" ) To dynamically populate the number of items you have in stock, you could use a $fromAI() expression like this: 1 $fromAI ( "numItemsInStock" , "Number of items in stock" , "number" , 5 ) If you only want to fill in parts of a field with a dynamic value from the model, you can use it in a normal expression as well. For example, if you want the model to fill out the subject parameter for an e-mail, but always pre-fix the generated value with the string 'Generated by AI:', you could use the following expression: 1 Generated by AI : {{ $fromAI ( "subject" ) }} Templates # You can see the $fromAI() function in action in the following templates : Angie, Personal AI Assistant with Telegram Voice and Text Automate Customer Support Issue Resolution using AI Text Classifier Scale Deal Flow with a Pitch Deck AI Vision, Chatbot and QDrant Vector Store Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/source-control-environments/using/

Using source control and environments # Feature availability Available on Enterprise. You need to be an n8n instance owner, admin, or project owner to set up source control, and to send work to and from Git. Push and pull : Send work to Git, and fetch work from Git to your instance. Understand what gets committed, and how n8n handles merge conflicts. Copy work between environments : How to copy work between different n8n instances. Manage variables : Manage variable values using the n8n API and source control. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/code/variables/

Custom variables # Feature availability Available on Self-hosted Enterprise and Pro Cloud plans. You need access to the n8n instance owner account to create and edit variables. All users can use existing variables. Available in version 0.225.0 and above. Custom variables are read-only variables that you can use to store and reuse values in n8n workflows. Variables are shared When you create a variable, it's available to everyone on your n8n instance. Create variables # To create a new variable: On the Variables page, select Add Variable . Enter a Key and Value . The maximum key length is 50 characters, and the maximum value length is 220 characters. n8n limits the characters you can use in the key and value to lowercase and uppercase letters, numbers, and underscores ( A-Z , a-z , 0-9 , _ ). Select Save . The variable is now available for use in all workflows in the n8n instance. Edit and delete variables # To edit or delete a variable: On the Variables page, hover over the variable you want to change. Select Edit or Delete . Use variables in workflows # You can access variables in the Code node and in expressions : 1 2 // Access a variable $vars . < variable - name > All variables are strings. During workflow execution, n8n replaces the variables with the variable value. If the variable has no value, n8n treats its value as undefined . Workflows don't automatically fail in this case. Variables are read-only. You must use the UI to change the values. If you need to set and access custom data within your workflow, use Workflow static data . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/advanced-ai/examples/vector-store-website/

Populate a Pinecone vector database from a website # Use n8n to scrape a website, load the data into Pinecone, then query it using a chat workflow. This workflow uses the HTTP node to get website data, extracts the relevant content using the HTML node , then uses the Pinecone Vector Store node to send it to Pinecone. View workflow file Key features # This workflow uses: HTTP node : fetches website data. HTML node : simplifies the data by extracting the main content from the page. Pinecone Vector Store node and Embeddings OpenAI : transform the data into vectors and store it in Pinecone. Chat Trigger and Question and Answer Chain to query the vector database. Using the example # To load the template into your n8n instance: Download the workflow JSON file. Open a new workflow in your n8n instance. Copy in the JSON, or select Workflow menu > Import from file... . The example workflows use Sticky Notes to guide you: Yellow: notes and information. Green: instructions to run the workflow. Orange: you need to change something to make the workflow work. Blue: draws attention to a key feature of the example. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows/try-it-out/quickstart/very-quick-quickstart-workflow.json

{ "nodes": [ { "parameters": { "operation": "getAllPeople", "returnAll": true }, "id": "ed1fd9cd-cc4f-4e0e-ba73-9f842db382c3", "name": "Customer Datastore", "type": "n8n-nodes-base.n8nTrainingCustomerDatastore", "position": [ 540, 280 ], "typeVersion": 1 }, { "parameters": { "content": "**Get fake sample data**", "height": 300, "width": 220 }, "id": "5ddf393f-62b8-4240-adf8-f9a8f539df4b", "name": "Note1", "type": "n8n-nodes-base.stickyNote", "position": [ 480, 180 ], "typeVersion": 1 }, { "parameters": { "content": "**Extract data and prepare it for use in the next node**", "height": 300, "width": 220 }, "id": "6ad194ea-9821-40eb-ae2c-f50cc030300b", "name": "Note2", "type": "n8n-nodes-base.stickyNote", "position": [ 760, 180 ], "typeVersion": 1 }, { "parameters": {}, "id": "5af4b83b-31b6-4c29-aa55-3449f3851e2a", "name": "When clicking \"Test Workflow\"", "type": "n8n-nodes-base.manualTrigger", "position": [ 300, 280 ], "typeVersion": 1 }, { "parameters": { "assignments": { "assignments": [ { "id": "df041e3c-fc09-4ba2-8e6b-37f2c6a02526", "name": "customer_id", "type": "string", "value": "={{ $json.id }}" }, { "id": "bf288953-4fef-4f55-a45f-c223714919c0", "name": "customer_name", "type": "string", "value": "={{ $json.name }}" }, { "id": "1cff0b21-6740-4697-9d2c-9bcb045af0be", "name": "customer_description", "type": "string", "value": "={{ $json.notes }}" } ] }, "options": {} }, "id": "5dcd5776-5137-4f97-8b76-9f38e1d9ff9e", "name": "Edit Fields1", "type": "n8n-nodes-base.set", "position": [ 820, 280 ], "typeVersion": 3.3 }, { "parameters": { "customerId": "={{ $json.customer_id }}", "message": "=Hi {{ $json.customer_name }}. Your description is: {{ $json.customer_description }}" }, "type": "n8n-nodes-base.n8nTrainingCustomerMessenger", "typeVersion": 1, "position": [ 1040, 280 ], "id": "a726dcfd-f491-440f-ad64-6ba17472352f", "name": "Customer Messenger (n8n training)" } ], "connections": { "Customer Datastore": { "main": [ [ { "node": "Edit Fields1", "type": "main", "index": 0 } ] ] }, "When clicking \"Test Workflow\"": { "main": [ [ { "node": "Customer Datastore", "type": "main", "index": 0 } ] ] }, "Edit Fields1": { "main": [ [ { "node": "Customer Messenger (n8n training)", "type": "main", "index": 0 } ] ] } }, "pinData": {}, "meta": { "instanceId": "cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7" } }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/video-courses/

Video courses # n8n provides two video courses on YouTube. For support, join the Forum . Beginner # The Beginner course covers the basics of n8n: Introduction and workflows APIs and Webhooks Nodes Data in n8n Core workflow concepts Useful nodes Error handling Debugging Collaboration Advanced # The Advanced course covers more complex workflows, more technical nodes, and enterprise features: Introduction and complex data flows Advanced technical nodes Pinning and editing output data Sub-workflows Error workflows Building a full example Handling files Enterprise features Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/flow-logic/waiting/

Waiting # Waiting allows you to pause a workflow mid-execution, then resume where the workflow left off, with the same data. This is useful if you need to rate limit your calls to a service, or wait for an external event to complete. You can wait for a specified duration, or until a webhook fires. Making a workflow wait uses the Wait node. Refer to the node documentation for usage details. n8n provides a workflow template with a basic example of Rate limiting and waiting for external events . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/_workflows/integrations/builtin/core-nodes/n8n-nodes-base.extractfromfile/webhook-example.json

{ "name": "Extract from file example", "nodes": [ { "parameters": { "httpMethod": "POST", "path": "06696ea7-9dc7-464a-873b-3feb095b0874", "options": { "rawBody": true } }, "type": "n8n-nodes-base.webhook", "typeVersion": 2, "position": [ -380, -80 ], "id": "dfbd51af-6050-47c5-a26c-74cba77f65f7", "name": "Webhook", "webhookId": "06696ea7-9dc7-464a-873b-3feb095b0874" }, { "parameters": { "options": { "headerRow": false } }, "type": "n8n-nodes-base.extractFromFile", "typeVersion": 1, "position": [ -160, -80 ], "id": "1b1e4643-8269-402b-83af-dfd90fd6a0b5", "name": "Extract from File" } ], "pinData": {}, "connections": { "Webhook": { "main": [ [ { "node": "Extract from File", "type": "main", "index": 0 } ] ] } }, "active": true, "settings": { "executionOrder": "v1" }, "versionId": "dd2bf7f1-692a-41a8-9c2e-7931de57fa13", "meta": { "instanceId": "1060f46e51fc7902c377ab29d7cbfb87696ddf6b3c5c27cbbb65c3cb36e21baf" }, "id": "9i3iDZf5MpjlJ2sh", "tags": [] }
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/configuration-examples/webhook-url/

Configure n8n webhooks with reverse proxy # n8n creates the webhook URL by combining N8N_PROTOCOL , N8N_HOST and N8N_PORT . If n8n runs behind a reverse proxy, that won't work. That's because n8n runs internally on port 5678 but the reverse proxy exposes it to the web on port 443. In that case, it's important to set the webhook URL manually so that n8n can display it in the Editor UI and register the correct webhook URLs with external services. 1 export WEBHOOK_URL = https://n8n.example.com/ Refer to Environment variables reference for more information on this variable. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/privacy-security/what-you-can-do/

What you can do # It's also your responsibility as a customer to ensure you are securing your code and data. This document lists some steps you can take. All users # Report security issues and terms of service violations to security@n8n.io. If more than one person uses your n8n instance, set up User management and follow the Best practices . Use OAuth to connect integrations whenever possible. Self-hosted users # If you self-host n8n, there are additional steps you can take: Set up a reverse proxy to handle TLS, ensuring data is encrypted in transit. Ensure data is encrypted at rest by using encrypted partitions, or encryption at the hardware level, and ensuring n8n and its database is written to that location. Run a Security audit . Be aware of the Risks when installing community nodes, or choose to disable them. Make sure users can't import external modules in the Code node. Refer to Environment variables | Nodes for more information. Choose to exclude certain nodes. For example, you can disable nodes like Execute Command or SSH. Refer to Environment variables | Nodes for more information. For maximum privacy, you can Isolate n8n . GDPR for self-hosted users # If you self-host n8n, you are responsible for deleting user data. If you need to delete data on behalf of one of your users, you can delete the respective execution. n8n recommends configuring n8n to prune execution data automatically every few days to avoid effortful GDPR request handling as much as possible. Configure this using the EXECUTIONS_DATA_MAX_AGE environment variable. Refer to Environment variables for more information. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/hosting/configuration/environment-variables/workflows/

Workflows environment variables # File-based configuration You can add _FILE to individual variables to provide their configuration in a separate file. Refer to Keeping sensitive data in separate files for more details. Variable Type Default Description N8N_ONBOARDING_FLOW_DISABLED Boolean false Whether to disable onboarding tips when creating a new workflow (true) or not (false). N8N_WORKFLOW_ACTIVATION_BATCH_SIZE Number 1 How many workflows to activate simultaneously during startup. N8N_WORKFLOW_CALLER_POLICY_DEFAULT_OPTION String workflowsFromSameOwner Which workflows can call a workflow. Options are: any , none , workflowsFromAList , workflowsFromSameOwner . This feature requires Workflow sharing . N8N_WORKFLOW_TAGS_DISABLED Boolean false Whether to disable workflow tags (true) or enable tags (false). WORKFLOWS_DEFAULT_NAME String My workflow The default name used for new workflows. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/workflows/

Workflows # A workflow is a collection of nodes connected together to automate a process. Create a workflow. Use Workflow templates to help you get started. Learn about the key components of an automation in n8n. Debug using the Executions list. Share workflows between users. If it's your first time building a workflow, you may want to use the quickstart guides to quickly try out n8n features. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================
