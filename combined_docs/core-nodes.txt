### Combined Content for core-nodes ###


================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/common-issues/

Common issues and questions # Here are some common issues and questions for the Webhook node and suggested solutions. Listen for multiple HTTP methods # By default, the Webhook node accepts calls that use a single method. For example, it can accept GET or POST requests, but not both. If you want to accept calls using multiple methods: Open the node Settings . Turn on Allow Multiple HTTP Methods . Return to Parameters . By default, the node now accepts GET and POST calls. You can add other methods in the HTTP Methods field. The Webhook node has an output for each method, so you can perform different actions depending on the method. Use the HTTP Request node to trigger the Webhook node # The HTTP Request node makes HTTP requests to the URL you specify. Create a new workflow. Add the HTTP Request node to the workflow. Select a method from the Request Method dropdown list. For example, if you select GET as the HTTP method in your Webhook node, select GET as the request method in the HTTP Request node. Copy the URL from the Webhook node, and paste it in the URL field in the HTTP Request node. If using the test URL for the webhook node: execute the workflow with the Webhook node. Execute the HTTP Request node. Use curl to trigger the Webhook node # You can use curl to make HTTP requests that trigger the Webhook node. Note In the examples, replace <https://your-n8n.url/webhook/path> with your webhook URL. The examples make GET requests. You can use whichever HTTP method you set in HTTP Method . Make an HTTP request without any parameters: 1 curl --request GET <https://your-n8n.url/webhook/path> Make an HTTP request with a body parameter: 1 curl --request GET <https://your-n8n.url/webhook/path> --data 'key=value' Make an HTTP request with header parameter: 1 curl --request GET <https://your-n8n.url/webhook/path> --header 'key=value' Make an HTTP request to send a file: 1 curl --request GET <https://your-n8n.url/webhook/path> --from 'key=@/path/to/file' Replace /path/to/file with the path of the file you want to send. Send a response of type string # By default, the response format is JSON or an array. To send a response of type string: Select Response Mode > When Last Node Finishes . Select Response Data > First Entry JSON . Select Add Option > Property Name . Enter the name of the property that contains the response. This defaults to data . Connect an Edit Fields node to the Webhook node. In the Edit Fields node, select Add Value > String . Enter the name of the property in the Name field. The name should match the property name from step 4. Enter the string value in the Value field. Toggle Keep Only Set to on (green). When you call the Webhook, it sends the string response from the Edit Fields node. Test URL versus Production URL # n8n generates two Webhook URLs for each Webhook node: a Test URL and a Production URL . While building or testing a workflow, use the Test URL . Once you're ready to use your Webhook URL in production, use the Production URL . URL type How to trigger Listening duration Data shown in editor UI? Test URL Select Listen for test event and trigger a test event from the source. 120 seconds Production URL Activate the workflow Until workflow deactivated Refer to Workflow development for more information. IPs in Whitelist are failing to connect # If you're unable to connect from IPs in your IP Whitelist, check if you are running n8n behind a reverse proxy. If so, set the N8N_PROXY_HOPS environment variable to the number of reverse-proxies n8n is running behind. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executecommand/common-issues/

Execute Command node common issues # Here are some common errors and issues with the Execute Command node and steps to resolve or troubleshoot them. Command failed: <command> /bin/sh: <command>: not found # This error occurs when the shell environment can't find one of the commands in the Command parameter. To fix this error, review the following: Check that the command and its arguments don't have typos in the Command parameter. Check that the command is in the PATH of the user running n8n. If you are running n8n with Docker, check if the command is available within the container by trying to run it manually. If your command isn't included in the container, you might have to extend the official n8n image with a custom image that includes your command. If n8n is already running: 1 2 3 4 # Find n8n's container ID, it will be the first column docker ps | grep n8n # Try to execute the command within the running container docker container exec <container_ID> <command_to_run> If n8n isn't running: 1 2 3 # Start up a new container that runs the command instead of n8n # Use the same image and tag that you use to run n8n normally docker run -it --rm --entrypoint /bin/sh docker.n8n.io/n8nio/n8n -c <command_to_run> Error: stdout maxBuffer length exceeded # This error happens when your command returns more output than the Execute Command node is able to process at one time. To avoid this error, reduce output your command produces. Check your command's manual page or documentation to see if there are flags to limit or filter output. If not, you may need to pipe the output to another command to remove unneeded info. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger/common-issues/

Schedule Trigger node common issues # Here are some common errors and issues with the Schedule Trigger node and steps to resolve or troubleshoot them. Invalid cron expression # This error occurs when you set Trigger Interval to Custom (Cron) and n8n doesn't understand your cron expression. This may mean that there is a mistake in your cron expression or that you're using an incompatible syntax. To debug, check that the following: That your cron expression follows the syntax used in the cron examples That your cron expression (after removing the seconds column ) validates on crontab guru Scheduled workflows run at the wrong time # If the Schedule Trigger node runs at the wrong time, it may mean that you need to adjust the time zone n8n uses. Adjust the timezone globally # If you're using n8n Cloud , follow the instructions on the set the Cloud instance timezone page to ensure that n8n executes in sync with your local time. If you're self hosting , set your global timezone using the GENERIC_TIMEZONE environment variable . Adjust the timezone for an individual workflow # To set the timezone for an individual workflow: Open the workflow on the canvas. Select the Three dots icon in the upper-right corner. Select Settings . Change the Timezone setting. Select Save . Variables not working as expected # While variables can be used in the scheduled trigger, their values only get evaluated when the workflow is activated. After activating the worfklow, you can alter a variable's value in the settings but it won't change how often the workflow runs. To work around this, you must stop and then re-activate the workflow to apply the updated variable value. Changing the trigger interval # You can update the scheduled trigger interval at any time but it only gets updated when the workflow is activated. If you change the trigger interval after the workflow is active, the changes won't take effect until you stop and then re-activate the workflow. Also, the schedule begins from the time when you activate the workflow. For example, if you had originally set a schedule of every 1 hour and it should execute at 12:00, if you changed it to a 2 hour schedule and re-activated the workflow at 11:30, the next execution will be at 13:30, 2 hours from when you activated it. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/common-issues/

Code node common issues # Here are some common errors and issues with the Code node and steps to resolve or troubleshoot them. Code doesn't return items properly # This error occurs when the code in your Code node doesn't return data in the expected format. In n8n, all data passed between nodes is an array of objects. Each of these objects wraps another object with the json key: 1 2 3 4 5 6 7 [ { "json" : { // your data goes here } } ] To troubleshoot this error, check the following: Read the data structure to understand the data you receive in the Code node and the requirements for outputting data from the node. Understand how data items work and how to connect data items from previous nodes with item linking . A 'json' property isn't an object # This error occurs when the Code node returns data where the json key isn't pointing to an object. This may happen if you set json to a different data structure, like an array: 1 2 3 4 5 6 7 [ { "json" : [ // Setting `json` to an array like this will produce an error ] } ] To resolve this, ensure that the json key references an object in your return data: 1 2 3 4 5 6 7 [ { "json" : { // Setting `json` to an object as expected } } ] Code doesn't return an object # This error may occur when your Code node doesn't return anything or if it returns an unexpected result. To resolve this, ensure that your Code node returns the expected data structure : 1 2 3 4 5 6 7 [ { "json" : { // your data goes here } } ] This error may also occur if the code you provided returns 'undefined' instead of the expected result. In that case, ensure that the data you are referencing in your Code node exists in each execution and that it has the structure your code expects. 'import' and 'export' may only appear at the top level # This error occurs if you try to use import or export in the Code node. These aren't supported by n8n's JavaScript sandbox. Instead, use the require function to load modules. To resolve this issue, try changing your import statements to use require : 1 2 3 4 // Original code: // import express from "express"; // New code: const express = require ( "express" ); Cannot find module '<module>' # This error occurs if you try to use require in the Code node and n8n can't find the module. Only for self-hosted n8n doesn't support importing modules in the Cloud version. If you're self-hosting n8n, follow these steps: Install the module into your n8n environment. If you are running n8n with npm , install the module in the same environment as n8n. If you are running n8n with Docker , you need to extend the official n8n image with a custom image that includes your module. Set the NODE_FUNCTION_ALLOW_BUILTIN and NODE_FUNCTION_ALLOW_EXTERNAL environment variables to allow importing modules. Using global variables # Sometimes you may wish to set and retrieve simple global data related to a workflow across and within executions. For example, you may wish to include the date of the previous report when compiling a report with a list of project updates. To set, update, and retrieve data directly to a workflow, use the static data functions within your code. You can manage data either globally or tied to specific nodes. Use Remove Duplicates when possible If you're interested in using variables to avoid processing the same data items more than once, consider using the Remove Duplicates node instead. The Remove Duplicates node can save information across executions to avoid processing the same items multiple times. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.chattrigger/common-issues/

Chat Trigger node common issues # Here are some common errors and issues with the Chat Trigger node and steps to resolve or troubleshoot them. Pass data from a website to an embedded Chat Trigger node # When embedding the Chat Trigger node in a website, you might want to pass extra information to the Chat Trigger. For example, passing a user ID stored in a site cookie. To do this, use the metadata field in the JSON object you pass to the createChat function in your embedded chat window: 1 2 3 4 5 6 createChat ({ webhookUrl : 'YOUR_PRODUCTION_WEBHOOK_URL' , metadata : { 'YOUR_KEY' : 'YOUR_DATA' }; }); The metadata field can contain arbitrary data that will appear in the Chat Trigger output alongside other output data. From there, you can query and process the data from downstream nodes as usual using n8n's data processing features . Chat Trigger node doesn't fetch previous messages # When you configure a Chat Trigger node, you might experience problems fetching previous messages if you aren't careful about how you configure session loading. This often manifests as a workflow could not be started! error. In Chat Triggers, the Load Previous Session option retrieves previous chat messages for a session using the sessionID . When you set the Load Previous Session option to From memory , it's almost always best to connect the same memory node to both the Chat Trigger and the Agent in your workflow: In your Chat Trigger node, set the Load Previous Session option to From Memory . This is only visible if you've made the chat publicly available. Attach a Window Buffer Memory node to the Memory connector. Attach the same Window Buffer Memory node to Memory connector of your Agent . In the Window Buffer Memory node, set Session ID to Connected Chat Trigger Node . One instance where you may want to attach separate memory nodes to your Chat Trigger and the Agent is if you want to set the Session ID in your memory node to Define below . If you're retrieving the session ID from an expression, the same expression must work for each of the nodes attached to it. If the expression isn't compatible with each of the nodes that need memory, you might need to use separate memory nodes so you can customize the expression for the session ID on a per-node basis. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/common-issues/

HTTP Request node common issues # Here are some common errors and issues with the HTTP Request node and steps to resolve or troubleshoot them. Bad request - please check your parameters # This error displays when the node receives a 400 error indicating a bad request. This error most often occurs because: You're using an invalid name or value in a Query Parameter . You're passing array values in a Query Parameter but the array isn't formatted correctly. Try using the Array Format in Query Parameters option. Review the API documentation for your service to format your query parameters. The resource you are requesting could not be found # This error displays when the endpoint URL you entered is invalid. This may be due to a typo in the URL or a deprecated API. Refer to your service's API documentation to verify you have a valid endpoint. JSON parameter need to be an valid JSON # This error displays when you've passed a parameter as JSON and it's not formatted as valid JSON. To resolve, review the JSON you've entered for these issues: Test your JSON in a JSON checker or syntax parser to find errors like missing quotation marks, extra or missing commas, incorrectly formatted arrays, extra or missing square brackets or curly brackets, and so on. If you've used an Expression in the node, be sure you've wrapped the entire JSON in double curly brackets, for example: 1 2 3 4 5 6 7 8 9 10 11 {{ { "myjson": { "name1": "value1", "name2": "value2", "array1": ["value1","value2"] } } }} Forbidden - perhaps check your credentials # This error displays when the node receives a 403 error indicating authentication failed. To resolve, review the selected credentials and make sure you can authenticate with them. You may need to: Update permissions or scopes so that your API key or account can perform the operation you've selected. Format your generic credential in a different way. Generate a new API key or token with the appropriate permissions or scopes. 429 - The service is receiving too many requests from you # This error displays when the node receives a 429 error from the service that you're calling. This often means that you have hit the rate limits of that service. You can find out more on the Handling API rate limits page. To resolve the error, you can use one of the built-in options of the HTTP request node: Batching # Use this option to send requests in batches and introduce a delay between them. In the HTTP Request node, select Add Option > Batching . Set Items per Batch to the number of input items to include in each request. Set Batch Interval (ms) to introduce a delay between requests in milliseconds. For example, to send one request to an API per second, set Batch Interval (ms) to 1000 . Retry on Fail # Use this option to retry the node after a failed attempt. In the HTTP Request node, go to Settings and enable Retry on Fail . Set Max Tries to the maximum number of times n8n should retry the node. Set Wait Between Tries (ms) to the desired delay in milliseconds between retries. For example, to wait one second before retrying the request again, set Wait Between Tries (ms) to 1000 . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/

Core nodes library # This section provides information about n8n's core nodes . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/keyboard-shortcuts/

Keyboard shortcuts when using the Code editor # The Code node editing environment supports a range of keyboard shortcuts to speed up and enhance your experience. Select the appropriate tab to see the relevant shortcuts for your operating system. Cursor Movement # Windows macOS Linux Action Shortcut Move cursor left Left Move cursor right Right Move cursor up Up Move cursor down Down Move cursor by word left Ctrl + Left Move cursor by word right Ctrl + Right Move to line start Home or Ctrl + Left Move to line end End or Ctrl + Right Move to document start Ctrl + Home Move to document end Ctrl + End Move page up Page Up Move page down Page Down Action Shortcut Move cursor left Left or Ctrl + B Move cursor right Right or Ctrl + F Move cursor up Up or Ctrl + P Move cursor down Down or Ctrl + N Move cursor by word left Option + Left Move cursor by word right Option + Right Move to line start Cmd + Left or Ctrl + A Move to line end Cmd + Right or Ctrl + E Move to document start Cmd + Up Move to document end Cmd + Down Move page up Page Up or Option + V Move page down Page Down or Ctrl + V Action Shortcut Move cursor left Left Move cursor right Right Move cursor up Up Move cursor down Down Move cursor by word left Ctrl + Left Move cursor by word right Ctrl + Right Move to line start Home or Ctrl + Left Move to line end End or Ctrl + Right Move to document start Ctrl + Home Move to document end Ctrl + End Move page up Page Up Move page down Page Down Selection # Windows macOS Linux Action Shortcut Selection with any movement key Shift + [Movement Key] Select all Ctrl + A Select line Ctrl + L Select next occurrence Ctrl + D Select all occurrences Shift + Ctrl + L Go to matching bracket Shift + Ctrl + \ Action Shortcut Selection with any movement key Shift + [Movement Key] Select all Cmd + A Select line Cmd + L Select next occurrence Cmd + D Go to matching bracket Shift + Cmd + \ Action Shortcut Selection with any movement key Shift + [Movement Key] Select all Ctrl + A Select line Ctrl + L Select next occurrence Ctrl + D Select all occurrences Shift + Ctrl + L Go to matching bracket Shift + Ctrl + \ Basic Operations # Windows macOS Linux Action Shortcut New line with indentation Enter Undo Ctrl + Z Redo Ctrl + Y or Ctrl + Shift + Z Undo selection Ctrl + U Copy Ctrl + C Cut Ctrl + X Paste Ctrl + V Action Shortcut New line with indentation Enter Undo Cmd + Z Redo Cmd + Y or Cmd + Shift + Z Undo selection Cmd + U Copy Cmd + C Cut Cmd + X Paste Cmd + V Action Shortcut New line with indentation Enter Undo Ctrl + Z Redo Ctrl + Y or Ctrl + Shift + Z Undo selection Ctrl + U Copy Ctrl + C Cut Ctrl + X Paste Ctrl + V Delete Operations # Windows macOS Linux Action Shortcut Delete character left Backspace Delete character right Del Delete word left Ctrl + Backspace Delete word right Ctrl + Del Delete line Shift + Ctrl + K Action Shortcut Delete character left Backspace Delete character right Del Delete word left Option + Backspace or Ctrl + Cmd + H Delete word right Option + Del or Fn + Option + Backspace Delete line Shift + Cmd + K Delete to line start Cmd + Backspace Delete to line end Cmd + Del or Ctrl + K Action Shortcut Delete character left Backspace Delete character right Del Delete word left Ctrl + Backspace Delete word right Ctrl + Del Delete line Shift + Ctrl + K Line Operations # Windows macOS Linux Action Shortcut Move line up Alt + Up Move line down Alt + Down Copy line up Shift + Alt + Up Copy line down Shift + Alt + Down Toggle line comment Ctrl + / Add line comment Ctrl + K then Ctrl + C Remove line comment Ctrl + K then Ctrl + U Toggle block comment Shift + Alt + A Action Shortcut Move line up Option + Up Move line down Option + Down Copy line up Shift + Option + Up Copy line down Shift + Option + Down Toggle line comment Cmd + / Add line comment Cmd + K then Cmd + C Remove line comment Cmd + K then Cmd + U Toggle block comment Shift + Option + A Split line Ctrl + O Transpose characters Ctrl + T Action Shortcut Move line up Alt + Up Move line down Alt + Down Copy line up Shift + Alt + Up Copy line down Shift + Alt + Down Toggle line comment Ctrl + / Add line comment Ctrl + K then Ctrl + C Remove line comment Ctrl + K then Ctrl + C Toggle block comment Shift + Alt + A Autocomplete # Windows macOS Linux Action Shortcut Start completion Ctrl + Space Accept completion Enter or Tab Close completion Esc Navigate completion options Up or Down Action Shortcut Start completion Ctrl + Space Accept completion Enter or Tab Close completion Esc Navigate completion options Up or Down Action Shortcut Start completion Ctrl + Space Accept completion Enter or Tab Close completion Esc Navigate completion options Up or Down Indentation # Windows macOS Linux Action Shortcut Indent more Tab or Ctrl + ] Indent less Shift + Tab or Ctrl + [ Action Shortcut Indent more Cmd + ] Indent less Cmd + [ Action Shortcut Indent more Tab or Ctrl + ] Indent less Shift + Tab or Ctrl + [ Code Folding # Windows macOS Linux Action Shortcut Fold code Ctrl + Shift + [ Unfold code Ctrl + Shift + ] Fold all Ctrl + K then Ctrl + 0 Unfold all Ctrl + K then Ctrl + J Action Shortcut Fold code Cmd + Option + [ Unfold code Cmd + Option + ] Fold all Cmd + K then Cmd + 0 Unfold all Cmd + K then Cmd + J Action Shortcut Fold code Ctrl + Shift + [ Unfold code Ctrl + Shift + ] Fold all Ctrl + K then Ctrl + 0 Unfold all Ctrl + K then Ctrl + J Multi-cursor # Windows macOS Linux Action Shortcut Add cursor at click position Alt + Left Button Add cursor above Ctrl + Alt + Up Add cursor below Ctrl + Alt + Down Add cursors to line ends Shift + Alt + I Clear multiple cursors Esc Action Shortcut Add cursor at click position Option + Left Button Add cursor above Ctrl + Option + Up Add cursor below Ctrl + Option + Down Add cursors to line ends Shift + Option + I Clear multiple cursors Esc Action Shortcut Add cursor at click position Alt + Left Button Add cursor above Shift + Alt + Up Add cursor below Shift + Alt + Down Add cursors to line ends Shift + Alt + I Clear multiple cursors Esc Formatting # Windows macOS Linux Action Shortcut Format document Shift + Alt + F Action Shortcut Format document Shift + Cmd + F Action Shortcut Format document Ctrl + Shift + I Search & Navigation # Windows macOS Linux Action Shortcut Open Search Ctrl + F Select All Alt + Enter Replace All Ctrl + Alt + Enter Go To Line Ctrl + G Next Diagnostic F8 Previous Diag. Shift + F8 Open Lint Panel Ctrl + Shift + M Action Shortcut Open Search Cmd + F Select All Cmd + Enter Replace All Cmd + Option + Enter Go To Line Cmd + G Next Diagnostic F8 Previous Diag. Shift + F8 Open Lint Panel Cmd + Shift + M Action Shortcut Open Search Ctrl + F Select All Alt + Enter Replace All Ctrl + Alt + Enter Go To Line Ctrl + G Next Diagnostic F8 Previous Diag. Shift + F8 Open Lint Panel Ctrl + Shift + M Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.aggregate/

Aggregate # Use the Aggregate node to take separate items, or portions of them, and group them together into individual items. Node parameters # To begin using the node, select the Aggregate you'd like to use: Individual Fields : Aggregate individual fields separately. All Item Data : Aggregate all item data into a single list. Individual Fields # Input Field Name : Enter the name of the field in the input data to aggregate together. Rename Field : This toggle controls whether to give the field a different name in the aggregated output data. Turn this on to add a different field name. If you're aggregating multiple fields, you must provide new output field names. You can't leave multiple fields undefined. Output Field Name : This field is displayed when you turn on Rename Field . Enter the field name for the aggregated output data. Refer to Node options for more configuration options. All Item Data # Put Output in Field : Enter the name of the field to output the data in. Include : Select which fields to include in the output. Choose from: All fields : The output includes data from all fields with no further parameters. Specified Fields : If you select this option, enter a comma-separated list of fields the output should include data from in the Fields To Include parameter. The output will include only the fields in this list. All Fields Except : If you select this option, enter a comma-separated list of fields the output should exclude data from in the Fields To Exclude parameter. The output will include all fields not in this list. Refer to Node options for more configuration options. Node options # You can further configure this node using these Options : Disable Dot Notation : The node displays this toggle when you select the Individual Fields Aggregate. It controls whether to disallow referencing child fields using parent.child in the field name (turned on), or allow it (turned off, default). Merge Lists : The node displays this toggle when you select the Individual Fields Aggregate. Turn it on if the field to aggregate is a list and you want to output a single flat list rather than a list of lists. Include Binaries : The node displays this toggle for both Aggregate types. Turn it on if you want to include binary data from the input in the new output. Keep Missing And Null Values : The node displays this toggle when you select the Individual Fields Aggregate. Turn it on to add a null (empty) entry in the output list when there is a null or missing value in the input. If turned off, the output ignores null or empty values. Templates and examples # Scrape business emails from Google Maps without the use of any third party APIs by Akram Kadri View template details Chat with OpenAI Assistant (by adding a memory) by David Roberts View template details Autonomous AI crawler by Oskar View template details Browse Aggregate integration templates , or search all templates Related resources # Learn more about data structure and data flow in n8n workflows. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.aitransform/

AI Transform # Use the AI Transform node to generate code snippets based on your prompt. The AI is context-aware, understanding the workflow’s nodes and their data types. Feature availability Available only on Cloud plans . Node parameters # Instructions # Enter your prompt for the AI and click the Generate code button to automatically populate the Transformation Code . For example, you can specify how you want to process or categorize your data. Refer to Writing good prompts for more information. The prompt should be in plain English and under 500 characters. Transformation Code # The code snippet generated by the node is read-only. To edit this code, adjust your prompt in Instructions or copy and paste it into a Code node. Templates and examples # AI agent chat by n8n Team View template details Scrape and summarize webpages with AI by n8n Team View template details AI agent that can scrape webpages by Eduard View template details Browse AI Transform integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/

Code node # Use the Code node to write custom JavaScript or Python and run it as a step in your workflow. Coding in n8n This page gives usage information about the Code node. For more guidance on coding in n8n, refer to the Code section. It includes: Reference documentation on Built-in methods and variables Guidance on Handling dates and Querying JSON A growing collection of examples in the Cookbook Examples and templates For usage examples and templates to help you get started, refer to n8n's Code integrations page. Function and Function Item nodes The Code node replaces the Function and Function Item nodes from version 0.198.0. If you're using an older version of n8n, you can still view the Function node documentation and Function Item node documentation . Usage # How to use the Code node. Choose a mode # There are two modes: Run Once for All Items : this is the default. When your workflow runs, the code in the code node executes once, regardless of how many input items there are. Run Once for Each Item : choose this if you want your code to run for every input item. JavaScript # The Code node supports Node.js. Supported JavaScript features # The Code node supports: Promises. Instead of returning the items directly, you can return a promise which resolves accordingly. Writing to your browser console using console.log . This is useful for debugging and troubleshooting your workflows. External libraries # If you self-host n8n, you can import and use built-in and external npm modules in the Code node. To learn how to enable external modules, refer to the Enable modules in Code node guide. If you use n8n Cloud, you can't import external npm modules. n8n makes two modules available for you: crypto Node.js module moment npm package Built-in methods and variables # n8n provides built-in methods and variables for working with data and accessing n8n data. Refer to Built-in methods and variables for more information. The syntax to use the built-in methods and variables is $variableName or $methodName() . Type $ in the Code node or expressions editor to see a list of suggested methods and variables. Keyboard shortcuts # The Code node editing environment supports time-saving and useful keyboard shortcuts for a range of operations from autocompletion to code-folding and using multiple-cursors. A full list can be found in the list of keyboard shortcuts . Python # n8n added Python support in version 1.0. It doesn't include a Python executable. Instead, n8n provides Python support using Pyodide , which is a port of CPython to WebAssembly. This limits the available Python packages to the Packages included with Pyodide . n8n downloads the package automatically the first time you use it. Slower than JavaScript The Code node takes longer to process Python than JavaScript. This is due to the extra compilation steps. Built-in methods and variables # n8n provides built-in methods and variables for working with data and accessing n8n data. Refer to Built-in methods and variables for more information. The syntax to use the built-in methods and variables is _variableName or _methodName() . Type _ in the Code node to see a list of suggested methods and variables. Keyboard shortcuts # The Code node editing environment supports time-saving and useful keyboard shortcuts for a range of operations from autocompletion to code-folding and using multiple-cursors. A full list can be found in the list of keyboard shortcuts . File system and HTTP requests # You can't access the file system or make HTTP requests. Use the following nodes instead: Read/Write File From Disk HTTP Request Coding in n8n # There are two places where you can use code in n8n: the Code node and the expressions editor. When using either area, there are some key concepts you need to know, as well as some built-in methods and variables to help with common tasks. Key concepts # When working with the Code node, you need to understand the following concepts: Data structure : understand the data you receive in the Code node, and requirements for outputting data from the node. Item linking : learn how data items work, and how to link to items from previous nodes. You need to handle item linking in your code when the number of input and output items doesn't match. Built-in methods and variables # n8n includes built-in methods and variables. These provide support for: Accessing specific item data Accessing data about workflows, executions, and your n8n environment Convenience variables to help with data and time Refer to Built-in methods and variables for more information. Use AI in the Code node # Feature availability AI assistance in the Code node is available to Cloud users. It isn't available in self-hosted n8n. AI generated code overwrites your code If you've already written some code on the Code tab, the AI generated code will replace it. n8n recommends using AI as a starting point to create your initial code, then editing it as needed. To use ChatGPT to generate code in the Code node: In the Code node, set Language to JavaScript . Select the Ask AI tab. Write your query. Select Generate Code . n8n sends your query to ChatGPT, then displays the result in the Code tab. Common issues # For common questions or issues and suggested solutions, refer to Common Issues . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.comparedatasets/

Compare Datasets # The Compare Datasets node helps you compare data from two input streams. Node parameters # Decide which fields to compare. In Input A Field , enter the name of the field you want to use from input stream A. In Input B Field , enter the name of the field you want to use from input stream B. Optional : You can compare by multiple fields. Select Add Fields to Match to set up more comparisons. Choose how to handle differences between the datasets. In When There Are Differences , select one of the following: Use Input A Version to treat input stream A as the source of truth. Use Input B Version to treat input stream B as the source of truth. Use a Mix of Versions to use different inputs for different fields. Use Prefer to select either Input A Version or Input B Version as the main source of truth. Enter input fields that are exceptions to For Everything Except to pull from the other input source. To add multiple input fields, enter a comma-separated list. Include Both Versions to include both input streams in the output, which may make the structure more complex. Decide whether to use Fuzzy Compare . When turned on, the comparison will tolerate small type differences when comparing fields. For example, the number 3 and the string 3 are treated as the same with Fuzzy Compare turned on, but wouldn't be treated the same with it turned off. Understand item comparison # Item comparison is a two stage process: n8n checks if the values of the fields you selected to compare match across both inputs. If the fields to compare match, n8n then compares all fields within the items, to determine if the items are the same or different. Node options # Use the node Options to refine your comparison or tweak comparison behavior. Fields to Skip Comparing # Enter field names that you want to ignore in the comparison. For example, if you compare the two datasets below using person.language as the Fields to Match , n8n returns them as different. If you add person.name to Fields to Skip Comparing , n8n returns them as matching. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // Input 1 [ { "person" : { "name" : "Stefan" , "language" : "de" } }, { "person" : { "name" : "Jim" , "language" : "en" } }, { "person" : { "name" : "Hans" , "language" : "de" } } ] // Input 2 [ { "person" : { "name" : "Sara" , "language" : "de" } }, { "person" : { "name" : "Jane" , "language" : "en" } }, { "person" : { "name" : "Harriet" , "language" : "de" } } ] Disable Dot Notation # Whether to disallow referencing child fields using parent.child in the field name (turned on) or allow it (turned off, default). Multiple Matches # Choose how to handle duplicate data. The default is Include All Matches . You can choose Include First Match Only . For example, given these two datasets: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 // Input 1 [ { "fruit" : { "type" : "apple" , "color" : "red" } }, { "fruit" : { "type" : "apple" , "color" : "red" } }, { "fruit" : { "type" : "banana" , "color" : "yellow" } } ] // Input 2 [ { "fruit" : { "type" : "apple" , "color" : "red" } }, { "fruit" : { "type" : "apple" , "color" : "red" } }, { "fruit" : { "type" : "banana" , "color" : "yellow" } } ] n8n returns three items in the Same Branch tab. The data is the same in both branches. If you select Include First Match Only , n8n returns two items, in the Same Branch tab. The data is the same in both branches, but n8n only returns the first occurrence of the matching "apple" items. Understand the output # There are four output options: In A only Branch : Contains data that occurs only in the first input. Same Branch : Contains data that's the same in both inputs. Different Branch : Contains data that's different between inputs. In B only Branch : Contains data that occurs only in the second output. Templates and examples # Sync Google Sheets data with MySQL by n8n Team View template details Two way sync Pipedrive and MySQL by n8n Team View template details Synchronize your Google Sheets with Postgres by Bela View template details Browse Compare Datasets integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.compression/

Compression # Use the Compression node to compress and decompress files. Supports Zip and Gzip formats. Node parameters # This node can be used as an AI tool This node can be used to enhance the capabilities of an AI agent. When used in this way, many parameters can be set automatically, or with information directed by AI - find out more in the AI tool parameters documentation . The node parameters depend on which Operation you select. Choose to: Compress : Create a compressed file from your input data. Decompress : Decompress an existing compressed file. Refer to the sections below for parameters specific to each Operation . Compress # Input Binary Field(s) : Enter the name of the fields in the input data that contain the binary files you want to compress. To compress more than one file, use a comma-separated list. Output Format : Choose whether to format the compressed output as Zip or Gzip . File Name : Enter the name of the zip file the node creates. Put Output File in Field : Enter the name of the field in the output data to contain the file. Decompress # Put Output File in Field : Enter the name of the fields in the input data that contain the binary files you want to decompress. To decompress more than one file, use a comma-separated list. Output Prefix : Enter a prefix to add to the output file name. Templates and examples # Talk to your SQLite database with a LangChain AI Agent 🧠💬 by Yulia View template details Transcribing Bank Statements To Markdown Using Gemini Vision AI by Jimleuk View template details Build a Tax Code Assistant with Qdrant, Mistral.ai and OpenAI by Jimleuk View template details Browse Compression integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.converttofile/

Convert to File # Use the Convert to File node to take input data and output it as a file. This converts the input JSON data into a binary format. Extract From File To extract data from a file and convert it to JSON, use the Extract from File node. Operations # Convert to CSV Convert to HTML Convert to ICS Convert to JSON Convert to ODS Convert to RTF Convert to Text File Convert to XLS Convert to XLSX Move Base64 String to File Node parameters and options depend on the operation you select. Convert to CSV # Configure the node for this operation with the Put Output File in Field parameter. Enter the name of the field in the output data to contain the file. Convert to CSV options # You can also configure this operation with these Options : File Name : Enter the file name for the generated output file. If the first row of the file contains header names, turn on the Header Row option. Convert to HTML # Configure the node for this operation with the Put Output File in Field parameter. Enter the name of the field in the output data to contain the file. Convert to HTML options # You can also configure this operation with these Options : File Name : Enter the file name for the generated output file. If the first row of the file contains header names, turn on the Header Row option. Convert to ICS # Put Output File in Field . Enter the name of the field in the output data to contain the file. Event Title : Enter the title for the event. Start : Enter the date and time the event will start. All-day events ignore the time. End : Enter the date and time the event will end. All-day events ignore the time. If unset, the node uses the start date. All Day : Select whether the event is an all day event (turned on) or not (turned off). Convert to ICS options # You can also configure this operation with these Options : File Name : Enter the file name for the generated output file. Attendees : Use this option to add attendees to the event. For each attendee, add: Name Email RSVP : Select whether the attendee needs to confirm attendance (turned on) or doesn't (turned off). Busy Status : Use this option to set the busy status for Microsoft applications like Outlook. Choose from: Busy Tentative Calendar Name : For Apple and Microsoft calendars, enter the calendar name for the event. Description : Enter an event description. Geolocation : Enter the Latitude and Longitude for the event's location. Location : Enter the event's intended venue/location. Recurrence Rule : Enter a rule to define the repeat pattern of the event (RRULE). Generate rules using the iCalendar.org RRULE Tool . Organizer : Enter the organizer's Name and Email . Sequence : If you're sending an update for an event with the same universally unique ID (UID), enter the revision sequence number. Status : Set the status of the event. Choose from: Confirmed Cancelled Tentative UID : Enter a universally unique ID (UID) for the event. The UID should be globally unique. The node automatically generates a UID if you don't enter one. URL : Enter a URL associated with the event. Use Workflow Timezone : Whether to use UTC time zone (turned off) or the workflow's timezone (turned on). Set the workflow's timezone in the Workflow Settings . Convert to JSON # Choose the best output Mode for your needs from these options: All Items to One File : Send all input items to a single file. Each Item to Separate File : Create a file for every input item. Convert to JSON options # You can also configure this operation with these Options : File Name : Enter the file name for the generated output file. Format : Choose whether to format the JSON for easier reading (turned on) or not (turned off). Encoding : Choose the character set to use to encode the data. The default is utf8 . Convert to ODS # Configure the node for this operation with the Put Output File in Field parameter. Enter the name of the field in the output data to contain the file. Convert to ODS options # You can also configure this operation with these Options : File Name : Enter the file name for the generated output file. Compression : Choose whether to compress and reduce the file's output size. Header Row : Turn on if the first row of the file contains header names. Sheet Name : Enter the Sheet Name to create in the spreadsheet. Convert to RTF # Configure the node for this operation with the Put Output File in Field parameter. Enter the name of the field in the output data to contain the file. Convert to RFT options # You can also configure this operation with these Options : File Name : Enter the file name for the generated output file. If the first row of the file contains header names, turn on the Header Row option. Convert to Text File # Enter the name of the Text Input Field that contains a string to convert to a file. Use dot-notation for deep fields, for example level1.level2.currentKey . Convert to Text File options # You can also configure this operation with these Options : File Name : Enter the file name for the generated output file. Encoding : Choose the character set to use to encode the data. The default is utf8 . Convert to XLS # Configure the node for this operation with the Put Output File in Field parameter. Enter the name of the field in the output data to contain the file. Convert to XLS options # You can also configure this operation with these Options : File Name : Enter the file name for the generated output file. Header Row : Turn on if the first row of the file contains header names. Sheet Name : Enter the Sheet Name to create in the spreadsheet. Convert to XLSX # Configure the node for this operation with the Put Output File in Field parameter. Enter the name of the field in the output data to contain the file. Convert to XLSX options # You can also configure this operation with these Options : File Name : Enter the file name for the generated output file. Compression : Choose whether to compress and reduce the file's output size. Header Row : Turn on if the first row of the file contains header names. Sheet Name : Enter the Sheet Name to create in the spreadsheet. Move Base64 String to File # Enter the name of the Base64 Input Field that contains the Base64 string to convert to a file. Use dot-notation for deep fields, for example level1.level2.currentKey . Move Base64 String to File options # You can also configure this operation with these Options : File Name : Enter the file name for the generated output file. MIME Type : Enter the MIME type of the output file. Refer to Common MIME types for a list of common MIME types and the file extensions they relate to. Templates and examples # Automated Web Scraping: email a CSV, save to Google Sheets & Microsoft Excel by Mihai Farcas View template details Convert JSON to an Excel file by Dick View template details 🤖 Telegram Messaging Agent for Text/Audio/Images by Joseph LePage View template details Browse Convert to File integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.crypto/

Crypto # Use the Crypto node to encrypt data in workflows. Actions # Generate a random string Hash a text or file in a specified format Hmac a text or file in a specified format Sign a string using a private key Node parameters # This node can be used as an AI tool This node can be used to enhance the capabilities of an AI agent. When used in this way, many parameters can be set automatically, or with information directed by AI - find out more in the AI tool parameters documentation . Node parameters depend on the action you select. Generate parameters # Property Name : Enter the name of the property to write the random string to. Type : Select the encoding type to use to generate the string. Choose from: ASCII BASE64 HEX UUID Hash parameters # Type : Select the hash type to use. Choose from: MD5 SHA256 SHA3-256 SHA3-384 SHA3-512 SHA385 SHA512 Binary File : Turn this parameter on if the data you want to hash is from a binary file. Value : If you turn off Binary File , enter the value you want to hash. Binary Property Name : If you turn on Binary File , enter the name of the binary property that contains the data you want to hash. Property Name : Enter the name of the property you want to write the hash to. Encoding : Select the encoding type to use. Choose from: BASE64 HEX Hmac parameters # Binary File : Turn this parameter on if the data you want to encrypt is from a binary file. Value : If you turn off Binary File , enter the value you want to encrypt. Binary Property Name : If you turn on Binary File , enter the name of the binary property that contains the data you want to encrypt. Type : Select the encryption type to use. Choose from: MD5 SHA256 SHA3-256 SHA3-384 SHA3-512 SHA385 SHA512 Property Name : Enter the name of the property you want to write the hash to. Secret : Enter the secret or secret key used for decoding. Encoding : Select the encoding type to use. Choose from: BASE64 HEX Sign parameters # Value : Enter the value you want to sign. Property Name : Enter the name of the property you want to write the signed value to. Algorithm Name or ID : Choose an algorithm name from the list or specify an ID using an expression . Encoding : Select the encoding type to use. Choose from: BASE64 HEX Private Key : Enter a private key to use when signing the string. Templates and examples # Conversational Interviews with AI Agents and n8n Forms by Jimleuk View template details Send a ChatGPT email reply and save responses to Google Sheets by n8n Team View template details Crypto Market Alert System with Binance and Telegram Integration by Nskha View template details Browse Crypto integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.datetime/

Date & Time # The Date & Time node manipulates date and time data and convert it to different formats. Timezone settings The node relies on the timezone setting. n8n uses either: The workflow timezone, if set. Refer to Workflow settings for more information. The n8n instance timezone, if the workflow timezone isn't set. The default is America/New York for self-hosted instances. n8n Cloud tries to detect the instance owner's timezone when they sign up, falling back to GMT as the default. Self-hosted users can change the instance setting using Environment variables . Cloud admins can change the instance timezone in the Admin dashboard . Date and time in other nodes You can work with data and time in the Code node, and in expressions in any node. n8n supports Luxon to help work with date and time in JavaScript. Refer to Date and time with Luxon for more information. Operations # Add to a Date : Add a specified amount of time to a date. Extract Part of a Date : Extract part of a date, such as the year, month, or day. Format a Date : Transform a date's format to a new format using preset options or a custom expression. Get Current Date : Get the current date and choose whether to include the current time or not. Useful for triggering other flows and conditional logic. Get Time Between Dates : Calculate the amount of time in specific units between two dates. Round a Date : Round a date up or down to the nearest unit of your choice, such as month, day, or hour. Subtract From a Date : Subtract a specified amount of time from a date. Refer to the sections below for parameters and options specific to each operation. Add to a Date # Configure the node for this operation using these parameters: Date to Add To : Enter the date you want to change. Time Unit to Add : Select the time unit for the Duration parameter. Duration : Enter the number of time units to add to the date. Output Field Name : Enter the name of the field to output the new date to. Add to a Date options # This operation has one option: Include Input Fields . If you'd like to include all of the input fields in the output, turn this option on. If turned off, only the Output Field Name and its contents are output. Extract Part of a Date # Configure the node for this operation using these parameters: Date : Enter the date you want to round or extract part of. Part : Select the part of the date you want to extract. Choose from: Year Month Week Day Hour Minute Second Output Field Name : Enter the name of the field to output the extracted date part to. Extract Part of a Date options # This operation has one option: Include Input Fields . If you'd like to include all of the input fields in the output, turn this option on. If turned off, only the Output Field Name and its contents are output. Format a Date # Configure the node for this operation using these parameters: Date : Enter the date you want to format. Format : Select the format you want to change the date to. Choose from: Custom Format : Enter your own custom format using Luxon's special tokens . Tokens are case-sensitive. MM/DD/YYYY : For 4 September 1986 , this formats the date as 09/04/1986 . YYYY/MM/DD : For 4 September 1986 , this formats the date as 1986/09/04 . MMMM DD YYYY : For 4 September 1986 , this formats the date as September 04 1986 . MM-DD-YYYY : For 4 September 1986 , this formats the date as 09-04-1986 . YYYY-MM-DD : For 4 September 1986 , this formats the date as 1986-09-04 . Output Field Name : Enter the name of the field to output the formatted date to. Format a Date options # This operation includes these options: Include Input Fields : If you'd like to include all of the input fields in the output, turn this option on. If turned off, only the Output Field Name and its contents are output. From Date Format : If the node isn't recognizing the Date format correctly, enter the format for that Date here so the node can process it properly. Use Luxon's special tokens to enter the format. Tokens are case-sensitive Use Workflow Timezone : Whether to use the input's time zone (turned off) or the workflow's timezone (turned on). Get Current Date # Configure the node for this operation using these parameters: Include Current Time : Choose whether to include the current time (turned on) or to set the time to midnight (turned off). Output Field Name : Enter the name of the field to output the current date to. Get Current Date options # This operation includes these options: Include Input Fields : If you'd like to include all of the input fields in the output, turn this option on. If turned off, only the Output Field Name and its contents are output. Timezone : Set the timezone to use. If left blank, the node uses the n8n instance's timezone. +00:00 timezone Use GMT for +00:00 timezone. Get Time Between Dates # Configure the node for this operation using these parameters: Start Date : Enter the earlier date you want to compare. End Date : Enter the later date you want to compare. Units : Select the units you want to calculate the time between. You can include multiple units. Choose from: Year Month Week Day Hour Minute Second Millisecond Output Field Name : Enter the name of the field to output the calculated time between to. Get Time Between Dates options # The Get Time Between Dates operation includes the Include Input Fields option as well as an Output as ISO String option. If you leave this option off, each unit you selected will return its own time difference calculation, for example: 1 2 3 4 timeDifference years : 1 months : 3 days : 13 If you turn on the Output as ISO String option, the node formats the output as a single ISO duration string, for example: P1Y3M13D . ISO duration format displays a format as P<n>Y<n>M<n>DT<n>H<n>M<n>S . <n> is the number for the unit after it. P = period (duration). It begins all ISO duration strings. Y = years M = months W = weeks D = days T = delineator between dates and times, used to avoid confusion between months and minutes H = hours M = minutes S = seconds Milliseconds don't get their own unit, but instead are decimal seconds. For example, 2.1 milliseconds is 0.0021S . Round a Date # Configure the node for this operation using these parameters: Date : Enter the date you'd like to round. Mode : Choose whether to Round Down or Round Up . To Nearest : Select the unit you'd like to round to. Choose from: Year Month Week Day Hour Minute Second Output Field Name : Enter the name of the field to output the rounded date to. Round a Date options # This operation has one option: Include Input Fields . If you'd like to include all of the input fields in the output, turn this option on. If turned off, only the Output Field Name and its contents are output. Subtract From a Date # Configure the node for this operation using these parameters: Date to Subtract From : Enter the date you'd like to subtract from. Time Unit to Subtract : Select the unit for the Duration amount you want to subtract. Duration : Enter the amount of the time units you want to subtract from the Date to Subtract From . Output Field Name : Enter the name of the field to output the rounded date to. Subtract From a Date options # This operation has one option: Include Input Fields . If you'd like to include all of the input fields in the output, turn this option on. If turned off, only the Output Field Name and its contents are output. Templates and examples # Working with dates and times by Jonathan View template details Create an RSS feed based on a website's content by Tom View template details Nightly n8n backup to Dropbox by Joey D’Anna View template details Browse Date & Time integration templates , or search all templates Related resources # The Date & Time node uses Luxon . You can also use Luxon in the Code node and expressions . Refer to Date and time with Luxon for more information. Supported date formats # n8n supports all date formats supported by Luxon . Tokens are case-sensitive. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.debughelper/

Debug Helper # Use the Debug Helper node to trigger different error types or generate random datasets to help test n8n workflows. Operations # Define the operation by selecting the Category : Do Nothing : Don't do anything. Throw Error : Throw an error with the specified type and message. Out Of Memory : Generate a specific memory size to simulate being out of memory. Generate Random Data : Generate some random data in a selected format. Node parameters # The node parameters depend on the Category selected. The Do Nothing Category has no other parameters. Throw Error # Error Type : Select the type of error to throw. Choose from: NodeApiError NodeOperationError Error Error Message : Enter the error message to throw. Out Of Memory # The Out of Memory Category adds one parameter, the Memory Size to Generate . Enter the approximate amount of memory to generate. Generate Random Data # Data Type : Choose the type of random data you'd like to generate. Options include: Address Coordinates Credit Card Email IPv4 IPv6 MAC Nanoids : If you select this data type, you'll also need to enter: Nanoid Alphabet : The alphabet the generator will use to generate the nanoids. Nanoid Length : The length of each nanoid. URL User Data UUID Version Seed : If you'd like to generate the data using a specific seed, enter it here. This ensures the data gets generated consistently. If you'd rather use random data generation, leave this field empty. Number of Items to Generate : Enter the number of random items you'd like to generate. Output as Single Array : Whether to generate the data as a single array (turned on) or multiple items (turned off). Templates and examples # Browse Debug Helper integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.editimage/

Edit Image # Use the Edit Image node to manipulate and edit images. Dependencies If you aren't running n8n on Docker, you need to install GraphicsMagick . You need to use a node such as the Read/Write Files from Disk node or the HTTP Request node to pass the image file as a data property to the Edit Image node. Operations # Add a Blur to the image to reduce sharpness Add a Border to the image Composite an image on top of another image Create a new image Crop the image Draw on an image Get Information about the image Multi Step perform multiple operations on the image Resize : Change the size of the image Rotate the image Shear image along the X or Y axis Add Text to the image Make a color in image Transparent Node parameters # The parameters for this node depend on the operation you select. Blur parameters # Property Name : Enter the name of the binary property that stores the image data. Blur : Enter a number to set how strong the blur should be, between 0 and 1000. Higher numbers create blurrier images. Sigma : Enter a number to set the stigma for the blur, between 0 and 1000. Higher numbers create blurrier images. Refer to Node options for optional configuration options. Border parameters # Property Name : Enter the name of the binary property that stores the image data. Border Width : Enter the width of the border. Border Height : Enter the height of the border. Border Color : Set the color for the border. You can either enter a hex or select the color swatch to open a color picker. Refer to Node options for optional configuration options. Composite parameters # Property Name : Enter the name of the binary property that stores the image data. This image is your base image. Composite Image Property : Enter the name of the binary property that stores image to composite on top of the Property Name image. Operator : Select composite operator, which determines how the composite works. Options include: Add Atop Bumpmap Copy Copy Black Copy Blue Copy Cyan Copy Green Copy Magenta Copy Opacity Copy Red Copy Yellow Difference Divide In Minus Multiply Out Over Plus Subtract Xor Position X : Enter the x axis position (horizontal) of the composite image. Position Y : Enter the y axis position (vertical) of the composite image. Refer to Node options for optional configuration options. Create parameters # Property Name : Enter the name of the binary property that stores the image data. Background Color : Set the background color for the image. You can either enter a hex or select the color swatch to open a color picker. Image Width : Enter the width of the image. Image Height : Enter the height of the image. Refer to Node options for optional configuration options. Crop parameters # Property Name : Enter the name of the binary property that stores the image data. Width : Enter the width you'd like to crop to. Height : Enter the height you'd like to crop to. Position X : Enter the x axis position (horizontal) to start the crop from. Position Y : Enter the y axis position (vertical) to start the crop from. Refer to Node options for optional configuration options. Draw parameters # Property Name : Enter the name of the binary property that stores the image data. Primitive : Select the primitive shape to draw. Choose from: Circle Line Rectangle Color : Set the color for the primitive. You can either enter a hex or select the color swatch to open a color picker. Start Position X : Enter the x axis position (horizontal) to start drawing from. Start Position Y : Enter the y axis position (vertical) to start drawing from. End Position X : Enter the x axis position (horizontal) to stop drawing at. End Position Y : Enter the y axis position (vertical) to start drawing at. Corner Radius : Enter a number to set the corner radius. Adding a corner radius will round the corners of the drawn primitive. Refer to Node options for optional configuration options. Get Information parameters # For this operation, you only need to add the Property Name of the binary property that stores the image data. Refer to Node options for optional configuration options. Multi Step parameters # Property Name : Enter the name of the binary property that stores the image data. Operations : Add the operations you want the multi step operation to perform. You can use any of the other operations. Refer to Node options for optional configuration options. Resize parameters # Property Name : Enter the name of the binary property that stores the image data. Width : Enter the new width you'd like for the image. Height : Enter the new height you'd like for the image. Option : Select how you'd like to resize the image. Choose from: Ignore Aspect Ratio : Ignore the aspect ratio and resize to the exact height and width you've entered. Maximum Area : The height and width you've entered is the maximum area/size for the image. The image maintains its aspect ratio and won't be larger than the height and/or width you've entered. Minimum Area : The height and width you've entered is the minimum area/size for the image. The image maintains its aspect ratio and won't be smaller than the height and/or width you've entered. Only if Larger : Resize the image only if it's larger than the width and height you entered. The image maintains its aspect ratio. Only if Smaller : Resize the image only if it's smaller than the width and height you entered. The image maintains its aspect ratio. Percent : Resize the image using the width and height as percentages of the original image. Refer to Node options for optional configuration options. Rotate parameters # Property Name : Enter the name of the binary property that stores the image data. Rotate : Enter the number of degrees to rotate the image, from --360 to 360. Background Color : Set the background color for the image. You can either enter a hex or select the color swatch to open a color picker. This color is used to fill in the empty background whenever the image is rotated by multiples of 90 degrees. If multipled of 90 degrees are used for the Rotate field, the background color isn't used. Refer to Node options for optional configuration options. Shear parameters # Property Name : Enter the name of the binary property that stores the image data. Degrees X : Enter the number of degrees to shear from the x axis. Degrees Y : Enter the number of degrees to shear from the y axis. Refer to Node options for optional configuration options. Text parameters # Property Name : Enter the name of the binary property that stores the image data. Text : Enter the text you'd like to write on the image. Font Size : Select the font size for the text. Font Color : Set the font color. You can either enter a hex or select the color swatch to open a color picker. Position X : Enter the x axis position (horizontal) to begin the text at. Position Y : Enter the y axis position (vertical) to begin the text at. Max Line Length : Enter the maximum amount of characters in a line before adding a line break. Refer to Node options for optional configuration options. Transparent parameters # Property Name : Enter the name of the binary property that stores the image data. Color : Set the color to make transparent. You can either enter a hex or select the color swatch to open a color picker. Refer to Node options for optional configuration options. Node options # File Name : Enter the filename of the output file. Format : Enter the image format of the output file. Choose from: bmp gif jpeg png tiff WebP The Text operation also includes the option for Font Name or ID . Select the text font from the dropdown or specify an ID using an expression . Templates and examples # Flux AI Image Generator by Max Tkacz View template details Generate Instagram Content from Top Trends with AI Image Generation by mustafa kendigüzel View template details Automate Image Validation Tasks using AI Vision by Jimleuk View template details Browse Edit Image integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.emailimap/

Email Trigger (IMAP) node # Use the IMAP Email node to receive emails using an IMAP email server. This node is a trigger node. Credential You can find authentication information for this node here . Operations # Receive an email Node parameters # Configure the node using the following parameters. Credential to connect with # Select or create an IMAP credential to connect to the server with. Mailbox Name # Enter the mailbox from which you want to receive emails. Action # Choose whether you want an email marked as read when n8n receives it. None will leave it marked unread. Mark as Read will mark it as read. Download Attachments # This toggle controls whether to download email attachments (turned on) or not (turned off). Only set this if necessary, since it increases processing. Format # Choose the format to return the message in from these options: RAW : This format returns the full email message data with body content in the raw field as a base64url encoded string. It doesn't use the payload field. Resolved : This format returns the full email with all data resolved and attachments saved as binary data. Simple : This format returns the full email. Don't use it if you want to gather inline attachments. Node options # You can further configure the node using these Options . Custom Email Rules # Enter custom email fetching rules to determine which emails the node fetches. Refer to node-imap's search function criteria for more information. Force Reconnect Every Minutes # Set an interval in minutes to force reconnection. Templates and examples # Effortless Email Management with AI-Powered Summarization & Review by n3w Italia View template details Extract expenses from emails and add to Google Sheets by Jonathan View template details Save email attachments to Nextcloud by Manu View template details Browse Email Trigger (IMAP) integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.errortrigger/

Error Trigger node # You can use the Error Trigger node to create error workflows. When another linked workflow fails, this node gets details about the failed workflow and the errors, and runs the error workflow. Usage # Create a new workflow, with the Error Trigger as the first node. Give the workflow a name, for example Error Handler . Select Save . In the workflow where you want to use this error workflow: Select Options > Settings . In Error workflow , select the workflow you just created. For example, if you used the name Error Handler, select Error handler . Select Save . Now, when this workflow errors, the related error workflow runs. Note the following: If a workflow uses the Error Trigger node, you don't have to activate the workflow. If a workflow contains the Error Trigger node, by default, the workflow uses itself as the error workflow. You can't test error workflows when running workflows manually. The Error Trigger only runs when an automatic workflow errors. Templates and examples # Generate Leads with Google Maps by Alex Kim View template details Telegram chat with PDF by felipe biava cataneo View template details Send email via Gmail on workflow error by Trey View template details Browse Error Trigger integration templates , or search all templates Related resources # You can use the Stop And Error node to send custom messages to the Error Trigger. Read more about Error workflows in n8n workflows. Error data # The default error data received by the Error Trigger is: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [ { "execution" : { "id" : "231" , "url" : "https://n8n.example.com/execution/231" , "retryOf" : "34" , "error" : { "message" : "Example Error Message" , "stack" : "Stacktrace" }, "lastNodeExecuted" : "Node With Error" , "mode" : "manual" }, "workflow" : { "id" : "1" , "name" : "Example Workflow" } } ] All information is always present, except: execution.id : requires the execution to be saved in the database. Not present if the error is in the trigger node of the main workflow, as the workflow doesn't execute. execution.url : requires the execution to be saved in the database. Not present if the error is in the trigger node of the main workflow, as the workflow doesn't execute. execution.retryOf : only present when the execution is a retry of a failed execution. If the error is caused by the trigger node of the main workflow, rather than a later stage, the data sent to the error workflow is different. There's less information in execution{} and more in trigger{} : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { "trigger" : { "error" : { "context" : {}, "name" : "WorkflowActivationError" , "cause" : { "message" : "" , "stack" : "" }, "timestamp" : 1654609328787 , "message" : "" , "node" : { . . . } }, "mode" : "trigger" }, "workflow" : { "id" : "" , "name" : "" } } Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executecommand/

Execute Command # The Execute Command node runs shell commands on the host machine that runs n8n. Which shell runs the command? This node executes the command in the default shell of the host machine. For example, cmd on Windows and zsh on macOS. If you run n8n with Docker, your command will run in the n8n container and not the Docker host. Not available on Cloud This node isn't available on n8n Cloud. Node parameters # Configure the node using the following parameters. Execute Once # Choose whether you want the node to execute only once (turned on) or once for every item it receives as input (turned off). Command # Enter the command to execute on the host machine. Refer to sections below for examples of running multiple commands and cURL commands . Run multiple commands # Use one of two methods to run multiple commands in one Execute Command node: Enter each command on one line separated by && . For example, you can combine the change directory (cd) command with the list (ls) command using && . 1 cd bin && ls Enter each command on a separate line. For example, you can write the list (ls) command on a new line after the change directory (cd) command. 1 2 cd bin ls Run cURL command # You can also use the HTTP Request node to make a cURL request. If you want to run the curl command in the Execute Command node, you will have to build a Docker image based on the existing n8n image. The default n8n Docker image uses Alpine Linux. You will have to install the curl package. Create a file named Dockerfile . Add the below code snippet to the Dockerfile. 1 2 3 4 FROM docker.n8n.io/n8nio/n8n USER root RUN apk --update add curl USER node In the same folder, execute the command below to build the Docker image. 1 docker build -t n8n-curl Replace the Docker image you used before. For example, replace docker.n8n.io/n8nio/n8n with n8n-curl . Run the newly created Docker image. You'll now be able to execute ssh using the Execute Command Node. Templates and examples # Scrape and store data from multiple website pages by Miquel Colomer View template details Track changes of product prices by sthosstudio View template details Git backup of workflows and credentials by Allan Daemon View template details Browse Execute Command integration templates , or search all templates Common issues # For common questions or issues and suggested solutions, refer to Common Issues . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflowtrigger/

Execute Sub-workflow Trigger node # Use this node to start a workflow in response to another workflow. It should be the first node in the workflow. n8n allows you to call workflows from other workflows. This is useful if you want to: Reuse a workflow: for example, you could have multiple workflows pulling and processing data from different sources, then have all those workflows call a single workflow that generates a report. Break large workflows into smaller components. Usage # This node runs in response to a call from the Execute Workflow node. Create the sub-workflow # Create a new workflow. Create sub-workflows from existing workflows You can optionally create a sub-workflow directly from an existing parent workflow using the Execute Sub-workflow node. In the node, select the Database and From list options and select Create a sub-workflow in the list. Optional : configure which workflows can call the sub-workflow: Select the Options menu > Settings . n8n opens the Workflow settings modal. Change the This workflow can be called by setting. Refer to Workflow settings for more information on configuring your workflows. Add the Execute Sub-workflow trigger node (if you are searching under trigger nodes, this is also titled When Executed by Another Workflow ). Set the Input data mode to choose how you will define the sub-workflow's input data: Define using fields below : Choose this mode to define individual input names and data types that the calling workflow needs to provide. Define using JSON example : Choose this mode to provide an example JSON object that demonstrates the expected input items and their types. Accept all data : Choose this mode to accept all data unconditionally. The sub-workflow won't define any required input items. This sub-workflow must handle any input inconsistencies or missing values. Add other nodes as needed to build your sub-workflow functionality. Save the sub-workflow. Sub-workflow mustn't contain errors If there are errors in the sub-workflow, the parent workflow can't trigger it. Load data into sub-workflow before building This requires the ability to load data from previous executions , which is available on n8n Cloud and registered Community plans. If you want to load data into your sub-workflow to use while building it: Create the sub-workflow and add the Execute Sub-workflow Trigger . Set the node's Input data mode to Accept all data or define the input items using fields or JSON if they're already known. In the sub-workflow settings , set Save successful production executions to Save . Skip ahead to setting up the parent workflow, and run it. Follow the steps to load data from previous executions . Adjust the Input data mode to match the input sent by the parent workflow if necessary. You can now pin example data in the trigger node, enabling you to work with real data while configuring the rest of the workflow. Call the sub-workflow # Open the workflow where you want to call the sub-workflow. Add the Execute Sub-workflow node. In the Execute Sub-workflow node, set the sub-workflow you want to call. You can choose to call the workflow by ID, load a workflow from a local file, add workflow JSON as a parameter in the node, or target a workflow by URL. Find your workflow ID Your sub-workflow's ID is the alphanumeric string at the end of its URL. Fill in the required input items defined by the sub-workflow. Save your workflow. When your workflow executes, it will send data to the sub-workflow, and run it. You can follow the execution flow from the parent workflow to the sub-workflow by opening the Execute Sub-workflow node and selecting the View sub-execution link. Likewise, the sub-workflow's execution contains a link back to the parent workflow's execution to navigate in the other direction. Templates and examples # Browse Execute Sub-workflow Trigger integration templates , or search all templates How data passes between workflows # As an example, imagine you have an Execute Sub-workflow node in Workflow A . The Execute Sub-workflow node calls another workflow called Workflow B : The Execute Sub-workflow node passes the data to the Execute Sub-workflow Trigger node (titled "When executed by another node" in the canvas) of Workflow B . The last node of Workflow B sends the data back to the Execute Sub-workflow node in Workflow A . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow/

Execute Sub-workflow # Use the Execute Sub-workflow node to run a different workflow on the host machine that runs n8n. Node parameters # Source # Select where the node should get the sub-workflow's information from: Database : Select this option to load the workflow from the database by ID. You must also enter either: From list : Select the workflow from a list of workflows available to your account. Workflow ID : Enter the ID for the workflow. The URL of the workflow contains the ID after /workflow/ . For example, if the URL of a workflow is https://my-n8n-acct.app.n8n.cloud/workflow/abCDE1f6gHiJKL7 , the Workflow ID is abCDE1f6gHiJKL7 . Local File : Select this option to load the workflow from a locally saved JSON file. You must also enter: Workflow Path : Enter the path to the local JSON workflow file you want the node to execute. Parameter : Select this option to load the workflow from a parameter. You must also enter: Workflow JSON : Enter the JSON code you want the node to execute. URL : Select this option to load the workflow from a URL. You must also enter: Workflow URL : Enter the URL you want to load the workflow from. Workflow Inputs # If you select a sub-workflow using the database and From list options, the sub-workflow's input items will automatically display, ready for you to fill in or map values. You can optionally remove requested input items, in which case the sub-workflow receives null as the item's value. You can also enable Attempt to convert types to try to automatically convert data to the sub-workflow item's requested type. Input items won't appear if the sub-workflow's Workflow Input Trigger node uses the "Accept all data" input data mode. Mode # Use this parameter to control the execution mode for the node. Choose from these options: Run once with all items : Pass all input items into a single execution of the node. Run once for each item : Execute the node once for each input item in turn. Node options # This node includes one option: Wait for Sub-Workflow Completion . This lets you control whether the main workflow should wait for the sub-workflow's completion before moving on to the next step (turned on) or whether the main workflow should continue without waiting (turned off). Templates and examples # Back Up Your n8n Workflows To Github by Jonathan View template details Scrape business emails from Google Maps without the use of any third party APIs by Akram Kadri View template details Telegram bot starter template setup by Victor Gold View template details Browse Execute Sub-workflow integration templates , or search all templates Set up and use a sub-workflow # This section walks through setting up both the parent workflow and sub-workflow. Create the sub-workflow # Create a new workflow. Create sub-workflows from existing workflows You can optionally create a sub-workflow directly from an existing parent workflow using the Execute Sub-workflow node. In the node, select the Database and From list options and select Create a sub-workflow in the list. Optional : configure which workflows can call the sub-workflow: Select the Options menu > Settings . n8n opens the Workflow settings modal. Change the This workflow can be called by setting. Refer to Workflow settings for more information on configuring your workflows. Add the Execute Sub-workflow trigger node (if you are searching under trigger nodes, this is also titled When Executed by Another Workflow ). Set the Input data mode to choose how you will define the sub-workflow's input data: Define using fields below : Choose this mode to define individual input names and data types that the calling workflow needs to provide. Define using JSON example : Choose this mode to provide an example JSON object that demonstrates the expected input items and their types. Accept all data : Choose this mode to accept all data unconditionally. The sub-workflow won't define any required input items. This sub-workflow must handle any input inconsistencies or missing values. Add other nodes as needed to build your sub-workflow functionality. Save the sub-workflow. Sub-workflow mustn't contain errors If there are errors in the sub-workflow, the parent workflow can't trigger it. Load data into sub-workflow before building This requires the ability to load data from previous executions , which is available on n8n Cloud and registered Community plans. If you want to load data into your sub-workflow to use while building it: Create the sub-workflow and add the Execute Sub-workflow Trigger . Set the node's Input data mode to Accept all data or define the input items using fields or JSON if they're already known. In the sub-workflow settings , set Save successful production executions to Save . Skip ahead to setting up the parent workflow, and run it. Follow the steps to load data from previous executions . Adjust the Input data mode to match the input sent by the parent workflow if necessary. You can now pin example data in the trigger node, enabling you to work with real data while configuring the rest of the workflow. Call the sub-workflow # Open the workflow where you want to call the sub-workflow. Add the Execute Sub-workflow node. In the Execute Sub-workflow node, set the sub-workflow you want to call. You can choose to call the workflow by ID, load a workflow from a local file, add workflow JSON as a parameter in the node, or target a workflow by URL. Find your workflow ID Your sub-workflow's ID is the alphanumeric string at the end of its URL. Fill in the required input items defined by the sub-workflow. Save your workflow. When your workflow executes, it will send data to the sub-workflow, and run it. You can follow the execution flow from the parent workflow to the sub-workflow by opening the Execute Sub-workflow node and selecting the View sub-execution link. Likewise, the sub-workflow's execution contains a link back to the parent workflow's execution to navigate in the other direction. How data passes between workflows # As an example, imagine you have an Execute Sub-workflow node in Workflow A . The Execute Sub-workflow node calls another workflow called Workflow B : The Execute Sub-workflow node passes the data to the Execute Sub-workflow Trigger node (titled "When executed by another node" in the canvas) of Workflow B . The last node of Workflow B sends the data back to the Execute Sub-workflow node in Workflow A . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executiondata/

Execution Data # Use this node to save metadata for workflow executions. You can then search by this data in the Executions list. You can retrieve custom execution data during workflow execution using the Code node. Refer to Custom executions data for more information. Feature availability Available on Pro and Enterprise plans. Operations # Save Execution Data for Search Data to Save # Add a Saved Field for each key/value pair of metadata you'd like to save. Limitations # The Execution Data node has the following restrictions when storing execution metadata: key : limited to 50 characters value : limited to 512 characters If either the key or value exceed the above limitations, n8n truncates to their maximum length and outputs a log entry. Templates and examples # API Schema Extractor by Polina Medvedieva View template details Host Your Own AI Deep Research Agent with n8n, Apify and OpenAI o3 by Jimleuk View template details Realtime Notion Todoist 2-way Sync with Redis by Mario View template details Browse Execution Data integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.extractfromfile/

Extract From File # A common pattern in n8n workflows is to receive a file, either from and HTTP Request node (for files you are fetching from a website), a Webhook Node (for files which are sent to your workflow from elsewhere), or from a local source. Data obtained in this way is often in a binary format, for example a spreadsheet or PDF. The Extract From File node extracts data from a binary format file and converts it to JSON, which can then be easily manipulated by the rest of your workflow. For converting JSON back into a binary file type, please see the Convert to File node. Operations # Use the Operations drop-down to select the format of the source file to extract data from. Extract From CSV : The "Comma Separated Values" file type is commonly used for tabulated data. Extract From HTML : Extract fields from standard web page HTML format files. Extract From JSON : Extract JSON data from a binary file. Extract From ICS : Extract fields from iCalendar format files. Extract From ODS : Extract fields from ODS spreadsheet files. Extract From PDF : Extract fields from Porrtable Document Format files. Extract From RTF : Extract fields from Rich Text Format files. Extract From Text File : Extract fields from a standard text file format. Extract From XLS : Extract fields from a Microsoft Excel file (older format). Extract From XLSX : Extract fields from a Microsoft Excel file. Move File to Base64 String : Converts binary data to a text-friendly base64 format. Example workflow # In this example, a Webhook node is used to trigger the workflow. When a CSV file is sent to the webhook address, the file data is output and received by the Extract From File node. View workflow file Set to operate as 'Extract from CSV', the node then outputs the data as a series of JSON 'row' objects: 1 2 3 4 5 6 7 8 { "row": { "0": "apple", "1": "1", "2": "2", "3": "3" } ... Receiving files with a webhook Select the Webhook Node's Add Options button and select Raw body , then enable that setting to get the node to output the binary file that the subsequent node is expecting. Node parameters # Input Binary Field # Enter the name of the field from the node input data that contains the binary file. The default is 'data'. Destination Output Field # Enter the name of the field in the node output that will contain the extracted data. This parameter is only available for these operations: Extract From JSON Extract From ICS Extract From Text File Move File to Base64 String Templates and examples # Building Your First WhatsApp Chatbot by Jimleuk View template details Extract text from a PDF file by amudhan View template details Scrape and store data from multiple website pages by Miquel Colomer View template details Browse Extract From File integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.filter/

Filter # Filter items based on a condition. If the item meets the condition, the Filter node passes it on to the next node in the Filter node output. If the item doesn't meet the condition, the Filter node omits the item from its output. Node parameters # Create filter comparison Conditions to perform your filter. Use the data type dropdown to select the data type and comparison operation type for your condition. For example, to filter for dates after a particular date, select Date & Time > is after . The fields and values to enter into the condition change based on the data type and comparison you select. Refer to Available data type comparisons for a full list of all comparisons by data type. Select Add condition to create more conditions. Combining conditions # You can choose to keep items: When they meet all conditions: Create two or more conditions and select AND in the dropdown between them. When they meet any of the conditions: Create two or more conditions and select OR in the dropdown between them. You can't create a mix of AND and OR rules. Node options # Ignore Case : Whether to ignore letter case (turned on) or be case sensitive (turned off). Less Strict Type Validation : Whether you want n8n to attempt to convert value types based on the operator you choose (turned on) or not (turned off). Turn this on when facing a "wrong type:" error in your node. Templates and examples # Suggest meeting slots using AI by n8n Team View template details Scrape business emails from Google Maps without the use of any third party APIs by Akram Kadri View template details Autonomous AI crawler by Oskar View template details Browse Filter integration templates , or search all templates Available data type comparisons # String # String data type supports these comparisons: exists does not exist is empty is not empty is equal to is not equal to contains does not contain starts with does not start with ends with does not end with matches regex does not match regex Number # Number data type supports these comparisons: exists does not exist is empty is not empty is equal to is not equal to is greater than is less than is greater than or equal to is less than or equal to Date & Time # Date & Time data type supports these comparisons: exists does not exist is empty is not empty is equal to is not equal to is after is before is after or equal to is before or equal to Boolean # Boolean data type supports these comparisons: exists does not exist is empty is not empty is true is false is equal to is not equal to Array # Array data type supports these comparisons: exists does not exist is empty is not empty contains does not contain length equal to length not equal to length greater than length less than length greater than or equal to length less than or equal to Object # Object data type supports these comparisons: exists does not exist is empty is not empty Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.formtrigger/

n8n Form Trigger node # Use the n8n Form trigger to start a workflow when a user submits a form, taking the input data from the form. The node generates the form web page for you to use. You can add more pages to continue the form with the n8n Form node. Build and test workflows # While building or testing a workflow, use the Test URL . Using a test URL ensures that you can view the incoming data in the editor UI, which is useful for debugging. There are two ways to test: Select Test Step . n8n opens the form. When you submit the form, n8n runs the node, but not the rest of the workflow. Select Test Workflow . n8n opens the form. When you submit the form, n8n runs the workflow. Production workflows # When your workflow is ready, switch to using the Production URL . You can then activate your workflow, and n8n runs it automatically when a user submits the form. When working with a production URL, ensure that you have saved and activated the workflow. Data flowing through the Form trigger isn't visible in the editor UI with the production URL. Set default selections with query parameters # You can set the initial values for fields by using query parameters with the initial URL provided by the n8n Form Trigger. Every page in the form receives the same query parameters sent to the n8n Form Trigger URL. Only for production Query parameters are only available when using the form in production mode. n8n won't populate field values from query parameters in testing mode. When using query parameters, percent-encode any field names or values that use special characters. This ensures n8n uses the initial values for the given fields. You can use tools like URL Encode/Decode to format your query parameters using percent-encoding. As an example, imagine you have a form with the following properties: Production URL: https://my-account.n8n.cloud/form/my-form Fields: name : Jane Doe email : jane.doe@example.com With query parameters and percent-encoding, you could use the following URL to set initial field values to the data above: 1 https://my-account.n8n.cloud/form/my-form?email=jane.doe%40example.com&name=Jane%20Doe Here, percent-encoding replaces the at-symbol ( @ ) with the string %40 and the space character ( ) with the string %20 . This will set the initial value for these fields no matter which page of the form they appear on. Node parameters # These are the main node configuration fields: Authentication # Basic Auth None Using basic auth # To configure this credential, you'll need: The Username you use to access the app or service your HTTP Request is targeting. The Password that goes with that username. Form URLs # The Form Trigger node has two URLs: Test URL and Production URL . n8n displays the URLs at the top of the node panel. Select Test URL or Production URL to toggle which URL n8n displays. Test URL : n8n registers a test webhook when you select Test Step or Test Workflow , if the workflow isn't active. When you call the URL, n8n displays the data in the workflow. Production URL : n8n registers a production webhook when you activate the workflow. When using the production URL, n8n doesn't display the data in the workflow. You can still view workflow data for a production execution. Select the Executions tab in the workflow, then select the workflow execution you want to view. Form Path # Set a custom slug for the form. Form Title # Enter the title for your form. n8n displays the Form Title as the webpage title and main h1 title on the form. Form Description # Enter the description for your form. n8n displays the Form Description as a subtitle below the main h1 title on the form. Use \n or <br> to add a line break. Form Elements # Create the question fields for your form. Select Add Form Element to add a new field. Every field has the following settings: Field Label : Enter the label that appears above the input field. Element Type : Choose from Custom HTML , Date , Dropdown List , Email , File , Hidden Field , Number , Password , Text , or Textarea . Select Custom HTML to insert arbitrary HTML. You can include elements like links, images, video, and more. You can't include <script> , <style> , or <input> elements. By default, Custom HTML fields aren't included in the node output. To include the Custom HTML content in the output, fill out the associated Element Name field. Select Date to include a date picker in the form. Refer to Date and time with Luxon for more information on formatting dates. Select Dropdown List > Add Field Option to add multiple options. By default, the dropdown is single-choice. To make it multiple-choice, turn on Multiple Choice . Select Hidden Field to include a form element without displaying it on the form. You can set a default value using the Field Value parameter or pass values for the field using query parameters . Required Field : Turn on to require users to complete this field on the form. Respond When # Choose when n8n sends a response to the form submission. You can respond when: Form Is Submitted : Send a response to the user as soon as they submit the form. Workflow Finishes : Use this if you want the workflow to complete its execution before you send a response to the user. If the workflow errors, it sends a response to the user telling them there was a problem submitting the form. Node options # Select Add Option to view more configuration options: Append n8n Attribution : Turn off to hide the Form automated with n8n attribute at the bottom of the form. Form Response : Choose how to respond when the user submits the form. Respond With > Form Submitted Text : Show a message to the user. Respond With > Redirect URL : Send the user to a new page. Ignore Bots : Turn on to ignore requests from bots like link previewers and web crawlers. Use Workflow Timezone : Turn on to use the timezone in the Workflow settings instead of UTC (default). This affects the value of the submittedAt timestamp in the node output. Templates and examples # Write a WordPress post with AI (starting from a few keywords) by Giulio View template details Flux AI Image Generator by Max Tkacz View template details AI-Powered Social Media Content Generator & Publisher by Amjid Ali View template details Browse n8n Form Trigger integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.form/

n8n Form node # Use the n8n Form node to create user-facing forms with multiple steps. You can add other nodes with custom logic between to process user input. You must start the workflow with the n8n Form Trigger . View workflow file Setting up the node # Set default selections with query parameters # You can set the initial values for fields by using query parameters with the initial URL provided by the n8n Form Trigger . Every page in the form receives the same query parameters sent to the n8n Form Trigger URL. Only for production Query parameters are only available when using the form in production mode. n8n won't populate field values from query parameters in testing mode. When using query parameters, percent-encode any field names or values that use special characters. This ensures n8n uses the initial values for the given fields. You can use tools like URL Encode/Decode to format your query parameters using percent-encoding. As an example, imagine you have a form with the following properties: Production URL: https://my-account.n8n.cloud/form/my-form Fields: name : Jane Doe email : jane.doe@example.com With query parameters and percent-encoding, you could use the following URL to set initial field values to the data above: 1 https://my-account.n8n.cloud/form/my-form?email=jane.doe%40example.com&name=Jane%20Doe Here, percent-encoding replaces the at-symbol ( @ ) with the string %40 and the space character ( ) with the string %20 . This will set the initial value for these fields no matter which page of the form they appear on. Displaying custom HTML # You can display custom HTML on your form by adding a Custom HTML field to your form. This provides an HTML box where you can insert arbitrary HTML code to display as part of the form page. You can use the HTML field to enrich your form page by including things like links, images, videos, and more. n8n will render the content with the rest of the form fields in the normal document flow. Because custom HTML content is read-only, these fields aren't included in the form output data by default. To include the raw HTML content in the node output, provide a name for the data using the Element Name field. The HTML field doesn't support <script> , <style> , or <input> elements. Including hidden fields # It's possible to include fields in a form without displaying them to users. This is useful when you want to pass extra data to the form that doesn't require interactive user input. To add fields that won't show up on the form, use the Hidden Field form element. There, you can define the Field Name and optionally provide a default value by filling out the Field Value . When serving the form, you can pass values for hidden fields using query parameters . Defining the form using JSON # Use Define Form > Using JSON to define the fields of your form with a JSON array of objects . Each object defines a single field by using a combination of these keys: fieldLabel : The label that appears above the input field. fieldType : Choose from date , dropdown , email , file , number , password , text , or textarea . Use date to include a date picker in the form. Refer to Date and time with Luxon for more information on formatting dates. When using dropdown , set the choices with fieldOptions (reference the example below). By default, the dropdown is single-choice. To make it multiple-choice, set multiselect to true . When using file , set multipleFiles to true to allow users to select more than one file. To define the file types to allow, set acceptFileTypes to a string containing a comma-separated list of file extensions (reference the example below). placeholder : Specify placeholder data for the field. You can use this for every fieldType except dropdown , date , and file . requiredField : Require users to complete this field on the form. An example JSON that shows the general format required and the keys available: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 // Use the "requiredField" key on any field to mark it as mandatory // Use the "placeholder" key to specify placeholder data for all fields // except 'dropdown', 'date' and 'file' [ { "fieldLabel" : "Date Field" , "fieldType" : "date" , "formatDate" : "mm/dd/yyyy" , // how to format received date in n8n "requiredField" : true }, { "fieldLabel" : "Dropdown Options" , "fieldType" : "dropdown" , "fieldOptions" : { "values" : [ { "option" : "option 1" }, { "option" : "option 2" } ] }, "requiredField" : true }, { "fieldLabel" : "Multiselect" , "fieldType" : "dropdown" , "fieldOptions" : { "values" : [ { "option" : "option 1" }, { "option" : "option 2" } ] }, "multiselect" : true // setting to true allows multi-select }, { "fieldLabel" : "Email" , "fieldType" : "email" , "placeholder" : "me@mail.con" }, { "fieldLabel" : "File" , "fieldType" : "file" , "multipleFiles" : true , // setting to true allows multiple files selection "acceptFileTypes" : ".jpg, .png" // allowed file types }, { "fieldLabel" : "Number" , "fieldType" : "number" }, { "fieldLabel" : "Password" , "fieldType" : "password" }, { // "fieldType": "text" can be omitted since it's the default type "fieldLabel" : "Text" }, { "fieldLabel" : "Textarea" , "fieldType" : "textarea" } ] Form Ending # Use the Form Ending Page Type to end a form and either show a completion page, redirect the user to a URL, or display custom HTML or text. Only one Form Ending page displays per execution, even when n8n executes multiple branches that contain Form Ending nodes. Choose between these options when using On n8n Form Submission : Show Completion Screen : Shows users a final screen to confirm that they submitted the form. Fill in Completion Title to set the h1 title on the form. n8n displays the Completion Message as a subtitle below the main h1 title on the form. Use \n or <br> to add a line break. Select Add option and fill in Completion Page Title to set the page's title in the browser tab. When using Redirect to URL , fill in the URL field with the page you want to redirect to when users complete the form. Use Show Text to display a final page defined by arbitrary plain text and HTML. Fill in the Text field with the HTML or plain text content you wish to show. Forms with branches # The n8n Form node executes and displays its associated form page whenever it receives data from a previous node. When building forms with n8n, to avoid confusion, it's important to understand how forms behave when branching occurs. Workflows with mutually exclusive branches # Form workflows containing mutually exclusive branches work as expected. n8n will execute a single branch according to the submitted data and conditions you outline. As it executes, n8n will display each page in the branch, ending with an n8n Form node with the Form Ending page type. This workflow demonstrates mutually exclusive branching. Each selection can only execute a single branch. View workflow file Workflows that may execute multiple branches # Form workflows that send data to multiple branches at the same time require more care. When multiple branches receive data during an execution (for example, from a switch node), n8n executes each branch that receives data sequentially . Upon reaching the end of one branch, the execution will move to the next branch with data. n8n only executes a single Form Ending n8n Form node for each execution. When multiple branches of a form workflow receive data, n8n ignores all Form Ending nodes except for the one associated with the final branch. This workflow may execute more than one branch during an execution. Here, n8n executes all valid branches sequentially. This impacts which n8n Form nodes n8n executes (in particular, which Form Ending node displays): View workflow file Node options # Select Add Option to view more configuration options: Form Title : The title for your form. n8n displays the Form Title as the webpage title and main h1 title on the form. Form Description : The description for your form. n8n displays the Form Description as a subtitle below the main h1 title on the form. This field supports HTML. Use \n or <br> to add a line break. The Form Description also populates the HTML meta description for the page. Button Label : The label to use for your form's submit button. n8n displays the Button Label as the name of the submit button. Running the node # Build and test workflows # While building or testing a workflow, use the Test URL in the n8n Form Trigger . Using a test URL ensures that you can view the incoming data in the editor UI, which is useful for debugging. There are two ways to test: Select Test Step . n8n opens the form. When you submit the form, n8n runs the node and any previous nodes, but not the rest of the workflow. Select Test Workflow . n8n opens the form. When you submit the form, n8n runs the workflow. Production workflows # When your workflow is ready, switch to using the n8n Form Trigger's Production URL by opening the trigger node and selecting the Production URL in the From URLS selector. You can then activate your workflow, and n8n runs it automatically when a user submits the form. When working with a production URL, ensure that you have saved and activated the workflow. Data flowing through the Form trigger isn't visible in the editor UI with the production URL. Templates and examples # Write a WordPress post with AI (starting from a few keywords) by Giulio View template details Flux AI Image Generator by Max Tkacz View template details AI-Powered Social Media Content Generator & Publisher by Amjid Ali View template details Browse n8n Form integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.ftp/

FTP # The FTP node is useful to access and upload files to an FTP or SFTP server. Credentials You can find authentication information for this node here . To connect to an SFTP server, use an SFTP credential. Refer to FTP credentials for more information. Operations # Delete a file or folder Download a file List folder content Rename or move a file or folder Upload a file Uploading files To attach a file for upload, you'll need to use an extra node such as the Read/Write Files from Disk node or the HTTP Request node to pass the file as a data property. Delete # This operation includes one parameter: Path . Enter the remote path that you would like to connect to. Delete options # The delete operation adds one new option: Folder . If you turn this option on, the node can delete both folders and files. This configuration also displays one more option: Recursive : If you turn this option on and you delete a folder or directory, the node will delete all files and directories within the target directory. Download # Configure this operation with these parameters: Path : Enter the remote path that you would like to connect to. Put Output File in Field : Enter the name of the output binary field to put the file in. List # Configure this operation with these parameters: Path : Enter the remote path that you would like to connect to. Recursive : Select whether to return an object representing all directories / objects recursively found within the FTP/SFTP server (turned on) or not (turned off). Rename # Configure this operation with these parameters: Old Path : Enter the existing path of the file you'd like to rename in this field. New Path : Enter the new path for the renamed file in this field. Rename options # This operation adds one new option: Create Directories . If you turn this option on, the node will recursively create the destination directory when renaming an existing file or folder. Upload # Configure this operation with these parameters: Path : Enter the remote path that you would like to connect to. Binary File : Select whether you'll upload a binary file (turned on) or enter text content to be uploaded (turned off). Other parameters depend on your selection in this field. Input Binary Field : Displayed if you turn on Binary File . Enter the name of the input binary field that contains the file you'll upload in this field. File Content : Displayed if you turn off Binary File Enter the text content of the file you'll upload in this field. Uploading files To attach a file for upload, you'll need to use an extra node such as the Read/Write Files from Disk node or the HTTP Request node to pass the file as a data property. Templates and examples # Working with Excel spreadsheet files (xls & xlsx) by n8n Team View template details Download a file and upload it to an FTP Server by amudhan View template details Request and Receive Zigbee backup from zigbee2mqtt and save it via SFTP by Hubschrauber View template details Browse FTP integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.git/

Git # Git is a free and open-source distributed version control system designed to handle everything from small to large projects with speed and efficiency. Credentials You can find authentication information for this node here . Operations # Add a file or folder to commit. Performs a git add . Add Config : Add configuration property. Performs a git config set or add. Clone a repository: Performs a git clone . Commit files or folders to git. Performs a git commit . Fetch from remote repository. Performs a git fetch . List Config : Return current configuration. Performs a git config query. Log : Return git commit history. Performs a git log . Pull from remote repository: Performs a git pull . Push to remote repository: Performs a git push . Push Tags to remote repository: Performs a git push --tags . Return Status of current repository: Performs a git status . Create a new Tag : Performs a git tag . User Setup : Set the user. Refer to the sections below for more details on the parameters and options for each operation. Add # Configure this operation with these parameters: Repository Path : Enter the local path of the git repository. Paths to Add : Enter a comma-separated list of paths of files or folders to add in this field. You can use absolute paths or relative paths from the Repository Path . Add Config # Configure this operation with these parameters: Repository Path : Enter the local path of the git repository. Key : Enter the name of the key to set. Value : Enter the value of the key to set. Add Config options # The add config operation adds the Mode option. Choose whether to Set or Append the setting in the local config. Clone # Configure this operation with these parameters: Repository Path : Enter the local path of the git repository. Authentication : Select Authenticate to pass credentials in. Select None to not use authentication. Credential for Git : If you select Authenticate , you must select or create credentials for the node to use. Refer to Git credential for more information. New Repository Path : Enter the local path where you'd like to locate the cloned repository. Source Repository : Enter the URL or path of the repository you want to clone. Commit # Configure this operation with these parameters: Repository Path : Enter the local path of the git repository. Message : Enter the commit message to use in this field. Commit options # The commit operation adds the Paths to Add option. To commit all "added" files and folders, leave this field blank. To commit specific "added" files and folders, enter a comma-separated list of paths of files or folders in this field. You can use absolute paths or relative paths from the Repository Path . Fetch # This operation only prompts you to enter the local path of the git repository in the Repository Path parameter. List Config # This operation only prompts you to enter the local path of the git repository in the Repository Path parameter. Log # Configure this operation with these parameters: Repository Path : Enter the local path of the git repository. Return All : When turned on, the node will return all results. When turned off, the node will return results up to the set Limit . Limit : Only available when you turn off Return All . Enter the maximum number of results to return. Log options # The log operation adds the File option. Enter the path of a file or folder to get the history of in this field. You can use absolute paths or relative paths from the Repository Path . Pull # This operation only prompts you to enter the local path of the git repository in the Repository Path parameter. Push # Configure this operation with these parameters: Repository Path : Enter the local path of the git repository. Authentication : Select Authenticate to pass credentials in or None to not use authentication. If you select Authenticate , you must select or create Credential for Git for the node to use. Refer to Git credential for more information. Push options # The push operation adds the Target Repository option. Enter the URL or path of the repository to push to in this field. Push Tags # This operation only prompts you to enter the local path of the git repository in the Repository Path parameter. Status # This operation only prompts you to enter the local path of the git repository in the Repository Path parameter. Tag # Configure this operation with these parameters: Repository Path : Enter the local path of the git repository. Name : Enter the name of the tag to create in this field. User Setup # This operation only prompts you to enter the local path of the git repository in the Repository Path parameter. Templates and examples # Back Up Your n8n Workflows To Github by Jonathan View template details Building RAG Chatbot for Movie Recommendations with Qdrant and Open AI by Jenny View template details Chat with GitHub API Documentation: RAG-Powered Chatbot with Pinecone & OpenAI by Mihai Farcas View template details Browse Git integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.graphql/

GraphQL # GraphQL is an open-source data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data. Use the GraphQL node to query a GraphQL endpoint. Node parameters # This node can be used as an AI tool This node can be used to enhance the capabilities of an AI agent. When used in this way, many parameters can be set automatically, or with information directed by AI - find out more in the AI tool parameters documentation . Authentication # Select the type of authentication to use. If you select anything other than None , the Credential for parameter appears for you to select an existing or create a new authentication credential for that authentication type. HTTP Request Method # Select the underlying HTTP Request method the node should use. Choose from: GET POST : If you select this method, you'll also need to select the Request Format the node should use for the query payload. Choose from: GraphQL (Raw) JSON Endpoint # Enter the GraphQL Endpoint you'd like to hit. Ignore SSL Issues # When you turn on this control, n8n ignores SSL certificate validation failure. Query # Enter the GraphQL query you want to execute. Refer to Related Resources for information on writing your query. Response Format # Select the format you'd like to receive query results in. Choose between: JSON String : If you select this format, enter a Response Data Property Name to define the property the string is written to. Headers # Enter any Headers you want to pass as part of the query as Name / Value pairs. Templates and examples # Get top 5 products on Product Hunt every hour by ghagrawal17 View template details API queries data from GraphQL by Jan Oberhauser View template details Shopify to Google Sheets Product Sync Automation by siyad View template details Browse GraphQL integration templates , or search all templates Related resources # To use the GraphQL node, you need to understand GraphQL query language. GraphQL have their own Introduction to GraphQL tutorial. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.html/

HTML # The HTML node provides operations to help you work with HTML in n8n. HTML Extract node The HTML node replaces the HTML Extract node from version 0.213.0 on. If you're using an older version of n8n, you can still view the HTML Extract node documentation . Cross-site scripting When using the HTML node to generate an HTML template you can introduce XSS (cross-site scripting) . This is a security risk. Be careful with un-trusted inputs. Operations # Generate HTML template : Use this operation to create an HTML template. This allows you to take data from your workflow and output it as HTML. Extract HTML content : Extract contents from an HTML-formatted source. The source can be in JSON or a binary file ( .html ). Convert to HTML Table : Convert content to an HTML table. The node parameters and options depend on the operation you select. Refer to the sections below for more details on configuring each operation. Generate HTML template # Create an HTML template. This allows you to take data from your workflow and output it as HTML. You can include: Standard HTML CSS in <style> tags. JavaScript in <script> tags. n8n doesn't execute the JavaScript. Expressions, wrapped in {{}} . You can use Expressions in the template, including n8n's Built-in methods and variables . Extract HTML Content # Extract contents from an HTML-formatted source. The source can be in JSON or a binary file ( .html ). Use these parameters: Source Data # Select the source type for your HTML content. Choose between: JSON : If you select this source data, enter the JSON Property : the name of the input containing the HTML you want to extract. The property can contain a string or an array of strings. Binary : If you select this source data, enter the Input Binary Field : the name of the input containing the HTML you want to extract. The property can contain a string or an array of strings. Extraction Values # Key : Enter the key to save the extracted value under. CSS Selector : Enter the CSS selector to search for. Return Value : Select the type of data to return. Choose from: Attribute : Return an attribute value like class from an element. If you select this option, enter the name of the Attribute to return the value of. HTML : Return the HTML that the element contains. Text : Return the text content of the element. If you choose this option, you can also enter a comma-separated list of selectors to skip in the Skip Selectors . Value : Return the value of an input, select, or text area. Return Array : Choose whether to return multiple extraction values as an array (turned on) or as a single string (turned off). Extract HTML Content options # You can also configure this operation with these options: Trim Values : Controls whether to remove all spaces and newlines from the beginning and end of the values (turned on) or leaves them (turned off). Clean Up Text : Controls whether to remove leading whitespaces, trailing whitespaces, and line breaks (newlines) and condense multiple consecutive whitespaces into a single space (turned on) or to leave them as-is (turned off). Convert to HTML Table # This operation expects data from another node. It has no parameters. It includes these options: Capitalize Headers : Controls whether to capitalize the table's headers (turned on) or not (turned off). Custom Styling : Controls whether to use custom styling (turned on) or not (turned off). Caption : Enter a caption to add to the table. Table Attributes : Enter any attributes to apply to the <table> , such as style attributes. Header Attributes : Enter any attributes to apply to the table's headers <th> . Row Attributes : Enter any attributes to apply to the table's rows <tr> . Cell Attributes : Enter any attributes to apply to the table's cells <td> . Templates and examples # Scrape and summarize webpages with AI by n8n Team View template details Pulling data from services that n8n doesn’t have a pre-built integration for by Jonathan View template details OpenAI GPT-3: Company Enrichment from website content by Lucas Perret View template details Browse HTML integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/

HTTP Request node # The HTTP Request node is one of the most versatile nodes in n8n. It allows you to make HTTP requests to query data from any app or service with a REST API. When using this node, you're creating a REST API call. You need some understanding of basic API terminology and concepts. There are two ways to create an HTTP request: configure the node parameters or import a curl command . Credentials Refer to HTTP Request credentials for guidance on setting up authentication. Node parameters # Method # Select the method to use for the request: DELETE GET HEAD OPTIONS PATCH POST PUT URL # Enter the endpoint you want to use. Authentication # n8n recommends using the Predefined Credential Type option when it's available. It offers an easier way to set up and manage credentials, compared to configuring generic credentials. Predefined credentials # Credentials for integrations supported by n8n, including both built-in and community nodes. Use Predefined Credential Type for custom operations without extra setup. Refer to Custom API operations for more information. Generic credentials # Credentials for integrations not supported by n8n. You'll need to manually configure the authentication process, including specifying the required API endpoints, necessary parameters, and the authentication method. You can select one of the following methods: Basic auth Custom auth Digest auth Header auth OAuth1 API OAuth2 API Query auth Refer to HTTP request credentials for more information on setting up each credential type. Send Query Parameters # Query parameters act as filters on HTTP requests. If the API you're interacting with supports them and the request you're making needs a filter, turn this option on. Specify your query parameters using one of the available options: Using Fields Below : Enter Name / Value pairs of Query Parameters . To enter more query parameter name/value pairs, select Add Parameter . The name is the name of the field you're filtering on, and the value is the filter value. Using JSON : Enter JSON to define your query parameters. Refer to your service's API documentation for detailed guidance. Send Headers # Use this parameter to send headers with your request. Headers contain metadata or context about your request. Specify Headers using one of the available options: Using Fields Below : Enter Name / Value pairs of Header Parameters . To enter more header parameter name/value pairs, select Add Parameter . The name is the header you wish to set, and the value is the value you want to pass for that header. Using JSON : Enter JSON to define your header parameters. Refer to your service's API documentation for detailed guidance. Send Body # If you need to send a body with your API request, turn this option on. Then select the Body Content Type that best matches the format for the body content you wish to send. Form URLencoded # Use this option to send your body as application/x-www-form-urlencoded . Specify Body using one of the available options: Using Fields Below : Enter Name / Value pairs of Body Parameters . To enter more body parameter name/value pairs, select Add Parameter . The name should be the form field name, and the value is what you wish to set that field to. Using Single Field : Enter your name/value pairs in a single Body parameter with format fieldname1=value1&fieldname2=value2 . Refer to your service's API documentation for detailed guidance. Form-Data # Use this option to send your body as multipart/form-data . Configure your Body Parameters by selecting the Parameter Type : Choose Form Data to enter Name / Value pairs. Choose n8n Binary File to pull the body from a file the node has access to. Name : Enter the ID of the field to set. Input Data Field Name : Enter the name of the incoming field containing the binary file data you want to process. Select Add Parameter to enter more parameters. Refer to your service's API documentation for detailed guidance. JSON # Use this option to send your body as JSON. Specify Body using one of the available options: Using Fields Below : Enter Name / Value pairs of Body Parameters . To enter more body parameter name/value pairs, select Add Parameter . Using JSON : Enter JSON to define your body. Refer to your service's API documentation for detailed guidance. n8n Binary File # Use this option to send the contents of a file stored in n8n as the body. Enter the name of the incoming field that contains the file as the Input Data Field Name . Refer to your service's API documentation for detailed guidance on how to format the file. Raw # Use this option to send raw data in the body. Content Type : Enter the Content-Type header to use for the raw body content. Refer to the IANA Media types documentation for a full list of MIME content types. Body : Enter the raw body content to send. Refer to your service's API documentation for detailed guidance. Node options # Select Add Option to view and select these options. Options are available to all parameters unless otherwise noted. Array Format in Query Parameters # Option availability This option is only available when you turn on Send Query Parameters . Use this option to control the format for arrays included in query parameters. Choose from these options: No Brackets : Arrays will format as the name=value for each item in the array, for example: foo=bar&foo=qux . Brackets Only : The node adds square brackets after each array name, for example: foo[]=bar&foo[]=qux . Brackets with Indices : The node adds square brackets with an index value after each array name, for example: foo[0]=bar&foo[1]=qux . Refer to your service's API documentation for guidance on which option to use. Batching # Control how to batch large numbers of input items: Items per Batch : Enter the number of input items to include in each batch. Batch Interval : Enter the time to wait between each batch of requests in milliseconds. Enter 0 for no batch interval. Ignore SSL Issues # By default, n8n only downloads the response if SSL certificate validation succeeds. If you'd like to download the response even if SSL certificate validation fails, turn this option on. Lowercase Headers # Choose whether to lowercase header names (turned on, default) or not (turned off). Redirects # Choose whether to follow redirects (turned on by default) or not (turned off). If turned on, enter the maximum number of redirects the request should follow in Max Redirects . Response # Use this option to set some details about the expected API response, including: Include Response Headers and Status : By default, the node returns only the body. Turn this option on to return the full response (headers and response status code) as well as the body. Never Error : By default, the node returns success only when the response returns with a 2xx code. Turn this option on to return success regardless of the code returned. Response Format : Select the format in which the data gets returned. Choose from: Autodetect (default): The node detects and formats the response based on the data returned. File : Select this option to put the response into a file. Enter the field name where you want the file returned in Put Output in Field . JSON : Select this option to format the response as JSON. Text : Select this option to format the response as plain text. Enter the field name where you want the file returned in Put Output in Field . Pagination # Use this option to paginate results, useful for handling query results that are too big for the API to return in a single call. Inspect the API data first Some options for pagination require knowledge of the data returned by the API you're using. Before setting up pagination, either check the API documentation, or do an API call without pagination, to see the data it returns. Understand pagination Pagination means splitting a large set of data into multiple pages. The amount of data on each page depends on the limit you set. For example, you make an API call to an endpoint called /users . The API wants to send back information on 300 users, but this is too much data for the API to send in one response. If the API supports pagination, you can incrementally fetch the data. To do this, you call /users with a pagination limit, and a page number or URL to tell the API which page to send. In this example, say you use a limit of 10, and start from page 0. The API sends the first 10 users in its response. You then call the API again, increasing the page number by 1, to get the next 10 results. Configure the pagination settings: Pagination Mode : Off : Turn off pagination. Update a Parameter in Each Request : Use this when you need to dynamically set parameters for each request. Response Contains Next URL : Use this when the API response includes the URL of the next page. Use an expression to set Next URL . For example setups, refer to HTTP Request node cookbook | Pagination . n8n provides built-in variables for working with HTTP node requests and responses when using pagination: Variable Description $pageCount The pagination count. Tracks how many pages the node has fetched. $request The request object sent by the HTTP node. $response The response object from the HTTP call. Includes $response.body , $response.headers , and $response.statusCode . The contents of body and headers depend on the data sent by the API. API differences Different APIs implement pagination in different ways. Check the API documentation for the API you're using for details. You need to find out things like: Does the API provide the URL for the next page? Are there API-specific limits on page size or page number? The structure of the data that the API returns. Proxy # Use this option if you need to specify an HTTP proxy. Enter the Proxy the request should use. Timeout # Use this option to set how long the node should wait for the server to send response headers (and start the response body). The node aborts requests that exceed this value for the initial response. Enter the Timeout time to wait in milliseconds. Import curl command # curl is a command line tool and library for transferring data with URLs. You can use curl to call REST APIs. If the API documentation of the service you want to use provides curl examples, you can copy them out of the documentation and into n8n to configure the HTTP Request node. Import a curl command: From the HTTP Request node's Parameters tab, select Import cURL . The Import cURL command modal opens. Paste your curl command into the text box. Select Import . n8n loads the request configuration into the node fields. This overwrites any existing configuration. Templates and examples # Scrape and summarize webpages with AI by n8n Team View template details AI agent that can scrape webpages by Eduard View template details Building Your First WhatsApp Chatbot by Jimleuk View template details Browse HTTP Request integration templates , or search all templates Common issues # For common questions or issues and suggested solutions, refer to Common Issues . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.if/

If # Use the If node to split a workflow conditionally based on comparison operations. Add conditions # Create comparison Conditions for your If node. Use the data type dropdown to select the data type and comparison operation type for your condition. For example, to filter for dates after a particular date, select Date & Time > is after . The fields and values to enter into the condition change based on the data type and comparison you select. Refer to Available data type comparisons for a full list of all comparisons by data type. Select Add condition to create more conditions. Combining conditions # You can choose to keep data: When it meets all conditions: Create two or more conditions and select AND in the dropdown between them. When it meets any of the conditions: Create two or more conditions and select OR in the dropdown between them. Templates and examples # AI agent that can scrape webpages by Eduard View template details Pulling data from services that n8n doesn’t have a pre-built integration for by Jonathan View template details Back Up Your n8n Workflows To Github by Jonathan View template details Browse If integration templates , or search all templates Branch execution with If and Merge nodes # 0.236.0 and below n8n removed this execution behavior in version 1.0. This section applies to workflows using the v0 (legacy) workflow execution order. By default, this is all workflows built before version 1.0. You can change the execution order in your workflow settings . If you add a Merge node to a workflow containing an If node, it can result in both output data streams of the If node executing. One data stream triggers the Merge node, which then goes and executes the other data stream. For example, in the screenshot below there's a workflow containing an Edit Fields node, If node, and Merge node. The standard If node behavior is to execute one data stream (in the screenshot, this is the true output). However, due to the Merge node, both data streams execute, despite the If node not sending any data down the false data stream. Related resources # Refer to Splitting with conditionals for more information on using conditionals to create complex logic in n8n. If you need more than two conditional outputs, use the Switch node . Available data type comparisons # String # String data type supports these comparisons: exists does not exist is empty is not empty is equal to is not equal to contains does not contain starts with does not start with ends with does not end with matches regex does not match regex Number # Number data type supports these comparisons: exists does not exist is empty is not empty is equal to is not equal to is greater than is less than is greater than or equal to is less than or equal to Date & Time # Date & Time data type supports these comparisons: exists does not exist is empty is not empty is equal to is not equal to is after is before is after or equal to is before or equal to Boolean # Boolean data type supports these comparisons: exists does not exist is empty is not empty is true is false is equal to is not equal to Array # Array data type supports these comparisons: exists does not exist is empty is not empty contains does not contain length equal to length not equal to length greater than length less than length greater than or equal to length less than or equal to Object # Object data type supports these comparisons: exists does not exist is empty is not empty Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.itemlists/

Item Lists # Removed in 1.21.0 n8n removed the Item Lists node in version 1.21.0. Use the following nodes instead: Aggregate : take separate items, or portions of them, and group them together into individual items. Limit : remove items beyond a defined maximum number. Remove Duplicates : identify items that are identical across all fields or a subset of fields. Sort : organize lists of in a desired ordering, or generate a random selection. Split Out : separate a single data item containing a list into multiple items. Summarize : aggregate items together, in a manner similar to Excel pivot tables. The Item Lists node simplifies working with returned data that contain lists (arrays), enabling you to change the structure for further processing without the need to use Code nodes or write custom JavaScript. Operations # The Item Lists node enables you to perform the following operations: Concatenate Items: merge multiple items into a single new item. Limit: remove items beyond a defined maximum number. Remove Duplicates: remove extraneous items. Sort: change the ordering of items. Split Out Items: create separate items from a list of data within an item. Summarize: aggregate items together. Similar to a pivot table. Split Out Items # This operation is useful if your data contains a list of items, for example a list of customers, and you want to split them so that you have an item for each customer. When using the Split Out Items operation, configure the following parameters and options: Field to Split Out : the field containing the list you want to separate out into individual items. If working with file inputs, use $binary in an expression to set the field to split out. Include : select if you want n8n to keep any other fields from the input data with each new individual item. You can select: No Other Fields All Other Fields Selected Other Fields : when selected, n8n displays Fields to Include . Enter a comma separated list of desired fields. Options > Add Field : use this to add more optional settings, including: Disable Dot Notation : when disabled, you can't reference child fields (in the format parent.child ). Destination Field Name : optionally set the field name under which to put the new split contents. Include Binary : include binary data (files) from the input in the new output. Concatenate Items # The Concatenate Items operations is useful when you want to take separate items, or portions of them, and group them together into individual items. When using the Concatenate Items operation, configure the following parameters and options: Aggregate : choose whether to aggregate Individual Fields or All Item Data . If you choose Individual Fields , you can then set: Field To Aggregate : the name of the field in the input data to be aggregated together. Rename Field : enable this toggle to enter a field name for the aggregated output data. When aggregating multiple fields you must provide new output field names. You can't leave multiple fields undefined. Output Field Name : displayed when you enable Rename Field . The field name for the aggregated output data. Options > Add Field : use this to add more optional settings, including: Disable Dot Notation : when disabled, you can't reference child fields (in the format parent.child ). Include Binaries : include binary data (files) from the input in the new output. If you choose All Item Data , you can then set: Put Output in Field : the name of the output field. Include : choose from All fields , Specified Fields , or All Fields Except . Remove Duplicates # There are situations where you can end up with duplicate data, such as a user creating multiple accounts, or a customer submitting the same order multiple times. When working with large datasets it becomes more difficult to spot and remove these items. The Remove Duplicates operation allows you to identify those items that are identical across all fields or a subset of fields. When using the Remove Duplicates operation, configure the following parameters and options: Compare : specify which fields of the input data n8n should compare to check if they're the same. The following options are available: All Fields : compares all fields of the input data. All Fields Except : enter which input data fields n8n should exclude from the comparison. You can provide multiple values separated by commas. Selected Fields : enter which input data fields n8n should include in the comparison. You can provide multiple values separated by commas. If you choose All Fields Except or Selected Fields , n8n displays Options > Add Field . Use this to add more optional settings, including: Disable Dot Notation : when disabled, you can't reference child fields (in the format parent.child ). Sort # The Sort operation allows you to organize lists of in a desired ordering, or generate a random selection. Array sort behavior The Sort operation uses the default JavaScript operation where the elements to be sorted are converted into strings and their values compared. Refer to Mozilla's guide to Array sort to learn more. When using the Sort operation, configure the following parameters and options: Type : use the dropdown to select how you want to input the sorting. The following options are available: Simple : when you selected, you can use the Add Field To Sort By button to input the fields, and select whether to use Ascending or Descending order. Random : select to create a random order in the list. Code : when selected, displays a code input field where you can enter custom JavaScript code to perform the sort operation. Options > Add Field : use this to add more optional settings, including: Disable Dot Notation : when disabled, you can't reference child fields (in the format parent.child ). Limit # If you want to keep and process a specific number of items from your incoming data, the Limit operation allows you to select the number of items to keep and whether n8n should take them from the beginning or end of the data. When using the Limit operation, configure the following parameters and options: Max Items : enter the maximum number of items that n8n should keep. If the input data contains more than this value, n8n removes the items. Keep : when items must be removed, select if n8n keeps the input items at the beginning or end. Summarize # Aggregate items together, in a manner similar to Excel pivot tables. When using the Summarize operation, configure the following parameters and options: Fields to Summarize : To combine values, select an Aggregation method, and enter a Field name. To split values, enter a field name or list of names in Fields to Split By . Options > Add Field : use this to add more optional settings, including: Disable Dot Notation : when disabled, you can't reference child fields (in the format parent.child ). Each Split in a Separate Item : splitting generates a separate output item for each split out field. All Splits in a Single Item : splitting generates a single item, which lists the split out fields. Templates and examples # Pulling data from services that n8n doesn’t have a pre-built integration for by Jonathan View template details Suggest meeting slots using AI by n8n Team View template details Convert JSON to an Excel file by Dick View template details Browse Item Lists integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.jwt/

JWT # Work with JSON web tokens in your n8n workflows. Credentials You can find authentication information for this node here . Operations # Decode Sign Verify Node parameters # This node can be used as an AI tool This node can be used to enhance the capabilities of an AI agent. When used in this way, many parameters can be set automatically, or with information directed by AI - find out more in the AI tool parameters documentation . Credential to connect with : Select or create a JWT credential to connect with. Token : Enter the token to Verify or Decode . If you select the Sign operation, you'll also have this parameter: Use JSON to Build Payload : When turned on, the node uses JSON to build the claims. The selection here influences what appears in the Payload Claims section. Payload Claims # The node only displays payload claims if you select the Sign operation. What you see depends on what you select for Use JSON to Build Payload : If you select Use JSON to Build Payload , this section displays a JSON editor where you can construct the claims. If you don't select Use JSON to Build Payload , this section prompts you to Add Claim . You can add the following claims. Audience # The Audience or aud claim identifies the intended recipients of the JWT. Refer to "aud" (Audience) Claim for more information. Expires In # The Expires In or exp claim identifies the time after which the JWT expires and must not be accepted for processing. Refer to "exp" (Expiration Time) Claim for more information. Issuer # The Issuer or iss claim identifies the principal that issued the JWT. Refer to "iss" (Issuer) Claim for more information. JWT ID # The JWT ID or jti claim provides a unique identifier for the JWT. Refer to "jti" (JWT ID) Claim for more information. Not Before # The Not Before or nbf claim identifies the time before which the JWT must not be accepted for processing. Refer to "nbf" (Not Before) Claim for more information. Subject # The Subject or sub claim identifies the principal that's the subject of the JWT. Refer to "sub" (Subject) Claim for more information. Node options # Decode node options # The Return Additional Info toggle controls how much information the node returns. When turned on, the node returns the complete decoded token with information about the header and signature. When turned off, the node only returns the payload. Sign node options # Use the Override Algorithm control to select the algorithm to use for verifying the token. This algorithm will override the algorithm selected in the credentials. Verify node options # This operation includes several node options: Return Additional Info : This toggle controls how much information the node returns. When turned on, the node returns the complete decoded token with information about the header and signature. When turned off, the node only returns the payload. Ignore Expiration : This toggle controls whether the node should ignore the token's expiration time claim ( exp ). Refer to "exp" (Expiration Time) Claim for more information. Ignore Not Before Claim : This toggle controls whether to ignore the token's not before claim ( nbf ). Refer to "nbf" (Not Before) Claim for more information. Clock Tolerance : Enter the number of seconds to tolerate when checking the nbf and exp claims. This allows you to deal with small clock differences among different servers. Refer to "exp" (Expiration Time) Claim for more information. Override Algorithm : The algorithm to use for verifying the token. This algorithm will override the algorithm selected in the credentials. Templates and examples # Browse JWT integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.ldap/

LDAP # This node allows you to interact with your LDAP servers to create, find, and update objects. Credentials You can find authentication information for this node here . Operations # Compare an attribute Create a new entry Delete an entry Rename the DN of an existing entry Search LDAP Update attributes Refer to the sections below for details on configuring the node for each operation. This node can be used as an AI tool This node can be used to enhance the capabilities of an AI agent. When used in this way, many parameters can be set automatically, or with information directed by AI - find out more in the AI tool parameters documentation . Compare # Configure this operation using these parameters: Credential to connect with : Select or create an LDAP credential to connect with. DN : Enter the Distinguished Name (DN) of the entry to compare. Attribute ID : Enter the ID of the attribute to compare. Value : Enter the value to compare. Create # Configure this operation using these parameters: Credential to connect with : Select or create an LDAP credential to connect with. DN : Enter the Distinguished Name (DN) of the entry to create. Attributes : Add the Attribute ID / Value pairs you'd like to create. Delete # Configure this operation using these parameters: Credential to connect with : Select or create an LDAP credential to connect with. DN : Enter the Distinguished Name (DN) of the entry to be deleted. Rename # Configure this operation using these parameters: Credential to connect with : Select or create an LDAP credential to connect with. DN : Enter the current Distinguished Name (DN) of the entry to rename. New DN : Enter the new Distinguished Name (DN) for the entry in this field. Search # Configure this operation using these parameters: Credential to connect with : Select or create an LDAP credential to connect with. Base DN : Enter the Distinguished Name (DN) of the subtree to search in. Search For : Select the directory object class to search for. Attribute : Select the attribute to search for. Search Text : Enter the text to search for. Use * for a wildcard. Return All : When turned on, the node will return all results. When turned off, the node will return results up to the set Limit . Limit : Only available when you turn off Return All . Enter the maximum number of results to return. Search options # You can also configure this operation using these options: Attribute Names or IDs : Enter a comma-separated list of attributes to return. Choose from the list or specify IDs using an expression. Page Size : Enter the maximum number of results to request at one time. Set to 0 to disable paging. Scopes : The set of entries at or below the Base DN to search for potential matches. Select from: Base Tree : Often referred to as subordinateSubtree or just "subordinates," selecting this option will search the subordinates of the Base DN entry but not the Base DN entry itself. Single Level : Often referred to as "one," selecting this option will search only the immediate children of the Base DN entry. Whole Subtree : Often referred to as "sub," selecting this option will search the Base DN entry and all its subordinates to any depth. Refer to The LDAP Search Operation for more information on search scopes. Update # Configure this operation using these parameters: Credential to connect with : Select or create an LDAP credential to connect with. DN : Enter the Distinguished Name (DN) of the entry to update. Update Attributes *: Select whether to Add new, Remove existing, or Replace** existing attribute. Then enter the Attribute ID / Value pair you'd like to update. Templates and examples # Browse LDAP integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger/

Local File Trigger node # The Local File Trigger node starts a workflow when it detects changes on the file system. These changes involve a file or folder getting added, changed, or deleted. Self-hosted n8n only This node isn't available on n8n Cloud. Node parameters # You can choose what event to watch for using the Trigger On parameter. Changes to a Specific File # The node triggers when the specified file changes. Enter the path for the file to watch in File to Watch . Changes Involving a Specific Folder # The node triggers when a change occurs in the selected folder. Configure these parameters: Folder to Watch : Enter the path of the folder to watch. Watch for : Select the type of change to watch for. Node options # Use the node Options to include or exclude files and folders. Include Linked Files/Folders : also watch for changes to linked files or folders. Ignore : files or paths to ignore. n8n tests the whole path, not just the filename. Supports the Anymatch syntax. Max Folder Depth : how deep into the folder structure to watch for changes. Examples for Ignore # Ignore a single file: 1 2 **/<fileName>.<suffix> # For example, **/myfile.txt Ignore a sub-directory of a directory you're watching: 1 2 **/<directoryName>/** # For example, **/myDirectory/** Templates and examples # Breakdown Documents into Study Notes using Templating MistralAI and Qdrant by Jimleuk View template details Build a Financial Documents Assistant using Qdrant and Mistral.ai by Jimleuk View template details Organise Your Local File Directories With AI by Jimleuk View template details Browse Local File Trigger integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.manualworkflowtrigger/

Manual Trigger node # Use this node if you want to start a workflow by selecting Test Workflow and don't want any option for the workflow to run automatically. Workflows always need a trigger, or start point. Most workflows start with a trigger node firing in response to an external event or the Schedule Trigger firing on a set schedule. The Manual Trigger node serves as the workflow trigger for workflows that don't have an automatic trigger. Use this trigger: To test your workflow before you add an automatic trigger of some kind. When you don't want the workflow to run automatically. Common issues # Here are some common errors and issues with the Manual Trigger node and steps to resolve or troubleshoot them. Only one 'Manual Trigger' node is allowed in a workflow # This error displays if you try to add a Manual Trigger node to a workflow which already includes a Manual Trigger node. Remove your existing Manual Trigger or edit your workflow to connect that trigger to a different node. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.markdown/

Markdown # The Markdown node converts between Markdown and HTML formats. Operations # This node's operations are Modes : Markdown to HTML : Use this mode to convert from Markdown to HTML. HTML to Markdown : Use this mode to convert from HTML to Markdown. Node parameters # HTML or Markdown : Enter the data you want to convert. The field name changes based on which Mode you select. Destination Key : Enter the field you want to put the output in. Specify nested fields using dots, for example level1.level2.newKey . Node options # The node's Options depend on the Mode selected. Test out the options Some of the options depend on each other or can interact. We recommend testing out options to confirm the effects are what you want. Markdown to HTML options # Option Description Default Add Blank To Links Whether to open links a new window (enabled) or not (disabled). Disabled Automatic Linking To URLs Whether to automatically link to URLs (enabled) or not (disabled). If enabled, n8n converts any string that it identifies as a URL to a link. Disabled Backslash Escapes HTML Tags Whether to allow backslash escaping of HTML tags (enabled) or not (disabled). When enabled, n8n escapes any < or > prefaced with \ . For example, \<div\> renders as &lt;div&gt; . Disabled Complete HTML Document Whether to output a complete HTML document (enabled) or an HTML fragment (disabled). A complete HTML document includes the <DOCTYPE HTML> declaration, <html> and <body> tags, and the <head> element. Disabled Customized Header ID Whether to support custom heading IDs (enabled) or not (disabled). When enabled, you can add custom heading IDs using {header ID here} after the heading text. Disabled Emoji Support Whether to support emojis (enabled) or not (disabled). Disabled. Encode Emails Whether to transform ASCII character emails into their equivalent decimal entities (enabled) or not (disabled). Enabled Exclude Trailing Punctuation From URLs Whether to exclude trailing punctuation from automatically linked URLs (enabled) or not (disabled). For use with Automatic Linking To URLs . Disabled GitHub Code Blocks Whether to enable GitHub Flavored Markdown code blocks (enabled) or not (disabled). Enabled GitHub Compatible Header IDs Whether to generate GitHub Flavored Markdown heading IDs (enabled) or not (disabled). GitHub Flavored Markdown generates heading IDs with - in place of spaces and removes non-alphanumeric characters. Disabled GitHub Mention Link Change the link used with GitHub Mentions . Disabled GitHub Mentions Whether to support tagging GitHub users with @ (enabled) or not (disabled). When enabled, n8n replaces @name with https://github.com/name . Disabled GitHub Task Lists Whether to support GitHub Flavored Markdown task lists (enabled) or not (disabled). Disabled Header Level Start Number. Set the start level for headers. For example, changing this field to 2 causes n8n to treat # as <h2> , ## as <h3> , and so on. 1 Mandatory Space Before Header Whether to make a space between # and heading text required (enabled) or not (disabled). When enabled, n8n renders a heading written as ##Some header text literally (it doesn't turn it into a heading element) Disabled Middle Word Asterisks Whether n8n should treat asterisks in words as Markdown (disabled) or render them as literal asterisks (enabled). Disabled Middle Word Underscores Whether n8n should treat underscores in words as Markdown (disabled) or render them as literal underscores (enabled). Disabled No Header ID Disable automatic generation of header IDs (enabled). Disabled Parse Image Dimensions Support setting maximum image dimensions in Markdown syntax (enabled). Disabled Prefix Header ID Define a prefix to add to header IDs. None Raw Header ID Whether to remove spaces, ' , and " from header IDs, including prefixes, replacing them with - (enabled) or not (disabled). Disabled Raw Prefix Header ID Whether to prevent n8n from modifying header prefixes (enabled) or not (disabled) Disabled Simple Line Breaks Whether to create line breaks without a double space at the end of a line (enabled) or not (disabled). Disabled Smart Indentation Fix Whether to try to smartly fix indentation problems related to ES6 template strings in indented code blocks (enabled) or not (disabled). Disabled Spaces Indented Sublists Whether to remove the requirement to indent sublists four spaces (enabled) or not (disabled). Disabled Split Adjacent Blockquotes Whether to split adjacent blockquote blocks (enabled) or not (disabled). If you don't enable this, n8n treats quotes (indicated by > at the start of the line) on separate lines as a single blockquote, even when separated by an empty line. Disabled Strikethrough Whether to support strikethrough syntax (enabled) or not (disabled). When enabled, you can add a ~~strikethrough~~ effect using ~~ around the word or phrase. Disabled Tables Header ID Whether to add an ID to table header tags (enabled) or not (disabled). Disabled Tables Support Whether to support tables (enabled) or not (disabled). Disabled HTML to Markdown options # Option Description Default Bullet Marker Specify the character to use for unordered lists. * Code Block Fence Specify the characters to use for code blocks. ``` Emphasis Delimiter Specify the character <em> . _ Global Escape Pattern Overrides the default character escape settings. You may want to use Text Replacement Pattern instead. None Ignored Elements Ignore given HTML elements, and their children. None Keep Images With Data Whether to keep images with data (enabled) or not (disabled). Support files up to 1MB. Disabled Line Start Escape Pattern Overrides the default character escape settings. You may want to use Text Replacement Pattern instead. None Max Consecutive New Lines Number. Specify the maximum number of consecutive new lines allowed. 3 Place URLs At The Bottom Whether to place URLs at the bottom of the page and format using link reference definitions (enabled) or not (disabled). Disabled Strong Delimiter Specify the characters for <strong> . ** Style For Code Block Specify the styling for code blocks. Options are Fence and Indented . Fence Text Replacement Pattern Define a text replacement pattern using regex. None Treat As Blocks Specify HTML elements to treat as blocks (surround with blank lines) None Templates and examples # AI agent that can scrape webpages by Eduard View template details Autonomous AI crawler by Oskar View template details ✨ Vision-Based AI Agent Scraper - with Google Sheets, ScrapingBee, and Gemini by Dataki View template details Browse Markdown integration templates , or search all templates Parsers # n8n uses the following parsers: To convert from HTML to Markdown: node-html-markdown . To convert from Markdown to HTML: Showdown . Some options allow you to extend your Markdown with GitHub Flavored Markdown . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.merge/

Merge # Use the Merge node to combine data from multiple streams, once data of all streams is available. Major changes in 0.194.0 The n8n team overhauled this node in n8n 0.194.0. This document reflects the latest version of the node. If you're using an older version of n8n, you can find the previous version of this document here . Minor changes in 1.49.0 n8n version 1.49.0 introduced the option to add more than two inputs. Older versions only support up to two inputs. If you're running an older version and want to combine multiple inputs in these versions, use the Code node . The Mode > SQL Query feature was also added in n8n version 1.49.0 and isn't available in older versions. Node parameters # You can specify how the Merge node should combine data from different data streams by choosing a Mode : Append # Keep data from all inputs. Choose a Number of Inputs to output items of each input, one after another. The node waits for the execution of all connected inputs. Append mode inputs and output Combine # Combine data from two inputs. Select an option in Combine By to determine how you want to merge the input data. Matching Fields # Compare items by field values. Enter the fields you want to compare in Fields to Match . n8n's default behavior is to keep matching items. You can change this using the Output Type setting: Keep Matches : Merge items that match. This is like an inner join. Keep Non-Matches : Merge items that don't match. Keep Everything : Merge items together that do match and include items that don't match. This is like an outer join. Enrich Input 1 : Keep all data from Input 1, and add matching data from Input 2. This is like a left join. Enrich Input 2 : Keep all data from Input 2, and add matching data from Input 1. This is like a right join. Combine by Matching Fields mode inputs and output Position # Combine items based on their order. The item at index 0 in Input 1 merges with the item at index 0 in Input 2, and so on. Combine by Position mode inputs and output All Possible Combinations # Output all possible item combinations, while merging fields with the same name. Combine by All Possible Combinations mode inputs and output Combine mode options # When merging data by Mode > Combine , you can set these Options : Clash Handling : Choose how to merge when data streams clash, or when there are sub-fields. Refer to Clash handling for details. Fuzzy Compare : Whether to tolerate type differences when comparing fields (enabled), or not (disabled, default). For example, when you enable this, n8n treats "3" and 3 as the same. Disable Dot Notation : This prevents accessing child fields using parent.child in the field name. Multiple Matches : Choose how n8n handles multiple matches when comparing data streams. Include All Matches : Output multiple items if there are multiple matches, one for each match. Include First Match Only : Keep the first item per match and discard the remaining multiple matches. Include Any Unpaired Items : Choose whether to keep or discard unpaired items when merging by position. The default behavior is to leave out the items without a match. Clash Handling # If multiple items at an index have a field with the same name, this is a clash. For example, if all items in both Input 1 and Input 2 have a field named language , these fields clash. By default, n8n prioritizes Input 2, meaning if language has a value in Input 2, n8n uses that value when merging the items. You can change this behavior by selecting Options > Clash Handling : When Field Values Clash : Choose which input to prioritize, or choose Always Add Input Number to Field Names to keep all fields and values, with the input number appended to the field name to show which input it came from. Merging Nested Fields Deep Merge : Merge properties at all levels of the items, including nested objects. This is useful when dealing with complex, nested data structures where you need to ensure the merging of all levels of nested properties. Shallow Merge : Merge properties at the top level of the items only, without merging nested objects. This is useful when you have flat data structures or when you only need to merge top-level properties without worrying about nested properties. SQL Query # Write a custom SQL Query to merge the data. Example: 1 SELECT * FROM input1 LEFT JOIN input2 ON input1 . name = input2 . id Data from previous nodes are available as tables and you can use them in the SQL query as input1, input2, input3, and so on, based on their order. Refer to AlaSQL GitHub page for a full list of supported SQL statements. Choose Branch # Choose which input to keep. This option always waits until the data from both inputs is available. You can choose to Output : The Input 1 Data The Input 2 Data A Single, Empty Item The node outputs the data from the chosen input, without changing it. Templates and examples # Scrape and summarize webpages with AI by n8n Team View template details Telegram AI Chatbot by Eduard View template details Joining different datasets by Jonathan View template details Browse Merge integration templates , or search all templates Merging data streams with uneven numbers of items # The items passed into Input 1 of the Merge node will take precedence. For example, if the Merge node receives five items in Input 1 and 10 items in Input 2, it only processes five items. The remaining five items from Input 2 aren't processed. Branch execution with If and Merge nodes # 0.236.0 and below n8n removed this execution behavior in version 1.0. This section applies to workflows using the v0 (legacy) workflow execution order. By default, this is all workflows built before version 1.0. You can change the execution order in your workflow settings . If you add a Merge node to a workflow containing an If node, it can result in both output data streams of the If node executing. One data stream triggers the Merge node, which then goes and executes the other data stream. For example, in the screenshot below there's a workflow containing an Edit Fields node, If node, and Merge node. The standard If node behavior is to execute one data stream (in the screenshot, this is the true output). However, due to the Merge node, both data streams execute, despite the If node not sending any data down the false data stream. Try it out: A step by step example # Create a workflow with some example input data to try out the Merge node. Set up sample data using the Code nodes # Add a Code node to the canvas and connect it to the Start node. Paste the following JavaScript code snippet in the JavaScript Code field: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 return [ { json : { name : 'Stefan' , language : 'de' , } }, { json : { name : 'Jim' , language : 'en' , } }, { json : { name : 'Hans' , language : 'de' , } } ]; Add a second Code node, and connect it to the Start node. Paste the following JavaScript code snippet in the JavaScript Code field: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 return [ { json : { greeting : 'Hello' , language : 'en' , } }, { json : { greeting : 'Hallo' , language : 'de' , } } ]; Try out different merge modes # Add the Merge node. Connect the first Code node to Input 1 , and the second Code node to Input 2 . Run the workflow to load data into the Merge node. The final workflow should look like this: View template details Now try different options in Mode to see how it affects the output data. Append # Select Mode > Append , then select Test step . Your output in table view should look like this: name language greeting Stefan de Jim en Hans de en Hello de Hallo Combine by Matching Fields # You can merge these two data inputs so that each person gets the correct greeting for their language. Select Mode > Combine . Select Combine by > Matching Fields . In both Input 1 Field and Input 2 Field , enter language . This tells n8n to combine the data by matching the values in the language field in each data set. Select Test step . Your output in table view should look like this: name language greeting Stefan de Hallo Jim en Hello Hans de Hallo Combine by Position # Select Mode > Combine , Combine by > Position , then select Test step . Your output in table view should look like this: name language greeting Stefan en Hello Jim de Hallo Keep unpaired items # If you want to keep all items, select Add Option > Include Any Unpaired Items , then turn on Include Any Unpaired Items . Your output in table view should look like this: name language greeting Stefan en Hello Jim de Hallo Hans de Combine by All Possible Combinations # Select Mode > Combine , Combine by > All Possible Combinations , then select Test step . Your output in table view should look like this: name language greeting Stefan en Hello Stefan de Hallo Jim en Hello Jim de Hallo Hans en Hello Hans de Hallo Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.n8ntrigger/

n8n Trigger node # The n8n Trigger node triggers when the current workflow updates or activates, or when the n8n instance starts or restarts. You can use the n8n Trigger node to notify when these events occur. Node parameters # The node includes a single parameter to identify the Events that should trigger it. Choose from these events: Active Workflow Updated : If you select this event, the node triggers when this workflow is updated. Instance started : If you select this event, the node triggers when the n8n instance starts or restarts. Workflow Activated : If you select this event, the node triggers when this workflow is activated. You can select one or more of these events. Templates and examples # Very quick quickstart by Deborah View template details AI agent that can scrape webpages by Eduard View template details Pulling data from services that n8n doesn’t have a pre-built integration for by Jonathan View template details Browse n8n Trigger integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.n8n/

n8n # A node to integrate with n8n itself. This node allows you to consume the n8n API in your workflows. Refer to the n8n REST API documentation for more information on using the n8n API. Refer to API endpoint reference for working with the API endpoints directly. Credentials You can find authentication information for this node in the API authentication documentation. SSL This node doesn't support SSL. If your server requires an SSL connection, use the HTTP Request node to call the n8n API . The HTTP Request node has options to provide the SSL certificate . Operations # Audit Generate a security audit Credential Create a credential Delete a credential Get Schema : Use this operation to get credential data schema for type Execution Get an execution Get Many executions Delete an execution Workflow Activate a workflow Create a workflow Deactivate a workflow Delete a workflow Get a workflow Get Many workflows Update a workflow Generate audit # This operation has no parameters. Configure it with these options: Categories : Select the risk categories you want the audit to include. Options include: Credentials Database Filesystem Instance Nodes Days Abandoned Workflow : Use this option to set the number of days without execution after which a workflow should be considered abandoned. Enter a number of days. The default is 90 . Create credential # Configure this operation with these parameters: Name : Enter the name of the credential you'd like to create. Credential Type : Enter the credential's type. The available types depend on nodes installed on the n8n instance. Some built-in types include githubApi , notionApi , and slackApi . Data : Enter a valid JSON object with the required properties for this Credential Type . To see the expected format, use the Get Schema operation. Delete credential # Configure this operation with this parameter: Credential ID : Enter the ID of the credential you want to delete. Get credential schema # Configure this operation with this parameter: Credential Type : Enter the credential's type. The available types depend on nodes installed on the n8n instance. Some built-in types include githubApi , notionApi , and slackApi . Get execution # Configure this operation with this parameter: Execution ID : Enter the ID of the execution you want to retrieve. Get execution option # You can further configure this operation with this Option : Include Execution Details : Use this control to set whether to include the detailed execution data (turned on) or not (turned off). Get many executions # Configure this operation with these parameters: Return All : Set whether to return all results (turned on) or whether to limit the results to the entered Limit (turned on). Limit : Set the number of results to return if the Return All control is turned off. Get many executions filters # You can further configure this operation with these Filters : Workflow : Filter the executions by workflow. Options include: From list : Select a workflow to use as a filter. By URL : Enter a workflow URL to use as a filter. By ID : Enter a workflow ID to use as a filter. Status : Filter the executions by status. Options include: Error Success Waiting Get many execution options # You can further configure this operation with this Option : Include Execution Details : Use this control to set whether to include the detailed execution data (turned on) or not (turned off). Delete execution # Configure this operation with this parameter: Execution ID : Enter the ID of the execution you want to delete. Activate, deactivate, delete, and get workflow # The Activate , Deactivate , Delete , and Get workflow operations all include the same parameter for you to select the Workflow you want to perform the operation on. Options include: From list : Select the workflow from the list. By URL : Enter the URL of the workflow. By ID : Enter the ID of the workflow. Create workflow # Configure this operation with this parameter: Workflow Object : Enter a valid JSON object with the new workflow's details. The object requires these fields: name nodes connections settings Refer to the n8n API | Create a workflow documentation for more information. Get many workflows # Configure this operation with these parameters: Return All : Set whether to return all results (turned on) or whether to limit the results to the entered Limit (turned on). Limit : Set the number of results to return if the Return All control is turned off. Get many workflows filters # You can further configure this operation with these Filters : Return Only Active Workflows : Select whether to return only active workflows (turned on) or active and inactive workflows (turned off). Tags : Enter a comma-separated list of tags the returned workflows must have. Update workflow # Configure this operation with these parameters: Workflow : Select the workflow you want to update. Options include: From list : Select the workflow from the list. By URL : Enter the URL of the workflow. By ID : Enter the ID of the workflow. Workflow Object : Enter a valid JSON object to update the workflow with. The object requires these fields: name nodes connections settings Refer to the n8n API | Update a workflow documentation for more information. Templates and examples # Very quick quickstart by Deborah View template details AI agent that can scrape webpages by Eduard View template details Pulling data from services that n8n doesn’t have a pre-built integration for by Jonathan View template details Browse n8n integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.readwritefile/

Read/Write Files from Disk # Use the Read/Write Files from Disk node to read and write files from/to the machine where n8n is running. Self-hosted n8n only This node isn't available on n8n Cloud. Operations # Read File(s) From Disk : Use this operation to retrieve one or more files from the computer that runs n8n. Write File to Disk : Use this operation to create a binary file on the computer that runs n8n. Refer to the sections below for more information on configuring the node for each operation. Read File(s) From Disk # Configure this operation with these parameters: File(s) Selector : Enter the path of the file you want to read. To enter multiple files, enter a page path pattern. You can use these characters to define a path pattern: * : Matches any character zero or more times, excluding path separators. ** : Matches any character zero or more times, include path separators. ? : Matches any character except for path separators one time. [] : Matches any characters inside the brackets. For example, [abc] would match the characters a , b , or c , and nothing else. Refer to Picomatch's Basic globbing documentation for more information on these characters and their expected behavior. Read File(s) From Disk options # You can also configure this operation with these Options : File Extension : Enter the extension for the file in the node output. File Name : Enter the name for the file in the node output. MIME Type : Enter the file's MIME type in the node output. Refer to Common MIME types for a list of file extensions and their MIME types. Put Output File in Field : Enter the name of the field in the output data to contain the file. Write File to Disk # Configure this operation with these parameters: File Path and Name : Enter the destination for the file, the file's name, and the file's extension. Input Binary Field : Enter the name of the field in the node input data that will contain the binary file. Write File to Disk options # You can also configure this operation with these Options : This operation includes a single option, whether to Append data to an existing file instead of creating a new one (turned on) or to create a new file instead of appending to existing (turned off). Templates and examples # Talk to your SQLite database with a LangChain AI Agent 🧠💬 by Yulia View template details Generate SQL queries from schema only - AI-powered by Yulia View template details Breakdown Documents into Study Notes using Templating MistralAI and Qdrant by Jimleuk View template details Browse Read/Write Files from Disk integration templates , or search all templates File locations # If you run n8n in Docker, your command runs in the n8n container and not the Docker host. This node looks for files relative to the n8n install path. n8n recommends using absolute file paths to prevent any errors. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.removeduplicates/

Remove Duplicates node # Use the Remove Duplicates node to identify and delete items that are: identical across all fields or a subset of fields in a single execution identical to or surpassed by items seen in previous executions This is helpful in situations where you can end up with duplicate data, such as a user creating multiple accounts, or a customer submitting the same order multiple times. When working with large datasets it becomes more difficult to spot and remove these items. By comparing against data from previous executions, the Remove Duplicates node can delete items seen in earlier executions. It can also ensure that new items have a later date or a higher value than previous values. Major changes in 1.64.0 The n8n team overhauled this node in n8n 1.64.0. This document reflects the latest version of the node. If you're using an older version of n8n, you can find the previous version of this document here . Operation modes # The remove duplication node works differently depending on the value of the operation parameter: Remove Items Repeated Within Current Input : Identify and remove duplicate items in the current input across all fields or a subset of fields. Remove Items Processed in Previous Executions : Compare items in the current input to items from previous executions and remove duplicates. Clear Deduplication History : Wipe the memory of items from previous executions. Remove Items Repeated Within Current Input # When you set the "Operations" field to Remove Items Repeated Within Current Input , the Remove Duplicate node identifies and removes duplicate items in the current input. It can do this across all fields, or within a subset of fields. Remove Items Repeated Within Current Input parameters # When using the Remove Items Repeated Within Current Input operation, the following parameter is available: Compare : Select which fields of the input data n8n should compare to check if they're the same. The following options are available: All Fields : Compares all fields of the input data. All Fields Except : Enter which input data fields n8n should exclude from the comparison. You can provide multiple values separated by commas. Selected Fields : Enter which input data fields n8n should include in the comparison. You can provide multiple values separated by commas. Remove Items Repeated Within Current Input options # If you choose All Fields Except or Selected Fields as your compare type, you can add these options: Disable Dot Notation : Set whether to use dot notation to reference child fields in the format parent.child (turned off) or not (turn on). Remove Other Fields : Set whether to remove any fields that aren't used in the comparison (turned on) or not (turned off). Remove Items Processed in Previous Executions # When you set the "Operation" field to Remove Items Processed in Previous Executions , the Remove Duplicate node compares items in the current input to items from previous executions. Remove Items Processed in Previous Executions parameters # When using the Remove Items Processed in Previous Executions operation, the following parameters are available: Keep Items Where : Select how n8n decides which items to keep. The following options are available: Value Is New : n8n removes items if their value matches items from earlier executions. Value Is Higher than Any Previous Value : n8n removes items if the current value isn't higher than previous values. Value Is a Date Later than Any Previous Date : n8n removes date items if the current date isn't later than previous dates. Value to Dedupe On : The input field or fields to compare. The option you select for the Keep Items Where parameter determines the exact format you need: When using Value Is New , this must be an input field or combination of fields with a unique ID. When using Value Is Higher than Any Previous Value , this must be an input field or combination of fields that has an incremental value. When using Value Is a Date Later than Any Previous Date , this must be an input field that has a date value in ISO format. Remove Items Processed in Previous Executions options # When using the Remove Items Processed in Previous Executions operation, the following option is available: Scope : Sets how n8n stores and uses the deduplication data for comparisons. The following options are available: Node : (default) Stores the data for this node independently from other Remove Duplicates instances in the workflow. When you use this scope, you can clear the duplication history for this node instance without affecting other nodes. Workflow : Stores the duplication data at the workflow level. This shares duplication data with any other Remove Duplicate nodes set to use "workflow" scope. n8n will still manage the duplication data for other Remove Duplicate nodes set to "node" scope independently. When you select Value Is New as your Keep Items Where choice, this option is also available: History Size : The number of items for n8n to store to track duplicates across executions. The value of the Scope option determines whether this history size is specific to this individual Remove Duplicate node instance or shared with other instances in the workflow. By default, n8n stores 10,000 items. Clear Deduplication History # When you set the "Operation" field to Clear Deduplication History , the Remove Duplicates node manages and clears the stored items from previous executions. This operation doesn't affect any items in the current input. Instead, it manages the database of items that the "Remove Items Processed in Previous Executions" operation uses. Clear Deduplication History parameters # When using the Clear Deduplication History operation, the following parameter is available: Mode : How you want to manage the key / value items stored in the database. The following option is available: Clean Database : Deletes all duplication data stored in the database. This resets the duplication database to its original state. Clear Deduplication History options # When using the Clear Deduplication History operation, the following option is available: Scope : Sets the scope n8n uses when managing the duplication database. Node : (default) Manages the duplication database specific to this Remove Duplicates node instance. Workflow : Manages the duplication database shared by all Remove Duplicate node instances that use workflow scope. Templates and examples # For templates using the Remove Duplicates node and examples of how to use it, refer to Templates and examples . Related resources # Learn more about data structure and data flow in n8n workflows. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.renamekeys/

Rename Keys # Use the Rename Keys node to rename the keys of a key-value pair in n8n. Node parameters # You can rename one or multiple keys using the Rename Keys node. Select the Add new key button to rename a key. For each key, enter the: Current Key Name : The current name of the key you want to rename. New Key Name : The new name you want to assign to the key. Node options # Choose whether to use a Regex regular expression to identify keys to rename. To use this option, you must also enter: The Regular Expression you'd like to use. Replace With : Enter the new name you want to assign to the key(s) that match the Regular Expression . You can also choose these Regex-specific options: Case Insensitive : Set whether the regular expression should match case (turned off) or be case insensitive (turned on). Max Depth : Enter the maximum depth to replace keys, using -1 for unlimited and 0 for top-level only. Regex impacts Using a regular expression can affect any keys that match the expression, including keys you've already renamed. Templates and examples # Create Salesforce accounts based on Excel 365 data by Tom View template details Parse DMARC reports, save them in database and notify on DKIM or SPF error by Łukasz View template details Create Salesforce accounts based on Google Sheets data by Tom View template details Browse Rename Keys integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.respondtowebhook/

Respond to Webhook # Use the Respond to Webhook node to control the response to incoming webhooks. This node works with the Webhook node. Runs once for the first data item The Respond to Webhook node runs once, using the first incoming data item. Refer to Return more than one data item for more information. How to use Respond to Webhook # To use the Respond to Webhook node: Add a Webhook node as the trigger node for the workflow. In the Webhook node, set Respond to Using 'Respond to Webhook' node . Add the Respond to Webhook node anywhere in your workflow. If you want it to return data from other nodes, place it after those nodes. Node parameters # Configure the node behavior using these parameters. Respond With # Choose what data to send in the webhook response. All Incoming Items : Respond with all the JSON items from the input. Binary : Respond with a binary file defined in Response Data Source . First Incoming Item : Respond with the first incoming item's JSON. JSON : Respond with a JSON object defined in Response Body . No Data : No response payload. Redirect : Redirect to a URL set in Redirect URL . Text : Respond with text set in Response Body . Node options # Select Add Option to view and set the options. Response Code : Set the response code to use. Response Headers : Define the response headers to send. Put Response in Field : Available when you respond with All Incoming Items or First Incoming Item . Set the field name for the field containing the response data. Templates and examples # Creating an API endpoint by Jonathan View template details Write a WordPress post with AI (starting from a few keywords) by Giulio View template details ⚡AI-Powered YouTube Video Summarization & Analysis by Joseph LePage View template details Browse Respond to Webhook integration templates , or search all templates Workflow behavior # When using the Respond to Webhook node, workflows behave as follows: The workflow finishes without executing the Respond to Webhook node: it returns a standard message with a 200 status. The workflow errors before the first Respond to Webhook node executes: the workflow returns an error message with a 500 status. A second Respond to Webhook node executes after the first one: the workflow ignores it. A Respond to Webhook node executes but there was no webhook: the workflow ignores the Respond to Webhook node. Return more than one data item (deprecated) # Deprecated in 1.22.0 n8n 1.22.0 added support for returning all data items using the All Incoming Items option. n8n recommends upgrading to the latest version of n8n, instead of using the workarounds described in this section. The Respond to Webhook node runs once, using the first incoming data item. This includes when using expressions . You can't force looping using the Loop node: the workflow will run, but the webhook response will still only contain the results of the first execution. If you need to return more than one data item, choose one of these options: Instead of using the Respond to Webhook node, use the When Last Node Finishes option in Respond in the Webhook node. Use this when you want to return the final data that the workflow outputs. Use the Aggregate node to turn multiple items into a single item before passing the data to the Respond to Webhook node. Set Aggregate to All Item Data (Into a Single List) . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.rssfeedreadtrigger/

RSS Feed Trigger node # The RSS Feed Trigger node allows you to start an n8n workflow when a new RSS feed item has been published. On this page, you'll find a list of operations the RSS Feed Trigger node supports, and links to more resources. Node parameters # Poll Times : Select a poll Mode to set how often to trigger the poll. Your Mode selection will add or remove relevant fields. Refer to the sections below to configure the parameters for each mode type. Feed URL : Enter the URL of the RSS feed to poll. Every Hour mode # Enter the Minute of the hour to trigger the poll, from 0 to 59 . Every Day mode # Enter the Hour of the day to trigger the poll in 24-hour format, from 0 to 23 . Enter the Minute of the hour to trigger the poll, from 0 to 59 . Every Week mode # Enter the Hour of the day to trigger the poll in 24-hour format, from 0 to 23 . Enter the Minute of the hour to trigger the poll, from 0 to 59 . Select the Weekday to trigger the poll. Every Month mode # Enter the Hour of the day to trigger the poll in 24-hour format, from 0 to 23 . Enter the Minute of the hour to trigger the poll, from 0 to 59 . Enter the Day of the Month to trigger the poll, from 0 to 31 . Every X mode # Enter the Value of measurement for how often to trigger the poll in either minutes or hours. Select the Unit for the value. Supported units are Minutes and Hours . Custom mode # Enter a custom Cron Expression to trigger the poll. Use these values and ranges: Seconds: 0 - 59 Minutes: 0 - 59 Hours: 0 - 23 Day of Month: 1 - 31 Months: 0 - 11 (Jan - Dec) Day of Week: 0 - 6 (Sun - Sat) To generate a Cron expression, you can use crontab guru . Paste the Cron expression that you generated using crontab guru in the Cron Expression field in n8n. Examples # If you want to trigger your workflow every day at 04:08:30, enter the following in the Cron Expression field. 1 30 8 4 * * * If you want to trigger your workflow every day at 04:08, enter the following in the Cron Expression field. 1 8 4 * * * Why there are six asterisks in the Cron expression # The sixth asterisk in the Cron expression represents seconds. Setting this is optional. The node will execute even if you don't set the value for seconds. * * * * * * second minute hour day of month month day of week Templates and examples # Create an RSS feed based on a website's content by Tom View template details Scrape and summarize posts of a news site without RSS feed using AI and save them to a NocoDB by Askan View template details Share YouTube Videos with AI Summaries on Discord by Mike Russell View template details Browse RSS Feed Trigger integration templates , or search all templates Related resources # n8n provides an app node for RSS Feeds. You can find the node docs here . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.rssfeedread/

RSS Read # Use the RSS Read node to read data from RSS feeds published on the internet. Node parameters # URL : Enter the URL for the RSS publication you want to read. Node options # Ignore SSL Issues : Choose whether n8n should ignore SSL/TLS verification (turned on) or not (turned off). Templates and examples # Get data from multiple RSS feeds to Telegram by Valor View template details Read RSS feed from two different sources by Deborah View template details AI-Powered Information Monitoring with OpenAI, Google Sheets, Jina AI and Slack by Dataki View template details Browse RSS Read integration templates , or search all templates Related resources # n8n provides a trigger node for RSS Read. You can find the trigger node docs here . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger/

Schedule Trigger node # Use the Schedule Trigger node to run workflows at fixed intervals and times. This works in a similar way to the Cron software utility in Unix-like systems. You must activate the workflow If a workflow uses the Schedule node as a trigger, make sure that you save and activate the workflow. Timezone settings The node relies on the timezone setting. n8n uses either: The workflow timezone, if set. Refer to Workflow settings for more information. The n8n instance timezone, if the workflow timezone isn't set. The default is America/New York for self-hosted instances. n8n Cloud tries to detect the instance owner's timezone when they sign up, falling back to GMT as the default. Self-hosted users can change the instance setting using Environment variables . Cloud admins can change the instance timezone in the Admin dashboard . Node parameters # Add Trigger Rules to determine when the trigger should run. Use the Trigger Interval to select the time interval unit of measure to schedule the trigger for. All other parameters depend on the interval you select. Choose from: Seconds trigger interval Minutes trigger interval Hours trigger interval Days trigger interval Weeks trigger interval Months trigger interval Custom (Cron) interval You can add multiple Trigger Rules to run the node on different schedules. Refer to the sections below for more detail on configuring each Trigger Interval . Refer to Templates and examples for further examples. Seconds trigger interval # Seconds Between Triggers : Enter the number of seconds between each workflow trigger. For example, if you enter 30 here, the trigger will run every 30 seconds. Minutes trigger interval # Minutes Between Triggers : Enter the number of minutes between each workflow trigger. For example, if you enter 5 here, the trigger will run every 5 minutes. Hours trigger interval # Hours Between Triggers : Enter the number of hours between each workflow trigger. Trigger at Minute : Enter the minute past the hour to trigger the node when it runs, from 0 to 59 . For example, if you enter 6 Hours Between Triggers and 30 Trigger at Minute , the node will run every six hours at 30 minutes past the hour. Days trigger interval # Days Between Triggers : Enter the number of days between each workflow trigger. Trigger at Hour : Select the hour of the day to trigger the node. Trigger at Minute : Enter the minute past the hour to trigger the node when it runs, from 0 to 59 . For example, if you enter 2 Days Between Triggers , 9am for Trigger at Hour , and 15 Trigger at Minute , the node will run every two days at 9:15am. Weeks trigger interval # Weeks Between Triggers : Enter the number of weeks between each workflow trigger. Trigger on Weekdays : Select the day(s) of the week you want to trigger the node. Trigger at Hour : Select the hour of the day to trigger the node. Trigger at Minute : Enter the minute past the hour to trigger the node when it runs, from 0 to 59 . For example, if you enter 2 Weeks Between Triggers , Monday for Trigger on Weekdays , 3pm for Trigger at Hour , and 30 Trigger at Minute , the node will run every two weeks on Monday at 3:30 PM. Months trigger interval # Months Between Triggers : Enter the number of months between each workflow trigger. Trigger at Day of Month : Enter the day of the month the day should trigger at, from 1 to 31 . If a month doesn't have this day, the node won't trigger. For example, if you enter 30 here, the node won't trigger in February. Trigger at Hour : Select the hour of the day to trigger the node. Trigger at Minute : Enter the minute past the hour to trigger the node when it runs, from 0 to 59 . For example, if you enter 3 Months Between Triggers , 28 Trigger at Day of Month , 9am for Trigger at Hour , and 0 Trigger at Minute , the node will run each quarter on the 28th day of the month at 9:00 AM. Custom (Cron) interval # Enter a custom cron Expression to set the schedule for the trigger. To generate a Cron expression, you can use crontab guru . Paste the Cron expression that you generated using crontab guru in the Expression field in n8n. Examples # Type Cron Expression Description Every X Seconds */10 * * * * * Every 10 seconds. Every X Minutes */5 * * * * Every 5 minutes. Hourly 0 * * * * Every hour on the hour. Daily 0 6 * * * At 6:00 AM every day. Weekly 0 12 * * 1 At noon every Monday. Monthly 0 0 1 * * At midnight on the 1st of every month. Every X Days 0 0 */3 * * At midnight every 3rd day. Only Weekdays 0 9 * * 1-5 At 9:00 AM Monday through Friday. Custom Hourly Range 0 9-17 * * * Every hour from 9:00 AM to 5:00 PM every day. Quarterly 0 0 1 1,4,7,10 * At midnight on the 1st of January, April, July, and October. Using variables in the Cron expression While variables can be used in the scheduled trigger, their values only get evaluated when the workflow is activated. If you alter a variable's value in the settings after a workflow is activated, the changes won't alter the cron schedule. To re-evaluate the variable, set the workflow to Inactive and then back to Active again Why there are six asterisks in the Cron expression # The sixth asterisk in the Cron expression represents seconds. Setting this is optional. The node will execute even if you don't set the value for seconds. (*) * * * * * (second) minute hour day of month month day of week(Sun-Sat) Templates and examples # Browse Schedule Trigger integration templates , or search all templates Common issues # For common questions or issues and suggested solutions, refer to Common Issues . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.sendemail/

Send Email # The Send Email node sends emails using an SMTP email server. Credential You can find authentication information for this node here . Node parameters # This node can be used as an AI tool This node can be used to enhance the capabilities of an AI agent. When used in this way, many parameters can be set automatically, or with information directed by AI - find out more in the AI tool parameters documentation . Configure this node using the following parameters. Credential to connect with # Select or create an SMTP account credential for the node to use. From Email # Enter the email address you want to send the email from. You can also include a name using this format: Name Name <email@sample.com> , for example: Nathan Doe <nate@n8n.io> . To Email # Enter the email address you want to send the email to. You can also include a name using this format: Name Name <email@sample.com> , for example: Nathan Doe <nate@n8n.io> . Subject # Enter the subject line for the email. Email Format # Select the format to send the email in. Choose from: Text : Send the email in plain-text format. HTML : Send the email in HTML format. Both : Send the email in both formats. If you choose this option, the email recipient's client will set which format to display. Node options # Use these Options to further refine the node's behavior. Append n8n Attribution # Set whether to include the phrase This email was sent automatically with n8n at the end of the email (turned on) or not (turned off). Attachments # Enter the name of the binary properties that contain data to add as an attachment. Some tips on using this option: Use the Read/Write Files from Disk node or the HTTP Request node to upload the file to your workflow. Add multiple attachments by entering a comma-separated list of binary properties. Reference embedded images or other content within the body of an email message, for example <img src="cid:image_1"> . CC Email # Enter an email address for the cc: field. BCC Email # Enter an email address for the bcc: field. Ignore SSL Issues # Set whether n8n should ignore failures with TLS/SSL certificate validation (turned on) or enforce them (turned off). Reply To # Enter an email address for the Reply To field. Templates and examples # Personalize marketing emails using customer data and AI by n8n Community View template details Send an email by amudhan View template details AI marketing report (Google Analytics & Ads, Meta Ads), sent via email/Telegram by Friedemann Schuetz View template details Browse Send Email integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set/

Edit Fields (Set) # Use the Edit Fields node to set workflow data. This node can set new data as well as overwrite data that already exists. This node is crucial in workflows which expect incoming data from previous nodes, such as when inserting values to Google Sheets or databases. Node parameters # The are the settings and options available in the Edit Fields node. Mode # You can either use Manual Mapping to edit fields using the GUI or JSON Output to write JSON that n8n adds to the input data. Fields to Set # If you select Mode > Manual Mapping , you can configure the fields by dragging and dropping values from INPUT . The default behavior when you drag a value is: n8n sets the value's name as the field name. The field value contains an expression which accesses the value. If you don't want to use expressions: Hover over a field. n8n displays the Fixed | Expressions toggle. Select Fixed . You can do this for both the name and value of the field. Keep Only Set Fields # Enable this to discard any input data that you don't use in Fields to Set . Include in Output # Choose which input data to include in the node's output data. Node options # Use these options to customize the behavior of the node. Include Binary Data # If the input data includes binary data, choose whether to include it in the Edit Fields node's output data. Ignore Type Conversion Errors # Manual Mapping only. Enabling this allows n8n to ignore some data type errors when mapping fields. Support Dot Notation # By default, n8n supports dot notation. For example, when using manual mapping, the node follows the dot notation for the Name field. That means if you set the name in the Name field as number.one and the value in the Value field as 20 , the resulting JSON is: 1 { "number" : { "one" : 20 } } You can prevent this behavior by selecting Add Option > Support Dot Notation , and setting the Dot Notion field to off. Now the resulting JSON is: 1 { "number.one" : 20 } Templates and examples # Creating an API endpoint by Jonathan View template details Scrape and summarize webpages with AI by n8n Team View template details Very quick quickstart by Deborah View template details Browse Edit Fields (Set) integration templates , or search all templates Arrays and expressions in JSON Output mode # You can use arrays and expressions when creating your JSON Output. For example, given this input data generated by the Customer Datastore node: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 [ { "id" : "23423532" , "name" : "Jay Gatsby" , "email" : "gatsby@west-egg.com" , "notes" : "Keeps asking about a green light??" , "country" : "US" , "created" : "1925-04-10" }, { "id" : "23423533" , "name" : "José Arcadio Buendía" , "email" : "jab@macondo.co" , "notes" : "Lots of people named after him. Very confusing" , "country" : "CO" , "created" : "1967-05-05" }, { "id" : "23423534" , "name" : "Max Sendak" , "email" : "info@in-and-out-of-weeks.org" , "notes" : "Keeps rolling his terrible eyes" , "country" : "US" , "created" : "1963-04-09" }, { "id" : "23423535" , "name" : "Zaphod Beeblebrox" , "email" : "captain@heartofgold.com" , "notes" : "Felt like I was talking to more than one person" , "country" : null , "created" : "1979-10-12" }, { "id" : "23423536" , "name" : "Edmund Pevensie" , "email" : "edmund@narnia.gov" , "notes" : "Passionate sailor" , "country" : "UK" , "created" : "1950-10-16" } ] Add the following JSON in the JSON Output field, with Include in Output set to All Input Fields : 1 2 3 4 5 6 7 8 9 { "newKey" : "new value" , "array" : [{{ $jso n .id }}, "{{ $json.name }}" ], "object" : { "innerKey1" : "new value" , "innerKey2" : "{{ $json.id }}" , "innerKey3" : "{{ $json.name }}" , } } You get this output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 [ { "id" : "23423532" , "name" : "Jay Gatsby" , "email" : "gatsby@west-egg.com" , "notes" : "Keeps asking about a green light??" , "country" : "US" , "created" : "1925-04-10" , "newKey" : "new value" , "array" : [ 23423532 , "Jay Gatsby" ], "object" : { "innerKey1" : "new value" , "innerKey2" : "23423532" , "innerKey3" : "Jay Gatsby" } }, { "id" : "23423533" , "name" : "José Arcadio Buendía" , "email" : "jab@macondo.co" , "notes" : "Lots of people named after him. Very confusing" , "country" : "CO" , "created" : "1967-05-05" , "newKey" : "new value" , "array" : [ 23423533 , "José Arcadio Buendía" ], "object" : { "innerKey1" : "new value" , "innerKey2" : "23423533" , "innerKey3" : "José Arcadio Buendía" } }, { "id" : "23423534" , "name" : "Max Sendak" , "email" : "info@in-and-out-of-weeks.org" , "notes" : "Keeps rolling his terrible eyes" , "country" : "US" , "created" : "1963-04-09" , "newKey" : "new value" , "array" : [ 23423534 , "Max Sendak" ], "object" : { "innerKey1" : "new value" , "innerKey2" : "23423534" , "innerKey3" : "Max Sendak" } }, { "id" : "23423535" , "name" : "Zaphod Beeblebrox" , "email" : "captain@heartofgold.com" , "notes" : "Felt like I was talking to more than one person" , "country" : null , "created" : "1979-10-12" , "newKey" : "new value" , "array" : [ 23423535 , "Zaphod Beeblebrox" ], "object" : { "innerKey1" : "new value" , "innerKey2" : "23423535" , "innerKey3" : "Zaphod Beeblebrox" } }, { "id" : "23423536" , "name" : "Edmund Pevensie" , "email" : "edmund@narnia.gov" , "notes" : "Passionate sailor" , "country" : "UK" , "created" : "1950-10-16" , "newKey" : "new value" , "array" : [ 23423536 , "Edmund Pevensie" ], "object" : { "innerKey1" : "new value" , "innerKey2" : "23423536" , "innerKey3" : "Edmund Pevensie" } } ] Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.sort/

Sort # Use the Sort node to organize lists of items in a desired ordering, or generate a random selection. Array sort behavior The Sort operation uses the default JavaScript operation where the elements to be sorted are converted into strings and their values compared. Refer to Mozilla's guide to Array sort to learn more. Node parameters # Configure this node using the Type parameter. Use the dropdown to select how you want to input the sorting from these options. Simple # Performs an ascending or descending sort using the selected fields. When you select this Type : Use the Add Field To Sort By button to input the Field Name . Select whether to use Ascending or Descending order. Simple options # When you select Simple as the Type , you have the option to Disable Dot Notation . By default, n8n enables dot notation to reference child fields in the format parent.child . Use this option to disable dot notation (turned on) or to continue using dot (turned off). Random # Creates a random order in the list. Code # Input custom JavaScript code to perform the sort operation. This is a good option if a simple sort won't meet your needs. Enter your custom JavaScript code in the Code input field. Templates and examples # Automated Web Scraping: email a CSV, save to Google Sheets & Microsoft Excel by Mihai Farcas View template details Get your website indexed by Google automatically by Eduard View template details Transcribing Bank Statements To Markdown Using Gemini Vision AI by Jimleuk View template details Browse Sort integration templates , or search all templates Related resources # Learn more about data structure and data flow in n8n workflows. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.splitinbatches/

Loop Over Items # The Loop Over Items node helps you loop through data. The node saves the original incoming data, and with each iteration, returns a predefined amount of data through the loop output. When the node execution completes, it combines all of the processed data and returns it through the done output. When to use the Loop Over Items node # By default, n8n nodes process input items one at a time. Depending on what you're trying to achieve, you often don't need the Loop Over Items node in your workflow. You can learn more about how n8n processes multiple items on the looping in n8n page. In particular, these two sections are of particular interest to the Loop Over Items node: Loop until all items are processed : describes how the Loop Over Items node differs from normal item processing and when you might want to incorporate this node. Node exceptions : outlines specific cases and nodes where you may need to use the Loop Over Items node to manually build looping logic. Node parameters # Batch Size # Enter the number of items to return with each call. Node options # Reset # If turned on, the node will reset with the current input-data newly initialized with each loop. Use this when you want the Loop Over Items node to treat incoming data as a new set of data instead of a continuation of previous items. For example, you can use the Loop Over Items node with the reset option and an If node to query a paginated service when you don't know how many pages you need in advance. The loop queries pages one at a time, performs any processing, and increments the page number. The loop reset ensures the loop recognizes each iteration as a new set of data. The If node evaluates an exit condition to decide whether to perform another iteration or not. Include a valid termination condition For workflows like the example described above, it's critical to include a valid termination condition for the loop. If your termination condition never matches, your workflow execution will get stuck in an infinite loop. When enabled, you can adjust the reset conditions by switching the parameter representation from Fixed to Expression . The results of your expression evaluation determine when the node will reset item processing. Templates and examples # Back Up Your n8n Workflows To Github by Jonathan View template details OpenAI GPT-3: Company Enrichment from website content by Lucas Perret View template details Scrape business emails from Google Maps without the use of any third party APIs by Akram Kadri View template details Browse Loop Over Items (Split in Batches) integration templates , or search all templates Read RSS feed from two different sources # This workflow allows you to read an RSS feed from two different sources using the Loop Over Items node. You need the Loop Over Items node in the workflow as the RSS Feed Read node only processes the first item it receives. You can also find the workflow on n8n.io. The example walks through building the workflow, but assumes you are already familiar with n8n. To build your first workflow, including learning how to add nodes to a workflow, refer to Try it out . The final workflow looks like this: View workflow file Copy the workflow file above and paste into your instance, or manually build it by following these steps: Add the manual trigger. Add the Code node. Copy this code into the Code node: 1 2 3 4 5 6 7 8 9 10 11 12 return [ { json : { url : 'https://medium.com/feed/n8n-io' , } }, { json : { url : 'https://dev.to/feed/n8n' , } } ]; Add the Loop Over Items node. Configure Loop Over Items: set the batch size to 1 in the Batch Size field. Add the RSS Feed Read node. Select Test Workflow . This runs the workflow to load data into the RSS Feed Read node. Configure RSS Feed Read: map url from the input to the URL field. You can do this by dragging and dropping from the INPUT panel, or using this expression: {{ $json.url }} . Select Test Workflow to run the workflow and see the resulting data. Check that the node has processed all items # To check if the node still has items to process, use the following expression: {{$node["Loop Over Items"].context["noItemsLeft"]}} . This expression returns a boolean value. If the node still has data to process, the expression returns false , otherwise it returns true . Get the current running index of the node # To get the current running index of the node, use the following expression: {{$node["Loop Over Items"].context["currentRunIndex"];}} . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.splitout/

Split Out # Use the Split Out node to separate a single data item containing a list into multiple items. For example, a list of customers, and you want to split them so that you have an item for each customer. Node parameters # Configure this node using the following parameters. Field to Split Out # Enter the field containing the list you want to separate out into individual items. If you're working with binary data inputs, use $binary in an expression to set the field to split out. Include # Select whether and how you want n8n to keep any other fields from the input data with each new individual item. You can select: No Other Fields : No other fields will be included. All Other Fields : All other fields will be included. Selected Other Fields : Only the selected fields will be included. Fields to Include : Enter a comma separated list of the fields you want to include. Node options # Disable Dot Notation # By default, n8n enables dot notation to reference child fields in the format parent.child . Use this option to disable dot notation (turned on) or to continue using dot (turned off). Destination Field Name # Enter the field in the output where the split field contents should go. Include Binary # Choose whether to include binary data from the input in the new output (turned on) or not (turned off). Templates and examples # Scrape and summarize webpages with AI by n8n Team View template details Write a WordPress post with AI (starting from a few keywords) by Giulio View template details Automated Web Scraping: email a CSV, save to Google Sheets & Microsoft Excel by Mihai Farcas View template details Browse Split Out integration templates , or search all templates Related resources # Learn more about data structure and data flow in n8n workflows. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.ssh/

SSH # The SSH node is useful for executing commands using the Secure Shell Protocol. Credentials You can find authentication information for this node here . Operations # Execute a command Download a file Upload a file Uploading files To attach a file for upload, you will need to use an extra node such as the Read/Write Files from Disk node or the HTTP Request node to pass the file as a data property. Execute Command # Configure this operation with these parameters: Credential to connect with : Select an existing or create a new SSH credential to connect with. Command : Enter the command to execute on the remote device. Working Directory : Enter the directory where n8n should execute the command. Download File # Credential to connect with : Select an existing or create a new SSH credential to connect with. Path : Enter the path for the file you want to download. This path must include the file name. The downloaded file will use this file name. To use a different name, use the File Name option. Refer to Download File options for more information. File Property : Enter the name of the object property that holds the binary data you want to download. Download File options # You can further configure this operation with the File Name option. Use this option to override the binary data file name to a name of your choice. Upload File # Credential to connect with : Select an existing or create a new SSH credential to connect with. Input Binary Field : Enter the name of the input binary field that contains the file you want to upload. Target Directory : The directory to upload the file to. The name of the file is taken from the binary data file name. To enter a different name, use the File Name option. Refer to Upload File options for more information. Upload File options # You can further configure this operation with the File Name option. Use this option to override the binary data file name to a name of your choice. Templates and examples # Send Email if server has upgradable packages by Hostinger View template details Docker Registry Cleanup Workflow by Muzaffer AKYIL View template details Check VPS resource usage every 15 minutes by Hostinger View template details Browse SSH integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.stopanderror/

Stop And Error # Use the Stop And Error node to display custom error messages, cause executions to fail under certain conditions, and send custom error information to error workflows. Operations # Error Message Error Object Node parameters # Both operations include one node parameter, the Error Type . Use this parameter to select the type of error to throw. Choose between the two operations: Error Message and Error Object . The other parameters depend on which operation you select. Error Message parameters # The Error Message Error Type adds one parameter, the Error Message field. Enter the message you'd like to throw. Error Object parameters # The Error Object Error Type adds one parameter, the Error Object . Enter a JSON object that contains the error properties you'd like to throw. Templates and examples # Generate Leads with Google Maps by Alex Kim View template details Telegram chat with PDF by felipe biava cataneo View template details User verification and login using Auth0 by Jay Hartley View template details Browse Stop And Error integration templates , or search all templates Related resources # You can use the Stop And Error node with the Error trigger node. Read more about Error workflows in n8n workflows. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.summarize/

Summarize # Use the Summarize node to aggregate items together, in a manner similar to Excel pivot tables. Node parameters # Fields to Summarize # Use these fields to define how you want to summarize your input data. Aggregation : Select the aggregation method to use on a given field. Options include: Append : Append If you select this option, decide whether you want to Include Empty Values or not. Average : Calculate the numeric average of your input data. Concatenate : Combine together values in your input data. If you select this option, decide whether you want to Include Empty Values or not. Separator : Select the separator you want to insert between concatenated values. Count : Count the total number of values in your input data. Count Unique : Count the number of unique values in your input data. Max : Find the highest numeric value in your input data. Min : Find the lowest numeric value in your input data. Sum : Add together the numeric values in your input data. Field : Enter the name of the field you want to perform the aggregation on. Fields to Split By # Enter the name of the input fields that you want to split the summary by (similar to a group by statement). This allows you to get separate summaries based on values in other fields. For example, if our input data contains columns for Sales Rep and Deal Amount and we're performing a Sum on the Deal Amount field, we could split by Sales Rep to get a Sum total for each Sales Rep. To enter multiple fields to split by, enter a comma-separated list. Node options # Continue if Field Not Found # By default, if a Field to Summarize isn't in any items, the node throws an error. Use this option to continue and return a single empty item (turned on) instead or keep the default error behavior (turned off). Disable Dot Notation # By default, n8n enables dot notation to reference child fields in the format parent.child . Use this option to disable dot notation (turned on) or to continue using dot (turned off). Output Format # Select the format for your output format. This option is recommended if you're using Fields to Split By Each Split in a Separate Item : Use this option to generate a separate output item for each split out field. All Splits in a Single Item : Use this option to generate a single item that lists the split out fields. Ignore items without valid fields to group by # Set whether to ignore input items that don't contain the Fields to Split By (turned on) or not (turned off). Templates and examples # Scrape and summarize webpages with AI by n8n Team View template details ⚡AI-Powered YouTube Video Summarization & Analysis by Joseph LePage View template details Transcribe Audio Files, Summarize with GPT-4, and Store in Notion by Pat View template details Browse Summarize integration templates , or search all templates Related resources # Learn more about data structure and data flow in n8n workflows. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.switch/

Switch # Use the Switch node to route a workflow conditionally based on comparison operations. It's similar to the IF node, but supports multiple output routes. Node parameters # Select the Mode the node should use: Rules : Select this mode to build a matching rule for each output. Expression : Select this mode to write an expression to return the output index programmatically. Node configuration depends on the Mode you select. Rules # To configure the node with this operation, use these parameters: Create Routing Rules to define comparison conditions. Use the data type dropdown to select the data type and comparison operation type for your condition. For example, to create a rules for dates after a particular date, select Date & Time > is after . The fields and values to enter into the condition change based on the data type and comparison you select. Refer to Available data type comparisons for a full list of all comparisons by data type. Rename Output : Turn this control on to rename the output field to put matching data into. Enter your desired Output Name . Select Add Routing Rule to add more rules. Rule options # You can further configure the node with this operation using these Options : Fallback Output : Choose how to route the workflow when an item doesn't match any of the rules or conditions. None : Ignore the item. This is the default behavior. Extra Output : Send items to an extra, separate output. Output 0 : Send items to the same output as those matching the first rule. Ignore Case : Set whether to ignore letter case when evaluating conditions (turned on) or enforce letter case (turned off). Less Strict Type Validation : Set whether you want n8n to attempt to convert value types based on the operator you choose (turned on) or not (turned off). Send data to all matching outputs : Set whether to send data to all outputs meeting conditions (turned on) or whether to send the data to the first output matching the conditions (turned off). Expression # To configure the node with this operation, use these parameters: Number of Outputs : Set how many outputs the node should have. Output Index : Create an expression to calculate which input item should be routed to which output. The expression must return a number. Templates and examples # Building Your First WhatsApp Chatbot by Jimleuk View template details Telegram AI Chatbot by Eduard View template details Back Up Your n8n Workflows To Github by Jonathan View template details Browse Switch integration templates , or search all templates Related resources # Refer to Splitting with conditionals for more information on using conditionals to create complex logic in n8n. Available data type comparisons # String # String data type supports these comparisons: exists does not exist is empty is not empty is equal to is not equal to contains does not contain starts with does not start with ends with does not end with matches regex does not match regex Number # Number data type supports these comparisons: exists does not exist is empty is not empty is equal to is not equal to is greater than is less than is greater than or equal to is less than or equal to Date & Time # Date & Time data type supports these comparisons: exists does not exist is empty is not empty is equal to is not equal to is after is before is after or equal to is before or equal to Boolean # Boolean data type supports these comparisons: exists does not exist is empty is not empty is true is false is equal to is not equal to Array # Array data type supports these comparisons: exists does not exist is empty is not empty contains does not contain length equal to length not equal to length greater than length less than length greater than or equal to length less than or equal to Object # Object data type supports these comparisons: exists does not exist is empty is not empty Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.totp/

TOTP # The TOTP node provides a way to generate a TOTP (time-based one-time password). Credentials Refer to TOTP credentials for guidance on setting up authentication. Node parameters # This node can be used as an AI tool This node can be used to enhance the capabilities of an AI agent. When used in this way, many parameters can be set automatically, or with information directed by AI - find out more in the AI tool parameters documentation . Configure this node with these parameters. Credential to connect with # Select or create a TOTP credential for the node to use. Operation # Generate Secret is the only operation currently supported. Node options # Use these Options to further configure the node. Algorithm # Select the HMAC hashing algorithm to use. Default is SHA1. Digits # Enter the number of digits in the generated code. Default is 6 . Period # Enter how many seconds the TOTP is valid for. Default is 30 . Templates and examples # Browse TOTP integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.wait/

Wait # Use the Wait node pause your workflow's execution. When the workflow pauses it offloads the execution data to the database. When the resume condition is met, the workflow reloads the data and the execution continues. Operations # The Wait node can Resume on the following conditions: After Time Interval : The node waits for a certain amount of time. At Specified Time : The node waits until a specific time. On Webhook Call : The node waits until it receives an HTTP call. On Form Submitted : The node waits until it receives a form submission. Refer to the more detailed sections below for more detailed instructions. After Time Interval # Wait for a certain amount of time. This parameter includes two more fields: Wait Amount : Enter the amount of time to wait. Wait Unit : Select the unit of measure for the Wait Amount . Choose from: Seconds Minutes Hours Days Refer to Time-based operations for more detail on how these intervals work and the timezone used. At Specified Time # Wait until a specific date and time to continue. Use the date and time picker to set the Date and Time . Refer to Time-based operations for more detail on the timezone used. On Webhook Call # This parameter enables your workflows to resume when the Wait node receives an HTTP call. The webhook URL that resumes the execution when called is generated at runtime. The Wait node provides the $execution.resumeUrl variable so that you can reference and send the yet-to-be-generated URL wherever needed, for example to a third-party service or in an email. When the workflow executes, the Wait node generates the resume URL and the webhook(s) in your workflow using the $execution.resumeUrl . This generated URL is unique to each execution, so your workflow can contain multiple Wait nodes and as the webhook URL is called it will resume each Wait node sequentially. For this Resume style, set more parameters listed below. Authentication # Select if and how incoming resume-webhook-requests to $execution.resumeUrl should be authenticated. Options include: Basic Auth : Use basic authentication. Select or enter a new Credential for Basic Auth to use. Header Auth : Use header authentication. Select or enter a new Credential for Header Auth to use. JWT Auth : Use JWT authentication. Select or enter a new Credential for JWT Auth to use. None : Don't use authentication. Auth reference Refer to the Webhook node | Authentication documentation for more information on each auth type. HTTP Method # Select the HTTP method the webhook should use. Refer to the Webhook node | HTTP Method documentation for more information. Response Code # Enter the Response Code the webhook should return. You can use common codes or enter a custom code. Respond # Set when and how to respond to the webhook from these options: Immediately : Respond as soon as the node executes. When Last Node Finishes : Return the response code and the data output from the last node executed in the workflow. If you select this option, also set: Response Data : Select what data should be returned and what format to use. Options include: All Entries : Returns all the entries of the last node in an array. First Entry JSON : Return the JSON data of the first entry of the last node in a JSON object. First Entry Binary : Return the binary data of the first entry of the last node in a binary file. No Response Body : Return with no body. Using 'Respond to Webhook' Node : Respond as defined in the Respond to Webhook node. Limit Wait Time # Set whether the workflow will automatically resume execution after a specific limit type (turned on) or not (turned off). If turned on, also set: Limit Type : Select what type of limit to enforce from these options: After Time Interval : Wait for a certain amount of time. Enter the limit's Amount of time. Select the limit's Unit of time. At Specified Time : Wait until a specific date and time to resume. Max Date and Time : Use the date and time picker to set the specified time the node should resume. On Webhook Call options # Binary Property : Enter the name of the binary property to write the data of the received file to. This option's only relevant if binary data is received. Ignore Bots : Set whether to ignore requests from bots like link previewers and web crawlers (turned on) or not (turned off). IP(s) Whitelist : Enter IP addresses here to limit who (or what) can invoke the webhook URL. Enter a comma-separated list of allowed IP addresses. Access from IPs outside the whitelist throws a 403 error. If left blank, all IP addresses can invoke the webhook URL. No Response Body : Set whether n8n should send a body in the response (turned off) or prevent n8n from sending a body in the response (turned on). Raw Body : Set whether to return the body in a raw format like JSON or XML (turned on) or not (turned off). Response Data : Enter any custom data you want to send in the response. Response Headers : Send more headers in the webhook response. Refer to MDN Web Docs | Response header to learn more about response headers. Webhook Suffix : Enter a suffix to append to the resume URL. This is useful for creating unique webhook URLs for each Wait node when a workflow contains multiple Wait nodes. Note that the generated $resumeWebhookUrl won't automatically include this suffix, you must manually append it to the webhook URL before exposing it. On Webhook Call limitations # There are some limitations to keep in mind when using On Webhook Call: Partial executions of your workflow changes the $resumeWebhookUrl , so be sure that the node sending this URL to your desired third-party runs in the same execution as the Wait node. On Form Submitted # Wait for a form submission before continuing. Set up these parameters: Form Title # Enter the title to display at the top of the form. Form Description # Enter a form description to display beneath the title. This description can help prompt the user on how to complete the form. Form Fields # Set up each field you want to appear on your form using these parameters: Field Label : Enter the field label you want to appear in the form. Field Type : Select the type of field to display in the form. Choose from: Date Dropdown List : Enter each dropdown options in the Field Options . Multiple Choice : Select whether the user can select a single dropdown option (turned off) or multiple dropdown options (turned on) Number Password Text Textarea Required Field : Set whether the user must complete this field in order to submit the form (turned on) or if the user can submit the form without completing it (turned off). Respond When # Set when to respond to the form submission. Choose from: Form Is Submitted : Respond as soon as this node receives the form submission. Workflow Finishes : Respond when the last node of this workflow finishes. Using 'Respond to Webhook' Node : Respond when the Respond to Webhook node executes. Limit Wait Time # Set whether the workflow will automatically resume execution after a specific limit type (turned on) or not (turned off). If turned on, also set: * Limit Type : Select what type of limit to enforce from these options: * After Time Interval : Wait for a certain amount of time. * Enter the limit's Amount of time. * Select the limit's Unit of time. * At Specified Time : Wait until a specific date and time to resume. * Max Date and Time : Use the date and time picker to set the specified time the node should resume. On Form Response options # Form Response : Choose how and what you want the form to Respond With from these options: Form Submitted Text : The form displays whatever text is entered in Text to Show after a user fills out the form. Use this option if you want to display a confirmation message. Redirect URL : The form will redirect the user to the URL to Redirect to after they fill out the form. This must be a valid URL. Webhook Suffix : Enter a suffix to append to the resume URL. This is useful for creating unique webhook URLs for each Wait node when a workflow contains multiple Wait nodes. Note that the generated $resumeWebhookUrl won't automatically include this suffix, you must manually append it to the webhook URL before exposing it. Templates and examples # OpenAI GPT-3: Company Enrichment from website content by Lucas Perret View template details Scrape business emails from Google Maps without the use of any third party APIs by Akram Kadri View template details Respond to WhatsApp Messages with AI Like a Pro! by Jimleuk View template details Browse Wait integration templates , or search all templates Time-based operations # For the time-based resume operations, note that: For wait times less than 65 seconds, the workflow doesn't offload execution data to the database. Instead, the process continues to run and the execution resumes after the specified interval passes. The n8n server time is always used regardless of the timezone setting. Workflow timezone settings, and any changes made to them, don't affect the Wait node interval or specified time. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/#http-method

Webhook node # Use the Webhook node to create webhooks , which can receive data from apps and services when an event occurs. It's a trigger node, which means it can start an n8n workflow. This allows services to connect to n8n and run a workflow. You can use the Webhook node as a trigger for a workflow when you want to receive data and run a workflow based on the data. The Webhook node also supports returning the data generated at the end of a workflow. This makes it useful for build a workflow to process data and return the results, like an API endpoint. The webhook allows you to trigger workflows from services that don't have a dedicated app trigger node. Workflow development process # n8n provides different Webhook URL s for testing and production. The testing URL includes an option to Listen for test event . Refer to Workflow development for more information on building, testing, and shifting your Webhook node to production. Node parameters # Use these parameters to configure your node. Webhook URLs # The Webhook node has two Webhook URLs : test and production. n8n displays the URLs at the top of the node panel. Select Test URL or Production URL to toggle which URL n8n displays. Sample Webhook URLs in the Webhook node's Parameters tab Test : n8n registers a test webhook when you select Listen for Test Event or Test workflow , if the workflow isn't active. When you call the webhook URL, n8n displays the data in the workflow. Production : n8n registers a production webhook when you activate the workflow. When using the production URL, n8n doesn't display the data in the workflow. You can still view workflow data for a production execution: select the Executions tab in the workflow, then select the workflow execution you want to view. HTTP Method # The Webhook node supports standard HTTP Request Methods : DELETE GET HEAD PATCH POST PUT Webhook max payload The webhook maximum payload size is 16MB. If you're self-hosting n8n, you can change this using the endpoint environment variable N8N_PAYLOAD_SIZE_MAX . Path # By default, this field contains a randomly generated webhook URL path, to avoid conflicts with other webhook nodes. You can manually specify a URL path, including adding route parameters. For example, you may need to do this if you use n8n to prototype an API and want consistent endpoint URLs. The Path field can take the following formats: /:variable /path/:variable /:variable/path /:variable1/path/:variable2 /:variable1/:variable2 Supported authentication methods # You can require authentication for any service calling your webhook URL. Choose from these authentication methods: Basic auth Header auth JWT auth None Refer to Webhook credentials for more information on setting up each credential type. Respond # Immediately : The Webhook node returns the response code and the message Workflow got started . When Last Node Finishes : The Webhook node returns the response code and the data output from the last node executed in the workflow. Using 'Respond to Webhook' Node : The Webhook node responds as defined in the Respond to Webhook node. Response Code # Customize the HTTP response code that the Webhook node returns upon successful execution. Select from common response codes or create a custom code. Response Data # Choose what data to include in the response body: All Entries : The Webhook returns all the entries of the last node in an array. First Entry JSON : The Webhook returns the JSON data of the first entry of the last node in a JSON object. First Entry Binary : The Webhook returns the binary data of the first entry of the last node in a binary file. No Response Body : The Webhook returns without a body. Applies only to Respond > When Last Node Finishes . Node options # Select Add Option to view more configuration options. The available options depend on your node parameters. Refer to the table for option availability. Allowed Origins (CORS) : Set the permitted cross-origin domains. Enter a comma-separated list of URLs allowed for cross-origin non-preflight requests. Use * (default) to allow all origins. Binary Property : Enabling this setting allows the Webhook node to receive binary data, such as an image or audio file. Enter the name of the binary property to write the data of the received file to. Ignore Bots : Ignore requests from bots like link previewers and web crawlers. IP(s) Whitelist : Enable this to limit who (or what) can invoke a Webhook trigger URL. Enter a comma-separated list of allowed IP addresses. Access from IPs outside the whitelist throws a 403 error. If left blank, all IP addresses can invoke the webhook trigger URL. No Response Body : Enable this to prevent n8n sending a body with the response. Raw Body : Specify that the Webhook node will receive data in a raw format, such as JSON or XML. Response Content-Type : Choose the format for the webhook body. Response Data : Send custom data with the response. Response Headers : Send extra headers in the Webhook response. Refer to MDN Web Docs | Response header to learn more about response headers. Property Name : by default, n8n returns all available data. You can choose to return a specific JSON key, so that n8n returns the value. Option Required node configuration Allowed Origins (CORS) Any Binary Property Either: HTTP Method > POST HTTP Method > PATCH HTTP Method > PUT Ignore Bots Any IP(s) Whitelist Any Property Name Both: Respond > When Last Node Finishes Response Data > First Entry JSON No Response Body Respond > Immediately Raw Body Any Response Code Any except Respond > Using 'Respond to Webhook' Node Response Content-Type Both: Respond > When Last Node Finishes Response Data > First Entry JSON Response Data Respond > Immediately Response Headers Any Templates and examples # Browse Webhook node documentation integration templates , or search all templates Common issues # For common questions or issues and suggested solutions, refer to Common issues . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/#supported-authentication-methods

Webhook node # Use the Webhook node to create webhooks , which can receive data from apps and services when an event occurs. It's a trigger node, which means it can start an n8n workflow. This allows services to connect to n8n and run a workflow. You can use the Webhook node as a trigger for a workflow when you want to receive data and run a workflow based on the data. The Webhook node also supports returning the data generated at the end of a workflow. This makes it useful for build a workflow to process data and return the results, like an API endpoint. The webhook allows you to trigger workflows from services that don't have a dedicated app trigger node. Workflow development process # n8n provides different Webhook URL s for testing and production. The testing URL includes an option to Listen for test event . Refer to Workflow development for more information on building, testing, and shifting your Webhook node to production. Node parameters # Use these parameters to configure your node. Webhook URLs # The Webhook node has two Webhook URLs : test and production. n8n displays the URLs at the top of the node panel. Select Test URL or Production URL to toggle which URL n8n displays. Sample Webhook URLs in the Webhook node's Parameters tab Test : n8n registers a test webhook when you select Listen for Test Event or Test workflow , if the workflow isn't active. When you call the webhook URL, n8n displays the data in the workflow. Production : n8n registers a production webhook when you activate the workflow. When using the production URL, n8n doesn't display the data in the workflow. You can still view workflow data for a production execution: select the Executions tab in the workflow, then select the workflow execution you want to view. HTTP Method # The Webhook node supports standard HTTP Request Methods : DELETE GET HEAD PATCH POST PUT Webhook max payload The webhook maximum payload size is 16MB. If you're self-hosting n8n, you can change this using the endpoint environment variable N8N_PAYLOAD_SIZE_MAX . Path # By default, this field contains a randomly generated webhook URL path, to avoid conflicts with other webhook nodes. You can manually specify a URL path, including adding route parameters. For example, you may need to do this if you use n8n to prototype an API and want consistent endpoint URLs. The Path field can take the following formats: /:variable /path/:variable /:variable/path /:variable1/path/:variable2 /:variable1/:variable2 Supported authentication methods # You can require authentication for any service calling your webhook URL. Choose from these authentication methods: Basic auth Header auth JWT auth None Refer to Webhook credentials for more information on setting up each credential type. Respond # Immediately : The Webhook node returns the response code and the message Workflow got started . When Last Node Finishes : The Webhook node returns the response code and the data output from the last node executed in the workflow. Using 'Respond to Webhook' Node : The Webhook node responds as defined in the Respond to Webhook node. Response Code # Customize the HTTP response code that the Webhook node returns upon successful execution. Select from common response codes or create a custom code. Response Data # Choose what data to include in the response body: All Entries : The Webhook returns all the entries of the last node in an array. First Entry JSON : The Webhook returns the JSON data of the first entry of the last node in a JSON object. First Entry Binary : The Webhook returns the binary data of the first entry of the last node in a binary file. No Response Body : The Webhook returns without a body. Applies only to Respond > When Last Node Finishes . Node options # Select Add Option to view more configuration options. The available options depend on your node parameters. Refer to the table for option availability. Allowed Origins (CORS) : Set the permitted cross-origin domains. Enter a comma-separated list of URLs allowed for cross-origin non-preflight requests. Use * (default) to allow all origins. Binary Property : Enabling this setting allows the Webhook node to receive binary data, such as an image or audio file. Enter the name of the binary property to write the data of the received file to. Ignore Bots : Ignore requests from bots like link previewers and web crawlers. IP(s) Whitelist : Enable this to limit who (or what) can invoke a Webhook trigger URL. Enter a comma-separated list of allowed IP addresses. Access from IPs outside the whitelist throws a 403 error. If left blank, all IP addresses can invoke the webhook trigger URL. No Response Body : Enable this to prevent n8n sending a body with the response. Raw Body : Specify that the Webhook node will receive data in a raw format, such as JSON or XML. Response Content-Type : Choose the format for the webhook body. Response Data : Send custom data with the response. Response Headers : Send extra headers in the Webhook response. Refer to MDN Web Docs | Response header to learn more about response headers. Property Name : by default, n8n returns all available data. You can choose to return a specific JSON key, so that n8n returns the value. Option Required node configuration Allowed Origins (CORS) Any Binary Property Either: HTTP Method > POST HTTP Method > PATCH HTTP Method > PUT Ignore Bots Any IP(s) Whitelist Any Property Name Both: Respond > When Last Node Finishes Response Data > First Entry JSON No Response Body Respond > Immediately Raw Body Any Response Code Any except Respond > Using 'Respond to Webhook' Node Response Content-Type Both: Respond > When Last Node Finishes Response Data > First Entry JSON Response Data Respond > Immediately Response Headers Any Templates and examples # Browse Webhook node documentation integration templates , or search all templates Common issues # For common questions or issues and suggested solutions, refer to Common issues . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/

Webhook node # Use the Webhook node to create webhooks , which can receive data from apps and services when an event occurs. It's a trigger node, which means it can start an n8n workflow. This allows services to connect to n8n and run a workflow. You can use the Webhook node as a trigger for a workflow when you want to receive data and run a workflow based on the data. The Webhook node also supports returning the data generated at the end of a workflow. This makes it useful for build a workflow to process data and return the results, like an API endpoint. The webhook allows you to trigger workflows from services that don't have a dedicated app trigger node. Workflow development process # n8n provides different Webhook URL s for testing and production. The testing URL includes an option to Listen for test event . Refer to Workflow development for more information on building, testing, and shifting your Webhook node to production. Node parameters # Use these parameters to configure your node. Webhook URLs # The Webhook node has two Webhook URLs : test and production. n8n displays the URLs at the top of the node panel. Select Test URL or Production URL to toggle which URL n8n displays. Sample Webhook URLs in the Webhook node's Parameters tab Test : n8n registers a test webhook when you select Listen for Test Event or Test workflow , if the workflow isn't active. When you call the webhook URL, n8n displays the data in the workflow. Production : n8n registers a production webhook when you activate the workflow. When using the production URL, n8n doesn't display the data in the workflow. You can still view workflow data for a production execution: select the Executions tab in the workflow, then select the workflow execution you want to view. HTTP Method # The Webhook node supports standard HTTP Request Methods : DELETE GET HEAD PATCH POST PUT Webhook max payload The webhook maximum payload size is 16MB. If you're self-hosting n8n, you can change this using the endpoint environment variable N8N_PAYLOAD_SIZE_MAX . Path # By default, this field contains a randomly generated webhook URL path, to avoid conflicts with other webhook nodes. You can manually specify a URL path, including adding route parameters. For example, you may need to do this if you use n8n to prototype an API and want consistent endpoint URLs. The Path field can take the following formats: /:variable /path/:variable /:variable/path /:variable1/path/:variable2 /:variable1/:variable2 Supported authentication methods # You can require authentication for any service calling your webhook URL. Choose from these authentication methods: Basic auth Header auth JWT auth None Refer to Webhook credentials for more information on setting up each credential type. Respond # Immediately : The Webhook node returns the response code and the message Workflow got started . When Last Node Finishes : The Webhook node returns the response code and the data output from the last node executed in the workflow. Using 'Respond to Webhook' Node : The Webhook node responds as defined in the Respond to Webhook node. Response Code # Customize the HTTP response code that the Webhook node returns upon successful execution. Select from common response codes or create a custom code. Response Data # Choose what data to include in the response body: All Entries : The Webhook returns all the entries of the last node in an array. First Entry JSON : The Webhook returns the JSON data of the first entry of the last node in a JSON object. First Entry Binary : The Webhook returns the binary data of the first entry of the last node in a binary file. No Response Body : The Webhook returns without a body. Applies only to Respond > When Last Node Finishes . Node options # Select Add Option to view more configuration options. The available options depend on your node parameters. Refer to the table for option availability. Allowed Origins (CORS) : Set the permitted cross-origin domains. Enter a comma-separated list of URLs allowed for cross-origin non-preflight requests. Use * (default) to allow all origins. Binary Property : Enabling this setting allows the Webhook node to receive binary data, such as an image or audio file. Enter the name of the binary property to write the data of the received file to. Ignore Bots : Ignore requests from bots like link previewers and web crawlers. IP(s) Whitelist : Enable this to limit who (or what) can invoke a Webhook trigger URL. Enter a comma-separated list of allowed IP addresses. Access from IPs outside the whitelist throws a 403 error. If left blank, all IP addresses can invoke the webhook trigger URL. No Response Body : Enable this to prevent n8n sending a body with the response. Raw Body : Specify that the Webhook node will receive data in a raw format, such as JSON or XML. Response Content-Type : Choose the format for the webhook body. Response Data : Send custom data with the response. Response Headers : Send extra headers in the Webhook response. Refer to MDN Web Docs | Response header to learn more about response headers. Property Name : by default, n8n returns all available data. You can choose to return a specific JSON key, so that n8n returns the value. Option Required node configuration Allowed Origins (CORS) Any Binary Property Either: HTTP Method > POST HTTP Method > PATCH HTTP Method > PUT Ignore Bots Any IP(s) Whitelist Any Property Name Both: Respond > When Last Node Finishes Response Data > First Entry JSON No Response Body Respond > Immediately Raw Body Any Response Code Any except Respond > Using 'Respond to Webhook' Node Response Content-Type Both: Respond > When Last Node Finishes Response Data > First Entry JSON Response Data Respond > Immediately Response Headers Any Templates and examples # Browse Webhook node documentation integration templates , or search all templates Common issues # For common questions or issues and suggested solutions, refer to Common issues . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.workflowtrigger/

Workflow Trigger node # The Workflow Trigger node gets triggered when a workflow is updated or activated. Deprecated n8n has deprecated the Workflow Trigger node and moved its functionality to the n8n Trigger node . Keep in mind If you want to use the Workflow Trigger node for a workflow, add the node to the workflow. You don't have to create a separate workflow. The Workflow Trigger node gets triggered for the workflow that it gets added to. You can use the Workflow Trigger node to trigger a workflow to notify the state of the workflow. Node parameters # The node includes a single parameter to identify the Events that should trigger it. Choose from these events: Active Workflow Updated : If you select this event, the node triggers when this workflow is updated. Workflow Activated : If you select this event, the node triggers when this workflow is activated. You can select one or both of these events. Templates and examples # Browse Workflow Trigger integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.xml/

XML # Use the XML node to convert data from and to XML. Binary files If your XML is within a binary file, use the Extract from File node to convert it to text first. Node parameters # Mode : The format the data should be converted from and to. JSON to XML : Converts data from JSON to XML. XML to JSON : Converts data from XML to JSON. Property Name : Enter the name of the property which contains the data to convert. Node options # These options are available regardless of the Mode you select: Attribute Key : Enter the prefix used to access the attributes. Default is $ . Character Key : Enter the prefix used to access the character content. Default is _ . All other options depend on the selected Mode . JSON to XML options # These options only appear if you select JSON to XML as the Mode : Allow Surrogate Chars : Set whether to allow using characters from the Unicode surrogate blocks (turned on) or not (turned off). Cdata : Set whether to wrap text nodes in <![CDATA[ ... ]]> instead of escaping when it's required (turned on) or not (turned off). Turning this option on doesn't add <![CDATA[ ... ]]> if it's not required. Headless : Set whether to omit the XML header (turned on) or include it (turned off). Root Name : Enter the root element name to use. XML to JSON options # These options only appear if you select XML to JSON as the Mode : Explicit Array : Set whether to put child nodes in an array (turned on) or create an array only if there's more than one child node (turned off). Explicit Root : Set whether to get the root node in the resulting object (turned on) or not (turned off). Ignore Attributes : Set whether to ignore all XML attributes and only create text nodes (turned on) or not (turned off). Merge Attributes : Set whether to merge attributes and child elements as properties of the parent (turned on) or key attributes off a child attribute object (turned off). This option is ignored if Ignore Attribute is turned on. Normalize : Set whether to trim whitespaces inside the text nodes (turned on) or not to trim them (turned off). Normalize Tags : Set whether to normalize all tag names to lowercase (turned on) or keep tag names as-is (turned off). Trim : Set whether to trim the whitespace at the beginning and end of text nodes (turned on) or to leave the whitespace as-is (turned off). Templates and examples # Generating Keywords using Google Autosuggest by Imperol View template details Get your website indexed by Google automatically by Eduard View template details 🦅 Get a bird's-eye view of your n8n instance with the Workflow Dashboard! by Eduard View template details Browse XML integration templates , or search all templates Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.chattrigger/

Chat Trigger node # Use the Chat Trigger node when building AI workflows for chatbots and other chat interfaces. You can configure how users access the chat, using one of n8n's provided interfaces, or your own. You can add authentication. You must connect either an agent or chain root node . Workflow execution usage Every message to the Chat Trigger executes your workflow. This means that one conversation where a user sends 10 messages uses 10 executions from your execution allowance. Check your payment plan for details of your allowance. Manual Chat trigger This node replaces the Manual Chat Trigger node from version 1.24.0. Node parameters # Make Chat Publicly Available # Set whether the chat should be publicly available (turned on) or only available through the manual chat interface (turned off). Leave this turned off while you're building the workflow. Turn it on when you're ready to activate the workflow and allow users to access the chat. Mode # Choose how users access the chat. Select from: Hosted Chat : Use n8n's hosted chat interface. Recommended for most users because you can configure the interface using the node options and don't have to do any other setup. Embedded Chat : This option requires you to create your own chat interface. You can use n8n's chat widget or build your own. Your chat interface must call the webhook URL shown in Chat URL in the node. Authentication # Choose whether and how to restrict access to the chat. Select from: None : The chat doesn't use authentication. Anyone can use the chat. Basic Auth : The chat uses basic authentication. Select or create a Credential for Basic Auth with a username and password. All users must use the same username and password. n8n User Auth : Only users logged in to an n8n account can use the chat. Initial Message(s) # This parameter's only available if you're using Hosted Chat . Use it to configure the message the n8n chat interface displays when the user arrives on the page. Node options # Available options depend on the chat mode. Hosted chat options # Allowed Origin (CORS) # Set the origins that can access the chat URL. Enter a comma-separated list of URLs allowed for cross-origin non-preflight requests. Use * (default) to allow all origins. Input Placeholder, Title, and Subtitle # Enter the text for these elements in the chat interface. View screenshot Load Previous Session # Select whether to load chat messages from a previous chat session. If you select any option other than Off , you must connect the Chat trigger and the Agent you're using to a memory sub-node. The memory connector on the Chat trigger appears when you set Load Previous Session to From Memory . n8n recommends connecting both the Chat trigger and Agent to the same memory sub-node, as this ensures a single source of truth for both nodes. View screenshot Response Mode # Use this option when building a workflow with steps after the agent or chain that's handling the chat. Choose from: When Last Node Finishes : The Chat Trigger node returns the response code and the data output from the last node executed in the workflow. Using 'Respond to Webhook' Node : The Chat Trigger node responds as defined in the Respond to Webhook node. Require Button Click to Start Chat # Set whether to display a New Conversation button on the chat interface (turned on) or not (turned off). View screenshot Embedded chat options # Allowed Origin (CORS) # Set the origins that can access the chat URL. Enter a comma-separated list of URLs allowed for cross-origin non-preflight requests. Use * (default) to allow all origins. Load Previous Session # Select whether to load chat messages from a previous chat session. If you select any option other than Off , you must connect the Chat trigger and the Agent you're using to a memory sub-node. The memory connector on the Chat trigger appears when you set Load Previous Session to From Memory . n8n recommends connecting both the Chat trigger and Agent to the same memory sub-node, as this ensures a single source of truth for both nodes. View screenshot Response Mode # Use this option when building a workflow with steps after the agent or chain that's handling the chat. Choose from: When Last Node Finishes : The Chat Trigger node returns the response code and the data output from the last node executed in the workflow. Using 'Respond to Webhook' Node : The Chat Trigger node responds as defined in the Respond to Webhook node. Templates and examples # AI agent chat by n8n Team View template details Scrape and summarize webpages with AI by n8n Team View template details AI agent that can scrape webpages by Eduard View template details Browse Chat Trigger integration templates , or search all templates Related resources # View n8n's Advanced AI documentation. Set the chat response manually # You need to manually set the chat response when you don't want to directly send the output of an Agent or Chain node to the user. Instead, you want to take the output of an Agent or Chain node and modify it or do something else with it before sending it back to the user. In a basic workflow, the Agent and Chain nodes output a parameter named either output or text , and the Chat trigger sends the value of this parameter to the user as the chat response. If you need to manually create the response sent to the user, you must create a parameter named either text or output . If you use a different parameter name, the Chat trigger sends the entire object as its response, not just the value. Common issues # For common questions or issues and suggested solutions, refer to Common Issues . Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.removeduplicates/templates-and-examples/

Templates and examples # Here are some templates and examples for the Remove Duplicates node . Continuous examples The examples included in this section are a sequence. Follow from one to another to avoid unexpected results. Templates # Telegram AI bot assistant: ready-made template for voice & text messages by Yulia View template details Telegram bot starter template setup by Victor Gold View template details Siri AI Agent: Apple Shortcuts powered voice template by Max Tkacz View template details Browse Templates and examples integration templates , or search all templates Set up sample data using the Code node # Create a workflow with some example input data to try out the Remove Duplicates node. Add a Code node to the canvas and connect it to the Manual Trigger node. In the Code node, set Mode to Run Once for Each Item and Language to JavaScript . Paste the following JavaScript code snippet in the JavaScript field: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 let data = []; return { data : [ { id : 1 , name : 'Taylor Swift' , job : 'Pop star' , last_updated : '2024-09-20T10:12:43.493Z' }, { id : 2 , name : 'Ed Sheeran' , job : 'Singer-songwriter' , last_updated : '2024-10-05T08:30:59.493Z' }, { id : 3 , name : 'Adele' , job : 'Singer-songwriter' , last_updated : '2024-10-07T14:15:59.493Z' }, { id : 4 , name : 'Bruno Mars' , job : 'Singer-songwriter' , last_updated : '2024-08-25T17:45:12.493Z' }, { id : 1 , name : 'Taylor Swift' , job : 'Pop star' , last_updated : '2024-09-20T10:12:43.493Z' }, // duplicate { id : 5 , name : 'Billie Eilish' , job : 'Singer-songwriter' , last_updated : '2024-09-10T09:30:12.493Z' }, { id : 6 , name : 'Katy Perry' , job : 'Pop star' , last_updated : '2024-10-08T12:30:45.493Z' }, { id : 2 , name : 'Ed Sheeran' , job : 'Singer-songwriter' , last_updated : '2024-10-05T08:30:59.493Z' }, // duplicate { id : 7 , name : 'Lady Gaga' , job : 'Pop star' , last_updated : '2024-09-15T14:45:30.493Z' }, { id : 8 , name : 'Rihanna' , job : 'Pop star' , last_updated : '2024-10-01T11:50:22.493Z' }, { id : 3 , name : 'Adele' , job : 'Singer-songwriter' , last_updated : '2024-10-07T14:15:59.493Z' }, // duplicate //{ id: 9, name: 'Tom Hanks', job: 'Actor', last_updated: '2024-10-17T13:58:31.493Z' }, //{ id: 0, name: 'Madonna', job: 'Pop star', last_updated: '2024-10-17T17:11:38.493Z' }, //{ id: 15, name: 'Bob Dylan', job: 'Folk singer', last_updated: '2024-09-24T08:03:16.493Z'}, //{ id: 10, name: 'Harry Nilsson', job: 'Singer-songwriter', last_updated: '2020-10-17T17:11:38.493Z' }, //{ id: 11, name: 'Kylie Minogue', job: 'Pop star', last_updated: '2024-10-24T08:03:16.493Z'}, ] } Add a Split Out node to the canvas and connect it to the Code node. In the Split Out node, enter data in the Fields To Split Out field. Removing duplicates from the current input # Add a Remove Duplicates node to the canvas and connect it to the Split Out node. Choose Remove items repeated within current input as the Action to start. Open the Remove Duplicates node and ensure that the Operation is set to Remove Items Repeated Within Current Input . Choose All fields in the Compare field. Select Test step to run the Remove Duplicates node, removing duplicated data in the current input. n8n removes the items that have the same data across all fields. Your output in table view should look like this: id name job last_updated 1 Taylor Swift Pop star 2024-09-20T10:12:43.493Z 2 Ed Sheeran Singer-songwriter 2024-10-05T08:30:59.493Z 3 Adele Singer-songwriter 2024-10-07T14:15:59.493Z 4 Bruno Mars Singer-songwriter 2024-08-25T17:45:12.493Z 5 Billie Eilish Singer-songwriter 2024-09-10T09:30:12.493Z 6 Katy Perry Pop star 2024-10-08T12:30:45.493Z 7 Lady Gaga Pop star 2024-09-15T14:45:30.493Z 8 Rihanna Pop star 2024-10-01T11:50:22.493Z Open the Remove Duplicates node again and change the Compare parameter to Selected Fields . In the Fields To Compare field, enter job . Select Test step to run the Remove Duplicates node, removing duplicated data in the current input. n8n removes the items in the current input that have the same job data. Your output in table view should look like this: id name job last_updated 1 Taylor Swift Pop star 2024-09-20T10:12:43.493Z 2 Ed Sheeran Singer-songwriter 2024-10-05T08:30:59.493Z Keep items where the value is new # Open the Remove Duplicates node and set the Operation to Remove Items Processed in Previous Executions . Set the Keep Items Where parameter to Value Is New . Set the Value to Dedupe On parameter to {{ $json.name }} . On the canvas, select Test workflow to run the workflow. Open the Remove Duplicates node to examine the results. n8n compares the current input data to the items stored from previous executions. Since this is the first time running the Remove Duplicates node with this operation, n8n processes all data items and places them into the Kept output tab. The order of the items may be different than the order in the input data: id name job last_updated 1 Taylor Swift Pop star 2024-09-20T10:12:43.493Z 1 Taylor Swift Pop star 2024-09-20T10:12:43.493Z 2 Ed Sheeran Singer-songwriter 2024-10-05T08:30:59.493Z 2 Ed Sheeran Singer-songwriter 2024-10-05T08:30:59.493Z 3 Adele Singer-songwriter 2024-10-07T14:15:59.493Z 3 Adele Singer-songwriter 2024-10-07T14:15:59.493Z 4 Bruno Mars Singer-songwriter 2024-08-25T17:45:12.493Z 5 Billie Eilish Singer-songwriter 2024-09-10T09:30:12.493Z 6 Katy Perry Pop star 2024-10-08T12:30:45.493Z 7 Lady Gaga Pop star 2024-09-15T14:45:30.493Z 8 Rihanna Pop star 2024-10-01T11:50:22.493Z Items are only compared against previous executions The current input items are only compared against the stored items from previous executions. This means that items repeated within the current input aren't removed in this mode of operation. If you need to remove duplicate items within the current input and across executions, connect two Remove Duplicate nodes together sequentially. Set the first to use the Remove Items Repated Within Current Input operation and the second to use the Remove Items Processed in Previous Executions operation. Open the Code node and uncomment (remove the // from) the line for "Tom Hanks." On the canvas, select Test workflow again. Open the Remove Duplicates node again to examine the results. n8n compares the current input data to the items stored from previous executions. This time, the Kept tab contains the one new record from the Code node: id name job last_updated 9 Tom Hanks Actor 2024-10-17T13:58:31.493Z The Discarded tab contains the items processed by the previous execution: id name job last_updated 1 Taylor Swift Pop star 2024-09-20T10:12:43.493Z 1 Taylor Swift Pop star 2024-09-20T10:12:43.493Z 2 Ed Sheeran Singer-songwriter 2024-10-05T08:30:59.493Z 2 Ed Sheeran Singer-songwriter 2024-10-05T08:30:59.493Z 3 Adele Singer-songwriter 2024-10-07T14:15:59.493Z 3 Adele Singer-songwriter 2024-10-07T14:15:59.493Z 4 Bruno Mars Singer-songwriter 2024-08-25T17:45:12.493Z 5 Billie Eilish Singer-songwriter 2024-09-10T09:30:12.493Z 6 Katy Perry Pop star 2024-10-08T12:30:45.493Z 7 Lady Gaga Pop star 2024-09-15T14:45:30.493Z 8 Rihanna Pop star 2024-10-01T11:50:22.493Z Before continuing, clear the duplication history to get ready for the next example: Open the Remove Duplicates node and set the Operation to Clear Deduplication History . Select Test step to clear the current duplication history. Keep items where the value is higher than any previous value # Open the Remove Duplicates node and set the Operation to Remove Items Processed in Previous Executions . Set the Keep Items Where parameter to Value Is Higher than Any Previous Value . Set the Value to Dedupe On parameter to {{ $json.id }} . On the canvas, select Test workflow to run the workflow. Open the Remove Duplicates node to examine the results. n8n compares the current input data to the items stored from previous executions. Since this is the first time running the Remove Duplicates node after clearing the history, n8n processes all data items and places them into the Kept output tab. The order of the items may be different than the order in the input data: id name job last_updated 1 Taylor Swift Pop star 2024-09-20T10:12:43.493Z 1 Taylor Swift Pop star 2024-09-20T10:12:43.493Z 2 Ed Sheeran Singer-songwriter 2024-10-05T08:30:59.493Z 2 Ed Sheeran Singer-songwriter 2024-10-05T08:30:59.493Z 3 Adele Singer-songwriter 2024-10-07T14:15:59.493Z 3 Adele Singer-songwriter 2024-10-07T14:15:59.493Z 4 Bruno Mars Singer-songwriter 2024-08-25T17:45:12.493Z 5 Billie Eilish Singer-songwriter 2024-09-10T09:30:12.493Z 6 Katy Perry Pop star 2024-10-08T12:30:45.493Z 7 Lady Gaga Pop star 2024-09-15T14:45:30.493Z 8 Rihanna Pop star 2024-10-01T11:50:22.493Z 9 Tom Hanks Actor 2024-10-17T13:58:31.493Z Open the Code node and uncomment (remove the // from) the lines for "Madonna" and "Bob Dylan." On the canvas, select Test workflow again. Open the Remove Duplicates node again to examine the results. n8n compares the current input data to the items stored from previous executions. This time, the Kept tab contains a single entry for "Bob Dylan." n8n keeps this item because its id column value (15) is higher than any previous values (the previous maximum value was 9): id name job last_updated 15 Bob Dylan Folk singer 2024-09-24T08:03:16.493Z The Discarded tab contains the 13 items with an id column value equal to or less than the previous maximum value (9). Even though it's new, this table includes the entry for "Madonna" because its id value isn't larger than the previous maximum value: id name job last_updated 0 Madonna Pop star 2024-10-17T17:11:38.493Z 1 Taylor Swift Pop star 2024-09-20T10:12:43.493Z 1 Taylor Swift Pop star 2024-09-20T10:12:43.493Z 2 Ed Sheeran Singer-songwriter 2024-10-05T08:30:59.493Z 2 Ed Sheeran Singer-songwriter 2024-10-05T08:30:59.493Z 3 Adele Singer-songwriter 2024-10-07T14:15:59.493Z 3 Adele Singer-songwriter 2024-10-07T14:15:59.493Z 4 Bruno Mars Singer-songwriter 2024-08-25T17:45:12.493Z 5 Billie Eilish Singer-songwriter 2024-09-10T09:30:12.493Z 6 Katy Perry Pop star 2024-10-08T12:30:45.493Z 7 Lady Gaga Pop star 2024-09-15T14:45:30.493Z 8 Rihanna Pop star 2024-10-01T11:50:22.493Z 9 Tom Hanks Actor 2024-10-17T13:58:31.493Z Before continuing, clear the duplication history to get ready for the next example: Open the Remove Duplicates node and set the Operation to Clear Deduplication History . Select Test step to clear the current duplication history. Keep items where the value is a date later than any previous date # Open the Remove Duplicates node and set the Operation to Remove Items Processed in Previous Executions . Set the Keep Items Where parameter to Value Is a Date Later than Any Previous Date . Set the Value to Dedupe On parameter to {{ $json.last_updated }} . On the canvas, select Test workflow to run the workflow. Open the Remove Duplicates node to examine the results. n8n compares the current input data to the items stored from previous executions. Since this is the first time running the Remove Duplicates node after clearing the history, n8n processes all data items and places them into the Kept output tab. The order of the items may be different than the order in the input data: id name job last_updated 0 Madonna Pop star 2024-10-17T17:11:38.493Z 1 Taylor Swift Pop star 2024-09-20T10:12:43.493Z 1 Taylor Swift Pop star 2024-09-20T10:12:43.493Z 2 Ed Sheeran Singer-songwriter 2024-10-05T08:30:59.493Z 2 Ed Sheeran Singer-songwriter 2024-10-05T08:30:59.493Z 3 Adele Singer-songwriter 2024-10-07T14:15:59.493Z 3 Adele Singer-songwriter 2024-10-07T14:15:59.493Z 4 Bruno Mars Singer-songwriter 2024-08-25T17:45:12.493Z 5 Billie Eilish Singer-songwriter 2024-09-10T09:30:12.493Z 6 Katy Perry Pop star 2024-10-08T12:30:45.493Z 7 Lady Gaga Pop star 2024-09-15T14:45:30.493Z 8 Rihanna Pop star 2024-10-01T11:50:22.493Z 9 Tom Hanks Actor 2024-10-17T13:58:31.493Z 15 Bob Dylan Folk singer 2024-09-24T08:03:16.493Z Open the Code node and uncomment (remove the // from) the lines for "Harry Nilsson" and "Kylie Minogue." On the canvas, select Test workflow again. Open the Remove Duplicates node again to examine the results. n8n compares the current input data to the items stored from previous executions. This time, the Kept tab contains a single entry for "Kylie Minogue." n8n keeps this item because its last_updated column value ( 2024-10-24T08:03:16.493Z ) is later than any previous values (the previous latest date was 2024-10-17T17:11:38.493Z ): id name job last_updated 11 Kylie Minogue Pop star 2024-10-24T08:03:16.493Z The Discarded tab contains the 15 items with a last_updated column value equal to or earlier than the previous latest date ( 2024-10-17T17:11:38.493Z ). Even though it's new, this table includes the entry for "Harry Nilsson" because its last_updated value isn't later than the previous maximum value: id name job last_updated 10 Harry Nilsson Singer-songwriter 2020-10-17T17:11:38.493Z 0 Madonna Pop star 2024-10-17T17:11:38.493Z 1 Taylor Swift Pop star 2024-09-20T10:12:43.493Z 1 Taylor Swift Pop star 2024-09-20T10:12:43.493Z 2 Ed Sheeran Singer-songwriter 2024-10-05T08:30:59.493Z 2 Ed Sheeran Singer-songwriter 2024-10-05T08:30:59.493Z 3 Adele Singer-songwriter 2024-10-07T14:15:59.493Z 3 Adele Singer-songwriter 2024-10-07T14:15:59.493Z 4 Bruno Mars Singer-songwriter 2024-08-25T17:45:12.493Z 5 Billie Eilish Singer-songwriter 2024-09-10T09:30:12.493Z 6 Katy Perry Pop star 2024-10-08T12:30:45.493Z 7 Lady Gaga Pop star 2024-09-15T14:45:30.493Z 8 Rihanna Pop star 2024-10-01T11:50:22.493Z 9 Tom Hanks Actor 2024-10-17T13:58:31.493Z 15 Bob Dylan Folk singer 2024-09-24T08:03:16.493Z Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================

================================================================================
Source URL: https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/workflow-development/

Workflow development # The Webhook node works a bit differently from other core nodes. n8n recommends following these processes for building, testing, and using your Webhook node in production. n8n generates two Webhook URLs for each Webhook node: a Test URL and a Production URL . Build and test workflows # While building or testing a workflow, use the Test webhook URL. Using a test webhook ensures that you can view the incoming data in the editor UI, which is useful for debugging. Select Listen for test event to register the webhook before sending the data to the test webhook. The test webhook stays active for 120 seconds. When using the Webhook node on localhost on a self-hosted n8n instance, run n8n in tunnel mode: npm with tunnel Docker with tunnel Production workflows # When your workflow is ready, switch to using the Production webhook URL. You can then activate your workflow, and n8n runs it automatically when an external service calls the webhook URL. When working with a Production webhook, ensure that you have saved and activated the workflow. Data flowing through the webhook isn't visible in the editor UI with the production webhook. Refer to Create a workflow for more information on activating workflows. Was this page helpful? Thanks for your feedback! Thanks for your feedback! Help us improve this page by submitting an issue or a fix in our GitHub repo . Back to top
================================================================================
